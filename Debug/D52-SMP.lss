
D52-SMP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b800  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000590  00800060  0000b800  0000b894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  008005f0  008005f0  0000be24  2**0
                  ALLOC
  3 .stab         0000ab90  00000000  00000000  0000be24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000023f4  00000000  00000000  000169b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00018da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00018f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  00019178  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0001b802  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0001cce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001df8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0001e16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0001e46a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001ee14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 a6 2e 	jmp	0x5d4c	; 0x5d4c <__vector_4>
      14:	0c 94 56 2e 	jmp	0x5cac	; 0x5cac <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8b 2f 	jmp	0x5f16	; 0x5f16 <__vector_10>
      2c:	0c 94 d3 2f 	jmp	0x5fa6	; 0x5fa6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f8 eb       	ldi	r31, 0xB8	; 184
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b5 e0       	ldi	r27, 0x05	; 5
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 30       	cpi	r26, 0x0C	; 12
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5d 5b 	call	0xb6ba	; 0xb6ba <main>
      8a:	0c 94 fe 5b 	jmp	0xb7fc	; 0xb7fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c7 5b 	jmp	0xb78e	; 0xb78e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ed       	ldi	r26, 0xD5	; 213
     128:	b4 e0       	ldi	r27, 0x04	; 4
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e3 5b 	jmp	0xb7c6	; 0xb7c6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d3 5b 	jmp	0xb7a6	; 0xb7a6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ef 5b 	jmp	0xb7de	; 0xb7de <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d3 5b 	jmp	0xb7a6	; 0xb7a6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ef 5b 	jmp	0xb7de	; 0xb7de <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c7 5b 	jmp	0xb78e	; 0xb78e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 ed       	ldi	r24, 0xD5	; 213
     496:	94 e0       	ldi	r25, 0x04	; 4
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e3 5b 	jmp	0xb7c6	; 0xb7c6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cf 5b 	jmp	0xb79e	; 0xb79e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 ed       	ldi	r22, 0xD5	; 213
     69c:	74 e0       	ldi	r23, 0x04	; 4
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 eb 5b 	jmp	0xb7d6	; 0xb7d6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d3 5b 	jmp	0xb7a6	; 0xb7a6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ef 5b 	jmp	0xb7de	; 0xb7de <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d3 5b 	jmp	0xb7a6	; 0xb7a6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ef 5b 	jmp	0xb7de	; 0xb7de <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d3 5b 	jmp	0xb7a6	; 0xb7a6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ef 5b 	jmp	0xb7de	; 0xb7de <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d3 5b 	jmp	0xb7a6	; 0xb7a6 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 ef 5b 	jmp	0xb7de	; 0xb7de <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 d7 5b 	jmp	0xb7ae	; 0xb7ae <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 f3 5b 	jmp	0xb7e6	; 0xb7e6 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 cf 5b 	jmp	0xb79e	; 0xb79e <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 eb 5b 	jmp	0xb7d6	; 0xb7d6 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e3 52       	subi	r30, 0x23	; 35
     b2a:	fb 4f       	sbci	r31, 0xFB	; 251
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <SS_voidIsAuthenticated>:
static void SS_voidCreateUser(); /* Function that */
static void SS_voidSelectEmptySlot(users *copy_tUser);
static void SS_voidDeleteUser();
static void SS_voidChangePassword();

void SS_voidIsAuthenticated(BOOL_t *copy_tIsAuthenticated) {
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <SS_voidIsAuthenticated+0x6>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
	*copy_tIsAuthenticated = local_isAuthenticated;
     e9c:	80 91 f1 05 	lds	r24, 0x05F1
     ea0:	e9 81       	ldd	r30, Y+1	; 0x01
     ea2:	fa 81       	ldd	r31, Y+2	; 0x02
     ea4:	80 83       	st	Z, r24
}
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <SS_voidInit>:
 *   Description   : This Function Used To Initiate System Devices
 *   Parameters    : Void
 *   Return Value  : Void
 *   Remarks       : None
 **********************************************************************************************/
void SS_voidInit() {
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
	LS_voidInit();
     eb8:	0e 94 09 38 	call	0x7012	; 0x7012 <LS_voidInit>
	AC_voidInit();
     ebc:	0e 94 9c 58 	call	0xb138	; 0xb138 <AC_voidInit>
	DIMMER_voidInit();
     ec0:	0e 94 86 55 	call	0xab0c	; 0xab0c <DIMMER_voidInit>
	AS_voidInit();
     ec4:	0e 94 02 58 	call	0xb004	; 0xb004 <AS_voidInit>
	LCD_voidInit();
     ec8:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <LCD_voidInit>
	KPD_voidInit();
     ecc:	0e 94 14 50 	call	0xa028	; 0xa028 <KPD_voidInit>
	UART_voidInit();
     ed0:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <UART_voidInit>
	EEPROM_voidInit();
     ed4:	0e 94 7e 51 	call	0xa2fc	; 0xa2fc <EEPROM_voidInit>

}
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <SS_voidCheckCreateAdminAccount>:
 *   Parameters    : Void
 *   Return Value  : Void
 *   Remarks       : None
 **********************************************************************************************/

static void SS_voidCheckCreateAdminAccount() {
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	a0 97       	sbiw	r28, 0x20	; 32
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
	u8 admin_check = 0;
     ef2:	1f 8e       	std	Y+31, r1	; 0x1f
	u8 local_u8RxData = 0;
     ef4:	18 a2       	std	Y+32, r1	; 0x20
	u8 counter;
	u8 EEPROM_Position = EEPROM_admin_password;
     ef6:	84 e0       	ldi	r24, 0x04	; 4
     ef8:	8d 8f       	std	Y+29, r24	; 0x1d
//	EEPROM_voidWriteByte(EEPROM_user2_check, 0);
//	EEPROM_voidWriteByte(EEPROM_user3_check, 0);
	/******************************************************************/

//check if admin password is saved
	EEPROM_voidReadByte( EEPROM_admin_check, &admin_check);
     efa:	9e 01       	movw	r18, r28
     efc:	21 5e       	subi	r18, 0xE1	; 225
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	b9 01       	movw	r22, r18
     f06:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	a0 e2       	ldi	r26, 0x20	; 32
     f10:	b1 e4       	ldi	r27, 0x41	; 65
     f12:	89 8f       	std	Y+25, r24	; 0x19
     f14:	9a 8f       	std	Y+26, r25	; 0x1a
     f16:	ab 8f       	std	Y+27, r26	; 0x1b
     f18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f1a:	69 8d       	ldd	r22, Y+25	; 0x19
     f1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f20:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	4a e7       	ldi	r20, 0x7A	; 122
     f28:	55 e4       	ldi	r21, 0x45	; 69
     f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	8d 8b       	std	Y+21, r24	; 0x15
     f34:	9e 8b       	std	Y+22, r25	; 0x16
     f36:	af 8b       	std	Y+23, r26	; 0x17
     f38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f3a:	6d 89       	ldd	r22, Y+21	; 0x15
     f3c:	7e 89       	ldd	r23, Y+22	; 0x16
     f3e:	8f 89       	ldd	r24, Y+23	; 0x17
     f40:	98 8d       	ldd	r25, Y+24	; 0x18
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e8       	ldi	r20, 0x80	; 128
     f48:	5f e3       	ldi	r21, 0x3F	; 63
     f4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f4e:	88 23       	and	r24, r24
     f50:	2c f4       	brge	.+10     	; 0xf5c <SS_voidCheckCreateAdminAccount+0x7e>
		__ticks = 1;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	9c 8b       	std	Y+20, r25	; 0x14
     f58:	8b 8b       	std	Y+19, r24	; 0x13
     f5a:	3f c0       	rjmp	.+126    	; 0xfda <SS_voidCheckCreateAdminAccount+0xfc>
	else if (__tmp > 65535)
     f5c:	6d 89       	ldd	r22, Y+21	; 0x15
     f5e:	7e 89       	ldd	r23, Y+22	; 0x16
     f60:	8f 89       	ldd	r24, Y+23	; 0x17
     f62:	98 8d       	ldd	r25, Y+24	; 0x18
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	3f ef       	ldi	r19, 0xFF	; 255
     f68:	4f e7       	ldi	r20, 0x7F	; 127
     f6a:	57 e4       	ldi	r21, 0x47	; 71
     f6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f70:	18 16       	cp	r1, r24
     f72:	4c f5       	brge	.+82     	; 0xfc6 <SS_voidCheckCreateAdminAccount+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f74:	69 8d       	ldd	r22, Y+25	; 0x19
     f76:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f78:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e2       	ldi	r20, 0x20	; 32
     f82:	51 e4       	ldi	r21, 0x41	; 65
     f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	bc 01       	movw	r22, r24
     f8e:	cd 01       	movw	r24, r26
     f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	9c 8b       	std	Y+20, r25	; 0x14
     f9a:	8b 8b       	std	Y+19, r24	; 0x13
     f9c:	0f c0       	rjmp	.+30     	; 0xfbc <SS_voidCheckCreateAdminAccount+0xde>
     f9e:	80 e9       	ldi	r24, 0x90	; 144
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	9a 8b       	std	Y+18, r25	; 0x12
     fa4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fa6:	89 89       	ldd	r24, Y+17	; 0x11
     fa8:	9a 89       	ldd	r25, Y+18	; 0x12
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <SS_voidCheckCreateAdminAccount+0xcc>
     fae:	9a 8b       	std	Y+18, r25	; 0x12
     fb0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb2:	8b 89       	ldd	r24, Y+19	; 0x13
     fb4:	9c 89       	ldd	r25, Y+20	; 0x14
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fbc:	8b 89       	ldd	r24, Y+19	; 0x13
     fbe:	9c 89       	ldd	r25, Y+20	; 0x14
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	69 f7       	brne	.-38     	; 0xf9e <SS_voidCheckCreateAdminAccount+0xc0>
     fc4:	14 c0       	rjmp	.+40     	; 0xfee <SS_voidCheckCreateAdminAccount+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc6:	6d 89       	ldd	r22, Y+21	; 0x15
     fc8:	7e 89       	ldd	r23, Y+22	; 0x16
     fca:	8f 89       	ldd	r24, Y+23	; 0x17
     fcc:	98 8d       	ldd	r25, Y+24	; 0x18
     fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	9c 8b       	std	Y+20, r25	; 0x14
     fd8:	8b 8b       	std	Y+19, r24	; 0x13
     fda:	8b 89       	ldd	r24, Y+19	; 0x13
     fdc:	9c 89       	ldd	r25, Y+20	; 0x14
     fde:	98 8b       	std	Y+16, r25	; 0x10
     fe0:	8f 87       	std	Y+15, r24	; 0x0f
     fe2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe4:	98 89       	ldd	r25, Y+16	; 0x10
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <SS_voidCheckCreateAdminAccount+0x108>
     fea:	98 8b       	std	Y+16, r25	; 0x10
     fec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	//read from eeprom admin_check if admin_check = 1 then  admin password  is saved and exit function
	// if  if admin_check != 1  admin password not saved , and ask admin to create new password
	if (admin_check != 1) {
     fee:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <SS_voidCheckCreateAdminAccount+0x118>
     ff4:	a2 c0       	rjmp	.+324    	; 0x113a <SS_voidCheckCreateAdminAccount+0x25c>

		UART_voidTxString((u8*) "Welcome Admin");
     ff6:	80 e6       	ldi	r24, 0x60	; 96
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
		UART_voidTxString((u8*) "Type new password");
     ffe:	8e e6       	ldi	r24, 0x6E	; 110
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

		/*admin write his password from UART and saved in EEprom*/
		for (counter = 0; counter < Maximum_password; counter++) {
    1006:	1e 8e       	std	Y+30, r1	; 0x1e
    1008:	8b c0       	rjmp	.+278    	; 0x1120 <SS_voidCheckCreateAdminAccount+0x242>
			do {
				UART_voidRxChar(&local_u8RxData);
    100a:	ce 01       	movw	r24, r28
    100c:	80 96       	adiw	r24, 0x20	; 32
    100e:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
			} while (local_u8RxData == NULL );
    1012:	88 a1       	ldd	r24, Y+32	; 0x20
    1014:	88 2f       	mov	r24, r24
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	b9 f3       	breq	.-18     	; 0x100a <SS_voidCheckCreateAdminAccount+0x12c>
			LCD_voidDisplayChar('*');
    101c:	8a e2       	ldi	r24, 0x2A	; 42
    101e:	0e 94 3c 4c 	call	0x9878	; 0x9878 <LCD_voidDisplayChar>

			EEPROM_voidWriteByte(EEPROM_Position, local_u8RxData);
    1022:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	28 a1       	ldd	r18, Y+32	; 0x20
    102a:	62 2f       	mov	r22, r18
    102c:	0e 94 87 51 	call	0xa30e	; 0xa30e <EEPROM_voidWriteByte>
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a0 e2       	ldi	r26, 0x20	; 32
    1036:	b1 e4       	ldi	r27, 0x41	; 65
    1038:	8b 87       	std	Y+11, r24	; 0x0b
    103a:	9c 87       	std	Y+12, r25	; 0x0c
    103c:	ad 87       	std	Y+13, r26	; 0x0d
    103e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1040:	6b 85       	ldd	r22, Y+11	; 0x0b
    1042:	7c 85       	ldd	r23, Y+12	; 0x0c
    1044:	8d 85       	ldd	r24, Y+13	; 0x0d
    1046:	9e 85       	ldd	r25, Y+14	; 0x0e
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	4a e7       	ldi	r20, 0x7A	; 122
    104e:	55 e4       	ldi	r21, 0x45	; 69
    1050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	8f 83       	std	Y+7, r24	; 0x07
    105a:	98 87       	std	Y+8, r25	; 0x08
    105c:	a9 87       	std	Y+9, r26	; 0x09
    105e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1060:	6f 81       	ldd	r22, Y+7	; 0x07
    1062:	78 85       	ldd	r23, Y+8	; 0x08
    1064:	89 85       	ldd	r24, Y+9	; 0x09
    1066:	9a 85       	ldd	r25, Y+10	; 0x0a
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e8       	ldi	r20, 0x80	; 128
    106e:	5f e3       	ldi	r21, 0x3F	; 63
    1070:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1074:	88 23       	and	r24, r24
    1076:	2c f4       	brge	.+10     	; 0x1082 <SS_voidCheckCreateAdminAccount+0x1a4>
		__ticks = 1;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9e 83       	std	Y+6, r25	; 0x06
    107e:	8d 83       	std	Y+5, r24	; 0x05
    1080:	3f c0       	rjmp	.+126    	; 0x1100 <SS_voidCheckCreateAdminAccount+0x222>
	else if (__tmp > 65535)
    1082:	6f 81       	ldd	r22, Y+7	; 0x07
    1084:	78 85       	ldd	r23, Y+8	; 0x08
    1086:	89 85       	ldd	r24, Y+9	; 0x09
    1088:	9a 85       	ldd	r25, Y+10	; 0x0a
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	3f ef       	ldi	r19, 0xFF	; 255
    108e:	4f e7       	ldi	r20, 0x7F	; 127
    1090:	57 e4       	ldi	r21, 0x47	; 71
    1092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1096:	18 16       	cp	r1, r24
    1098:	4c f5       	brge	.+82     	; 0x10ec <SS_voidCheckCreateAdminAccount+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109a:	6b 85       	ldd	r22, Y+11	; 0x0b
    109c:	7c 85       	ldd	r23, Y+12	; 0x0c
    109e:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e2       	ldi	r20, 0x20	; 32
    10a8:	51 e4       	ldi	r21, 0x41	; 65
    10aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	bc 01       	movw	r22, r24
    10b4:	cd 01       	movw	r24, r26
    10b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	9e 83       	std	Y+6, r25	; 0x06
    10c0:	8d 83       	std	Y+5, r24	; 0x05
    10c2:	0f c0       	rjmp	.+30     	; 0x10e2 <SS_voidCheckCreateAdminAccount+0x204>
    10c4:	80 e9       	ldi	r24, 0x90	; 144
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	9c 83       	std	Y+4, r25	; 0x04
    10ca:	8b 83       	std	Y+3, r24	; 0x03
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	9c 81       	ldd	r25, Y+4	; 0x04
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <SS_voidCheckCreateAdminAccount+0x1f2>
    10d4:	9c 83       	std	Y+4, r25	; 0x04
    10d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	9e 81       	ldd	r25, Y+6	; 0x06
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	9e 83       	std	Y+6, r25	; 0x06
    10e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	69 f7       	brne	.-38     	; 0x10c4 <SS_voidCheckCreateAdminAccount+0x1e6>
    10ea:	14 c0       	rjmp	.+40     	; 0x1114 <SS_voidCheckCreateAdminAccount+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ec:	6f 81       	ldd	r22, Y+7	; 0x07
    10ee:	78 85       	ldd	r23, Y+8	; 0x08
    10f0:	89 85       	ldd	r24, Y+9	; 0x09
    10f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	9e 83       	std	Y+6, r25	; 0x06
    10fe:	8d 83       	std	Y+5, r24	; 0x05
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	9a 83       	std	Y+2, r25	; 0x02
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	9a 81       	ldd	r25, Y+2	; 0x02
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <SS_voidCheckCreateAdminAccount+0x22e>
    1110:	9a 83       	std	Y+2, r25	; 0x02
    1112:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			EEPROM_Position++;
    1114:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1116:	8f 5f       	subi	r24, 0xFF	; 255
    1118:	8d 8f       	std	Y+29, r24	; 0x1d

		UART_voidTxString((u8*) "Welcome Admin");
		UART_voidTxString((u8*) "Type new password");

		/*admin write his password from UART and saved in EEprom*/
		for (counter = 0; counter < Maximum_password; counter++) {
    111a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    111c:	8f 5f       	subi	r24, 0xFF	; 255
    111e:	8e 8f       	std	Y+30, r24	; 0x1e
    1120:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1122:	85 30       	cpi	r24, 0x05	; 5
    1124:	08 f4       	brcc	.+2      	; 0x1128 <SS_voidCheckCreateAdminAccount+0x24a>
    1126:	71 cf       	rjmp	.-286    	; 0x100a <SS_voidCheckCreateAdminAccount+0x12c>
			_delay_ms(10);
			EEPROM_Position++;
		}

		/* save admin check = 1 , to indicate that admin saved his password*/
		EEPROM_voidWriteByte(EEPROM_admin_check, 1);
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	61 e0       	ldi	r22, 0x01	; 1
    112e:	0e 94 87 51 	call	0xa30e	; 0xa30e <EEPROM_voidWriteByte>

		UART_voidTxString((u8*) "Admin Password Created");
    1132:	80 e8       	ldi	r24, 0x80	; 128
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

	}

}
    113a:	a0 96       	adiw	r28, 0x20	; 32
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <SS_voidLogin>:
 *   Parameters    : Void
 *   Return Value  : Void
 *   Remarks       : None
 **********************************************************************************************/

void SS_voidLogin() {
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	c7 59       	subi	r28, 0x97	; 151
    115a:	d0 40       	sbci	r29, 0x00	; 0
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
	/* check if admin has password
	 * if no admin save his password
	 *
	 */
	SS_voidCheckCreateAdminAccount();
    1166:	0e 94 6f 07 	call	0xede	; 0xede <SS_voidCheckCreateAdminAccount>
	u8 admin_check = 0;
    116a:	fe 01       	movw	r30, r28
    116c:	ee 57       	subi	r30, 0x7E	; 126
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	10 82       	st	Z, r1
	u8 user1_check = 0;
    1172:	fe 01       	movw	r30, r28
    1174:	ed 57       	subi	r30, 0x7D	; 125
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	10 82       	st	Z, r1
	u8 user2_check = 0;
    117a:	fe 01       	movw	r30, r28
    117c:	ec 57       	subi	r30, 0x7C	; 124
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	10 82       	st	Z, r1
	u8 user3_check = 0;
    1182:	fe 01       	movw	r30, r28
    1184:	eb 57       	subi	r30, 0x7B	; 123
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	10 82       	st	Z, r1
	u8 Username2[Maximum_password];
	u8 Username3[Maximum_password];
	u8 local_KPD0;
	u8 counter;
	u8 EEPROM_Position;
	BOOL_t success = FALSE;
    118a:	fe 01       	movw	r30, r28
    118c:	e1 58       	subi	r30, 0x81	; 129
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	10 82       	st	Z, r1

	LCD_voidClear();
    1192:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
	LCD_voidDisplayString((u8*) "Welcome Home");
    1196:	87 e9       	ldi	r24, 0x97	; 151
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString((u8*) "press any key");
    11a6:	84 ea       	ldi	r24, 0xA4	; 164
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
	do {

		KPD_voidGetValue(&local_KPD0);
    11ae:	ce 01       	movw	r24, r28
    11b0:	8b 56       	subi	r24, 0x6B	; 107
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <KPD_voidGetValue>
	} while (local_KPD0 == KPD_NOT_PRESSED);
    11b8:	fe 01       	movw	r30, r28
    11ba:	eb 56       	subi	r30, 0x6B	; 107
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	80 81       	ld	r24, Z
    11c0:	8f 3f       	cpi	r24, 0xFF	; 255
    11c2:	a9 f3       	breq	.-22     	; 0x11ae <SS_voidLogin+0x62>

	LCD_voidClear();
    11c4:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
	LCD_voidDisplayString((u8*) "Choose user");
    11c8:	82 eb       	ldi	r24, 0xB2	; 178
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString((u8*) "To Login");
    11d8:	8e eb       	ldi	r24, 0xBE	; 190
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    11e0:	fe 01       	movw	r30, r28
    11e2:	e5 58       	subi	r30, 0x85	; 133
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e8       	ldi	r25, 0x80	; 128
    11ea:	ab e3       	ldi	r26, 0x3B	; 59
    11ec:	b5 e4       	ldi	r27, 0x45	; 69
    11ee:	80 83       	st	Z, r24
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	a2 83       	std	Z+2, r26	; 0x02
    11f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f6:	8e 01       	movw	r16, r28
    11f8:	09 58       	subi	r16, 0x89	; 137
    11fa:	1f 4f       	sbci	r17, 0xFF	; 255
    11fc:	fe 01       	movw	r30, r28
    11fe:	e5 58       	subi	r30, 0x85	; 133
    1200:	ff 4f       	sbci	r31, 0xFF	; 255
    1202:	60 81       	ld	r22, Z
    1204:	71 81       	ldd	r23, Z+1	; 0x01
    1206:	82 81       	ldd	r24, Z+2	; 0x02
    1208:	93 81       	ldd	r25, Z+3	; 0x03
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	4a e7       	ldi	r20, 0x7A	; 122
    1210:	55 e4       	ldi	r21, 0x45	; 69
    1212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	f8 01       	movw	r30, r16
    121c:	80 83       	st	Z, r24
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	a2 83       	std	Z+2, r26	; 0x02
    1222:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1224:	fe 01       	movw	r30, r28
    1226:	e9 58       	subi	r30, 0x89	; 137
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	60 81       	ld	r22, Z
    122c:	71 81       	ldd	r23, Z+1	; 0x01
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e8       	ldi	r20, 0x80	; 128
    1238:	5f e3       	ldi	r21, 0x3F	; 63
    123a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    123e:	88 23       	and	r24, r24
    1240:	44 f4       	brge	.+16     	; 0x1252 <SS_voidLogin+0x106>
		__ticks = 1;
    1242:	fe 01       	movw	r30, r28
    1244:	eb 58       	subi	r30, 0x8B	; 139
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	91 83       	std	Z+1, r25	; 0x01
    124e:	80 83       	st	Z, r24
    1250:	64 c0       	rjmp	.+200    	; 0x131a <SS_voidLogin+0x1ce>
	else if (__tmp > 65535)
    1252:	fe 01       	movw	r30, r28
    1254:	e9 58       	subi	r30, 0x89	; 137
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	60 81       	ld	r22, Z
    125a:	71 81       	ldd	r23, Z+1	; 0x01
    125c:	82 81       	ldd	r24, Z+2	; 0x02
    125e:	93 81       	ldd	r25, Z+3	; 0x03
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	3f ef       	ldi	r19, 0xFF	; 255
    1264:	4f e7       	ldi	r20, 0x7F	; 127
    1266:	57 e4       	ldi	r21, 0x47	; 71
    1268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    126c:	18 16       	cp	r1, r24
    126e:	0c f0       	brlt	.+2      	; 0x1272 <SS_voidLogin+0x126>
    1270:	43 c0       	rjmp	.+134    	; 0x12f8 <SS_voidLogin+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1272:	fe 01       	movw	r30, r28
    1274:	e5 58       	subi	r30, 0x85	; 133
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	60 81       	ld	r22, Z
    127a:	71 81       	ldd	r23, Z+1	; 0x01
    127c:	82 81       	ldd	r24, Z+2	; 0x02
    127e:	93 81       	ldd	r25, Z+3	; 0x03
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e2       	ldi	r20, 0x20	; 32
    1286:	51 e4       	ldi	r21, 0x41	; 65
    1288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	8e 01       	movw	r16, r28
    1292:	0b 58       	subi	r16, 0x8B	; 139
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
    1296:	bc 01       	movw	r22, r24
    1298:	cd 01       	movw	r24, r26
    129a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	f8 01       	movw	r30, r16
    12a4:	91 83       	std	Z+1, r25	; 0x01
    12a6:	80 83       	st	Z, r24
    12a8:	1f c0       	rjmp	.+62     	; 0x12e8 <SS_voidLogin+0x19c>
    12aa:	fe 01       	movw	r30, r28
    12ac:	ed 58       	subi	r30, 0x8D	; 141
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	80 e9       	ldi	r24, 0x90	; 144
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	91 83       	std	Z+1, r25	; 0x01
    12b6:	80 83       	st	Z, r24
    12b8:	fe 01       	movw	r30, r28
    12ba:	ed 58       	subi	r30, 0x8D	; 141
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	80 81       	ld	r24, Z
    12c0:	91 81       	ldd	r25, Z+1	; 0x01
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <SS_voidLogin+0x176>
    12c6:	fe 01       	movw	r30, r28
    12c8:	ed 58       	subi	r30, 0x8D	; 141
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	91 83       	std	Z+1, r25	; 0x01
    12ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d0:	de 01       	movw	r26, r28
    12d2:	ab 58       	subi	r26, 0x8B	; 139
    12d4:	bf 4f       	sbci	r27, 0xFF	; 255
    12d6:	fe 01       	movw	r30, r28
    12d8:	eb 58       	subi	r30, 0x8B	; 139
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	80 81       	ld	r24, Z
    12de:	91 81       	ldd	r25, Z+1	; 0x01
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	11 96       	adiw	r26, 0x01	; 1
    12e4:	9c 93       	st	X, r25
    12e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e8:	fe 01       	movw	r30, r28
    12ea:	eb 58       	subi	r30, 0x8B	; 139
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	80 81       	ld	r24, Z
    12f0:	91 81       	ldd	r25, Z+1	; 0x01
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	d1 f6       	brne	.-76     	; 0x12aa <SS_voidLogin+0x15e>
    12f6:	27 c0       	rjmp	.+78     	; 0x1346 <SS_voidLogin+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f8:	8e 01       	movw	r16, r28
    12fa:	0b 58       	subi	r16, 0x8B	; 139
    12fc:	1f 4f       	sbci	r17, 0xFF	; 255
    12fe:	fe 01       	movw	r30, r28
    1300:	e9 58       	subi	r30, 0x89	; 137
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	60 81       	ld	r22, Z
    1306:	71 81       	ldd	r23, Z+1	; 0x01
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	93 81       	ldd	r25, Z+3	; 0x03
    130c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	f8 01       	movw	r30, r16
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
    131a:	de 01       	movw	r26, r28
    131c:	af 58       	subi	r26, 0x8F	; 143
    131e:	bf 4f       	sbci	r27, 0xFF	; 255
    1320:	fe 01       	movw	r30, r28
    1322:	eb 58       	subi	r30, 0x8B	; 139
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	80 81       	ld	r24, Z
    1328:	91 81       	ldd	r25, Z+1	; 0x01
    132a:	8d 93       	st	X+, r24
    132c:	9c 93       	st	X, r25
    132e:	fe 01       	movw	r30, r28
    1330:	ef 58       	subi	r30, 0x8F	; 143
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <SS_voidLogin+0x1ec>
    133c:	fe 01       	movw	r30, r28
    133e:	ef 58       	subi	r30, 0x8F	; 143
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	91 83       	std	Z+1, r25	; 0x01
    1344:	80 83       	st	Z, r24

	_delay_ms(3000);
	LCD_voidClear();
    1346:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>

//check if admin is created
	EEPROM_voidReadByte( EEPROM_admin_check, &admin_check);
    134a:	9e 01       	movw	r18, r28
    134c:	2e 57       	subi	r18, 0x7E	; 126
    134e:	3f 4f       	sbci	r19, 0xFF	; 255
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	b9 01       	movw	r22, r18
    1356:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    135a:	fe 01       	movw	r30, r28
    135c:	e3 59       	subi	r30, 0x93	; 147
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	a0 e2       	ldi	r26, 0x20	; 32
    1366:	b1 e4       	ldi	r27, 0x41	; 65
    1368:	80 83       	st	Z, r24
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	a2 83       	std	Z+2, r26	; 0x02
    136e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1370:	8e 01       	movw	r16, r28
    1372:	07 59       	subi	r16, 0x97	; 151
    1374:	1f 4f       	sbci	r17, 0xFF	; 255
    1376:	fe 01       	movw	r30, r28
    1378:	e3 59       	subi	r30, 0x93	; 147
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	60 81       	ld	r22, Z
    137e:	71 81       	ldd	r23, Z+1	; 0x01
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	4a e7       	ldi	r20, 0x7A	; 122
    138a:	55 e4       	ldi	r21, 0x45	; 69
    138c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	f8 01       	movw	r30, r16
    1396:	80 83       	st	Z, r24
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	a2 83       	std	Z+2, r26	; 0x02
    139c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    139e:	fe 01       	movw	r30, r28
    13a0:	e7 59       	subi	r30, 0x97	; 151
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	60 81       	ld	r22, Z
    13a6:	71 81       	ldd	r23, Z+1	; 0x01
    13a8:	82 81       	ldd	r24, Z+2	; 0x02
    13aa:	93 81       	ldd	r25, Z+3	; 0x03
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e8       	ldi	r20, 0x80	; 128
    13b2:	5f e3       	ldi	r21, 0x3F	; 63
    13b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13b8:	88 23       	and	r24, r24
    13ba:	44 f4       	brge	.+16     	; 0x13cc <SS_voidLogin+0x280>
		__ticks = 1;
    13bc:	fe 01       	movw	r30, r28
    13be:	e9 59       	subi	r30, 0x99	; 153
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	91 83       	std	Z+1, r25	; 0x01
    13c8:	80 83       	st	Z, r24
    13ca:	64 c0       	rjmp	.+200    	; 0x1494 <SS_voidLogin+0x348>
	else if (__tmp > 65535)
    13cc:	fe 01       	movw	r30, r28
    13ce:	e7 59       	subi	r30, 0x97	; 151
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	60 81       	ld	r22, Z
    13d4:	71 81       	ldd	r23, Z+1	; 0x01
    13d6:	82 81       	ldd	r24, Z+2	; 0x02
    13d8:	93 81       	ldd	r25, Z+3	; 0x03
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	4f e7       	ldi	r20, 0x7F	; 127
    13e0:	57 e4       	ldi	r21, 0x47	; 71
    13e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13e6:	18 16       	cp	r1, r24
    13e8:	0c f0       	brlt	.+2      	; 0x13ec <SS_voidLogin+0x2a0>
    13ea:	43 c0       	rjmp	.+134    	; 0x1472 <SS_voidLogin+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ec:	fe 01       	movw	r30, r28
    13ee:	e3 59       	subi	r30, 0x93	; 147
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	60 81       	ld	r22, Z
    13f4:	71 81       	ldd	r23, Z+1	; 0x01
    13f6:	82 81       	ldd	r24, Z+2	; 0x02
    13f8:	93 81       	ldd	r25, Z+3	; 0x03
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e2       	ldi	r20, 0x20	; 32
    1400:	51 e4       	ldi	r21, 0x41	; 65
    1402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	8e 01       	movw	r16, r28
    140c:	09 59       	subi	r16, 0x99	; 153
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	f8 01       	movw	r30, r16
    141e:	91 83       	std	Z+1, r25	; 0x01
    1420:	80 83       	st	Z, r24
    1422:	1f c0       	rjmp	.+62     	; 0x1462 <SS_voidLogin+0x316>
    1424:	fe 01       	movw	r30, r28
    1426:	eb 59       	subi	r30, 0x9B	; 155
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	80 e9       	ldi	r24, 0x90	; 144
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
    1432:	fe 01       	movw	r30, r28
    1434:	eb 59       	subi	r30, 0x9B	; 155
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	80 81       	ld	r24, Z
    143a:	91 81       	ldd	r25, Z+1	; 0x01
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <SS_voidLogin+0x2f0>
    1440:	fe 01       	movw	r30, r28
    1442:	eb 59       	subi	r30, 0x9B	; 155
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144a:	de 01       	movw	r26, r28
    144c:	a9 59       	subi	r26, 0x99	; 153
    144e:	bf 4f       	sbci	r27, 0xFF	; 255
    1450:	fe 01       	movw	r30, r28
    1452:	e9 59       	subi	r30, 0x99	; 153
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	11 96       	adiw	r26, 0x01	; 1
    145e:	9c 93       	st	X, r25
    1460:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1462:	fe 01       	movw	r30, r28
    1464:	e9 59       	subi	r30, 0x99	; 153
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	80 81       	ld	r24, Z
    146a:	91 81       	ldd	r25, Z+1	; 0x01
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	d1 f6       	brne	.-76     	; 0x1424 <SS_voidLogin+0x2d8>
    1470:	27 c0       	rjmp	.+78     	; 0x14c0 <SS_voidLogin+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1472:	8e 01       	movw	r16, r28
    1474:	09 59       	subi	r16, 0x99	; 153
    1476:	1f 4f       	sbci	r17, 0xFF	; 255
    1478:	fe 01       	movw	r30, r28
    147a:	e7 59       	subi	r30, 0x97	; 151
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	60 81       	ld	r22, Z
    1480:	71 81       	ldd	r23, Z+1	; 0x01
    1482:	82 81       	ldd	r24, Z+2	; 0x02
    1484:	93 81       	ldd	r25, Z+3	; 0x03
    1486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	f8 01       	movw	r30, r16
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	80 83       	st	Z, r24
    1494:	de 01       	movw	r26, r28
    1496:	ad 59       	subi	r26, 0x9D	; 157
    1498:	bf 4f       	sbci	r27, 0xFF	; 255
    149a:	fe 01       	movw	r30, r28
    149c:	e9 59       	subi	r30, 0x99	; 153
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	80 81       	ld	r24, Z
    14a2:	91 81       	ldd	r25, Z+1	; 0x01
    14a4:	8d 93       	st	X+, r24
    14a6:	9c 93       	st	X, r25
    14a8:	fe 01       	movw	r30, r28
    14aa:	ed 59       	subi	r30, 0x9D	; 157
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	80 81       	ld	r24, Z
    14b0:	91 81       	ldd	r25, Z+1	; 0x01
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <SS_voidLogin+0x366>
    14b6:	fe 01       	movw	r30, r28
    14b8:	ed 59       	subi	r30, 0x9D	; 157
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	91 83       	std	Z+1, r25	; 0x01
    14be:	80 83       	st	Z, r24
	_delay_ms(10);

//check if user1 is created  then copy username
	EEPROM_voidReadByte( EEPROM_user1_check, &user1_check);
    14c0:	9e 01       	movw	r18, r28
    14c2:	2d 57       	subi	r18, 0x7D	; 125
    14c4:	3f 4f       	sbci	r19, 0xFF	; 255
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	b9 01       	movw	r22, r18
    14cc:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    14d0:	fe 01       	movw	r30, r28
    14d2:	e1 5a       	subi	r30, 0xA1	; 161
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	a0 e2       	ldi	r26, 0x20	; 32
    14dc:	b1 e4       	ldi	r27, 0x41	; 65
    14de:	80 83       	st	Z, r24
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	a2 83       	std	Z+2, r26	; 0x02
    14e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e6:	8e 01       	movw	r16, r28
    14e8:	05 5a       	subi	r16, 0xA5	; 165
    14ea:	1f 4f       	sbci	r17, 0xFF	; 255
    14ec:	fe 01       	movw	r30, r28
    14ee:	e1 5a       	subi	r30, 0xA1	; 161
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	93 81       	ldd	r25, Z+3	; 0x03
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	4a e7       	ldi	r20, 0x7A	; 122
    1500:	55 e4       	ldi	r21, 0x45	; 69
    1502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	f8 01       	movw	r30, r16
    150c:	80 83       	st	Z, r24
    150e:	91 83       	std	Z+1, r25	; 0x01
    1510:	a2 83       	std	Z+2, r26	; 0x02
    1512:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1514:	fe 01       	movw	r30, r28
    1516:	e5 5a       	subi	r30, 0xA5	; 165
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	60 81       	ld	r22, Z
    151c:	71 81       	ldd	r23, Z+1	; 0x01
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e8       	ldi	r20, 0x80	; 128
    1528:	5f e3       	ldi	r21, 0x3F	; 63
    152a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    152e:	88 23       	and	r24, r24
    1530:	44 f4       	brge	.+16     	; 0x1542 <SS_voidLogin+0x3f6>
		__ticks = 1;
    1532:	fe 01       	movw	r30, r28
    1534:	e7 5a       	subi	r30, 0xA7	; 167
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	80 83       	st	Z, r24
    1540:	64 c0       	rjmp	.+200    	; 0x160a <SS_voidLogin+0x4be>
	else if (__tmp > 65535)
    1542:	fe 01       	movw	r30, r28
    1544:	e5 5a       	subi	r30, 0xA5	; 165
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	3f ef       	ldi	r19, 0xFF	; 255
    1554:	4f e7       	ldi	r20, 0x7F	; 127
    1556:	57 e4       	ldi	r21, 0x47	; 71
    1558:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    155c:	18 16       	cp	r1, r24
    155e:	0c f0       	brlt	.+2      	; 0x1562 <SS_voidLogin+0x416>
    1560:	43 c0       	rjmp	.+134    	; 0x15e8 <SS_voidLogin+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1562:	fe 01       	movw	r30, r28
    1564:	e1 5a       	subi	r30, 0xA1	; 161
    1566:	ff 4f       	sbci	r31, 0xFF	; 255
    1568:	60 81       	ld	r22, Z
    156a:	71 81       	ldd	r23, Z+1	; 0x01
    156c:	82 81       	ldd	r24, Z+2	; 0x02
    156e:	93 81       	ldd	r25, Z+3	; 0x03
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e2       	ldi	r20, 0x20	; 32
    1576:	51 e4       	ldi	r21, 0x41	; 65
    1578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	8e 01       	movw	r16, r28
    1582:	07 5a       	subi	r16, 0xA7	; 167
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
    1586:	bc 01       	movw	r22, r24
    1588:	cd 01       	movw	r24, r26
    158a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	f8 01       	movw	r30, r16
    1594:	91 83       	std	Z+1, r25	; 0x01
    1596:	80 83       	st	Z, r24
    1598:	1f c0       	rjmp	.+62     	; 0x15d8 <SS_voidLogin+0x48c>
    159a:	fe 01       	movw	r30, r28
    159c:	e9 5a       	subi	r30, 0xA9	; 169
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	80 e9       	ldi	r24, 0x90	; 144
    15a2:	91 e0       	ldi	r25, 0x01	; 1
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	80 83       	st	Z, r24
    15a8:	fe 01       	movw	r30, r28
    15aa:	e9 5a       	subi	r30, 0xA9	; 169
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	80 81       	ld	r24, Z
    15b0:	91 81       	ldd	r25, Z+1	; 0x01
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <SS_voidLogin+0x466>
    15b6:	fe 01       	movw	r30, r28
    15b8:	e9 5a       	subi	r30, 0xA9	; 169
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c0:	de 01       	movw	r26, r28
    15c2:	a7 5a       	subi	r26, 0xA7	; 167
    15c4:	bf 4f       	sbci	r27, 0xFF	; 255
    15c6:	fe 01       	movw	r30, r28
    15c8:	e7 5a       	subi	r30, 0xA7	; 167
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	11 96       	adiw	r26, 0x01	; 1
    15d4:	9c 93       	st	X, r25
    15d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d8:	fe 01       	movw	r30, r28
    15da:	e7 5a       	subi	r30, 0xA7	; 167
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	80 81       	ld	r24, Z
    15e0:	91 81       	ldd	r25, Z+1	; 0x01
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	d1 f6       	brne	.-76     	; 0x159a <SS_voidLogin+0x44e>
    15e6:	28 c0       	rjmp	.+80     	; 0x1638 <SS_voidLogin+0x4ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e8:	8e 01       	movw	r16, r28
    15ea:	07 5a       	subi	r16, 0xA7	; 167
    15ec:	1f 4f       	sbci	r17, 0xFF	; 255
    15ee:	fe 01       	movw	r30, r28
    15f0:	e5 5a       	subi	r30, 0xA5	; 165
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	f8 01       	movw	r30, r16
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	80 83       	st	Z, r24
    160a:	de 01       	movw	r26, r28
    160c:	ab 5a       	subi	r26, 0xAB	; 171
    160e:	bf 4f       	sbci	r27, 0xFF	; 255
    1610:	fe 01       	movw	r30, r28
    1612:	e7 5a       	subi	r30, 0xA7	; 167
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	11 96       	adiw	r26, 0x01	; 1
    161c:	9c 93       	st	X, r25
    161e:	8e 93       	st	-X, r24
    1620:	fe 01       	movw	r30, r28
    1622:	eb 5a       	subi	r30, 0xAB	; 171
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	80 81       	ld	r24, Z
    1628:	91 81       	ldd	r25, Z+1	; 0x01
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <SS_voidLogin+0x4de>
    162e:	fe 01       	movw	r30, r28
    1630:	eb 5a       	subi	r30, 0xAB	; 171
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	80 83       	st	Z, r24
	_delay_ms(10);

	EEPROM_Position = EEPROM_user1_username;
    1638:	fe 01       	movw	r30, r28
    163a:	e0 58       	subi	r30, 0x80	; 128
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	89 e0       	ldi	r24, 0x09	; 9
    1640:	80 83       	st	Z, r24
	if (user1_check == 1) {
    1642:	fe 01       	movw	r30, r28
    1644:	ed 57       	subi	r30, 0x7D	; 125
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	80 81       	ld	r24, Z
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	09 f0       	breq	.+2      	; 0x1650 <SS_voidLogin+0x504>
    164e:	e6 c0       	rjmp	.+460    	; 0x181c <SS_voidLogin+0x6d0>
		for (counter = 0; counter < Maximum_password; counter++) {
    1650:	fe 01       	movw	r30, r28
    1652:	ef 57       	subi	r30, 0x7F	; 127
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	10 82       	st	Z, r1
    1658:	da c0       	rjmp	.+436    	; 0x180e <SS_voidLogin+0x6c2>
			EEPROM_voidReadByte(EEPROM_Position, &Username1[counter]);
    165a:	fe 01       	movw	r30, r28
    165c:	e0 58       	subi	r30, 0x80	; 128
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	fe 01       	movw	r30, r28
    1668:	ef 57       	subi	r30, 0x7F	; 127
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	80 81       	ld	r24, Z
    166e:	88 2f       	mov	r24, r24
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	9e 01       	movw	r18, r28
    1674:	2a 57       	subi	r18, 0x7A	; 122
    1676:	3f 4f       	sbci	r19, 0xFF	; 255
    1678:	28 0f       	add	r18, r24
    167a:	39 1f       	adc	r19, r25
    167c:	ca 01       	movw	r24, r20
    167e:	b9 01       	movw	r22, r18
    1680:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    1684:	fe 01       	movw	r30, r28
    1686:	ef 5a       	subi	r30, 0xAF	; 175
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a0 e2       	ldi	r26, 0x20	; 32
    1690:	b1 e4       	ldi	r27, 0x41	; 65
    1692:	80 83       	st	Z, r24
    1694:	91 83       	std	Z+1, r25	; 0x01
    1696:	a2 83       	std	Z+2, r26	; 0x02
    1698:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169a:	8e 01       	movw	r16, r28
    169c:	03 5b       	subi	r16, 0xB3	; 179
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	fe 01       	movw	r30, r28
    16a2:	ef 5a       	subi	r30, 0xAF	; 175
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	60 81       	ld	r22, Z
    16a8:	71 81       	ldd	r23, Z+1	; 0x01
    16aa:	82 81       	ldd	r24, Z+2	; 0x02
    16ac:	93 81       	ldd	r25, Z+3	; 0x03
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	4a e7       	ldi	r20, 0x7A	; 122
    16b4:	55 e4       	ldi	r21, 0x45	; 69
    16b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	f8 01       	movw	r30, r16
    16c0:	80 83       	st	Z, r24
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	a2 83       	std	Z+2, r26	; 0x02
    16c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16c8:	fe 01       	movw	r30, r28
    16ca:	e3 5b       	subi	r30, 0xB3	; 179
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	60 81       	ld	r22, Z
    16d0:	71 81       	ldd	r23, Z+1	; 0x01
    16d2:	82 81       	ldd	r24, Z+2	; 0x02
    16d4:	93 81       	ldd	r25, Z+3	; 0x03
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e8       	ldi	r20, 0x80	; 128
    16dc:	5f e3       	ldi	r21, 0x3F	; 63
    16de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16e2:	88 23       	and	r24, r24
    16e4:	44 f4       	brge	.+16     	; 0x16f6 <SS_voidLogin+0x5aa>
		__ticks = 1;
    16e6:	fe 01       	movw	r30, r28
    16e8:	e5 5b       	subi	r30, 0xB5	; 181
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	91 83       	std	Z+1, r25	; 0x01
    16f2:	80 83       	st	Z, r24
    16f4:	64 c0       	rjmp	.+200    	; 0x17be <SS_voidLogin+0x672>
	else if (__tmp > 65535)
    16f6:	fe 01       	movw	r30, r28
    16f8:	e3 5b       	subi	r30, 0xB3	; 179
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	60 81       	ld	r22, Z
    16fe:	71 81       	ldd	r23, Z+1	; 0x01
    1700:	82 81       	ldd	r24, Z+2	; 0x02
    1702:	93 81       	ldd	r25, Z+3	; 0x03
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	3f ef       	ldi	r19, 0xFF	; 255
    1708:	4f e7       	ldi	r20, 0x7F	; 127
    170a:	57 e4       	ldi	r21, 0x47	; 71
    170c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1710:	18 16       	cp	r1, r24
    1712:	0c f0       	brlt	.+2      	; 0x1716 <SS_voidLogin+0x5ca>
    1714:	43 c0       	rjmp	.+134    	; 0x179c <SS_voidLogin+0x650>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1716:	fe 01       	movw	r30, r28
    1718:	ef 5a       	subi	r30, 0xAF	; 175
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	60 81       	ld	r22, Z
    171e:	71 81       	ldd	r23, Z+1	; 0x01
    1720:	82 81       	ldd	r24, Z+2	; 0x02
    1722:	93 81       	ldd	r25, Z+3	; 0x03
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e2       	ldi	r20, 0x20	; 32
    172a:	51 e4       	ldi	r21, 0x41	; 65
    172c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	8e 01       	movw	r16, r28
    1736:	05 5b       	subi	r16, 0xB5	; 181
    1738:	1f 4f       	sbci	r17, 0xFF	; 255
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	f8 01       	movw	r30, r16
    1748:	91 83       	std	Z+1, r25	; 0x01
    174a:	80 83       	st	Z, r24
    174c:	1f c0       	rjmp	.+62     	; 0x178c <SS_voidLogin+0x640>
    174e:	fe 01       	movw	r30, r28
    1750:	e7 5b       	subi	r30, 0xB7	; 183
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	80 e9       	ldi	r24, 0x90	; 144
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
    175c:	fe 01       	movw	r30, r28
    175e:	e7 5b       	subi	r30, 0xB7	; 183
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	80 81       	ld	r24, Z
    1764:	91 81       	ldd	r25, Z+1	; 0x01
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <SS_voidLogin+0x61a>
    176a:	fe 01       	movw	r30, r28
    176c:	e7 5b       	subi	r30, 0xB7	; 183
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	91 83       	std	Z+1, r25	; 0x01
    1772:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1774:	de 01       	movw	r26, r28
    1776:	a5 5b       	subi	r26, 0xB5	; 181
    1778:	bf 4f       	sbci	r27, 0xFF	; 255
    177a:	fe 01       	movw	r30, r28
    177c:	e5 5b       	subi	r30, 0xB5	; 181
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	80 81       	ld	r24, Z
    1782:	91 81       	ldd	r25, Z+1	; 0x01
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	11 96       	adiw	r26, 0x01	; 1
    1788:	9c 93       	st	X, r25
    178a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178c:	fe 01       	movw	r30, r28
    178e:	e5 5b       	subi	r30, 0xB5	; 181
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 81       	ld	r24, Z
    1794:	91 81       	ldd	r25, Z+1	; 0x01
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	d1 f6       	brne	.-76     	; 0x174e <SS_voidLogin+0x602>
    179a:	27 c0       	rjmp	.+78     	; 0x17ea <SS_voidLogin+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179c:	8e 01       	movw	r16, r28
    179e:	05 5b       	subi	r16, 0xB5	; 181
    17a0:	1f 4f       	sbci	r17, 0xFF	; 255
    17a2:	fe 01       	movw	r30, r28
    17a4:	e3 5b       	subi	r30, 0xB3	; 179
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	60 81       	ld	r22, Z
    17aa:	71 81       	ldd	r23, Z+1	; 0x01
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	93 81       	ldd	r25, Z+3	; 0x03
    17b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	f8 01       	movw	r30, r16
    17ba:	91 83       	std	Z+1, r25	; 0x01
    17bc:	80 83       	st	Z, r24
    17be:	de 01       	movw	r26, r28
    17c0:	a9 5b       	subi	r26, 0xB9	; 185
    17c2:	bf 4f       	sbci	r27, 0xFF	; 255
    17c4:	fe 01       	movw	r30, r28
    17c6:	e5 5b       	subi	r30, 0xB5	; 181
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
    17ce:	8d 93       	st	X+, r24
    17d0:	9c 93       	st	X, r25
    17d2:	fe 01       	movw	r30, r28
    17d4:	e9 5b       	subi	r30, 0xB9	; 185
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	80 81       	ld	r24, Z
    17da:	91 81       	ldd	r25, Z+1	; 0x01
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <SS_voidLogin+0x690>
    17e0:	fe 01       	movw	r30, r28
    17e2:	e9 5b       	subi	r30, 0xB9	; 185
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	91 83       	std	Z+1, r25	; 0x01
    17e8:	80 83       	st	Z, r24
			_delay_ms(10);
			EEPROM_Position++;
    17ea:	de 01       	movw	r26, r28
    17ec:	a0 58       	subi	r26, 0x80	; 128
    17ee:	bf 4f       	sbci	r27, 0xFF	; 255
    17f0:	fe 01       	movw	r30, r28
    17f2:	e0 58       	subi	r30, 0x80	; 128
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	80 81       	ld	r24, Z
    17f8:	8f 5f       	subi	r24, 0xFF	; 255
    17fa:	8c 93       	st	X, r24
	EEPROM_voidReadByte( EEPROM_user1_check, &user1_check);
	_delay_ms(10);

	EEPROM_Position = EEPROM_user1_username;
	if (user1_check == 1) {
		for (counter = 0; counter < Maximum_password; counter++) {
    17fc:	de 01       	movw	r26, r28
    17fe:	af 57       	subi	r26, 0x7F	; 127
    1800:	bf 4f       	sbci	r27, 0xFF	; 255
    1802:	fe 01       	movw	r30, r28
    1804:	ef 57       	subi	r30, 0x7F	; 127
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	80 81       	ld	r24, Z
    180a:	8f 5f       	subi	r24, 0xFF	; 255
    180c:	8c 93       	st	X, r24
    180e:	fe 01       	movw	r30, r28
    1810:	ef 57       	subi	r30, 0x7F	; 127
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	80 81       	ld	r24, Z
    1816:	85 30       	cpi	r24, 0x05	; 5
    1818:	08 f4       	brcc	.+2      	; 0x181c <SS_voidLogin+0x6d0>
    181a:	1f cf       	rjmp	.-450    	; 0x165a <SS_voidLogin+0x50e>
			EEPROM_Position++;
		}
	}

//check if user2 is created  then copy username
	EEPROM_voidReadByte( EEPROM_user2_check, &user2_check);
    181c:	9e 01       	movw	r18, r28
    181e:	2c 57       	subi	r18, 0x7C	; 124
    1820:	3f 4f       	sbci	r19, 0xFF	; 255
    1822:	82 e0       	ldi	r24, 0x02	; 2
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	b9 01       	movw	r22, r18
    1828:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    182c:	fe 01       	movw	r30, r28
    182e:	ed 5b       	subi	r30, 0xBD	; 189
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a0 e2       	ldi	r26, 0x20	; 32
    1838:	b1 e4       	ldi	r27, 0x41	; 65
    183a:	80 83       	st	Z, r24
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	a2 83       	std	Z+2, r26	; 0x02
    1840:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	8e 01       	movw	r16, r28
    1844:	01 5c       	subi	r16, 0xC1	; 193
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	fe 01       	movw	r30, r28
    184a:	ed 5b       	subi	r30, 0xBD	; 189
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	60 81       	ld	r22, Z
    1850:	71 81       	ldd	r23, Z+1	; 0x01
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	93 81       	ldd	r25, Z+3	; 0x03
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	4a e7       	ldi	r20, 0x7A	; 122
    185c:	55 e4       	ldi	r21, 0x45	; 69
    185e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	f8 01       	movw	r30, r16
    1868:	80 83       	st	Z, r24
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	a2 83       	std	Z+2, r26	; 0x02
    186e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1870:	fe 01       	movw	r30, r28
    1872:	ff 96       	adiw	r30, 0x3f	; 63
    1874:	60 81       	ld	r22, Z
    1876:	71 81       	ldd	r23, Z+1	; 0x01
    1878:	82 81       	ldd	r24, Z+2	; 0x02
    187a:	93 81       	ldd	r25, Z+3	; 0x03
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <SS_voidLogin+0x74a>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9e af       	std	Y+62, r25	; 0x3e
    1892:	8d af       	std	Y+61, r24	; 0x3d
    1894:	46 c0       	rjmp	.+140    	; 0x1922 <SS_voidLogin+0x7d6>
	else if (__tmp > 65535)
    1896:	fe 01       	movw	r30, r28
    1898:	ff 96       	adiw	r30, 0x3f	; 63
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	82 81       	ldd	r24, Z+2	; 0x02
    18a0:	93 81       	ldd	r25, Z+3	; 0x03
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	3f ef       	ldi	r19, 0xFF	; 255
    18a6:	4f e7       	ldi	r20, 0x7F	; 127
    18a8:	57 e4       	ldi	r21, 0x47	; 71
    18aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ae:	18 16       	cp	r1, r24
    18b0:	64 f5       	brge	.+88     	; 0x190a <SS_voidLogin+0x7be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b2:	fe 01       	movw	r30, r28
    18b4:	ed 5b       	subi	r30, 0xBD	; 189
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e2       	ldi	r20, 0x20	; 32
    18c6:	51 e4       	ldi	r21, 0x41	; 65
    18c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	bc 01       	movw	r22, r24
    18d2:	cd 01       	movw	r24, r26
    18d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	9e af       	std	Y+62, r25	; 0x3e
    18de:	8d af       	std	Y+61, r24	; 0x3d
    18e0:	0f c0       	rjmp	.+30     	; 0x1900 <SS_voidLogin+0x7b4>
    18e2:	80 e9       	ldi	r24, 0x90	; 144
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	9c af       	std	Y+60, r25	; 0x3c
    18e8:	8b af       	std	Y+59, r24	; 0x3b
    18ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    18ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <SS_voidLogin+0x7a2>
    18f2:	9c af       	std	Y+60, r25	; 0x3c
    18f4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    18f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	9e af       	std	Y+62, r25	; 0x3e
    18fe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1900:	8d ad       	ldd	r24, Y+61	; 0x3d
    1902:	9e ad       	ldd	r25, Y+62	; 0x3e
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	69 f7       	brne	.-38     	; 0x18e2 <SS_voidLogin+0x796>
    1908:	16 c0       	rjmp	.+44     	; 0x1936 <SS_voidLogin+0x7ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190a:	fe 01       	movw	r30, r28
    190c:	ff 96       	adiw	r30, 0x3f	; 63
    190e:	60 81       	ld	r22, Z
    1910:	71 81       	ldd	r23, Z+1	; 0x01
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	9e af       	std	Y+62, r25	; 0x3e
    1920:	8d af       	std	Y+61, r24	; 0x3d
    1922:	8d ad       	ldd	r24, Y+61	; 0x3d
    1924:	9e ad       	ldd	r25, Y+62	; 0x3e
    1926:	9a af       	std	Y+58, r25	; 0x3a
    1928:	89 af       	std	Y+57, r24	; 0x39
    192a:	89 ad       	ldd	r24, Y+57	; 0x39
    192c:	9a ad       	ldd	r25, Y+58	; 0x3a
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <SS_voidLogin+0x7e2>
    1932:	9a af       	std	Y+58, r25	; 0x3a
    1934:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	EEPROM_Position = EEPROM_user2_username;
    1936:	fe 01       	movw	r30, r28
    1938:	e0 58       	subi	r30, 0x80	; 128
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	83 e1       	ldi	r24, 0x13	; 19
    193e:	80 83       	st	Z, r24
	if (user2_check == 1) {
    1940:	fe 01       	movw	r30, r28
    1942:	ec 57       	subi	r30, 0x7C	; 124
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 81       	ld	r24, Z
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	09 f0       	breq	.+2      	; 0x194e <SS_voidLogin+0x802>
    194c:	a5 c0       	rjmp	.+330    	; 0x1a98 <SS_voidLogin+0x94c>
		for (counter = 0; counter < Maximum_password; counter++) {
    194e:	fe 01       	movw	r30, r28
    1950:	ef 57       	subi	r30, 0x7F	; 127
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	10 82       	st	Z, r1
    1956:	99 c0       	rjmp	.+306    	; 0x1a8a <SS_voidLogin+0x93e>
			EEPROM_voidReadByte(EEPROM_Position, &Username2[counter]);
    1958:	fe 01       	movw	r30, r28
    195a:	e0 58       	subi	r30, 0x80	; 128
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	80 81       	ld	r24, Z
    1960:	48 2f       	mov	r20, r24
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	fe 01       	movw	r30, r28
    1966:	ef 57       	subi	r30, 0x7F	; 127
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	80 81       	ld	r24, Z
    196c:	88 2f       	mov	r24, r24
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9e 01       	movw	r18, r28
    1972:	25 57       	subi	r18, 0x75	; 117
    1974:	3f 4f       	sbci	r19, 0xFF	; 255
    1976:	28 0f       	add	r18, r24
    1978:	39 1f       	adc	r19, r25
    197a:	ca 01       	movw	r24, r20
    197c:	b9 01       	movw	r22, r18
    197e:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 e2       	ldi	r26, 0x20	; 32
    1988:	b1 e4       	ldi	r27, 0x41	; 65
    198a:	8d ab       	std	Y+53, r24	; 0x35
    198c:	9e ab       	std	Y+54, r25	; 0x36
    198e:	af ab       	std	Y+55, r26	; 0x37
    1990:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1992:	6d a9       	ldd	r22, Y+53	; 0x35
    1994:	7e a9       	ldd	r23, Y+54	; 0x36
    1996:	8f a9       	ldd	r24, Y+55	; 0x37
    1998:	98 ad       	ldd	r25, Y+56	; 0x38
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a e7       	ldi	r20, 0x7A	; 122
    19a0:	55 e4       	ldi	r21, 0x45	; 69
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	89 ab       	std	Y+49, r24	; 0x31
    19ac:	9a ab       	std	Y+50, r25	; 0x32
    19ae:	ab ab       	std	Y+51, r26	; 0x33
    19b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19b2:	69 a9       	ldd	r22, Y+49	; 0x31
    19b4:	7a a9       	ldd	r23, Y+50	; 0x32
    19b6:	8b a9       	ldd	r24, Y+51	; 0x33
    19b8:	9c a9       	ldd	r25, Y+52	; 0x34
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <SS_voidLogin+0x888>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	98 ab       	std	Y+48, r25	; 0x30
    19d0:	8f a7       	std	Y+47, r24	; 0x2f
    19d2:	3f c0       	rjmp	.+126    	; 0x1a52 <SS_voidLogin+0x906>
	else if (__tmp > 65535)
    19d4:	69 a9       	ldd	r22, Y+49	; 0x31
    19d6:	7a a9       	ldd	r23, Y+50	; 0x32
    19d8:	8b a9       	ldd	r24, Y+51	; 0x33
    19da:	9c a9       	ldd	r25, Y+52	; 0x34
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	57 e4       	ldi	r21, 0x47	; 71
    19e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	4c f5       	brge	.+82     	; 0x1a3e <SS_voidLogin+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ec:	6d a9       	ldd	r22, Y+53	; 0x35
    19ee:	7e a9       	ldd	r23, Y+54	; 0x36
    19f0:	8f a9       	ldd	r24, Y+55	; 0x37
    19f2:	98 ad       	ldd	r25, Y+56	; 0x38
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e2       	ldi	r20, 0x20	; 32
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	98 ab       	std	Y+48, r25	; 0x30
    1a12:	8f a7       	std	Y+47, r24	; 0x2f
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <SS_voidLogin+0x8e8>
    1a16:	80 e9       	ldi	r24, 0x90	; 144
    1a18:	91 e0       	ldi	r25, 0x01	; 1
    1a1a:	9e a7       	std	Y+46, r25	; 0x2e
    1a1c:	8d a7       	std	Y+45, r24	; 0x2d
    1a1e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a20:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <SS_voidLogin+0x8d6>
    1a26:	9e a7       	std	Y+46, r25	; 0x2e
    1a28:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	98 ab       	std	Y+48, r25	; 0x30
    1a32:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a36:	98 a9       	ldd	r25, Y+48	; 0x30
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <SS_voidLogin+0x8ca>
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <SS_voidLogin+0x91a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a40:	7a a9       	ldd	r23, Y+50	; 0x32
    1a42:	8b a9       	ldd	r24, Y+51	; 0x33
    1a44:	9c a9       	ldd	r25, Y+52	; 0x34
    1a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	98 ab       	std	Y+48, r25	; 0x30
    1a50:	8f a7       	std	Y+47, r24	; 0x2f
    1a52:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a54:	98 a9       	ldd	r25, Y+48	; 0x30
    1a56:	9c a7       	std	Y+44, r25	; 0x2c
    1a58:	8b a7       	std	Y+43, r24	; 0x2b
    1a5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <SS_voidLogin+0x912>
    1a62:	9c a7       	std	Y+44, r25	; 0x2c
    1a64:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			EEPROM_Position++;
    1a66:	de 01       	movw	r26, r28
    1a68:	a0 58       	subi	r26, 0x80	; 128
    1a6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e0 58       	subi	r30, 0x80	; 128
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	8f 5f       	subi	r24, 0xFF	; 255
    1a76:	8c 93       	st	X, r24
//check if user2 is created  then copy username
	EEPROM_voidReadByte( EEPROM_user2_check, &user2_check);
	_delay_ms(10);
	EEPROM_Position = EEPROM_user2_username;
	if (user2_check == 1) {
		for (counter = 0; counter < Maximum_password; counter++) {
    1a78:	de 01       	movw	r26, r28
    1a7a:	af 57       	subi	r26, 0x7F	; 127
    1a7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a7e:	fe 01       	movw	r30, r28
    1a80:	ef 57       	subi	r30, 0x7F	; 127
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	80 81       	ld	r24, Z
    1a86:	8f 5f       	subi	r24, 0xFF	; 255
    1a88:	8c 93       	st	X, r24
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	ef 57       	subi	r30, 0x7F	; 127
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	80 81       	ld	r24, Z
    1a92:	85 30       	cpi	r24, 0x05	; 5
    1a94:	08 f4       	brcc	.+2      	; 0x1a98 <SS_voidLogin+0x94c>
    1a96:	60 cf       	rjmp	.-320    	; 0x1958 <SS_voidLogin+0x80c>
			EEPROM_Position++;
		}
	}

//check if user3 is created  then copy username
	EEPROM_voidReadByte( EEPROM_user3_check, &user3_check);
    1a98:	9e 01       	movw	r18, r28
    1a9a:	2b 57       	subi	r18, 0x7B	; 123
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	b9 01       	movw	r22, r18
    1aa4:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a0 e2       	ldi	r26, 0x20	; 32
    1aae:	b1 e4       	ldi	r27, 0x41	; 65
    1ab0:	8f a3       	std	Y+39, r24	; 0x27
    1ab2:	98 a7       	std	Y+40, r25	; 0x28
    1ab4:	a9 a7       	std	Y+41, r26	; 0x29
    1ab6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aba:	78 a5       	ldd	r23, Y+40	; 0x28
    1abc:	89 a5       	ldd	r24, Y+41	; 0x29
    1abe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	4a e7       	ldi	r20, 0x7A	; 122
    1ac6:	55 e4       	ldi	r21, 0x45	; 69
    1ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	8b a3       	std	Y+35, r24	; 0x23
    1ad2:	9c a3       	std	Y+36, r25	; 0x24
    1ad4:	ad a3       	std	Y+37, r26	; 0x25
    1ad6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ad8:	6b a1       	ldd	r22, Y+35	; 0x23
    1ada:	7c a1       	ldd	r23, Y+36	; 0x24
    1adc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ade:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e8       	ldi	r20, 0x80	; 128
    1ae6:	5f e3       	ldi	r21, 0x3F	; 63
    1ae8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aec:	88 23       	and	r24, r24
    1aee:	2c f4       	brge	.+10     	; 0x1afa <SS_voidLogin+0x9ae>
		__ticks = 1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	9a a3       	std	Y+34, r25	; 0x22
    1af6:	89 a3       	std	Y+33, r24	; 0x21
    1af8:	3f c0       	rjmp	.+126    	; 0x1b78 <SS_voidLogin+0xa2c>
	else if (__tmp > 65535)
    1afa:	6b a1       	ldd	r22, Y+35	; 0x23
    1afc:	7c a1       	ldd	r23, Y+36	; 0x24
    1afe:	8d a1       	ldd	r24, Y+37	; 0x25
    1b00:	9e a1       	ldd	r25, Y+38	; 0x26
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	3f ef       	ldi	r19, 0xFF	; 255
    1b06:	4f e7       	ldi	r20, 0x7F	; 127
    1b08:	57 e4       	ldi	r21, 0x47	; 71
    1b0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b0e:	18 16       	cp	r1, r24
    1b10:	4c f5       	brge	.+82     	; 0x1b64 <SS_voidLogin+0xa18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b12:	6f a1       	ldd	r22, Y+39	; 0x27
    1b14:	78 a5       	ldd	r23, Y+40	; 0x28
    1b16:	89 a5       	ldd	r24, Y+41	; 0x29
    1b18:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e2       	ldi	r20, 0x20	; 32
    1b20:	51 e4       	ldi	r21, 0x41	; 65
    1b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	bc 01       	movw	r22, r24
    1b2c:	cd 01       	movw	r24, r26
    1b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	9a a3       	std	Y+34, r25	; 0x22
    1b38:	89 a3       	std	Y+33, r24	; 0x21
    1b3a:	0f c0       	rjmp	.+30     	; 0x1b5a <SS_voidLogin+0xa0e>
    1b3c:	80 e9       	ldi	r24, 0x90	; 144
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	98 a3       	std	Y+32, r25	; 0x20
    1b42:	8f 8f       	std	Y+31, r24	; 0x1f
    1b44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b46:	98 a1       	ldd	r25, Y+32	; 0x20
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <SS_voidLogin+0x9fc>
    1b4c:	98 a3       	std	Y+32, r25	; 0x20
    1b4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b50:	89 a1       	ldd	r24, Y+33	; 0x21
    1b52:	9a a1       	ldd	r25, Y+34	; 0x22
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	9a a3       	std	Y+34, r25	; 0x22
    1b58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	69 f7       	brne	.-38     	; 0x1b3c <SS_voidLogin+0x9f0>
    1b62:	14 c0       	rjmp	.+40     	; 0x1b8c <SS_voidLogin+0xa40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b64:	6b a1       	ldd	r22, Y+35	; 0x23
    1b66:	7c a1       	ldd	r23, Y+36	; 0x24
    1b68:	8d a1       	ldd	r24, Y+37	; 0x25
    1b6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9a a3       	std	Y+34, r25	; 0x22
    1b76:	89 a3       	std	Y+33, r24	; 0x21
    1b78:	89 a1       	ldd	r24, Y+33	; 0x21
    1b7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <SS_voidLogin+0xa38>
    1b88:	9e 8f       	std	Y+30, r25	; 0x1e
    1b8a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	EEPROM_Position = EEPROM_user3_username;
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e0 58       	subi	r30, 0x80	; 128
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	8d e1       	ldi	r24, 0x1D	; 29
    1b94:	80 83       	st	Z, r24
	if (user3_check == 1) {
    1b96:	fe 01       	movw	r30, r28
    1b98:	eb 57       	subi	r30, 0x7B	; 123
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	80 81       	ld	r24, Z
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <SS_voidLogin+0xa58>
    1ba2:	a5 c0       	rjmp	.+330    	; 0x1cee <SS_voidLogin+0xba2>
		for (counter = 0; counter < Maximum_password; counter++) {
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	ef 57       	subi	r30, 0x7F	; 127
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	10 82       	st	Z, r1
    1bac:	99 c0       	rjmp	.+306    	; 0x1ce0 <SS_voidLogin+0xb94>
			EEPROM_voidReadByte(EEPROM_Position, &Username3[counter]);
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e0 58       	subi	r30, 0x80	; 128
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 81       	ld	r24, Z
    1bb6:	48 2f       	mov	r20, r24
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	fe 01       	movw	r30, r28
    1bbc:	ef 57       	subi	r30, 0x7F	; 127
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	80 81       	ld	r24, Z
    1bc2:	88 2f       	mov	r24, r24
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	9e 01       	movw	r18, r28
    1bc8:	20 57       	subi	r18, 0x70	; 112
    1bca:	3f 4f       	sbci	r19, 0xFF	; 255
    1bcc:	28 0f       	add	r18, r24
    1bce:	39 1f       	adc	r19, r25
    1bd0:	ca 01       	movw	r24, r20
    1bd2:	b9 01       	movw	r22, r18
    1bd4:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a0 e2       	ldi	r26, 0x20	; 32
    1bde:	b1 e4       	ldi	r27, 0x41	; 65
    1be0:	89 8f       	std	Y+25, r24	; 0x19
    1be2:	9a 8f       	std	Y+26, r25	; 0x1a
    1be4:	ab 8f       	std	Y+27, r26	; 0x1b
    1be6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	4a e7       	ldi	r20, 0x7A	; 122
    1bf6:	55 e4       	ldi	r21, 0x45	; 69
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	8d 8b       	std	Y+21, r24	; 0x15
    1c02:	9e 8b       	std	Y+22, r25	; 0x16
    1c04:	af 8b       	std	Y+23, r26	; 0x17
    1c06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c08:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	5f e3       	ldi	r21, 0x3F	; 63
    1c18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1c:	88 23       	and	r24, r24
    1c1e:	2c f4       	brge	.+10     	; 0x1c2a <SS_voidLogin+0xade>
		__ticks = 1;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9c 8b       	std	Y+20, r25	; 0x14
    1c26:	8b 8b       	std	Y+19, r24	; 0x13
    1c28:	3f c0       	rjmp	.+126    	; 0x1ca8 <SS_voidLogin+0xb5c>
	else if (__tmp > 65535)
    1c2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c30:	98 8d       	ldd	r25, Y+24	; 0x18
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	4f e7       	ldi	r20, 0x7F	; 127
    1c38:	57 e4       	ldi	r21, 0x47	; 71
    1c3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c3e:	18 16       	cp	r1, r24
    1c40:	4c f5       	brge	.+82     	; 0x1c94 <SS_voidLogin+0xb48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c42:	69 8d       	ldd	r22, Y+25	; 0x19
    1c44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e2       	ldi	r20, 0x20	; 32
    1c50:	51 e4       	ldi	r21, 0x41	; 65
    1c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	9c 8b       	std	Y+20, r25	; 0x14
    1c68:	8b 8b       	std	Y+19, r24	; 0x13
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <SS_voidLogin+0xb3e>
    1c6c:	80 e9       	ldi	r24, 0x90	; 144
    1c6e:	91 e0       	ldi	r25, 0x01	; 1
    1c70:	9a 8b       	std	Y+18, r25	; 0x12
    1c72:	89 8b       	std	Y+17, r24	; 0x11
    1c74:	89 89       	ldd	r24, Y+17	; 0x11
    1c76:	9a 89       	ldd	r25, Y+18	; 0x12
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <SS_voidLogin+0xb2c>
    1c7c:	9a 8b       	std	Y+18, r25	; 0x12
    1c7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c80:	8b 89       	ldd	r24, Y+19	; 0x13
    1c82:	9c 89       	ldd	r25, Y+20	; 0x14
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	69 f7       	brne	.-38     	; 0x1c6c <SS_voidLogin+0xb20>
    1c92:	14 c0       	rjmp	.+40     	; 0x1cbc <SS_voidLogin+0xb70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c94:	6d 89       	ldd	r22, Y+21	; 0x15
    1c96:	7e 89       	ldd	r23, Y+22	; 0x16
    1c98:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	9c 8b       	std	Y+20, r25	; 0x14
    1ca6:	8b 8b       	std	Y+19, r24	; 0x13
    1ca8:	8b 89       	ldd	r24, Y+19	; 0x13
    1caa:	9c 89       	ldd	r25, Y+20	; 0x14
    1cac:	98 8b       	std	Y+16, r25	; 0x10
    1cae:	8f 87       	std	Y+15, r24	; 0x0f
    1cb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb2:	98 89       	ldd	r25, Y+16	; 0x10
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <SS_voidLogin+0xb68>
    1cb8:	98 8b       	std	Y+16, r25	; 0x10
    1cba:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			EEPROM_Position++;
    1cbc:	de 01       	movw	r26, r28
    1cbe:	a0 58       	subi	r26, 0x80	; 128
    1cc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e0 58       	subi	r30, 0x80	; 128
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 81       	ld	r24, Z
    1cca:	8f 5f       	subi	r24, 0xFF	; 255
    1ccc:	8c 93       	st	X, r24
//check if user3 is created  then copy username
	EEPROM_voidReadByte( EEPROM_user3_check, &user3_check);
	_delay_ms(10);
	EEPROM_Position = EEPROM_user3_username;
	if (user3_check == 1) {
		for (counter = 0; counter < Maximum_password; counter++) {
    1cce:	de 01       	movw	r26, r28
    1cd0:	af 57       	subi	r26, 0x7F	; 127
    1cd2:	bf 4f       	sbci	r27, 0xFF	; 255
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	ef 57       	subi	r30, 0x7F	; 127
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	8f 5f       	subi	r24, 0xFF	; 255
    1cde:	8c 93       	st	X, r24
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	ef 57       	subi	r30, 0x7F	; 127
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	85 30       	cpi	r24, 0x05	; 5
    1cea:	08 f4       	brcc	.+2      	; 0x1cee <SS_voidLogin+0xba2>
    1cec:	60 cf       	rjmp	.-320    	; 0x1bae <SS_voidLogin+0xa62>
		}
	}

	/* Display available user , user select his username to login  */
	do {
		if (admin_check == 1)
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ee 57       	subi	r30, 0x7E	; 126
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	21 f4       	brne	.+8      	; 0x1d02 <SS_voidLogin+0xbb6>
			LCD_voidDisplayString((u8*) "1-Admin");
    1cfa:	87 ec       	ldi	r24, 0xC7	; 199
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>

		if (user1_check == 1) {
    1d02:	fe 01       	movw	r30, r28
    1d04:	ed 57       	subi	r30, 0x7D	; 125
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	80 81       	ld	r24, Z
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	39 f5       	brne	.+78     	; 0x1d5c <SS_voidLogin+0xc10>
			LCD_voidDisplayString((u8*) " 2-");
    1d0e:	8f ec       	ldi	r24, 0xCF	; 207
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			for (counter = 0; counter < Maximum_password; counter++) {
    1d16:	fe 01       	movw	r30, r28
    1d18:	ef 57       	subi	r30, 0x7F	; 127
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	10 82       	st	Z, r1
    1d1e:	18 c0       	rjmp	.+48     	; 0x1d50 <SS_voidLogin+0xc04>
				LCD_voidDisplayChar(Username1[counter]);
    1d20:	fe 01       	movw	r30, r28
    1d22:	ef 57       	subi	r30, 0x7F	; 127
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 81       	ld	r24, Z
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	8a 57       	subi	r24, 0x7A	; 122
    1d30:	9f 4f       	sbci	r25, 0xFF	; 255
    1d32:	fc 01       	movw	r30, r24
    1d34:	e2 0f       	add	r30, r18
    1d36:	f3 1f       	adc	r31, r19
    1d38:	80 81       	ld	r24, Z
    1d3a:	0e 94 3c 4c 	call	0x9878	; 0x9878 <LCD_voidDisplayChar>
		if (admin_check == 1)
			LCD_voidDisplayString((u8*) "1-Admin");

		if (user1_check == 1) {
			LCD_voidDisplayString((u8*) " 2-");
			for (counter = 0; counter < Maximum_password; counter++) {
    1d3e:	de 01       	movw	r26, r28
    1d40:	af 57       	subi	r26, 0x7F	; 127
    1d42:	bf 4f       	sbci	r27, 0xFF	; 255
    1d44:	fe 01       	movw	r30, r28
    1d46:	ef 57       	subi	r30, 0x7F	; 127
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	80 81       	ld	r24, Z
    1d4c:	8f 5f       	subi	r24, 0xFF	; 255
    1d4e:	8c 93       	st	X, r24
    1d50:	fe 01       	movw	r30, r28
    1d52:	ef 57       	subi	r30, 0x7F	; 127
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	80 81       	ld	r24, Z
    1d58:	85 30       	cpi	r24, 0x05	; 5
    1d5a:	10 f3       	brcs	.-60     	; 0x1d20 <SS_voidLogin+0xbd4>
				LCD_voidDisplayChar(Username1[counter]);
			}
		}

		LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
		//check if user2 is created  then display username on screen

		if (user2_check == 1) {
    1d64:	fe 01       	movw	r30, r28
    1d66:	ec 57       	subi	r30, 0x7C	; 124
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	80 81       	ld	r24, Z
    1d6c:	81 30       	cpi	r24, 0x01	; 1
    1d6e:	39 f5       	brne	.+78     	; 0x1dbe <SS_voidLogin+0xc72>
			LCD_voidDisplayString((u8*) "3-");
    1d70:	83 ed       	ldi	r24, 0xD3	; 211
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			for (counter = 0; counter < Maximum_password; counter++) {
    1d78:	fe 01       	movw	r30, r28
    1d7a:	ef 57       	subi	r30, 0x7F	; 127
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	10 82       	st	Z, r1
    1d80:	18 c0       	rjmp	.+48     	; 0x1db2 <SS_voidLogin+0xc66>
				LCD_voidDisplayChar(Username2[counter]);
    1d82:	fe 01       	movw	r30, r28
    1d84:	ef 57       	subi	r30, 0x7F	; 127
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	80 81       	ld	r24, Z
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	ce 01       	movw	r24, r28
    1d90:	85 57       	subi	r24, 0x75	; 117
    1d92:	9f 4f       	sbci	r25, 0xFF	; 255
    1d94:	fc 01       	movw	r30, r24
    1d96:	e2 0f       	add	r30, r18
    1d98:	f3 1f       	adc	r31, r19
    1d9a:	80 81       	ld	r24, Z
    1d9c:	0e 94 3c 4c 	call	0x9878	; 0x9878 <LCD_voidDisplayChar>
		LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
		//check if user2 is created  then display username on screen

		if (user2_check == 1) {
			LCD_voidDisplayString((u8*) "3-");
			for (counter = 0; counter < Maximum_password; counter++) {
    1da0:	de 01       	movw	r26, r28
    1da2:	af 57       	subi	r26, 0x7F	; 127
    1da4:	bf 4f       	sbci	r27, 0xFF	; 255
    1da6:	fe 01       	movw	r30, r28
    1da8:	ef 57       	subi	r30, 0x7F	; 127
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 81       	ld	r24, Z
    1dae:	8f 5f       	subi	r24, 0xFF	; 255
    1db0:	8c 93       	st	X, r24
    1db2:	fe 01       	movw	r30, r28
    1db4:	ef 57       	subi	r30, 0x7F	; 127
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	85 30       	cpi	r24, 0x05	; 5
    1dbc:	10 f3       	brcs	.-60     	; 0x1d82 <SS_voidLogin+0xc36>
				LCD_voidDisplayChar(Username2[counter]);
			}
		}

		//check if user3 is created  then display username on screen
		if (user3_check == 1) {
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	eb 57       	subi	r30, 0x7B	; 123
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 81       	ld	r24, Z
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	39 f5       	brne	.+78     	; 0x1e18 <SS_voidLogin+0xccc>
			LCD_voidDisplayString((u8*) " 4-");
    1dca:	86 ed       	ldi	r24, 0xD6	; 214
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			for (counter = 0; counter < Maximum_password; counter++) {
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ef 57       	subi	r30, 0x7F	; 127
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	10 82       	st	Z, r1
    1dda:	18 c0       	rjmp	.+48     	; 0x1e0c <SS_voidLogin+0xcc0>
				LCD_voidDisplayChar(Username3[counter]);
    1ddc:	fe 01       	movw	r30, r28
    1dde:	ef 57       	subi	r30, 0x7F	; 127
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	80 81       	ld	r24, Z
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	ce 01       	movw	r24, r28
    1dea:	80 57       	subi	r24, 0x70	; 112
    1dec:	9f 4f       	sbci	r25, 0xFF	; 255
    1dee:	fc 01       	movw	r30, r24
    1df0:	e2 0f       	add	r30, r18
    1df2:	f3 1f       	adc	r31, r19
    1df4:	80 81       	ld	r24, Z
    1df6:	0e 94 3c 4c 	call	0x9878	; 0x9878 <LCD_voidDisplayChar>
		}

		//check if user3 is created  then display username on screen
		if (user3_check == 1) {
			LCD_voidDisplayString((u8*) " 4-");
			for (counter = 0; counter < Maximum_password; counter++) {
    1dfa:	de 01       	movw	r26, r28
    1dfc:	af 57       	subi	r26, 0x7F	; 127
    1dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1e00:	fe 01       	movw	r30, r28
    1e02:	ef 57       	subi	r30, 0x7F	; 127
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 81       	ld	r24, Z
    1e08:	8f 5f       	subi	r24, 0xFF	; 255
    1e0a:	8c 93       	st	X, r24
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	ef 57       	subi	r30, 0x7F	; 127
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	85 30       	cpi	r24, 0x05	; 5
    1e16:	10 f3       	brcs	.-60     	; 0x1ddc <SS_voidLogin+0xc90>
			}
		}
		/*User select his username to login  by keypad*/
		do {

			KPD_voidGetValue(&local_KPD0);
    1e18:	ce 01       	movw	r24, r28
    1e1a:	8b 56       	subi	r24, 0x6B	; 107
    1e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1e:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <KPD_voidGetValue>
		} while (local_KPD0 == KPD_NOT_PRESSED);
    1e22:	fe 01       	movw	r30, r28
    1e24:	eb 56       	subi	r30, 0x6B	; 107
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	80 81       	ld	r24, Z
    1e2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e2c:	a9 f3       	breq	.-22     	; 0x1e18 <SS_voidLogin+0xccc>

		/* user type his password and system compare entered password with saved password
		 * */

		switch (local_KPD0) {
    1e2e:	fe 01       	movw	r30, r28
    1e30:	eb 56       	subi	r30, 0x6B	; 107
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	80 81       	ld	r24, Z
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	ca 56       	subi	r28, 0x6A	; 106
    1e3c:	df 4f       	sbci	r29, 0xFF	; 255
    1e3e:	39 83       	std	Y+1, r19	; 0x01
    1e40:	28 83       	st	Y, r18
    1e42:	c6 59       	subi	r28, 0x96	; 150
    1e44:	d0 40       	sbci	r29, 0x00	; 0
    1e46:	ca 56       	subi	r28, 0x6A	; 106
    1e48:	df 4f       	sbci	r29, 0xFF	; 255
    1e4a:	88 81       	ld	r24, Y
    1e4c:	99 81       	ldd	r25, Y+1	; 0x01
    1e4e:	c6 59       	subi	r28, 0x96	; 150
    1e50:	d0 40       	sbci	r29, 0x00	; 0
    1e52:	82 33       	cpi	r24, 0x32	; 50
    1e54:	91 05       	cpc	r25, r1
    1e56:	89 f1       	breq	.+98     	; 0x1eba <SS_voidLogin+0xd6e>
    1e58:	ca 56       	subi	r28, 0x6A	; 106
    1e5a:	df 4f       	sbci	r29, 0xFF	; 255
    1e5c:	e8 81       	ld	r30, Y
    1e5e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e60:	c6 59       	subi	r28, 0x96	; 150
    1e62:	d0 40       	sbci	r29, 0x00	; 0
    1e64:	e3 33       	cpi	r30, 0x33	; 51
    1e66:	f1 05       	cpc	r31, r1
    1e68:	54 f4       	brge	.+20     	; 0x1e7e <SS_voidLogin+0xd32>
    1e6a:	ca 56       	subi	r28, 0x6A	; 106
    1e6c:	df 4f       	sbci	r29, 0xFF	; 255
    1e6e:	28 81       	ld	r18, Y
    1e70:	39 81       	ldd	r19, Y+1	; 0x01
    1e72:	c6 59       	subi	r28, 0x96	; 150
    1e74:	d0 40       	sbci	r29, 0x00	; 0
    1e76:	21 33       	cpi	r18, 0x31	; 49
    1e78:	31 05       	cpc	r19, r1
    1e7a:	a1 f0       	breq	.+40     	; 0x1ea4 <SS_voidLogin+0xd58>
    1e7c:	42 c0       	rjmp	.+132    	; 0x1f02 <SS_voidLogin+0xdb6>
    1e7e:	ca 56       	subi	r28, 0x6A	; 106
    1e80:	df 4f       	sbci	r29, 0xFF	; 255
    1e82:	88 81       	ld	r24, Y
    1e84:	99 81       	ldd	r25, Y+1	; 0x01
    1e86:	c6 59       	subi	r28, 0x96	; 150
    1e88:	d0 40       	sbci	r29, 0x00	; 0
    1e8a:	83 33       	cpi	r24, 0x33	; 51
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	09 f1       	breq	.+66     	; 0x1ed2 <SS_voidLogin+0xd86>
    1e90:	ca 56       	subi	r28, 0x6A	; 106
    1e92:	df 4f       	sbci	r29, 0xFF	; 255
    1e94:	e8 81       	ld	r30, Y
    1e96:	f9 81       	ldd	r31, Y+1	; 0x01
    1e98:	c6 59       	subi	r28, 0x96	; 150
    1e9a:	d0 40       	sbci	r29, 0x00	; 0
    1e9c:	e4 33       	cpi	r30, 0x34	; 52
    1e9e:	f1 05       	cpc	r31, r1
    1ea0:	21 f1       	breq	.+72     	; 0x1eea <SS_voidLogin+0xd9e>
    1ea2:	2f c0       	rjmp	.+94     	; 0x1f02 <SS_voidLogin+0xdb6>
		case '1':
			SS_voidCheckAdminPassword();
    1ea4:	0e 94 16 10 	call	0x202c	; 0x202c <SS_voidCheckAdminPassword>
			success = TRUE;
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e1 58       	subi	r30, 0x81	; 129
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	80 83       	st	Z, r24
			local_loggedUser = admin;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	80 93 f0 05 	sts	0x05F0, r24
    1eb8:	a6 c0       	rjmp	.+332    	; 0x2006 <SS_voidLogin+0xeba>
			break;
		case '2':
			SS_voidCheckUserPassword(user1);
    1eba:	82 e0       	ldi	r24, 0x02	; 2
    1ebc:	0e 94 23 11 	call	0x2246	; 0x2246 <SS_voidCheckUserPassword>
			success = TRUE;
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	e1 58       	subi	r30, 0x81	; 129
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	80 83       	st	Z, r24
			local_loggedUser = user1;
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	80 93 f0 05 	sts	0x05F0, r24
    1ed0:	9a c0       	rjmp	.+308    	; 0x2006 <SS_voidLogin+0xeba>
			break;
		case '3':
			SS_voidCheckUserPassword(user2);
    1ed2:	83 e0       	ldi	r24, 0x03	; 3
    1ed4:	0e 94 23 11 	call	0x2246	; 0x2246 <SS_voidCheckUserPassword>
			success = TRUE;
    1ed8:	fe 01       	movw	r30, r28
    1eda:	e1 58       	subi	r30, 0x81	; 129
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	80 83       	st	Z, r24
			local_loggedUser = user2;
    1ee2:	83 e0       	ldi	r24, 0x03	; 3
    1ee4:	80 93 f0 05 	sts	0x05F0, r24
    1ee8:	8e c0       	rjmp	.+284    	; 0x2006 <SS_voidLogin+0xeba>
			break;
		case '4':
			SS_voidCheckUserPassword(user3);
    1eea:	84 e0       	ldi	r24, 0x04	; 4
    1eec:	0e 94 23 11 	call	0x2246	; 0x2246 <SS_voidCheckUserPassword>
			success = TRUE;
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e1 58       	subi	r30, 0x81	; 129
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	80 83       	st	Z, r24
			local_loggedUser = user3;
    1efa:	84 e0       	ldi	r24, 0x04	; 4
    1efc:	80 93 f0 05 	sts	0x05F0, r24
    1f00:	82 c0       	rjmp	.+260    	; 0x2006 <SS_voidLogin+0xeba>
			break;
		default:
			LCD_voidClear();
    1f02:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "Invalid Entry");
    1f06:	8a ed       	ldi	r24, 0xDA	; 218
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	60 e0       	ldi	r22, 0x00	; 0
    1f12:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
			LCD_voidDisplayString((u8*) "Try Again ");
    1f16:	88 ee       	ldi	r24, 0xE8	; 232
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e8       	ldi	r25, 0x80	; 128
    1f22:	ab e3       	ldi	r26, 0x3B	; 59
    1f24:	b5 e4       	ldi	r27, 0x45	; 69
    1f26:	8b 87       	std	Y+11, r24	; 0x0b
    1f28:	9c 87       	std	Y+12, r25	; 0x0c
    1f2a:	ad 87       	std	Y+13, r26	; 0x0d
    1f2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	4a e7       	ldi	r20, 0x7A	; 122
    1f3c:	55 e4       	ldi	r21, 0x45	; 69
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	8f 83       	std	Y+7, r24	; 0x07
    1f48:	98 87       	std	Y+8, r25	; 0x08
    1f4a:	a9 87       	std	Y+9, r26	; 0x09
    1f4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f50:	78 85       	ldd	r23, Y+8	; 0x08
    1f52:	89 85       	ldd	r24, Y+9	; 0x09
    1f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e8       	ldi	r20, 0x80	; 128
    1f5c:	5f e3       	ldi	r21, 0x3F	; 63
    1f5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f62:	88 23       	and	r24, r24
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <SS_voidLogin+0xe24>
		__ticks = 1;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	9e 83       	std	Y+6, r25	; 0x06
    1f6c:	8d 83       	std	Y+5, r24	; 0x05
    1f6e:	3f c0       	rjmp	.+126    	; 0x1fee <SS_voidLogin+0xea2>
	else if (__tmp > 65535)
    1f70:	6f 81       	ldd	r22, Y+7	; 0x07
    1f72:	78 85       	ldd	r23, Y+8	; 0x08
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	3f ef       	ldi	r19, 0xFF	; 255
    1f7c:	4f e7       	ldi	r20, 0x7F	; 127
    1f7e:	57 e4       	ldi	r21, 0x47	; 71
    1f80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f84:	18 16       	cp	r1, r24
    1f86:	4c f5       	brge	.+82     	; 0x1fda <SS_voidLogin+0xe8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e2       	ldi	r20, 0x20	; 32
    1f96:	51 e4       	ldi	r21, 0x41	; 65
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
    1fb0:	0f c0       	rjmp	.+30     	; 0x1fd0 <SS_voidLogin+0xe84>
    1fb2:	80 e9       	ldi	r24, 0x90	; 144
    1fb4:	91 e0       	ldi	r25, 0x01	; 1
    1fb6:	9c 83       	std	Y+4, r25	; 0x04
    1fb8:	8b 83       	std	Y+3, r24	; 0x03
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <SS_voidLogin+0xe72>
    1fc2:	9c 83       	std	Y+4, r25	; 0x04
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	9e 83       	std	Y+6, r25	; 0x06
    1fce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	69 f7       	brne	.-38     	; 0x1fb2 <SS_voidLogin+0xe66>
    1fd8:	14 c0       	rjmp	.+40     	; 0x2002 <SS_voidLogin+0xeb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fda:	6f 81       	ldd	r22, Y+7	; 0x07
    1fdc:	78 85       	ldd	r23, Y+8	; 0x08
    1fde:	89 85       	ldd	r24, Y+9	; 0x09
    1fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff2:	9a 83       	std	Y+2, r25	; 0x02
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <SS_voidLogin+0xeae>
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(3000);
			LCD_voidClear();
    2002:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			break;
		}

	} while (success == FALSE);
    2006:	fe 01       	movw	r30, r28
    2008:	e1 58       	subi	r30, 0x81	; 129
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	88 23       	and	r24, r24
    2010:	09 f4       	brne	.+2      	; 0x2014 <SS_voidLogin+0xec8>
    2012:	6d ce       	rjmp	.-806    	; 0x1cee <SS_voidLogin+0xba2>

}
    2014:	c9 56       	subi	r28, 0x69	; 105
    2016:	df 4f       	sbci	r29, 0xFF	; 255
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	08 95       	ret

0000202c <SS_voidCheckAdminPassword>:
 *   Parameters    : variable of type users enum
 *   Return Value  : Void
 *   Remarks       : None
 **********************************************************************************************/

static void SS_voidCheckAdminPassword() {
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	6c 97       	sbiw	r28, 0x1c	; 28
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
	u8 saved_password[Maximum_password];
	u8 user_password[Maximum_password];
	u8 counter = 0;
    2040:	1a 8a       	std	Y+18, r1	; 0x12
	u8 correct = 0;
    2042:	19 8a       	std	Y+17, r1	; 0x11
	u8 EEPROM_Position = EEPROM_admin_password;
    2044:	84 e0       	ldi	r24, 0x04	; 4
    2046:	88 8b       	std	Y+16, r24	; 0x10
	u8 trials = 0;
    2048:	1f 86       	std	Y+15, r1	; 0x0f

	/* read password from eeprom for the selected user */

	for (counter = 0; counter < Maximum_password; counter++) {
    204a:	1a 8a       	std	Y+18, r1	; 0x12
    204c:	87 c0       	rjmp	.+270    	; 0x215c <SS_voidCheckAdminPassword+0x130>
		EEPROM_voidReadByte(EEPROM_Position, &saved_password[counter]);
    204e:	88 89       	ldd	r24, Y+16	; 0x10
    2050:	48 2f       	mov	r20, r24
    2052:	50 e0       	ldi	r21, 0x00	; 0
    2054:	8a 89       	ldd	r24, Y+18	; 0x12
    2056:	88 2f       	mov	r24, r24
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9e 01       	movw	r18, r28
    205c:	2d 5e       	subi	r18, 0xED	; 237
    205e:	3f 4f       	sbci	r19, 0xFF	; 255
    2060:	28 0f       	add	r18, r24
    2062:	39 1f       	adc	r19, r25
    2064:	ca 01       	movw	r24, r20
    2066:	b9 01       	movw	r22, r18
    2068:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e2       	ldi	r26, 0x20	; 32
    2072:	b1 e4       	ldi	r27, 0x41	; 65
    2074:	8b 87       	std	Y+11, r24	; 0x0b
    2076:	9c 87       	std	Y+12, r25	; 0x0c
    2078:	ad 87       	std	Y+13, r26	; 0x0d
    207a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	6b 85       	ldd	r22, Y+11	; 0x0b
    207e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2080:	8d 85       	ldd	r24, Y+13	; 0x0d
    2082:	9e 85       	ldd	r25, Y+14	; 0x0e
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a e7       	ldi	r20, 0x7A	; 122
    208a:	55 e4       	ldi	r21, 0x45	; 69
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8f 83       	std	Y+7, r24	; 0x07
    2096:	98 87       	std	Y+8, r25	; 0x08
    2098:	a9 87       	std	Y+9, r26	; 0x09
    209a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    209c:	6f 81       	ldd	r22, Y+7	; 0x07
    209e:	78 85       	ldd	r23, Y+8	; 0x08
    20a0:	89 85       	ldd	r24, Y+9	; 0x09
    20a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <SS_voidCheckAdminPassword+0x92>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <SS_voidCheckAdminPassword+0x110>
	else if (__tmp > 65535)
    20be:	6f 81       	ldd	r22, Y+7	; 0x07
    20c0:	78 85       	ldd	r23, Y+8	; 0x08
    20c2:	89 85       	ldd	r24, Y+9	; 0x09
    20c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <SS_voidCheckAdminPassword+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20da:	8d 85       	ldd	r24, Y+13	; 0x0d
    20dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <SS_voidCheckAdminPassword+0xf2>
    2100:	80 e9       	ldi	r24, 0x90	; 144
    2102:	91 e0       	ldi	r25, 0x01	; 1
    2104:	9c 83       	std	Y+4, r25	; 0x04
    2106:	8b 83       	std	Y+3, r24	; 0x03
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <SS_voidCheckAdminPassword+0xe0>
    2110:	9c 83       	std	Y+4, r25	; 0x04
    2112:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9e 83       	std	Y+6, r25	; 0x06
    211c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	8d 81       	ldd	r24, Y+5	; 0x05
    2120:	9e 81       	ldd	r25, Y+6	; 0x06
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <SS_voidCheckAdminPassword+0xd4>
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <SS_voidCheckAdminPassword+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	6f 81       	ldd	r22, Y+7	; 0x07
    212a:	78 85       	ldd	r23, Y+8	; 0x08
    212c:	89 85       	ldd	r24, Y+9	; 0x09
    212e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9e 83       	std	Y+6, r25	; 0x06
    213a:	8d 83       	std	Y+5, r24	; 0x05
    213c:	8d 81       	ldd	r24, Y+5	; 0x05
    213e:	9e 81       	ldd	r25, Y+6	; 0x06
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <SS_voidCheckAdminPassword+0x11c>
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		EEPROM_Position++;
    2150:	88 89       	ldd	r24, Y+16	; 0x10
    2152:	8f 5f       	subi	r24, 0xFF	; 255
    2154:	88 8b       	std	Y+16, r24	; 0x10
	u8 EEPROM_Position = EEPROM_admin_password;
	u8 trials = 0;

	/* read password from eeprom for the selected user */

	for (counter = 0; counter < Maximum_password; counter++) {
    2156:	8a 89       	ldd	r24, Y+18	; 0x12
    2158:	8f 5f       	subi	r24, 0xFF	; 255
    215a:	8a 8b       	std	Y+18, r24	; 0x12
    215c:	8a 89       	ldd	r24, Y+18	; 0x12
    215e:	85 30       	cpi	r24, 0x05	; 5
    2160:	08 f4       	brcc	.+2      	; 0x2164 <SS_voidCheckAdminPassword+0x138>
    2162:	75 cf       	rjmp	.-278    	; 0x204e <SS_voidCheckAdminPassword+0x22>
    2164:	5c c0       	rjmp	.+184    	; 0x221e <SS_voidCheckAdminPassword+0x1f2>
		EEPROM_Position++;
	}

	while (trials < 3) {

		UART_voidTxString((u8*) "password ?");
    2166:	83 ef       	ldi	r24, 0xF3	; 243
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

		/* if admin mode accept password from Bluetooth
		 * */
		for (counter = 0; counter < Maximum_password; counter++) {
    216e:	1a 8a       	std	Y+18, r1	; 0x12
    2170:	19 c0       	rjmp	.+50     	; 0x21a4 <SS_voidCheckAdminPassword+0x178>

			do {
				UART_voidRxChar(&user_password[counter]);
    2172:	8a 89       	ldd	r24, Y+18	; 0x12
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	ce 01       	movw	r24, r28
    217a:	48 96       	adiw	r24, 0x18	; 24
    217c:	82 0f       	add	r24, r18
    217e:	93 1f       	adc	r25, r19
    2180:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
			} while (user_password[counter] == NULL );
    2184:	8a 89       	ldd	r24, Y+18	; 0x12
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	ce 01       	movw	r24, r28
    218c:	48 96       	adiw	r24, 0x18	; 24
    218e:	fc 01       	movw	r30, r24
    2190:	e2 0f       	add	r30, r18
    2192:	f3 1f       	adc	r31, r19
    2194:	80 81       	ld	r24, Z
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	51 f3       	breq	.-44     	; 0x2172 <SS_voidCheckAdminPassword+0x146>

		UART_voidTxString((u8*) "password ?");

		/* if admin mode accept password from Bluetooth
		 * */
		for (counter = 0; counter < Maximum_password; counter++) {
    219e:	8a 89       	ldd	r24, Y+18	; 0x12
    21a0:	8f 5f       	subi	r24, 0xFF	; 255
    21a2:	8a 8b       	std	Y+18, r24	; 0x12
    21a4:	8a 89       	ldd	r24, Y+18	; 0x12
    21a6:	85 30       	cpi	r24, 0x05	; 5
    21a8:	20 f3       	brcs	.-56     	; 0x2172 <SS_voidCheckAdminPassword+0x146>
			} while (user_password[counter] == NULL );

		}

		//Check password
		for (counter = 0; counter < Maximum_password; counter++) {
    21aa:	1a 8a       	std	Y+18, r1	; 0x12
    21ac:	1a c0       	rjmp	.+52     	; 0x21e2 <SS_voidCheckAdminPassword+0x1b6>
			if (user_password[counter] == saved_password[counter]) {
    21ae:	8a 89       	ldd	r24, Y+18	; 0x12
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	ce 01       	movw	r24, r28
    21b6:	48 96       	adiw	r24, 0x18	; 24
    21b8:	fc 01       	movw	r30, r24
    21ba:	e2 0f       	add	r30, r18
    21bc:	f3 1f       	adc	r31, r19
    21be:	40 81       	ld	r20, Z
    21c0:	8a 89       	ldd	r24, Y+18	; 0x12
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	ce 01       	movw	r24, r28
    21c8:	43 96       	adiw	r24, 0x13	; 19
    21ca:	fc 01       	movw	r30, r24
    21cc:	e2 0f       	add	r30, r18
    21ce:	f3 1f       	adc	r31, r19
    21d0:	80 81       	ld	r24, Z
    21d2:	48 17       	cp	r20, r24
    21d4:	49 f4       	brne	.+18     	; 0x21e8 <SS_voidCheckAdminPassword+0x1bc>
				++correct;
    21d6:	89 89       	ldd	r24, Y+17	; 0x11
    21d8:	8f 5f       	subi	r24, 0xFF	; 255
    21da:	89 8b       	std	Y+17, r24	; 0x11
			} while (user_password[counter] == NULL );

		}

		//Check password
		for (counter = 0; counter < Maximum_password; counter++) {
    21dc:	8a 89       	ldd	r24, Y+18	; 0x12
    21de:	8f 5f       	subi	r24, 0xFF	; 255
    21e0:	8a 8b       	std	Y+18, r24	; 0x12
    21e2:	8a 89       	ldd	r24, Y+18	; 0x12
    21e4:	85 30       	cpi	r24, 0x05	; 5
    21e6:	18 f3       	brcs	.-58     	; 0x21ae <SS_voidCheckAdminPassword+0x182>
				break;
			}
		}

		// if password valid
		if (correct == Maximum_password) {
    21e8:	89 89       	ldd	r24, Y+17	; 0x11
    21ea:	85 30       	cpi	r24, 0x05	; 5
    21ec:	51 f4       	brne	.+20     	; 0x2202 <SS_voidCheckAdminPassword+0x1d6>

			UART_voidTxString((u8*) "Login Success");
    21ee:	8e ef       	ldi	r24, 0xFE	; 254
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

			local_isAuthenticated = TRUE;
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	80 93 f1 05 	sts	0x05F1, r24
			SS_voidDisplayAdminMenu();
    21fc:	0e 94 45 13 	call	0x268a	; 0x268a <SS_voidDisplayAdminMenu>
    2200:	12 c0       	rjmp	.+36     	; 0x2226 <SS_voidCheckAdminPassword+0x1fa>
			break;
		} else {
			trials++;
    2202:	8f 85       	ldd	r24, Y+15	; 0x0f
    2204:	8f 5f       	subi	r24, 0xFF	; 255
    2206:	8f 87       	std	Y+15, r24	; 0x0f

			if (trials < 3) {
    2208:	8f 85       	ldd	r24, Y+15	; 0x0f
    220a:	83 30       	cpi	r24, 0x03	; 3
    220c:	40 f4       	brcc	.+16     	; 0x221e <SS_voidCheckAdminPassword+0x1f2>
				UART_voidTxString((u8*) "wrong password");
    220e:	8c e0       	ldi	r24, 0x0C	; 12
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
				LCD_voidDisplayString((u8*) "try again ");
    2216:	8b e1       	ldi	r24, 0x1B	; 27
    2218:	91 e0       	ldi	r25, 0x01	; 1
    221a:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		EEPROM_voidReadByte(EEPROM_Position, &saved_password[counter]);
		_delay_ms(10);
		EEPROM_Position++;
	}

	while (trials < 3) {
    221e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2220:	83 30       	cpi	r24, 0x03	; 3
    2222:	08 f4       	brcc	.+2      	; 0x2226 <SS_voidCheckAdminPassword+0x1fa>
    2224:	a0 cf       	rjmp	.-192    	; 0x2166 <SS_voidCheckAdminPassword+0x13a>
				LCD_voidDisplayString((u8*) "try again ");
			}

		}
	}
	if (trials >= 3) {
    2226:	8f 85       	ldd	r24, Y+15	; 0x0f
    2228:	83 30       	cpi	r24, 0x03	; 3
    222a:	20 f0       	brcs	.+8      	; 0x2234 <SS_voidCheckAdminPassword+0x208>
		/*If there are 3 false  trials , activate alarm  */
		AS_voidInit();
    222c:	0e 94 02 58 	call	0xb004	; 0xb004 <AS_voidInit>
		AS_voidStart();
    2230:	0e 94 11 58 	call	0xb022	; 0xb022 <AS_voidStart>

	}
}
    2234:	6c 96       	adiw	r28, 0x1c	; 28
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <SS_voidCheckUserPassword>:
 *   Parameters    : variable of type users enum
 *   Return Value  : Void
 *   Remarks       : None
 **********************************************************************************************/

static void SS_voidCheckUserPassword(users copy_tUser) {
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	eb 97       	sbiw	r28, 0x3b	; 59
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	89 af       	std	Y+57, r24	; 0x39
	u8 saved_password[Maximum_password];
	u8 user_password[Maximum_password];
	u8 counter = 0;
    225c:	1e a6       	std	Y+46, r1	; 0x2e
	u8 correct = 0;
    225e:	1d a6       	std	Y+45, r1	; 0x2d
	u8 EEPROM_Position = 0;
    2260:	1c a6       	std	Y+44, r1	; 0x2c
	u8 trials = 0;
    2262:	1b a6       	std	Y+43, r1	; 0x2b

	/* read password from eeprom for the selected user */
	switch (copy_tUser) {
    2264:	89 ad       	ldd	r24, Y+57	; 0x39
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	3b af       	std	Y+59, r19	; 0x3b
    226c:	2a af       	std	Y+58, r18	; 0x3a
    226e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2270:	9b ad       	ldd	r25, Y+59	; 0x3b
    2272:	83 30       	cpi	r24, 0x03	; 3
    2274:	91 05       	cpc	r25, r1
    2276:	69 f0       	breq	.+26     	; 0x2292 <SS_voidCheckUserPassword+0x4c>
    2278:	2a ad       	ldd	r18, Y+58	; 0x3a
    227a:	3b ad       	ldd	r19, Y+59	; 0x3b
    227c:	24 30       	cpi	r18, 0x04	; 4
    227e:	31 05       	cpc	r19, r1
    2280:	59 f0       	breq	.+22     	; 0x2298 <SS_voidCheckUserPassword+0x52>
    2282:	8a ad       	ldd	r24, Y+58	; 0x3a
    2284:	9b ad       	ldd	r25, Y+59	; 0x3b
    2286:	82 30       	cpi	r24, 0x02	; 2
    2288:	91 05       	cpc	r25, r1
    228a:	41 f4       	brne	.+16     	; 0x229c <SS_voidCheckUserPassword+0x56>

	case user1:
		EEPROM_Position = EEPROM_user1_password;
    228c:	8e e0       	ldi	r24, 0x0E	; 14
    228e:	8c a7       	std	Y+44, r24	; 0x2c
    2290:	05 c0       	rjmp	.+10     	; 0x229c <SS_voidCheckUserPassword+0x56>
		break;
	case user2:
		EEPROM_Position = EEPROM_user2_password;
    2292:	88 e1       	ldi	r24, 0x18	; 24
    2294:	8c a7       	std	Y+44, r24	; 0x2c
    2296:	02 c0       	rjmp	.+4      	; 0x229c <SS_voidCheckUserPassword+0x56>
		break;
	case user3:
		EEPROM_Position = EEPROM_user3_password;
    2298:	82 e2       	ldi	r24, 0x22	; 34
    229a:	8c a7       	std	Y+44, r24	; 0x2c
		break;
	}

	for (counter = 0; counter < Maximum_password; counter++) {
    229c:	1e a6       	std	Y+46, r1	; 0x2e
    229e:	87 c0       	rjmp	.+270    	; 0x23ae <SS_voidCheckUserPassword+0x168>
		EEPROM_voidReadByte(EEPROM_Position, &saved_password[counter]);
    22a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    22a2:	48 2f       	mov	r20, r24
    22a4:	50 e0       	ldi	r21, 0x00	; 0
    22a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    22a8:	88 2f       	mov	r24, r24
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9e 01       	movw	r18, r28
    22ae:	21 5d       	subi	r18, 0xD1	; 209
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	28 0f       	add	r18, r24
    22b4:	39 1f       	adc	r19, r25
    22b6:	ca 01       	movw	r24, r20
    22b8:	b9 01       	movw	r22, r18
    22ba:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	a0 e2       	ldi	r26, 0x20	; 32
    22c4:	b1 e4       	ldi	r27, 0x41	; 65
    22c6:	8f a3       	std	Y+39, r24	; 0x27
    22c8:	98 a7       	std	Y+40, r25	; 0x28
    22ca:	a9 a7       	std	Y+41, r26	; 0x29
    22cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ce:	6f a1       	ldd	r22, Y+39	; 0x27
    22d0:	78 a5       	ldd	r23, Y+40	; 0x28
    22d2:	89 a5       	ldd	r24, Y+41	; 0x29
    22d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	4a e7       	ldi	r20, 0x7A	; 122
    22dc:	55 e4       	ldi	r21, 0x45	; 69
    22de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	8b a3       	std	Y+35, r24	; 0x23
    22e8:	9c a3       	std	Y+36, r25	; 0x24
    22ea:	ad a3       	std	Y+37, r26	; 0x25
    22ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22ee:	6b a1       	ldd	r22, Y+35	; 0x23
    22f0:	7c a1       	ldd	r23, Y+36	; 0x24
    22f2:	8d a1       	ldd	r24, Y+37	; 0x25
    22f4:	9e a1       	ldd	r25, Y+38	; 0x26
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e8       	ldi	r20, 0x80	; 128
    22fc:	5f e3       	ldi	r21, 0x3F	; 63
    22fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2302:	88 23       	and	r24, r24
    2304:	2c f4       	brge	.+10     	; 0x2310 <SS_voidCheckUserPassword+0xca>
		__ticks = 1;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	9a a3       	std	Y+34, r25	; 0x22
    230c:	89 a3       	std	Y+33, r24	; 0x21
    230e:	3f c0       	rjmp	.+126    	; 0x238e <SS_voidCheckUserPassword+0x148>
	else if (__tmp > 65535)
    2310:	6b a1       	ldd	r22, Y+35	; 0x23
    2312:	7c a1       	ldd	r23, Y+36	; 0x24
    2314:	8d a1       	ldd	r24, Y+37	; 0x25
    2316:	9e a1       	ldd	r25, Y+38	; 0x26
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	3f ef       	ldi	r19, 0xFF	; 255
    231c:	4f e7       	ldi	r20, 0x7F	; 127
    231e:	57 e4       	ldi	r21, 0x47	; 71
    2320:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2324:	18 16       	cp	r1, r24
    2326:	4c f5       	brge	.+82     	; 0x237a <SS_voidCheckUserPassword+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2328:	6f a1       	ldd	r22, Y+39	; 0x27
    232a:	78 a5       	ldd	r23, Y+40	; 0x28
    232c:	89 a5       	ldd	r24, Y+41	; 0x29
    232e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e2       	ldi	r20, 0x20	; 32
    2336:	51 e4       	ldi	r21, 0x41	; 65
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	9a a3       	std	Y+34, r25	; 0x22
    234e:	89 a3       	std	Y+33, r24	; 0x21
    2350:	0f c0       	rjmp	.+30     	; 0x2370 <SS_voidCheckUserPassword+0x12a>
    2352:	80 e9       	ldi	r24, 0x90	; 144
    2354:	91 e0       	ldi	r25, 0x01	; 1
    2356:	98 a3       	std	Y+32, r25	; 0x20
    2358:	8f 8f       	std	Y+31, r24	; 0x1f
    235a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    235c:	98 a1       	ldd	r25, Y+32	; 0x20
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <SS_voidCheckUserPassword+0x118>
    2362:	98 a3       	std	Y+32, r25	; 0x20
    2364:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2366:	89 a1       	ldd	r24, Y+33	; 0x21
    2368:	9a a1       	ldd	r25, Y+34	; 0x22
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	9a a3       	std	Y+34, r25	; 0x22
    236e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2370:	89 a1       	ldd	r24, Y+33	; 0x21
    2372:	9a a1       	ldd	r25, Y+34	; 0x22
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	69 f7       	brne	.-38     	; 0x2352 <SS_voidCheckUserPassword+0x10c>
    2378:	14 c0       	rjmp	.+40     	; 0x23a2 <SS_voidCheckUserPassword+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237a:	6b a1       	ldd	r22, Y+35	; 0x23
    237c:	7c a1       	ldd	r23, Y+36	; 0x24
    237e:	8d a1       	ldd	r24, Y+37	; 0x25
    2380:	9e a1       	ldd	r25, Y+38	; 0x26
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	9a a3       	std	Y+34, r25	; 0x22
    238c:	89 a3       	std	Y+33, r24	; 0x21
    238e:	89 a1       	ldd	r24, Y+33	; 0x21
    2390:	9a a1       	ldd	r25, Y+34	; 0x22
    2392:	9e 8f       	std	Y+30, r25	; 0x1e
    2394:	8d 8f       	std	Y+29, r24	; 0x1d
    2396:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2398:	9e 8d       	ldd	r25, Y+30	; 0x1e
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <SS_voidCheckUserPassword+0x154>
    239e:	9e 8f       	std	Y+30, r25	; 0x1e
    23a0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		EEPROM_Position++;
    23a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    23a4:	8f 5f       	subi	r24, 0xFF	; 255
    23a6:	8c a7       	std	Y+44, r24	; 0x2c
	case user3:
		EEPROM_Position = EEPROM_user3_password;
		break;
	}

	for (counter = 0; counter < Maximum_password; counter++) {
    23a8:	8e a5       	ldd	r24, Y+46	; 0x2e
    23aa:	8f 5f       	subi	r24, 0xFF	; 255
    23ac:	8e a7       	std	Y+46, r24	; 0x2e
    23ae:	8e a5       	ldd	r24, Y+46	; 0x2e
    23b0:	85 30       	cpi	r24, 0x05	; 5
    23b2:	08 f4       	brcc	.+2      	; 0x23b6 <SS_voidCheckUserPassword+0x170>
    23b4:	75 cf       	rjmp	.-278    	; 0x22a0 <SS_voidCheckUserPassword+0x5a>
    23b6:	55 c1       	rjmp	.+682    	; 0x2662 <SS_voidCheckUserPassword+0x41c>
		_delay_ms(10);
		EEPROM_Position++;
	}

	while (trials < 3) {
		LCD_voidClear();
    23b8:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "password ?");
    23bc:	83 ef       	ldi	r24, 0xF3	; 243
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    23c4:	82 e0       	ldi	r24, 0x02	; 2
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>

		/* if admin mode accept password from Bluetooth
		 * if user mode accept password from user from keypad
		 * */
		for (counter = 0; counter < Maximum_password; counter++) {
    23cc:	1e a6       	std	Y+46, r1	; 0x2e
    23ce:	1a c0       	rjmp	.+52     	; 0x2404 <SS_voidCheckUserPassword+0x1be>
			do {
				KPD_voidGetValue(&user_password[counter]);
    23d0:	8e a5       	ldd	r24, Y+46	; 0x2e
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	ce 01       	movw	r24, r28
    23d8:	c4 96       	adiw	r24, 0x34	; 52
    23da:	82 0f       	add	r24, r18
    23dc:	93 1f       	adc	r25, r19
    23de:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <KPD_voidGetValue>
			} while (user_password[counter] == KPD_NOT_PRESSED);
    23e2:	8e a5       	ldd	r24, Y+46	; 0x2e
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	ce 01       	movw	r24, r28
    23ea:	c4 96       	adiw	r24, 0x34	; 52
    23ec:	fc 01       	movw	r30, r24
    23ee:	e2 0f       	add	r30, r18
    23f0:	f3 1f       	adc	r31, r19
    23f2:	80 81       	ld	r24, Z
    23f4:	8f 3f       	cpi	r24, 0xFF	; 255
    23f6:	61 f3       	breq	.-40     	; 0x23d0 <SS_voidCheckUserPassword+0x18a>

			LCD_voidDisplayChar('*');
    23f8:	8a e2       	ldi	r24, 0x2A	; 42
    23fa:	0e 94 3c 4c 	call	0x9878	; 0x9878 <LCD_voidDisplayChar>
		LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);

		/* if admin mode accept password from Bluetooth
		 * if user mode accept password from user from keypad
		 * */
		for (counter = 0; counter < Maximum_password; counter++) {
    23fe:	8e a5       	ldd	r24, Y+46	; 0x2e
    2400:	8f 5f       	subi	r24, 0xFF	; 255
    2402:	8e a7       	std	Y+46, r24	; 0x2e
    2404:	8e a5       	ldd	r24, Y+46	; 0x2e
    2406:	85 30       	cpi	r24, 0x05	; 5
    2408:	18 f3       	brcs	.-58     	; 0x23d0 <SS_voidCheckUserPassword+0x18a>

			LCD_voidDisplayChar('*');
		}

		//Check password
		for (counter = 0; counter < Maximum_password; counter++) {
    240a:	1e a6       	std	Y+46, r1	; 0x2e
    240c:	1a c0       	rjmp	.+52     	; 0x2442 <SS_voidCheckUserPassword+0x1fc>
			if (user_password[counter] == saved_password[counter]) {
    240e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	ce 01       	movw	r24, r28
    2416:	c4 96       	adiw	r24, 0x34	; 52
    2418:	fc 01       	movw	r30, r24
    241a:	e2 0f       	add	r30, r18
    241c:	f3 1f       	adc	r31, r19
    241e:	40 81       	ld	r20, Z
    2420:	8e a5       	ldd	r24, Y+46	; 0x2e
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	ce 01       	movw	r24, r28
    2428:	8f 96       	adiw	r24, 0x2f	; 47
    242a:	fc 01       	movw	r30, r24
    242c:	e2 0f       	add	r30, r18
    242e:	f3 1f       	adc	r31, r19
    2430:	80 81       	ld	r24, Z
    2432:	48 17       	cp	r20, r24
    2434:	49 f4       	brne	.+18     	; 0x2448 <SS_voidCheckUserPassword+0x202>
				++correct;
    2436:	8d a5       	ldd	r24, Y+45	; 0x2d
    2438:	8f 5f       	subi	r24, 0xFF	; 255
    243a:	8d a7       	std	Y+45, r24	; 0x2d

			LCD_voidDisplayChar('*');
		}

		//Check password
		for (counter = 0; counter < Maximum_password; counter++) {
    243c:	8e a5       	ldd	r24, Y+46	; 0x2e
    243e:	8f 5f       	subi	r24, 0xFF	; 255
    2440:	8e a7       	std	Y+46, r24	; 0x2e
    2442:	8e a5       	ldd	r24, Y+46	; 0x2e
    2444:	85 30       	cpi	r24, 0x05	; 5
    2446:	18 f3       	brcs	.-58     	; 0x240e <SS_voidCheckUserPassword+0x1c8>
				break;
			}
		}

		// if password valid
		if (correct == Maximum_password) {
    2448:	8d a5       	ldd	r24, Y+45	; 0x2d
    244a:	85 30       	cpi	r24, 0x05	; 5
    244c:	09 f0       	breq	.+2      	; 0x2450 <SS_voidCheckUserPassword+0x20a>
    244e:	80 c0       	rjmp	.+256    	; 0x2550 <SS_voidCheckUserPassword+0x30a>
			LCD_voidClear();
    2450:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "Login Success");
    2454:	8e ef       	ldi	r24, 0xFE	; 254
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e8       	ldi	r25, 0x80	; 128
    2460:	ab e3       	ldi	r26, 0x3B	; 59
    2462:	b5 e4       	ldi	r27, 0x45	; 69
    2464:	89 8f       	std	Y+25, r24	; 0x19
    2466:	9a 8f       	std	Y+26, r25	; 0x1a
    2468:	ab 8f       	std	Y+27, r26	; 0x1b
    246a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246c:	69 8d       	ldd	r22, Y+25	; 0x19
    246e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2470:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2472:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	4a e7       	ldi	r20, 0x7A	; 122
    247a:	55 e4       	ldi	r21, 0x45	; 69
    247c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	8d 8b       	std	Y+21, r24	; 0x15
    2486:	9e 8b       	std	Y+22, r25	; 0x16
    2488:	af 8b       	std	Y+23, r26	; 0x17
    248a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    248c:	6d 89       	ldd	r22, Y+21	; 0x15
    248e:	7e 89       	ldd	r23, Y+22	; 0x16
    2490:	8f 89       	ldd	r24, Y+23	; 0x17
    2492:	98 8d       	ldd	r25, Y+24	; 0x18
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	40 e8       	ldi	r20, 0x80	; 128
    249a:	5f e3       	ldi	r21, 0x3F	; 63
    249c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a0:	88 23       	and	r24, r24
    24a2:	2c f4       	brge	.+10     	; 0x24ae <SS_voidCheckUserPassword+0x268>
		__ticks = 1;
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	9c 8b       	std	Y+20, r25	; 0x14
    24aa:	8b 8b       	std	Y+19, r24	; 0x13
    24ac:	3f c0       	rjmp	.+126    	; 0x252c <SS_voidCheckUserPassword+0x2e6>
	else if (__tmp > 65535)
    24ae:	6d 89       	ldd	r22, Y+21	; 0x15
    24b0:	7e 89       	ldd	r23, Y+22	; 0x16
    24b2:	8f 89       	ldd	r24, Y+23	; 0x17
    24b4:	98 8d       	ldd	r25, Y+24	; 0x18
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	3f ef       	ldi	r19, 0xFF	; 255
    24ba:	4f e7       	ldi	r20, 0x7F	; 127
    24bc:	57 e4       	ldi	r21, 0x47	; 71
    24be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c2:	18 16       	cp	r1, r24
    24c4:	4c f5       	brge	.+82     	; 0x2518 <SS_voidCheckUserPassword+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c6:	69 8d       	ldd	r22, Y+25	; 0x19
    24c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e2       	ldi	r20, 0x20	; 32
    24d4:	51 e4       	ldi	r21, 0x41	; 65
    24d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	bc 01       	movw	r22, r24
    24e0:	cd 01       	movw	r24, r26
    24e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	9c 8b       	std	Y+20, r25	; 0x14
    24ec:	8b 8b       	std	Y+19, r24	; 0x13
    24ee:	0f c0       	rjmp	.+30     	; 0x250e <SS_voidCheckUserPassword+0x2c8>
    24f0:	80 e9       	ldi	r24, 0x90	; 144
    24f2:	91 e0       	ldi	r25, 0x01	; 1
    24f4:	9a 8b       	std	Y+18, r25	; 0x12
    24f6:	89 8b       	std	Y+17, r24	; 0x11
    24f8:	89 89       	ldd	r24, Y+17	; 0x11
    24fa:	9a 89       	ldd	r25, Y+18	; 0x12
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <SS_voidCheckUserPassword+0x2b6>
    2500:	9a 8b       	std	Y+18, r25	; 0x12
    2502:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2504:	8b 89       	ldd	r24, Y+19	; 0x13
    2506:	9c 89       	ldd	r25, Y+20	; 0x14
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	9c 8b       	std	Y+20, r25	; 0x14
    250c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250e:	8b 89       	ldd	r24, Y+19	; 0x13
    2510:	9c 89       	ldd	r25, Y+20	; 0x14
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	69 f7       	brne	.-38     	; 0x24f0 <SS_voidCheckUserPassword+0x2aa>
    2516:	14 c0       	rjmp	.+40     	; 0x2540 <SS_voidCheckUserPassword+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2518:	6d 89       	ldd	r22, Y+21	; 0x15
    251a:	7e 89       	ldd	r23, Y+22	; 0x16
    251c:	8f 89       	ldd	r24, Y+23	; 0x17
    251e:	98 8d       	ldd	r25, Y+24	; 0x18
    2520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	9c 8b       	std	Y+20, r25	; 0x14
    252a:	8b 8b       	std	Y+19, r24	; 0x13
    252c:	8b 89       	ldd	r24, Y+19	; 0x13
    252e:	9c 89       	ldd	r25, Y+20	; 0x14
    2530:	98 8b       	std	Y+16, r25	; 0x10
    2532:	8f 87       	std	Y+15, r24	; 0x0f
    2534:	8f 85       	ldd	r24, Y+15	; 0x0f
    2536:	98 89       	ldd	r25, Y+16	; 0x10
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <SS_voidCheckUserPassword+0x2f2>
    253c:	98 8b       	std	Y+16, r25	; 0x10
    253e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(3000);
			LCD_voidClear();
    2540:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			local_isAuthenticated = TRUE;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	80 93 f1 05 	sts	0x05F1, r24
			SS_voidDisplayUserMenu();
    254a:	0e 94 8d 14 	call	0x291a	; 0x291a <SS_voidDisplayUserMenu>
    254e:	8d c0       	rjmp	.+282    	; 0x266a <SS_voidCheckUserPassword+0x424>
			break;
		} else {
			trials++;
    2550:	8b a5       	ldd	r24, Y+43	; 0x2b
    2552:	8f 5f       	subi	r24, 0xFF	; 255
    2554:	8b a7       	std	Y+43, r24	; 0x2b
			LCD_voidClear();
    2556:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			if (trials < 3) {
    255a:	8b a5       	ldd	r24, Y+43	; 0x2b
    255c:	83 30       	cpi	r24, 0x03	; 3
    255e:	08 f0       	brcs	.+2      	; 0x2562 <SS_voidCheckUserPassword+0x31c>
    2560:	80 c0       	rjmp	.+256    	; 0x2662 <SS_voidCheckUserPassword+0x41c>
				LCD_voidDisplayString((u8*) "wrong password");
    2562:	8c e0       	ldi	r24, 0x0C	; 12
    2564:	91 e0       	ldi	r25, 0x01	; 1
    2566:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
				LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    256a:	82 e0       	ldi	r24, 0x02	; 2
    256c:	60 e0       	ldi	r22, 0x00	; 0
    256e:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
				LCD_voidDisplayString((u8*) "try again ");
    2572:	8b e1       	ldi	r24, 0x1B	; 27
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	90 e8       	ldi	r25, 0x80	; 128
    257e:	ab e3       	ldi	r26, 0x3B	; 59
    2580:	b5 e4       	ldi	r27, 0x45	; 69
    2582:	8b 87       	std	Y+11, r24	; 0x0b
    2584:	9c 87       	std	Y+12, r25	; 0x0c
    2586:	ad 87       	std	Y+13, r26	; 0x0d
    2588:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258a:	6b 85       	ldd	r22, Y+11	; 0x0b
    258c:	7c 85       	ldd	r23, Y+12	; 0x0c
    258e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2590:	9e 85       	ldd	r25, Y+14	; 0x0e
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	4a e7       	ldi	r20, 0x7A	; 122
    2598:	55 e4       	ldi	r21, 0x45	; 69
    259a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	8f 83       	std	Y+7, r24	; 0x07
    25a4:	98 87       	std	Y+8, r25	; 0x08
    25a6:	a9 87       	std	Y+9, r26	; 0x09
    25a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25aa:	6f 81       	ldd	r22, Y+7	; 0x07
    25ac:	78 85       	ldd	r23, Y+8	; 0x08
    25ae:	89 85       	ldd	r24, Y+9	; 0x09
    25b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e8       	ldi	r20, 0x80	; 128
    25b8:	5f e3       	ldi	r21, 0x3F	; 63
    25ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25be:	88 23       	and	r24, r24
    25c0:	2c f4       	brge	.+10     	; 0x25cc <SS_voidCheckUserPassword+0x386>
		__ticks = 1;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9e 83       	std	Y+6, r25	; 0x06
    25c8:	8d 83       	std	Y+5, r24	; 0x05
    25ca:	3f c0       	rjmp	.+126    	; 0x264a <SS_voidCheckUserPassword+0x404>
	else if (__tmp > 65535)
    25cc:	6f 81       	ldd	r22, Y+7	; 0x07
    25ce:	78 85       	ldd	r23, Y+8	; 0x08
    25d0:	89 85       	ldd	r24, Y+9	; 0x09
    25d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	3f ef       	ldi	r19, 0xFF	; 255
    25d8:	4f e7       	ldi	r20, 0x7F	; 127
    25da:	57 e4       	ldi	r21, 0x47	; 71
    25dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25e0:	18 16       	cp	r1, r24
    25e2:	4c f5       	brge	.+82     	; 0x2636 <SS_voidCheckUserPassword+0x3f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e2       	ldi	r20, 0x20	; 32
    25f2:	51 e4       	ldi	r21, 0x41	; 65
    25f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9e 83       	std	Y+6, r25	; 0x06
    260a:	8d 83       	std	Y+5, r24	; 0x05
    260c:	0f c0       	rjmp	.+30     	; 0x262c <SS_voidCheckUserPassword+0x3e6>
    260e:	80 e9       	ldi	r24, 0x90	; 144
    2610:	91 e0       	ldi	r25, 0x01	; 1
    2612:	9c 83       	std	Y+4, r25	; 0x04
    2614:	8b 83       	std	Y+3, r24	; 0x03
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	9c 81       	ldd	r25, Y+4	; 0x04
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	f1 f7       	brne	.-4      	; 0x261a <SS_voidCheckUserPassword+0x3d4>
    261e:	9c 83       	std	Y+4, r25	; 0x04
    2620:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2622:	8d 81       	ldd	r24, Y+5	; 0x05
    2624:	9e 81       	ldd	r25, Y+6	; 0x06
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	9e 83       	std	Y+6, r25	; 0x06
    262a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262c:	8d 81       	ldd	r24, Y+5	; 0x05
    262e:	9e 81       	ldd	r25, Y+6	; 0x06
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	69 f7       	brne	.-38     	; 0x260e <SS_voidCheckUserPassword+0x3c8>
    2634:	14 c0       	rjmp	.+40     	; 0x265e <SS_voidCheckUserPassword+0x418>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2636:	6f 81       	ldd	r22, Y+7	; 0x07
    2638:	78 85       	ldd	r23, Y+8	; 0x08
    263a:	89 85       	ldd	r24, Y+9	; 0x09
    263c:	9a 85       	ldd	r25, Y+10	; 0x0a
    263e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	9e 83       	std	Y+6, r25	; 0x06
    2648:	8d 83       	std	Y+5, r24	; 0x05
    264a:	8d 81       	ldd	r24, Y+5	; 0x05
    264c:	9e 81       	ldd	r25, Y+6	; 0x06
    264e:	9a 83       	std	Y+2, r25	; 0x02
    2650:	89 83       	std	Y+1, r24	; 0x01
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	9a 81       	ldd	r25, Y+2	; 0x02
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <SS_voidCheckUserPassword+0x410>
    265a:	9a 83       	std	Y+2, r25	; 0x02
    265c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(3000);
				LCD_voidClear();
    265e:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		EEPROM_voidReadByte(EEPROM_Position, &saved_password[counter]);
		_delay_ms(10);
		EEPROM_Position++;
	}

	while (trials < 3) {
    2662:	8b a5       	ldd	r24, Y+43	; 0x2b
    2664:	83 30       	cpi	r24, 0x03	; 3
    2666:	08 f4       	brcc	.+2      	; 0x266a <SS_voidCheckUserPassword+0x424>
    2668:	a7 ce       	rjmp	.-690    	; 0x23b8 <SS_voidCheckUserPassword+0x172>
				LCD_voidClear();
			}

		}
	}
	if (trials >= 3) {
    266a:	8b a5       	ldd	r24, Y+43	; 0x2b
    266c:	83 30       	cpi	r24, 0x03	; 3
    266e:	20 f0       	brcs	.+8      	; 0x2678 <SS_voidCheckUserPassword+0x432>
		/*If there are 3 false  trials , activate alarm  */
		AS_voidInit();
    2670:	0e 94 02 58 	call	0xb004	; 0xb004 <AS_voidInit>
		AS_voidStart();
    2674:	0e 94 11 58 	call	0xb022	; 0xb022 <AS_voidStart>

	}
}
    2678:	eb 96       	adiw	r28, 0x3b	; 59
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <SS_voidDisplayAdminMenu>:
 *   Parameters    : Void
 *   Return Value  : Void
 *   Remarks       : None
 **********************************************************************************************/

static void SS_voidDisplayAdminMenu() {
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	61 97       	sbiw	r28, 0x11	; 17
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8RxData;

	UART_voidTxString((u8*) "   Choose from Menu : ");
    269e:	86 e2       	ldi	r24, 0x26	; 38
    26a0:	91 e0       	ldi	r25, 0x01	; 1
    26a2:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

	/*admin mode : display 1st admin Menu
	 * accept input from bluetooth*/

	UART_voidTxString((u8*) "1-LEDS");
    26a6:	8d e3       	ldi	r24, 0x3D	; 61
    26a8:	91 e0       	ldi	r25, 0x01	; 1
    26aa:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	UART_voidTxString((u8*) "2-Dimmer");
    26ae:	84 e4       	ldi	r24, 0x44	; 68
    26b0:	91 e0       	ldi	r25, 0x01	; 1
    26b2:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	UART_voidTxString((u8*) "3-AC");
    26b6:	8d e4       	ldi	r24, 0x4D	; 77
    26b8:	91 e0       	ldi	r25, 0x01	; 1
    26ba:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	UART_voidTxString((u8*) "4-Door");
    26be:	82 e5       	ldi	r24, 0x52	; 82
    26c0:	91 e0       	ldi	r25, 0x01	; 1
    26c2:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	UART_voidTxString((u8*) "5-Create User");
    26c6:	89 e5       	ldi	r24, 0x59	; 89
    26c8:	91 e0       	ldi	r25, 0x01	; 1
    26ca:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	UART_voidTxString((u8*) "6-Delete User");
    26ce:	87 e6       	ldi	r24, 0x67	; 103
    26d0:	91 e0       	ldi	r25, 0x01	; 1
    26d2:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	UART_voidTxString((u8*) "7-Change password");
    26d6:	85 e7       	ldi	r24, 0x75	; 117
    26d8:	91 e0       	ldi	r25, 0x01	; 1
    26da:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	UART_voidTxString((u8*) "8-Logout");
    26de:	87 e8       	ldi	r24, 0x87	; 135
    26e0:	91 e0       	ldi	r25, 0x01	; 1
    26e2:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

	UART_voidTxNewLine();
    26e6:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>

	/*Read user input for menu*/
	do {
		UART_voidRxChar(&local_u8RxData);
    26ea:	ce 01       	movw	r24, r28
    26ec:	0f 96       	adiw	r24, 0x0f	; 15
    26ee:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
	} while (local_u8RxData == NULL );
    26f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f4:	88 2f       	mov	r24, r24
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	b9 f3       	breq	.-18     	; 0x26ea <SS_voidDisplayAdminMenu+0x60>

	switch (local_u8RxData) {
    26fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26fe:	28 2f       	mov	r18, r24
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	39 8b       	std	Y+17, r19	; 0x11
    2704:	28 8b       	std	Y+16, r18	; 0x10
    2706:	88 89       	ldd	r24, Y+16	; 0x10
    2708:	99 89       	ldd	r25, Y+17	; 0x11
    270a:	84 33       	cpi	r24, 0x34	; 52
    270c:	91 05       	cpc	r25, r1
    270e:	09 f4       	brne	.+2      	; 0x2712 <SS_voidDisplayAdminMenu+0x88>
    2710:	4c c0       	rjmp	.+152    	; 0x27aa <SS_voidDisplayAdminMenu+0x120>
    2712:	28 89       	ldd	r18, Y+16	; 0x10
    2714:	39 89       	ldd	r19, Y+17	; 0x11
    2716:	25 33       	cpi	r18, 0x35	; 53
    2718:	31 05       	cpc	r19, r1
    271a:	84 f4       	brge	.+32     	; 0x273c <SS_voidDisplayAdminMenu+0xb2>
    271c:	88 89       	ldd	r24, Y+16	; 0x10
    271e:	99 89       	ldd	r25, Y+17	; 0x11
    2720:	82 33       	cpi	r24, 0x32	; 50
    2722:	91 05       	cpc	r25, r1
    2724:	61 f1       	breq	.+88     	; 0x277e <SS_voidDisplayAdminMenu+0xf4>
    2726:	28 89       	ldd	r18, Y+16	; 0x10
    2728:	39 89       	ldd	r19, Y+17	; 0x11
    272a:	23 33       	cpi	r18, 0x33	; 51
    272c:	31 05       	cpc	r19, r1
    272e:	94 f5       	brge	.+100    	; 0x2794 <SS_voidDisplayAdminMenu+0x10a>
    2730:	88 89       	ldd	r24, Y+16	; 0x10
    2732:	99 89       	ldd	r25, Y+17	; 0x11
    2734:	81 33       	cpi	r24, 0x31	; 49
    2736:	91 05       	cpc	r25, r1
    2738:	c9 f0       	breq	.+50     	; 0x276c <SS_voidDisplayAdminMenu+0xe2>
    273a:	de c0       	rjmp	.+444    	; 0x28f8 <SS_voidDisplayAdminMenu+0x26e>
    273c:	28 89       	ldd	r18, Y+16	; 0x10
    273e:	39 89       	ldd	r19, Y+17	; 0x11
    2740:	26 33       	cpi	r18, 0x36	; 54
    2742:	31 05       	cpc	r19, r1
    2744:	09 f4       	brne	.+2      	; 0x2748 <SS_voidDisplayAdminMenu+0xbe>
    2746:	43 c0       	rjmp	.+134    	; 0x27ce <SS_voidDisplayAdminMenu+0x144>
    2748:	88 89       	ldd	r24, Y+16	; 0x10
    274a:	99 89       	ldd	r25, Y+17	; 0x11
    274c:	86 33       	cpi	r24, 0x36	; 54
    274e:	91 05       	cpc	r25, r1
    2750:	ac f1       	brlt	.+106    	; 0x27bc <SS_voidDisplayAdminMenu+0x132>
    2752:	28 89       	ldd	r18, Y+16	; 0x10
    2754:	39 89       	ldd	r19, Y+17	; 0x11
    2756:	27 33       	cpi	r18, 0x37	; 55
    2758:	31 05       	cpc	r19, r1
    275a:	09 f4       	brne	.+2      	; 0x275e <SS_voidDisplayAdminMenu+0xd4>
    275c:	41 c0       	rjmp	.+130    	; 0x27e0 <SS_voidDisplayAdminMenu+0x156>
    275e:	88 89       	ldd	r24, Y+16	; 0x10
    2760:	99 89       	ldd	r25, Y+17	; 0x11
    2762:	88 33       	cpi	r24, 0x38	; 56
    2764:	91 05       	cpc	r25, r1
    2766:	09 f4       	brne	.+2      	; 0x276a <SS_voidDisplayAdminMenu+0xe0>
    2768:	44 c0       	rjmp	.+136    	; 0x27f2 <SS_voidDisplayAdminMenu+0x168>
    276a:	c6 c0       	rjmp	.+396    	; 0x28f8 <SS_voidDisplayAdminMenu+0x26e>
	case '1': // LEDS
		LS_voidStartBluetooth();
    276c:	0e 94 1e 44 	call	0x883c	; 0x883c <LS_voidStartBluetooth>
		UART_voidTxNewLine();
    2770:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
		UART_voidTxNewLine();
    2774:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
		SS_voidDisplayAdminMenu();
    2778:	0e 94 45 13 	call	0x268a	; 0x268a <SS_voidDisplayAdminMenu>
    277c:	c5 c0       	rjmp	.+394    	; 0x2908 <SS_voidDisplayAdminMenu+0x27e>
		break;
	case '2': // Dimmer
		DIMMER_voidInit();
    277e:	0e 94 86 55 	call	0xab0c	; 0xab0c <DIMMER_voidInit>
		DIMMER_voidStartBluetooth();
    2782:	0e 94 3b 57 	call	0xae76	; 0xae76 <DIMMER_voidStartBluetooth>
		UART_voidTxNewLine();
    2786:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
		UART_voidTxNewLine();
    278a:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
		SS_voidDisplayAdminMenu();
    278e:	0e 94 45 13 	call	0x268a	; 0x268a <SS_voidDisplayAdminMenu>
    2792:	ba c0       	rjmp	.+372    	; 0x2908 <SS_voidDisplayAdminMenu+0x27e>
		break;
	case '3': //AC
		AC_voidInit();
    2794:	0e 94 9c 58 	call	0xb138	; 0xb138 <AC_voidInit>
		AC_voidShowMenuBluetooth();
    2798:	0e 94 82 59 	call	0xb304	; 0xb304 <AC_voidShowMenuBluetooth>
		UART_voidTxNewLine();
    279c:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
		UART_voidTxNewLine();
    27a0:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
		SS_voidDisplayAdminMenu();
    27a4:	0e 94 45 13 	call	0x268a	; 0x268a <SS_voidDisplayAdminMenu>
    27a8:	af c0       	rjmp	.+350    	; 0x2908 <SS_voidDisplayAdminMenu+0x27e>
		break;
	case '4': // Door  ( available only in admin mode )
		DOOR_voidInit();
    27aa:	0e 94 bc 54 	call	0xa978	; 0xa978 <DOOR_voidInit>
		UART_voidTxNewLine();
    27ae:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
		UART_voidTxNewLine();
    27b2:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
		SS_voidDisplayAdminMenu();
    27b6:	0e 94 45 13 	call	0x268a	; 0x268a <SS_voidDisplayAdminMenu>
    27ba:	a6 c0       	rjmp	.+332    	; 0x2908 <SS_voidDisplayAdminMenu+0x27e>
		break;
	case '5': //Create_user
		SS_voidCreateUser();
    27bc:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <SS_voidCreateUser>
		UART_voidTxNewLine();
    27c0:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
		UART_voidTxNewLine();
    27c4:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
		SS_voidDisplayAdminMenu();
    27c8:	0e 94 45 13 	call	0x268a	; 0x268a <SS_voidDisplayAdminMenu>
    27cc:	9d c0       	rjmp	.+314    	; 0x2908 <SS_voidDisplayAdminMenu+0x27e>
		break;
	case '6': //Delete_user
		SS_voidDeleteUser();
    27ce:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <SS_voidDeleteUser>
		UART_voidTxNewLine();
    27d2:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
		UART_voidTxNewLine();
    27d6:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
		SS_voidDisplayAdminMenu();
    27da:	0e 94 45 13 	call	0x268a	; 0x268a <SS_voidDisplayAdminMenu>
    27de:	94 c0       	rjmp	.+296    	; 0x2908 <SS_voidDisplayAdminMenu+0x27e>
		break;

	case '7': //Change_password
		SS_voidChangePassword();
    27e0:	0e 94 8a 22 	call	0x4514	; 0x4514 <SS_voidChangePassword>
		UART_voidTxNewLine();
    27e4:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
		UART_voidTxNewLine();
    27e8:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
		SS_voidDisplayAdminMenu();
    27ec:	0e 94 45 13 	call	0x268a	; 0x268a <SS_voidDisplayAdminMenu>
    27f0:	8b c0       	rjmp	.+278    	; 0x2908 <SS_voidDisplayAdminMenu+0x27e>
		break;
	case '8': // logout
		local_isAuthenticated = FALSE;
    27f2:	10 92 f1 05 	sts	0x05F1, r1
		local_loggedUser = none;
    27f6:	10 92 f0 05 	sts	0x05F0, r1
		LCD_voidClear();
    27fa:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "   Log Out ");
    27fe:	80 e9       	ldi	r24, 0x90	; 144
    2800:	91 e0       	ldi	r25, 0x01	; 1
    2802:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		UART_voidTxString((u8*) "   Log Out ");
    2806:	80 e9       	ldi	r24, 0x90	; 144
    2808:	91 e0       	ldi	r25, 0x01	; 1
    280a:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	90 e8       	ldi	r25, 0x80	; 128
    2812:	ab e3       	ldi	r26, 0x3B	; 59
    2814:	b5 e4       	ldi	r27, 0x45	; 69
    2816:	8b 87       	std	Y+11, r24	; 0x0b
    2818:	9c 87       	std	Y+12, r25	; 0x0c
    281a:	ad 87       	std	Y+13, r26	; 0x0d
    281c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2820:	7c 85       	ldd	r23, Y+12	; 0x0c
    2822:	8d 85       	ldd	r24, Y+13	; 0x0d
    2824:	9e 85       	ldd	r25, Y+14	; 0x0e
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	4a e7       	ldi	r20, 0x7A	; 122
    282c:	55 e4       	ldi	r21, 0x45	; 69
    282e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	8f 83       	std	Y+7, r24	; 0x07
    2838:	98 87       	std	Y+8, r25	; 0x08
    283a:	a9 87       	std	Y+9, r26	; 0x09
    283c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    283e:	6f 81       	ldd	r22, Y+7	; 0x07
    2840:	78 85       	ldd	r23, Y+8	; 0x08
    2842:	89 85       	ldd	r24, Y+9	; 0x09
    2844:	9a 85       	ldd	r25, Y+10	; 0x0a
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e8       	ldi	r20, 0x80	; 128
    284c:	5f e3       	ldi	r21, 0x3F	; 63
    284e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2852:	88 23       	and	r24, r24
    2854:	2c f4       	brge	.+10     	; 0x2860 <SS_voidDisplayAdminMenu+0x1d6>
		__ticks = 1;
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	9e 83       	std	Y+6, r25	; 0x06
    285c:	8d 83       	std	Y+5, r24	; 0x05
    285e:	3f c0       	rjmp	.+126    	; 0x28de <SS_voidDisplayAdminMenu+0x254>
	else if (__tmp > 65535)
    2860:	6f 81       	ldd	r22, Y+7	; 0x07
    2862:	78 85       	ldd	r23, Y+8	; 0x08
    2864:	89 85       	ldd	r24, Y+9	; 0x09
    2866:	9a 85       	ldd	r25, Y+10	; 0x0a
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	3f ef       	ldi	r19, 0xFF	; 255
    286c:	4f e7       	ldi	r20, 0x7F	; 127
    286e:	57 e4       	ldi	r21, 0x47	; 71
    2870:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2874:	18 16       	cp	r1, r24
    2876:	4c f5       	brge	.+82     	; 0x28ca <SS_voidDisplayAdminMenu+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2878:	6b 85       	ldd	r22, Y+11	; 0x0b
    287a:	7c 85       	ldd	r23, Y+12	; 0x0c
    287c:	8d 85       	ldd	r24, Y+13	; 0x0d
    287e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e2       	ldi	r20, 0x20	; 32
    2886:	51 e4       	ldi	r21, 0x41	; 65
    2888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	9e 83       	std	Y+6, r25	; 0x06
    289e:	8d 83       	std	Y+5, r24	; 0x05
    28a0:	0f c0       	rjmp	.+30     	; 0x28c0 <SS_voidDisplayAdminMenu+0x236>
    28a2:	80 e9       	ldi	r24, 0x90	; 144
    28a4:	91 e0       	ldi	r25, 0x01	; 1
    28a6:	9c 83       	std	Y+4, r25	; 0x04
    28a8:	8b 83       	std	Y+3, r24	; 0x03
    28aa:	8b 81       	ldd	r24, Y+3	; 0x03
    28ac:	9c 81       	ldd	r25, Y+4	; 0x04
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <SS_voidDisplayAdminMenu+0x224>
    28b2:	9c 83       	std	Y+4, r25	; 0x04
    28b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b6:	8d 81       	ldd	r24, Y+5	; 0x05
    28b8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	9e 83       	std	Y+6, r25	; 0x06
    28be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c0:	8d 81       	ldd	r24, Y+5	; 0x05
    28c2:	9e 81       	ldd	r25, Y+6	; 0x06
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	69 f7       	brne	.-38     	; 0x28a2 <SS_voidDisplayAdminMenu+0x218>
    28c8:	14 c0       	rjmp	.+40     	; 0x28f2 <SS_voidDisplayAdminMenu+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ca:	6f 81       	ldd	r22, Y+7	; 0x07
    28cc:	78 85       	ldd	r23, Y+8	; 0x08
    28ce:	89 85       	ldd	r24, Y+9	; 0x09
    28d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9e 83       	std	Y+6, r25	; 0x06
    28dc:	8d 83       	std	Y+5, r24	; 0x05
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	9a 83       	std	Y+2, r25	; 0x02
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <SS_voidDisplayAdminMenu+0x260>
    28ee:	9a 83       	std	Y+2, r25	; 0x02
    28f0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		SS_voidLogin();
    28f2:	0e 94 a6 08 	call	0x114c	; 0x114c <SS_voidLogin>
    28f6:	08 c0       	rjmp	.+16     	; 0x2908 <SS_voidDisplayAdminMenu+0x27e>
		break;
	default:
		UART_voidTxString((u8*) "Wrong Choice");
    28f8:	8c e9       	ldi	r24, 0x9C	; 156
    28fa:	91 e0       	ldi	r25, 0x01	; 1
    28fc:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
		UART_voidTxString((u8*) "Please Try again!!");
    2900:	89 ea       	ldi	r24, 0xA9	; 169
    2902:	91 e0       	ldi	r25, 0x01	; 1
    2904:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	}

}
    2908:	61 96       	adiw	r28, 0x11	; 17
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <SS_voidDisplayUserMenu>:
 *   Parameters    : Void
 *   Return Value  : Void
 *   Remarks       : None
 **********************************************************************************************/

static void SS_voidDisplayUserMenu() {
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
    2922:	ad 97       	sbiw	r28, 0x2d	; 45
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
	u8 local_KPD1;
	LCD_voidClear();
    292e:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
	LCD_voidDisplayString((u8*) "   Choose from ");
    2932:	8c eb       	ldi	r24, 0xBC	; 188
    2934:	91 e0       	ldi	r25, 0x01	; 1
    2936:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    293a:	82 e0       	ldi	r24, 0x02	; 2
    293c:	60 e0       	ldi	r22, 0x00	; 0
    293e:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString((u8*) "     Menu");
    2942:	8c ec       	ldi	r24, 0xCC	; 204
    2944:	91 e0       	ldi	r25, 0x01	; 1
    2946:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	90 e8       	ldi	r25, 0x80	; 128
    294e:	ab e3       	ldi	r26, 0x3B	; 59
    2950:	b5 e4       	ldi	r27, 0x45	; 69
    2952:	8f a3       	std	Y+39, r24	; 0x27
    2954:	98 a7       	std	Y+40, r25	; 0x28
    2956:	a9 a7       	std	Y+41, r26	; 0x29
    2958:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295a:	6f a1       	ldd	r22, Y+39	; 0x27
    295c:	78 a5       	ldd	r23, Y+40	; 0x28
    295e:	89 a5       	ldd	r24, Y+41	; 0x29
    2960:	9a a5       	ldd	r25, Y+42	; 0x2a
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	4a e7       	ldi	r20, 0x7A	; 122
    2968:	55 e4       	ldi	r21, 0x45	; 69
    296a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	8b a3       	std	Y+35, r24	; 0x23
    2974:	9c a3       	std	Y+36, r25	; 0x24
    2976:	ad a3       	std	Y+37, r26	; 0x25
    2978:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    297a:	6b a1       	ldd	r22, Y+35	; 0x23
    297c:	7c a1       	ldd	r23, Y+36	; 0x24
    297e:	8d a1       	ldd	r24, Y+37	; 0x25
    2980:	9e a1       	ldd	r25, Y+38	; 0x26
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e8       	ldi	r20, 0x80	; 128
    2988:	5f e3       	ldi	r21, 0x3F	; 63
    298a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    298e:	88 23       	and	r24, r24
    2990:	2c f4       	brge	.+10     	; 0x299c <SS_voidDisplayUserMenu+0x82>
		__ticks = 1;
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	9a a3       	std	Y+34, r25	; 0x22
    2998:	89 a3       	std	Y+33, r24	; 0x21
    299a:	3f c0       	rjmp	.+126    	; 0x2a1a <SS_voidDisplayUserMenu+0x100>
	else if (__tmp > 65535)
    299c:	6b a1       	ldd	r22, Y+35	; 0x23
    299e:	7c a1       	ldd	r23, Y+36	; 0x24
    29a0:	8d a1       	ldd	r24, Y+37	; 0x25
    29a2:	9e a1       	ldd	r25, Y+38	; 0x26
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	3f ef       	ldi	r19, 0xFF	; 255
    29a8:	4f e7       	ldi	r20, 0x7F	; 127
    29aa:	57 e4       	ldi	r21, 0x47	; 71
    29ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b0:	18 16       	cp	r1, r24
    29b2:	4c f5       	brge	.+82     	; 0x2a06 <SS_voidDisplayUserMenu+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b4:	6f a1       	ldd	r22, Y+39	; 0x27
    29b6:	78 a5       	ldd	r23, Y+40	; 0x28
    29b8:	89 a5       	ldd	r24, Y+41	; 0x29
    29ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e2       	ldi	r20, 0x20	; 32
    29c2:	51 e4       	ldi	r21, 0x41	; 65
    29c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	bc 01       	movw	r22, r24
    29ce:	cd 01       	movw	r24, r26
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9a a3       	std	Y+34, r25	; 0x22
    29da:	89 a3       	std	Y+33, r24	; 0x21
    29dc:	0f c0       	rjmp	.+30     	; 0x29fc <SS_voidDisplayUserMenu+0xe2>
    29de:	80 e9       	ldi	r24, 0x90	; 144
    29e0:	91 e0       	ldi	r25, 0x01	; 1
    29e2:	98 a3       	std	Y+32, r25	; 0x20
    29e4:	8f 8f       	std	Y+31, r24	; 0x1f
    29e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29e8:	98 a1       	ldd	r25, Y+32	; 0x20
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <SS_voidDisplayUserMenu+0xd0>
    29ee:	98 a3       	std	Y+32, r25	; 0x20
    29f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f2:	89 a1       	ldd	r24, Y+33	; 0x21
    29f4:	9a a1       	ldd	r25, Y+34	; 0x22
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	9a a3       	std	Y+34, r25	; 0x22
    29fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fc:	89 a1       	ldd	r24, Y+33	; 0x21
    29fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	69 f7       	brne	.-38     	; 0x29de <SS_voidDisplayUserMenu+0xc4>
    2a04:	14 c0       	rjmp	.+40     	; 0x2a2e <SS_voidDisplayUserMenu+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a06:	6b a1       	ldd	r22, Y+35	; 0x23
    2a08:	7c a1       	ldd	r23, Y+36	; 0x24
    2a0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	9a a3       	std	Y+34, r25	; 0x22
    2a18:	89 a3       	std	Y+33, r24	; 0x21
    2a1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a20:	8d 8f       	std	Y+29, r24	; 0x1d
    2a22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <SS_voidDisplayUserMenu+0x10c>
    2a2a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a2c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3000);
	LCD_voidClear();
    2a2e:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>

	/*user mode :  display  user Menu
	 * accept input from keypad*/

	LCD_voidDisplayString((u8*) "1-LEDS 2-Dimmer");
    2a32:	86 ed       	ldi	r24, 0xD6	; 214
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    2a3a:	82 e0       	ldi	r24, 0x02	; 2
    2a3c:	60 e0       	ldi	r22, 0x00	; 0
    2a3e:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString((u8*) "3-AC 4-Logout");
    2a42:	86 ee       	ldi	r24, 0xE6	; 230
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
	do {
		KPD_voidGetValue(&local_KPD1);
    2a4a:	ce 01       	movw	r24, r28
    2a4c:	8b 96       	adiw	r24, 0x2b	; 43
    2a4e:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <KPD_voidGetValue>
	} while (local_KPD1 == KPD_NOT_PRESSED);
    2a52:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a54:	8f 3f       	cpi	r24, 0xFF	; 255
    2a56:	c9 f3       	breq	.-14     	; 0x2a4a <SS_voidDisplayUserMenu+0x130>

	switch (local_KPD1) {
    2a58:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	3d a7       	std	Y+45, r19	; 0x2d
    2a60:	2c a7       	std	Y+44, r18	; 0x2c
    2a62:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a64:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a66:	82 33       	cpi	r24, 0x32	; 50
    2a68:	91 05       	cpc	r25, r1
    2a6a:	d9 f0       	breq	.+54     	; 0x2aa2 <SS_voidDisplayUserMenu+0x188>
    2a6c:	2c a5       	ldd	r18, Y+44	; 0x2c
    2a6e:	3d a5       	ldd	r19, Y+45	; 0x2d
    2a70:	23 33       	cpi	r18, 0x33	; 51
    2a72:	31 05       	cpc	r19, r1
    2a74:	34 f4       	brge	.+12     	; 0x2a82 <SS_voidDisplayUserMenu+0x168>
    2a76:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a78:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a7a:	81 33       	cpi	r24, 0x31	; 49
    2a7c:	91 05       	cpc	r25, r1
    2a7e:	61 f0       	breq	.+24     	; 0x2a98 <SS_voidDisplayUserMenu+0x17e>
    2a80:	9d c0       	rjmp	.+314    	; 0x2bbc <SS_voidDisplayUserMenu+0x2a2>
    2a82:	2c a5       	ldd	r18, Y+44	; 0x2c
    2a84:	3d a5       	ldd	r19, Y+45	; 0x2d
    2a86:	23 33       	cpi	r18, 0x33	; 51
    2a88:	31 05       	cpc	r19, r1
    2a8a:	91 f0       	breq	.+36     	; 0x2ab0 <SS_voidDisplayUserMenu+0x196>
    2a8c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a8e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a90:	84 33       	cpi	r24, 0x34	; 52
    2a92:	91 05       	cpc	r25, r1
    2a94:	a1 f0       	breq	.+40     	; 0x2abe <SS_voidDisplayUserMenu+0x1a4>
    2a96:	92 c0       	rjmp	.+292    	; 0x2bbc <SS_voidDisplayUserMenu+0x2a2>
	case '1': // LED
		LS_voidStartKPD();
    2a98:	0e 94 24 38 	call	0x7048	; 0x7048 <LS_voidStartKPD>
		SS_voidDisplayUserMenu();
    2a9c:	0e 94 8d 14 	call	0x291a	; 0x291a <SS_voidDisplayUserMenu>
    2aa0:	11 c1       	rjmp	.+546    	; 0x2cc4 <SS_voidDisplayUserMenu+0x3aa>
		break;
	case '2': // Dimmer
		DIMMER_voidInit();
    2aa2:	0e 94 86 55 	call	0xab0c	; 0xab0c <DIMMER_voidInit>
		DIMMER_voidStartKPD();
    2aa6:	0e 94 96 55 	call	0xab2c	; 0xab2c <DIMMER_voidStartKPD>
		SS_voidDisplayUserMenu();
    2aaa:	0e 94 8d 14 	call	0x291a	; 0x291a <SS_voidDisplayUserMenu>
    2aae:	0a c1       	rjmp	.+532    	; 0x2cc4 <SS_voidDisplayUserMenu+0x3aa>
		break;
	case '3': // AC
		AC_voidInit();
    2ab0:	0e 94 9c 58 	call	0xb138	; 0xb138 <AC_voidInit>
		AC_voidShowMenuKPD();
    2ab4:	0e 94 b6 58 	call	0xb16c	; 0xb16c <AC_voidShowMenuKPD>
		SS_voidDisplayUserMenu();
    2ab8:	0e 94 8d 14 	call	0x291a	; 0x291a <SS_voidDisplayUserMenu>
    2abc:	03 c1       	rjmp	.+518    	; 0x2cc4 <SS_voidDisplayUserMenu+0x3aa>
		break;
	case '4': // logout
		local_isAuthenticated = FALSE;
    2abe:	10 92 f1 05 	sts	0x05F1, r1
		local_loggedUser = none;
    2ac2:	10 92 f0 05 	sts	0x05F0, r1
		LCD_voidClear();
    2ac6:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "   Log Out ");
    2aca:	80 e9       	ldi	r24, 0x90	; 144
    2acc:	91 e0       	ldi	r25, 0x01	; 1
    2ace:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e8       	ldi	r25, 0x80	; 128
    2ad6:	ab e3       	ldi	r26, 0x3B	; 59
    2ad8:	b5 e4       	ldi	r27, 0x45	; 69
    2ada:	89 8f       	std	Y+25, r24	; 0x19
    2adc:	9a 8f       	std	Y+26, r25	; 0x1a
    2ade:	ab 8f       	std	Y+27, r26	; 0x1b
    2ae0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4a e7       	ldi	r20, 0x7A	; 122
    2af0:	55 e4       	ldi	r21, 0x45	; 69
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	8d 8b       	std	Y+21, r24	; 0x15
    2afc:	9e 8b       	std	Y+22, r25	; 0x16
    2afe:	af 8b       	std	Y+23, r26	; 0x17
    2b00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b02:	6d 89       	ldd	r22, Y+21	; 0x15
    2b04:	7e 89       	ldd	r23, Y+22	; 0x16
    2b06:	8f 89       	ldd	r24, Y+23	; 0x17
    2b08:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e8       	ldi	r20, 0x80	; 128
    2b10:	5f e3       	ldi	r21, 0x3F	; 63
    2b12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b16:	88 23       	and	r24, r24
    2b18:	2c f4       	brge	.+10     	; 0x2b24 <SS_voidDisplayUserMenu+0x20a>
		__ticks = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9c 8b       	std	Y+20, r25	; 0x14
    2b20:	8b 8b       	std	Y+19, r24	; 0x13
    2b22:	3f c0       	rjmp	.+126    	; 0x2ba2 <SS_voidDisplayUserMenu+0x288>
	else if (__tmp > 65535)
    2b24:	6d 89       	ldd	r22, Y+21	; 0x15
    2b26:	7e 89       	ldd	r23, Y+22	; 0x16
    2b28:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	4c f5       	brge	.+82     	; 0x2b8e <SS_voidDisplayUserMenu+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9c 8b       	std	Y+20, r25	; 0x14
    2b62:	8b 8b       	std	Y+19, r24	; 0x13
    2b64:	0f c0       	rjmp	.+30     	; 0x2b84 <SS_voidDisplayUserMenu+0x26a>
    2b66:	80 e9       	ldi	r24, 0x90	; 144
    2b68:	91 e0       	ldi	r25, 0x01	; 1
    2b6a:	9a 8b       	std	Y+18, r25	; 0x12
    2b6c:	89 8b       	std	Y+17, r24	; 0x11
    2b6e:	89 89       	ldd	r24, Y+17	; 0x11
    2b70:	9a 89       	ldd	r25, Y+18	; 0x12
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <SS_voidDisplayUserMenu+0x258>
    2b76:	9a 8b       	std	Y+18, r25	; 0x12
    2b78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	9c 8b       	std	Y+20, r25	; 0x14
    2b82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b84:	8b 89       	ldd	r24, Y+19	; 0x13
    2b86:	9c 89       	ldd	r25, Y+20	; 0x14
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	69 f7       	brne	.-38     	; 0x2b66 <SS_voidDisplayUserMenu+0x24c>
    2b8c:	14 c0       	rjmp	.+40     	; 0x2bb6 <SS_voidDisplayUserMenu+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b90:	7e 89       	ldd	r23, Y+22	; 0x16
    2b92:	8f 89       	ldd	r24, Y+23	; 0x17
    2b94:	98 8d       	ldd	r25, Y+24	; 0x18
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	9c 8b       	std	Y+20, r25	; 0x14
    2ba0:	8b 8b       	std	Y+19, r24	; 0x13
    2ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba6:	98 8b       	std	Y+16, r25	; 0x10
    2ba8:	8f 87       	std	Y+15, r24	; 0x0f
    2baa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bac:	98 89       	ldd	r25, Y+16	; 0x10
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <SS_voidDisplayUserMenu+0x294>
    2bb2:	98 8b       	std	Y+16, r25	; 0x10
    2bb4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3000);
		SS_voidLogin();
    2bb6:	0e 94 a6 08 	call	0x114c	; 0x114c <SS_voidLogin>
    2bba:	84 c0       	rjmp	.+264    	; 0x2cc4 <SS_voidDisplayUserMenu+0x3aa>
		break;
	default: //Invalid Entry
		LCD_voidClear();
    2bbc:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "Wrong Choice");
    2bc0:	8c e9       	ldi	r24, 0x9C	; 156
    2bc2:	91 e0       	ldi	r25, 0x01	; 1
    2bc4:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    2bc8:	82 e0       	ldi	r24, 0x02	; 2
    2bca:	60 e0       	ldi	r22, 0x00	; 0
    2bcc:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString((u8*) "Please Try again!!");
    2bd0:	89 ea       	ldi	r24, 0xA9	; 169
    2bd2:	91 e0       	ldi	r25, 0x01	; 1
    2bd4:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	90 e8       	ldi	r25, 0x80	; 128
    2bdc:	ab eb       	ldi	r26, 0xBB	; 187
    2bde:	b4 e4       	ldi	r27, 0x44	; 68
    2be0:	8b 87       	std	Y+11, r24	; 0x0b
    2be2:	9c 87       	std	Y+12, r25	; 0x0c
    2be4:	ad 87       	std	Y+13, r26	; 0x0d
    2be6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	4a e7       	ldi	r20, 0x7A	; 122
    2bf6:	55 e4       	ldi	r21, 0x45	; 69
    2bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	8f 83       	std	Y+7, r24	; 0x07
    2c02:	98 87       	std	Y+8, r25	; 0x08
    2c04:	a9 87       	std	Y+9, r26	; 0x09
    2c06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c08:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0a:	78 85       	ldd	r23, Y+8	; 0x08
    2c0c:	89 85       	ldd	r24, Y+9	; 0x09
    2c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	40 e8       	ldi	r20, 0x80	; 128
    2c16:	5f e3       	ldi	r21, 0x3F	; 63
    2c18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c1c:	88 23       	and	r24, r24
    2c1e:	2c f4       	brge	.+10     	; 0x2c2a <SS_voidDisplayUserMenu+0x310>
		__ticks = 1;
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	9e 83       	std	Y+6, r25	; 0x06
    2c26:	8d 83       	std	Y+5, r24	; 0x05
    2c28:	3f c0       	rjmp	.+126    	; 0x2ca8 <SS_voidDisplayUserMenu+0x38e>
	else if (__tmp > 65535)
    2c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2c:	78 85       	ldd	r23, Y+8	; 0x08
    2c2e:	89 85       	ldd	r24, Y+9	; 0x09
    2c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	3f ef       	ldi	r19, 0xFF	; 255
    2c36:	4f e7       	ldi	r20, 0x7F	; 127
    2c38:	57 e4       	ldi	r21, 0x47	; 71
    2c3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c3e:	18 16       	cp	r1, r24
    2c40:	4c f5       	brge	.+82     	; 0x2c94 <SS_voidDisplayUserMenu+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e2       	ldi	r20, 0x20	; 32
    2c50:	51 e4       	ldi	r21, 0x41	; 65
    2c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	cd 01       	movw	r24, r26
    2c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	9e 83       	std	Y+6, r25	; 0x06
    2c68:	8d 83       	std	Y+5, r24	; 0x05
    2c6a:	0f c0       	rjmp	.+30     	; 0x2c8a <SS_voidDisplayUserMenu+0x370>
    2c6c:	80 e9       	ldi	r24, 0x90	; 144
    2c6e:	91 e0       	ldi	r25, 0x01	; 1
    2c70:	9c 83       	std	Y+4, r25	; 0x04
    2c72:	8b 83       	std	Y+3, r24	; 0x03
    2c74:	8b 81       	ldd	r24, Y+3	; 0x03
    2c76:	9c 81       	ldd	r25, Y+4	; 0x04
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	f1 f7       	brne	.-4      	; 0x2c78 <SS_voidDisplayUserMenu+0x35e>
    2c7c:	9c 83       	std	Y+4, r25	; 0x04
    2c7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c80:	8d 81       	ldd	r24, Y+5	; 0x05
    2c82:	9e 81       	ldd	r25, Y+6	; 0x06
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	69 f7       	brne	.-38     	; 0x2c6c <SS_voidDisplayUserMenu+0x352>
    2c92:	14 c0       	rjmp	.+40     	; 0x2cbc <SS_voidDisplayUserMenu+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c94:	6f 81       	ldd	r22, Y+7	; 0x07
    2c96:	78 85       	ldd	r23, Y+8	; 0x08
    2c98:	89 85       	ldd	r24, Y+9	; 0x09
    2c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	9e 83       	std	Y+6, r25	; 0x06
    2ca6:	8d 83       	std	Y+5, r24	; 0x05
    2ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    2caa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cac:	9a 83       	std	Y+2, r25	; 0x02
    2cae:	89 83       	std	Y+1, r24	; 0x01
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <SS_voidDisplayUserMenu+0x39a>
    2cb8:	9a 83       	std	Y+2, r25	; 0x02
    2cba:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);
		LCD_voidClear();
    2cbc:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		SS_voidDisplayUserMenu();
    2cc0:	0e 94 8d 14 	call	0x291a	; 0x291a <SS_voidDisplayUserMenu>
	}

}
    2cc4:	ad 96       	adiw	r28, 0x2d	; 45
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	cf 91       	pop	r28
    2cd2:	df 91       	pop	r29
    2cd4:	08 95       	ret

00002cd6 <SS_voidCreateUser>:
 *   Parameters    : Void
 *   Return Value  : Void
 *   Remarks       : None
 **********************************************************************************************/

static void SS_voidCreateUser() {
    2cd6:	df 93       	push	r29
    2cd8:	cf 93       	push	r28
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
    2cde:	c0 54       	subi	r28, 0x40	; 64
    2ce0:	d0 40       	sbci	r29, 0x00	; 0
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
	u8 EEPROM_check_Position;
	u8 EEPROM_password_Position;
	u8 local_u8RxData;
	users local_UserSlot;

	LCD_voidClear();
    2cec:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>

	/*check empty user slot*/
	SS_voidSelectEmptySlot(&local_UserSlot);
    2cf0:	ce 01       	movw	r24, r28
    2cf2:	ce 96       	adiw	r24, 0x3e	; 62
    2cf4:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <SS_voidSelectEmptySlot>
	/*set position in EEPROM for empty slot*/
	switch (local_UserSlot) {
    2cf8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cfa:	28 2f       	mov	r18, r24
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	21 96       	adiw	r28, 0x01	; 1
    2d00:	3f af       	std	Y+63, r19	; 0x3f
    2d02:	2e af       	std	Y+62, r18	; 0x3e
    2d04:	21 97       	sbiw	r28, 0x01	; 1
    2d06:	21 96       	adiw	r28, 0x01	; 1
    2d08:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d0c:	21 97       	sbiw	r28, 0x01	; 1
    2d0e:	83 30       	cpi	r24, 0x03	; 3
    2d10:	91 05       	cpc	r25, r1
    2d12:	a9 f0       	breq	.+42     	; 0x2d3e <SS_voidCreateUser+0x68>
    2d14:	21 96       	adiw	r28, 0x01	; 1
    2d16:	2e ad       	ldd	r18, Y+62	; 0x3e
    2d18:	3f ad       	ldd	r19, Y+63	; 0x3f
    2d1a:	21 97       	sbiw	r28, 0x01	; 1
    2d1c:	24 30       	cpi	r18, 0x04	; 4
    2d1e:	31 05       	cpc	r19, r1
    2d20:	a9 f0       	breq	.+42     	; 0x2d4c <SS_voidCreateUser+0x76>
    2d22:	21 96       	adiw	r28, 0x01	; 1
    2d24:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d26:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d28:	21 97       	sbiw	r28, 0x01	; 1
    2d2a:	82 30       	cpi	r24, 0x02	; 2
    2d2c:	91 05       	cpc	r25, r1
    2d2e:	a9 f4       	brne	.+42     	; 0x2d5a <SS_voidCreateUser+0x84>
	case user1:
		EEPROM_check_Position = EEPROM_user1_check;
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	8a af       	std	Y+58, r24	; 0x3a
		EEPROM_user_Position = EEPROM_user1_username;
    2d34:	89 e0       	ldi	r24, 0x09	; 9
    2d36:	8b af       	std	Y+59, r24	; 0x3b
		EEPROM_password_Position = EEPROM_user1_password;
    2d38:	8e e0       	ldi	r24, 0x0E	; 14
    2d3a:	89 af       	std	Y+57, r24	; 0x39
    2d3c:	13 c0       	rjmp	.+38     	; 0x2d64 <SS_voidCreateUser+0x8e>
		break;
	case user2:
		EEPROM_check_Position = EEPROM_user2_check;
    2d3e:	82 e0       	ldi	r24, 0x02	; 2
    2d40:	8a af       	std	Y+58, r24	; 0x3a
		EEPROM_user_Position = EEPROM_user2_username;
    2d42:	83 e1       	ldi	r24, 0x13	; 19
    2d44:	8b af       	std	Y+59, r24	; 0x3b
		EEPROM_password_Position = EEPROM_user2_password;
    2d46:	88 e1       	ldi	r24, 0x18	; 24
    2d48:	89 af       	std	Y+57, r24	; 0x39
    2d4a:	0c c0       	rjmp	.+24     	; 0x2d64 <SS_voidCreateUser+0x8e>
		break;
	case user3:
		EEPROM_check_Position = EEPROM_user3_check;
    2d4c:	83 e0       	ldi	r24, 0x03	; 3
    2d4e:	8a af       	std	Y+58, r24	; 0x3a
		EEPROM_user_Position = EEPROM_user3_username;
    2d50:	8d e1       	ldi	r24, 0x1D	; 29
    2d52:	8b af       	std	Y+59, r24	; 0x3b
		EEPROM_password_Position = EEPROM_user3_password;
    2d54:	82 e2       	ldi	r24, 0x22	; 34
    2d56:	89 af       	std	Y+57, r24	; 0x39
    2d58:	05 c0       	rjmp	.+10     	; 0x2d64 <SS_voidCreateUser+0x8e>
		break;
	default:
		UART_voidTxString((u8*) "no empty slot");
    2d5a:	84 ef       	ldi	r24, 0xF4	; 244
    2d5c:	91 e0       	ldi	r25, 0x01	; 1
    2d5e:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    2d62:	1c c2       	rjmp	.+1080   	; 0x319c <SS_voidCreateUser+0x4c6>

		return;

	}

	UART_voidTxString((u8*) "Type username");
    2d64:	82 e0       	ldi	r24, 0x02	; 2
    2d66:	92 e0       	ldi	r25, 0x02	; 2
    2d68:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

	/*read username from UART and save in eeprom*/
	for (counter = 0; counter < Maximum_password; counter++) {
    2d6c:	1c ae       	std	Y+60, r1	; 0x3c
    2d6e:	88 c0       	rjmp	.+272    	; 0x2e80 <SS_voidCreateUser+0x1aa>
		do {
			UART_voidRxChar(&local_u8RxData);
    2d70:	ce 01       	movw	r24, r28
    2d72:	cd 96       	adiw	r24, 0x3d	; 61
    2d74:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
		} while (local_u8RxData == NULL );
    2d78:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d7a:	88 2f       	mov	r24, r24
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	00 97       	sbiw	r24, 0x00	; 0
    2d80:	b9 f3       	breq	.-18     	; 0x2d70 <SS_voidCreateUser+0x9a>

		EEPROM_voidWriteByte(EEPROM_user_Position, local_u8RxData);
    2d82:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d84:	88 2f       	mov	r24, r24
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	2d ad       	ldd	r18, Y+61	; 0x3d
    2d8a:	62 2f       	mov	r22, r18
    2d8c:	0e 94 87 51 	call	0xa30e	; 0xa30e <EEPROM_voidWriteByte>
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	a0 e2       	ldi	r26, 0x20	; 32
    2d96:	b1 e4       	ldi	r27, 0x41	; 65
    2d98:	8d ab       	std	Y+53, r24	; 0x35
    2d9a:	9e ab       	std	Y+54, r25	; 0x36
    2d9c:	af ab       	std	Y+55, r26	; 0x37
    2d9e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da0:	6d a9       	ldd	r22, Y+53	; 0x35
    2da2:	7e a9       	ldd	r23, Y+54	; 0x36
    2da4:	8f a9       	ldd	r24, Y+55	; 0x37
    2da6:	98 ad       	ldd	r25, Y+56	; 0x38
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	4a e7       	ldi	r20, 0x7A	; 122
    2dae:	55 e4       	ldi	r21, 0x45	; 69
    2db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	89 ab       	std	Y+49, r24	; 0x31
    2dba:	9a ab       	std	Y+50, r25	; 0x32
    2dbc:	ab ab       	std	Y+51, r26	; 0x33
    2dbe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dc0:	69 a9       	ldd	r22, Y+49	; 0x31
    2dc2:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc4:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc6:	9c a9       	ldd	r25, Y+52	; 0x34
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	40 e8       	ldi	r20, 0x80	; 128
    2dce:	5f e3       	ldi	r21, 0x3F	; 63
    2dd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dd4:	88 23       	and	r24, r24
    2dd6:	2c f4       	brge	.+10     	; 0x2de2 <SS_voidCreateUser+0x10c>
		__ticks = 1;
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	98 ab       	std	Y+48, r25	; 0x30
    2dde:	8f a7       	std	Y+47, r24	; 0x2f
    2de0:	3f c0       	rjmp	.+126    	; 0x2e60 <SS_voidCreateUser+0x18a>
	else if (__tmp > 65535)
    2de2:	69 a9       	ldd	r22, Y+49	; 0x31
    2de4:	7a a9       	ldd	r23, Y+50	; 0x32
    2de6:	8b a9       	ldd	r24, Y+51	; 0x33
    2de8:	9c a9       	ldd	r25, Y+52	; 0x34
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	3f ef       	ldi	r19, 0xFF	; 255
    2dee:	4f e7       	ldi	r20, 0x7F	; 127
    2df0:	57 e4       	ldi	r21, 0x47	; 71
    2df2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2df6:	18 16       	cp	r1, r24
    2df8:	4c f5       	brge	.+82     	; 0x2e4c <SS_voidCreateUser+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfa:	6d a9       	ldd	r22, Y+53	; 0x35
    2dfc:	7e a9       	ldd	r23, Y+54	; 0x36
    2dfe:	8f a9       	ldd	r24, Y+55	; 0x37
    2e00:	98 ad       	ldd	r25, Y+56	; 0x38
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e2       	ldi	r20, 0x20	; 32
    2e08:	51 e4       	ldi	r21, 0x41	; 65
    2e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	bc 01       	movw	r22, r24
    2e14:	cd 01       	movw	r24, r26
    2e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	98 ab       	std	Y+48, r25	; 0x30
    2e20:	8f a7       	std	Y+47, r24	; 0x2f
    2e22:	0f c0       	rjmp	.+30     	; 0x2e42 <SS_voidCreateUser+0x16c>
    2e24:	80 e9       	ldi	r24, 0x90	; 144
    2e26:	91 e0       	ldi	r25, 0x01	; 1
    2e28:	9e a7       	std	Y+46, r25	; 0x2e
    2e2a:	8d a7       	std	Y+45, r24	; 0x2d
    2e2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	f1 f7       	brne	.-4      	; 0x2e30 <SS_voidCreateUser+0x15a>
    2e34:	9e a7       	std	Y+46, r25	; 0x2e
    2e36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e38:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e3a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	98 ab       	std	Y+48, r25	; 0x30
    2e40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e42:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e44:	98 a9       	ldd	r25, Y+48	; 0x30
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	69 f7       	brne	.-38     	; 0x2e24 <SS_voidCreateUser+0x14e>
    2e4a:	14 c0       	rjmp	.+40     	; 0x2e74 <SS_voidCreateUser+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e4e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e50:	8b a9       	ldd	r24, Y+51	; 0x33
    2e52:	9c a9       	ldd	r25, Y+52	; 0x34
    2e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	98 ab       	std	Y+48, r25	; 0x30
    2e5e:	8f a7       	std	Y+47, r24	; 0x2f
    2e60:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e62:	98 a9       	ldd	r25, Y+48	; 0x30
    2e64:	9c a7       	std	Y+44, r25	; 0x2c
    2e66:	8b a7       	std	Y+43, r24	; 0x2b
    2e68:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e6c:	01 97       	sbiw	r24, 0x01	; 1
    2e6e:	f1 f7       	brne	.-4      	; 0x2e6c <SS_voidCreateUser+0x196>
    2e70:	9c a7       	std	Y+44, r25	; 0x2c
    2e72:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		EEPROM_user_Position++;
    2e74:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e76:	8f 5f       	subi	r24, 0xFF	; 255
    2e78:	8b af       	std	Y+59, r24	; 0x3b
	}

	UART_voidTxString((u8*) "Type username");

	/*read username from UART and save in eeprom*/
	for (counter = 0; counter < Maximum_password; counter++) {
    2e7a:	8c ad       	ldd	r24, Y+60	; 0x3c
    2e7c:	8f 5f       	subi	r24, 0xFF	; 255
    2e7e:	8c af       	std	Y+60, r24	; 0x3c
    2e80:	8c ad       	ldd	r24, Y+60	; 0x3c
    2e82:	85 30       	cpi	r24, 0x05	; 5
    2e84:	08 f4       	brcc	.+2      	; 0x2e88 <SS_voidCreateUser+0x1b2>
    2e86:	74 cf       	rjmp	.-280    	; 0x2d70 <SS_voidCreateUser+0x9a>
		EEPROM_user_Position++;

	}

	/*read password from UART and save in eeprom*/
	LCD_voidClear();
    2e88:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
	UART_voidTxString((u8*) "Type password");
    2e8c:	80 e1       	ldi	r24, 0x10	; 16
    2e8e:	92 e0       	ldi	r25, 0x02	; 2
    2e90:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

	for (counter = 0; counter < Maximum_password; counter++) {
    2e94:	1c ae       	std	Y+60, r1	; 0x3c
    2e96:	88 c0       	rjmp	.+272    	; 0x2fa8 <SS_voidCreateUser+0x2d2>
		do {
			UART_voidRxChar(&local_u8RxData);
    2e98:	ce 01       	movw	r24, r28
    2e9a:	cd 96       	adiw	r24, 0x3d	; 61
    2e9c:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
		} while (local_u8RxData == NULL );
    2ea0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ea2:	88 2f       	mov	r24, r24
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	00 97       	sbiw	r24, 0x00	; 0
    2ea8:	b9 f3       	breq	.-18     	; 0x2e98 <SS_voidCreateUser+0x1c2>

		EEPROM_voidWriteByte(EEPROM_password_Position, local_u8RxData);
    2eaa:	89 ad       	ldd	r24, Y+57	; 0x39
    2eac:	88 2f       	mov	r24, r24
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	2d ad       	ldd	r18, Y+61	; 0x3d
    2eb2:	62 2f       	mov	r22, r18
    2eb4:	0e 94 87 51 	call	0xa30e	; 0xa30e <EEPROM_voidWriteByte>
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	a0 e2       	ldi	r26, 0x20	; 32
    2ebe:	b1 e4       	ldi	r27, 0x41	; 65
    2ec0:	8f a3       	std	Y+39, r24	; 0x27
    2ec2:	98 a7       	std	Y+40, r25	; 0x28
    2ec4:	a9 a7       	std	Y+41, r26	; 0x29
    2ec6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec8:	6f a1       	ldd	r22, Y+39	; 0x27
    2eca:	78 a5       	ldd	r23, Y+40	; 0x28
    2ecc:	89 a5       	ldd	r24, Y+41	; 0x29
    2ece:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	4a e7       	ldi	r20, 0x7A	; 122
    2ed6:	55 e4       	ldi	r21, 0x45	; 69
    2ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	8b a3       	std	Y+35, r24	; 0x23
    2ee2:	9c a3       	std	Y+36, r25	; 0x24
    2ee4:	ad a3       	std	Y+37, r26	; 0x25
    2ee6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ee8:	6b a1       	ldd	r22, Y+35	; 0x23
    2eea:	7c a1       	ldd	r23, Y+36	; 0x24
    2eec:	8d a1       	ldd	r24, Y+37	; 0x25
    2eee:	9e a1       	ldd	r25, Y+38	; 0x26
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e8       	ldi	r20, 0x80	; 128
    2ef6:	5f e3       	ldi	r21, 0x3F	; 63
    2ef8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2efc:	88 23       	and	r24, r24
    2efe:	2c f4       	brge	.+10     	; 0x2f0a <SS_voidCreateUser+0x234>
		__ticks = 1;
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	9a a3       	std	Y+34, r25	; 0x22
    2f06:	89 a3       	std	Y+33, r24	; 0x21
    2f08:	3f c0       	rjmp	.+126    	; 0x2f88 <SS_voidCreateUser+0x2b2>
	else if (__tmp > 65535)
    2f0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f10:	9e a1       	ldd	r25, Y+38	; 0x26
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	3f ef       	ldi	r19, 0xFF	; 255
    2f16:	4f e7       	ldi	r20, 0x7F	; 127
    2f18:	57 e4       	ldi	r21, 0x47	; 71
    2f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f1e:	18 16       	cp	r1, r24
    2f20:	4c f5       	brge	.+82     	; 0x2f74 <SS_voidCreateUser+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f22:	6f a1       	ldd	r22, Y+39	; 0x27
    2f24:	78 a5       	ldd	r23, Y+40	; 0x28
    2f26:	89 a5       	ldd	r24, Y+41	; 0x29
    2f28:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	40 e2       	ldi	r20, 0x20	; 32
    2f30:	51 e4       	ldi	r21, 0x41	; 65
    2f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	9a a3       	std	Y+34, r25	; 0x22
    2f48:	89 a3       	std	Y+33, r24	; 0x21
    2f4a:	0f c0       	rjmp	.+30     	; 0x2f6a <SS_voidCreateUser+0x294>
    2f4c:	80 e9       	ldi	r24, 0x90	; 144
    2f4e:	91 e0       	ldi	r25, 0x01	; 1
    2f50:	98 a3       	std	Y+32, r25	; 0x20
    2f52:	8f 8f       	std	Y+31, r24	; 0x1f
    2f54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f56:	98 a1       	ldd	r25, Y+32	; 0x20
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	f1 f7       	brne	.-4      	; 0x2f58 <SS_voidCreateUser+0x282>
    2f5c:	98 a3       	std	Y+32, r25	; 0x20
    2f5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f60:	89 a1       	ldd	r24, Y+33	; 0x21
    2f62:	9a a1       	ldd	r25, Y+34	; 0x22
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	9a a3       	std	Y+34, r25	; 0x22
    2f68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	69 f7       	brne	.-38     	; 0x2f4c <SS_voidCreateUser+0x276>
    2f72:	14 c0       	rjmp	.+40     	; 0x2f9c <SS_voidCreateUser+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f74:	6b a1       	ldd	r22, Y+35	; 0x23
    2f76:	7c a1       	ldd	r23, Y+36	; 0x24
    2f78:	8d a1       	ldd	r24, Y+37	; 0x25
    2f7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	9a a3       	std	Y+34, r25	; 0x22
    2f86:	89 a3       	std	Y+33, r24	; 0x21
    2f88:	89 a1       	ldd	r24, Y+33	; 0x21
    2f8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f8c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f8e:	8d 8f       	std	Y+29, r24	; 0x1d
    2f90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	f1 f7       	brne	.-4      	; 0x2f94 <SS_voidCreateUser+0x2be>
    2f98:	9e 8f       	std	Y+30, r25	; 0x1e
    2f9a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		EEPROM_password_Position++;
    2f9c:	89 ad       	ldd	r24, Y+57	; 0x39
    2f9e:	8f 5f       	subi	r24, 0xFF	; 255
    2fa0:	89 af       	std	Y+57, r24	; 0x39

	/*read password from UART and save in eeprom*/
	LCD_voidClear();
	UART_voidTxString((u8*) "Type password");

	for (counter = 0; counter < Maximum_password; counter++) {
    2fa2:	8c ad       	ldd	r24, Y+60	; 0x3c
    2fa4:	8f 5f       	subi	r24, 0xFF	; 255
    2fa6:	8c af       	std	Y+60, r24	; 0x3c
    2fa8:	8c ad       	ldd	r24, Y+60	; 0x3c
    2faa:	85 30       	cpi	r24, 0x05	; 5
    2fac:	08 f4       	brcc	.+2      	; 0x2fb0 <SS_voidCreateUser+0x2da>
    2fae:	74 cf       	rjmp	.-280    	; 0x2e98 <SS_voidCreateUser+0x1c2>
		EEPROM_password_Position++;

	}

	/* write index of this user  = 1 to indicate that user is saved in this slot*/
	EEPROM_voidWriteByte(EEPROM_check_Position, 1);
    2fb0:	8a ad       	ldd	r24, Y+58	; 0x3a
    2fb2:	88 2f       	mov	r24, r24
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	61 e0       	ldi	r22, 0x01	; 1
    2fb8:	0e 94 87 51 	call	0xa30e	; 0xa30e <EEPROM_voidWriteByte>
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	a0 e2       	ldi	r26, 0x20	; 32
    2fc2:	b1 e4       	ldi	r27, 0x41	; 65
    2fc4:	89 8f       	std	Y+25, r24	; 0x19
    2fc6:	9a 8f       	std	Y+26, r25	; 0x1a
    2fc8:	ab 8f       	std	Y+27, r26	; 0x1b
    2fca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fcc:	69 8d       	ldd	r22, Y+25	; 0x19
    2fce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	4a e7       	ldi	r20, 0x7A	; 122
    2fda:	55 e4       	ldi	r21, 0x45	; 69
    2fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	8d 8b       	std	Y+21, r24	; 0x15
    2fe6:	9e 8b       	std	Y+22, r25	; 0x16
    2fe8:	af 8b       	std	Y+23, r26	; 0x17
    2fea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fec:	6d 89       	ldd	r22, Y+21	; 0x15
    2fee:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e8       	ldi	r20, 0x80	; 128
    2ffa:	5f e3       	ldi	r21, 0x3F	; 63
    2ffc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3000:	88 23       	and	r24, r24
    3002:	2c f4       	brge	.+10     	; 0x300e <SS_voidCreateUser+0x338>
		__ticks = 1;
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	9c 8b       	std	Y+20, r25	; 0x14
    300a:	8b 8b       	std	Y+19, r24	; 0x13
    300c:	3f c0       	rjmp	.+126    	; 0x308c <SS_voidCreateUser+0x3b6>
	else if (__tmp > 65535)
    300e:	6d 89       	ldd	r22, Y+21	; 0x15
    3010:	7e 89       	ldd	r23, Y+22	; 0x16
    3012:	8f 89       	ldd	r24, Y+23	; 0x17
    3014:	98 8d       	ldd	r25, Y+24	; 0x18
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	3f ef       	ldi	r19, 0xFF	; 255
    301a:	4f e7       	ldi	r20, 0x7F	; 127
    301c:	57 e4       	ldi	r21, 0x47	; 71
    301e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3022:	18 16       	cp	r1, r24
    3024:	4c f5       	brge	.+82     	; 0x3078 <SS_voidCreateUser+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3026:	69 8d       	ldd	r22, Y+25	; 0x19
    3028:	7a 8d       	ldd	r23, Y+26	; 0x1a
    302a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    302c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e2       	ldi	r20, 0x20	; 32
    3034:	51 e4       	ldi	r21, 0x41	; 65
    3036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	bc 01       	movw	r22, r24
    3040:	cd 01       	movw	r24, r26
    3042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	9c 8b       	std	Y+20, r25	; 0x14
    304c:	8b 8b       	std	Y+19, r24	; 0x13
    304e:	0f c0       	rjmp	.+30     	; 0x306e <SS_voidCreateUser+0x398>
    3050:	80 e9       	ldi	r24, 0x90	; 144
    3052:	91 e0       	ldi	r25, 0x01	; 1
    3054:	9a 8b       	std	Y+18, r25	; 0x12
    3056:	89 8b       	std	Y+17, r24	; 0x11
    3058:	89 89       	ldd	r24, Y+17	; 0x11
    305a:	9a 89       	ldd	r25, Y+18	; 0x12
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	f1 f7       	brne	.-4      	; 0x305c <SS_voidCreateUser+0x386>
    3060:	9a 8b       	std	Y+18, r25	; 0x12
    3062:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3064:	8b 89       	ldd	r24, Y+19	; 0x13
    3066:	9c 89       	ldd	r25, Y+20	; 0x14
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	9c 8b       	std	Y+20, r25	; 0x14
    306c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306e:	8b 89       	ldd	r24, Y+19	; 0x13
    3070:	9c 89       	ldd	r25, Y+20	; 0x14
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	69 f7       	brne	.-38     	; 0x3050 <SS_voidCreateUser+0x37a>
    3076:	14 c0       	rjmp	.+40     	; 0x30a0 <SS_voidCreateUser+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3078:	6d 89       	ldd	r22, Y+21	; 0x15
    307a:	7e 89       	ldd	r23, Y+22	; 0x16
    307c:	8f 89       	ldd	r24, Y+23	; 0x17
    307e:	98 8d       	ldd	r25, Y+24	; 0x18
    3080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	9c 8b       	std	Y+20, r25	; 0x14
    308a:	8b 8b       	std	Y+19, r24	; 0x13
    308c:	8b 89       	ldd	r24, Y+19	; 0x13
    308e:	9c 89       	ldd	r25, Y+20	; 0x14
    3090:	98 8b       	std	Y+16, r25	; 0x10
    3092:	8f 87       	std	Y+15, r24	; 0x0f
    3094:	8f 85       	ldd	r24, Y+15	; 0x0f
    3096:	98 89       	ldd	r25, Y+16	; 0x10
    3098:	01 97       	sbiw	r24, 0x01	; 1
    309a:	f1 f7       	brne	.-4      	; 0x3098 <SS_voidCreateUser+0x3c2>
    309c:	98 8b       	std	Y+16, r25	; 0x10
    309e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	LCD_voidClear();
    30a0:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
	LCD_voidDisplayString((u8*) "User Created");
    30a4:	8e e1       	ldi	r24, 0x1E	; 30
    30a6:	92 e0       	ldi	r25, 0x02	; 2
    30a8:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
	UART_voidTxString((u8*) "User Created");
    30ac:	8e e1       	ldi	r24, 0x1E	; 30
    30ae:	92 e0       	ldi	r25, 0x02	; 2
    30b0:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	90 e8       	ldi	r25, 0x80	; 128
    30b8:	ab e3       	ldi	r26, 0x3B	; 59
    30ba:	b5 e4       	ldi	r27, 0x45	; 69
    30bc:	8b 87       	std	Y+11, r24	; 0x0b
    30be:	9c 87       	std	Y+12, r25	; 0x0c
    30c0:	ad 87       	std	Y+13, r26	; 0x0d
    30c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	4a e7       	ldi	r20, 0x7A	; 122
    30d2:	55 e4       	ldi	r21, 0x45	; 69
    30d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	8f 83       	std	Y+7, r24	; 0x07
    30de:	98 87       	std	Y+8, r25	; 0x08
    30e0:	a9 87       	std	Y+9, r26	; 0x09
    30e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30e4:	6f 81       	ldd	r22, Y+7	; 0x07
    30e6:	78 85       	ldd	r23, Y+8	; 0x08
    30e8:	89 85       	ldd	r24, Y+9	; 0x09
    30ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	40 e8       	ldi	r20, 0x80	; 128
    30f2:	5f e3       	ldi	r21, 0x3F	; 63
    30f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f8:	88 23       	and	r24, r24
    30fa:	2c f4       	brge	.+10     	; 0x3106 <SS_voidCreateUser+0x430>
		__ticks = 1;
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	9e 83       	std	Y+6, r25	; 0x06
    3102:	8d 83       	std	Y+5, r24	; 0x05
    3104:	3f c0       	rjmp	.+126    	; 0x3184 <SS_voidCreateUser+0x4ae>
	else if (__tmp > 65535)
    3106:	6f 81       	ldd	r22, Y+7	; 0x07
    3108:	78 85       	ldd	r23, Y+8	; 0x08
    310a:	89 85       	ldd	r24, Y+9	; 0x09
    310c:	9a 85       	ldd	r25, Y+10	; 0x0a
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	3f ef       	ldi	r19, 0xFF	; 255
    3112:	4f e7       	ldi	r20, 0x7F	; 127
    3114:	57 e4       	ldi	r21, 0x47	; 71
    3116:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    311a:	18 16       	cp	r1, r24
    311c:	4c f5       	brge	.+82     	; 0x3170 <SS_voidCreateUser+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3120:	7c 85       	ldd	r23, Y+12	; 0x0c
    3122:	8d 85       	ldd	r24, Y+13	; 0x0d
    3124:	9e 85       	ldd	r25, Y+14	; 0x0e
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e2       	ldi	r20, 0x20	; 32
    312c:	51 e4       	ldi	r21, 0x41	; 65
    312e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	bc 01       	movw	r22, r24
    3138:	cd 01       	movw	r24, r26
    313a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	9e 83       	std	Y+6, r25	; 0x06
    3144:	8d 83       	std	Y+5, r24	; 0x05
    3146:	0f c0       	rjmp	.+30     	; 0x3166 <SS_voidCreateUser+0x490>
    3148:	80 e9       	ldi	r24, 0x90	; 144
    314a:	91 e0       	ldi	r25, 0x01	; 1
    314c:	9c 83       	std	Y+4, r25	; 0x04
    314e:	8b 83       	std	Y+3, r24	; 0x03
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	9c 81       	ldd	r25, Y+4	; 0x04
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <SS_voidCreateUser+0x47e>
    3158:	9c 83       	std	Y+4, r25	; 0x04
    315a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315c:	8d 81       	ldd	r24, Y+5	; 0x05
    315e:	9e 81       	ldd	r25, Y+6	; 0x06
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	9e 83       	std	Y+6, r25	; 0x06
    3164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3166:	8d 81       	ldd	r24, Y+5	; 0x05
    3168:	9e 81       	ldd	r25, Y+6	; 0x06
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	69 f7       	brne	.-38     	; 0x3148 <SS_voidCreateUser+0x472>
    316e:	14 c0       	rjmp	.+40     	; 0x3198 <SS_voidCreateUser+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3170:	6f 81       	ldd	r22, Y+7	; 0x07
    3172:	78 85       	ldd	r23, Y+8	; 0x08
    3174:	89 85       	ldd	r24, Y+9	; 0x09
    3176:	9a 85       	ldd	r25, Y+10	; 0x0a
    3178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	9e 83       	std	Y+6, r25	; 0x06
    3182:	8d 83       	std	Y+5, r24	; 0x05
    3184:	8d 81       	ldd	r24, Y+5	; 0x05
    3186:	9e 81       	ldd	r25, Y+6	; 0x06
    3188:	9a 83       	std	Y+2, r25	; 0x02
    318a:	89 83       	std	Y+1, r24	; 0x01
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	9a 81       	ldd	r25, Y+2	; 0x02
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	f1 f7       	brne	.-4      	; 0x3190 <SS_voidCreateUser+0x4ba>
    3194:	9a 83       	std	Y+2, r25	; 0x02
    3196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	LCD_voidClear();
    3198:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
}
    319c:	c0 5c       	subi	r28, 0xC0	; 192
    319e:	df 4f       	sbci	r29, 0xFF	; 255
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	cd bf       	out	0x3d, r28	; 61
    31aa:	cf 91       	pop	r28
    31ac:	df 91       	pop	r29
    31ae:	08 95       	ret

000031b0 <SS_voidSelectEmptySlot>:
 *   Parameters    : users *copy_tUser
 *   Return Value  : Void
 *   Remarks       : None
 **********************************************************************************************/

static void SS_voidSelectEmptySlot(users *copy_tUser) {
    31b0:	df 93       	push	r29
    31b2:	cf 93       	push	r28
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
    31b8:	af 97       	sbiw	r28, 0x2f	; 47
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	9f a7       	std	Y+47, r25	; 0x2f
    31c6:	8e a7       	std	Y+46, r24	; 0x2e
	if (copy_tUser != NULL) {
    31c8:	8e a5       	ldd	r24, Y+46	; 0x2e
    31ca:	9f a5       	ldd	r25, Y+47	; 0x2f
    31cc:	00 97       	sbiw	r24, 0x00	; 0
    31ce:	09 f4       	brne	.+2      	; 0x31d2 <SS_voidSelectEmptySlot+0x22>
    31d0:	88 c1       	rjmp	.+784    	; 0x34e2 <SS_voidSelectEmptySlot+0x332>
		u8 user1_check = 0;
    31d2:	1b a6       	std	Y+43, r1	; 0x2b
		u8 user2_check = 0;
    31d4:	1c a6       	std	Y+44, r1	; 0x2c
		u8 user3_check = 0;
    31d6:	1d a6       	std	Y+45, r1	; 0x2d
		/*check if username at slot 1 is exist or not*/
		EEPROM_voidReadByte(EEPROM_user1_check, &user1_check);
    31d8:	9e 01       	movw	r18, r28
    31da:	25 5d       	subi	r18, 0xD5	; 213
    31dc:	3f 4f       	sbci	r19, 0xFF	; 255
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	b9 01       	movw	r22, r18
    31e4:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	a0 e2       	ldi	r26, 0x20	; 32
    31ee:	b1 e4       	ldi	r27, 0x41	; 65
    31f0:	8f a3       	std	Y+39, r24	; 0x27
    31f2:	98 a7       	std	Y+40, r25	; 0x28
    31f4:	a9 a7       	std	Y+41, r26	; 0x29
    31f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f8:	6f a1       	ldd	r22, Y+39	; 0x27
    31fa:	78 a5       	ldd	r23, Y+40	; 0x28
    31fc:	89 a5       	ldd	r24, Y+41	; 0x29
    31fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	4a e7       	ldi	r20, 0x7A	; 122
    3206:	55 e4       	ldi	r21, 0x45	; 69
    3208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	8b a3       	std	Y+35, r24	; 0x23
    3212:	9c a3       	std	Y+36, r25	; 0x24
    3214:	ad a3       	std	Y+37, r26	; 0x25
    3216:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3218:	6b a1       	ldd	r22, Y+35	; 0x23
    321a:	7c a1       	ldd	r23, Y+36	; 0x24
    321c:	8d a1       	ldd	r24, Y+37	; 0x25
    321e:	9e a1       	ldd	r25, Y+38	; 0x26
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	40 e8       	ldi	r20, 0x80	; 128
    3226:	5f e3       	ldi	r21, 0x3F	; 63
    3228:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    322c:	88 23       	and	r24, r24
    322e:	2c f4       	brge	.+10     	; 0x323a <SS_voidSelectEmptySlot+0x8a>
		__ticks = 1;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	9a a3       	std	Y+34, r25	; 0x22
    3236:	89 a3       	std	Y+33, r24	; 0x21
    3238:	3f c0       	rjmp	.+126    	; 0x32b8 <SS_voidSelectEmptySlot+0x108>
	else if (__tmp > 65535)
    323a:	6b a1       	ldd	r22, Y+35	; 0x23
    323c:	7c a1       	ldd	r23, Y+36	; 0x24
    323e:	8d a1       	ldd	r24, Y+37	; 0x25
    3240:	9e a1       	ldd	r25, Y+38	; 0x26
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	3f ef       	ldi	r19, 0xFF	; 255
    3246:	4f e7       	ldi	r20, 0x7F	; 127
    3248:	57 e4       	ldi	r21, 0x47	; 71
    324a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    324e:	18 16       	cp	r1, r24
    3250:	4c f5       	brge	.+82     	; 0x32a4 <SS_voidSelectEmptySlot+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3252:	6f a1       	ldd	r22, Y+39	; 0x27
    3254:	78 a5       	ldd	r23, Y+40	; 0x28
    3256:	89 a5       	ldd	r24, Y+41	; 0x29
    3258:	9a a5       	ldd	r25, Y+42	; 0x2a
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	40 e2       	ldi	r20, 0x20	; 32
    3260:	51 e4       	ldi	r21, 0x41	; 65
    3262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	bc 01       	movw	r22, r24
    326c:	cd 01       	movw	r24, r26
    326e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	9a a3       	std	Y+34, r25	; 0x22
    3278:	89 a3       	std	Y+33, r24	; 0x21
    327a:	0f c0       	rjmp	.+30     	; 0x329a <SS_voidSelectEmptySlot+0xea>
    327c:	80 e9       	ldi	r24, 0x90	; 144
    327e:	91 e0       	ldi	r25, 0x01	; 1
    3280:	98 a3       	std	Y+32, r25	; 0x20
    3282:	8f 8f       	std	Y+31, r24	; 0x1f
    3284:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3286:	98 a1       	ldd	r25, Y+32	; 0x20
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	f1 f7       	brne	.-4      	; 0x3288 <SS_voidSelectEmptySlot+0xd8>
    328c:	98 a3       	std	Y+32, r25	; 0x20
    328e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3290:	89 a1       	ldd	r24, Y+33	; 0x21
    3292:	9a a1       	ldd	r25, Y+34	; 0x22
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	9a a3       	std	Y+34, r25	; 0x22
    3298:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329a:	89 a1       	ldd	r24, Y+33	; 0x21
    329c:	9a a1       	ldd	r25, Y+34	; 0x22
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	69 f7       	brne	.-38     	; 0x327c <SS_voidSelectEmptySlot+0xcc>
    32a2:	14 c0       	rjmp	.+40     	; 0x32cc <SS_voidSelectEmptySlot+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a4:	6b a1       	ldd	r22, Y+35	; 0x23
    32a6:	7c a1       	ldd	r23, Y+36	; 0x24
    32a8:	8d a1       	ldd	r24, Y+37	; 0x25
    32aa:	9e a1       	ldd	r25, Y+38	; 0x26
    32ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	9a a3       	std	Y+34, r25	; 0x22
    32b6:	89 a3       	std	Y+33, r24	; 0x21
    32b8:	89 a1       	ldd	r24, Y+33	; 0x21
    32ba:	9a a1       	ldd	r25, Y+34	; 0x22
    32bc:	9e 8f       	std	Y+30, r25	; 0x1e
    32be:	8d 8f       	std	Y+29, r24	; 0x1d
    32c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <SS_voidSelectEmptySlot+0x114>
    32c8:	9e 8f       	std	Y+30, r25	; 0x1e
    32ca:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		/*check if username at slot 2 is exist or not*/
		EEPROM_voidReadByte(EEPROM_user2_check, &user2_check);
    32cc:	9e 01       	movw	r18, r28
    32ce:	24 5d       	subi	r18, 0xD4	; 212
    32d0:	3f 4f       	sbci	r19, 0xFF	; 255
    32d2:	82 e0       	ldi	r24, 0x02	; 2
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	b9 01       	movw	r22, r18
    32d8:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    32dc:	80 e0       	ldi	r24, 0x00	; 0
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	a0 e2       	ldi	r26, 0x20	; 32
    32e2:	b1 e4       	ldi	r27, 0x41	; 65
    32e4:	89 8f       	std	Y+25, r24	; 0x19
    32e6:	9a 8f       	std	Y+26, r25	; 0x1a
    32e8:	ab 8f       	std	Y+27, r26	; 0x1b
    32ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ec:	69 8d       	ldd	r22, Y+25	; 0x19
    32ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	4a e7       	ldi	r20, 0x7A	; 122
    32fa:	55 e4       	ldi	r21, 0x45	; 69
    32fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	8d 8b       	std	Y+21, r24	; 0x15
    3306:	9e 8b       	std	Y+22, r25	; 0x16
    3308:	af 8b       	std	Y+23, r26	; 0x17
    330a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    330c:	6d 89       	ldd	r22, Y+21	; 0x15
    330e:	7e 89       	ldd	r23, Y+22	; 0x16
    3310:	8f 89       	ldd	r24, Y+23	; 0x17
    3312:	98 8d       	ldd	r25, Y+24	; 0x18
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	40 e8       	ldi	r20, 0x80	; 128
    331a:	5f e3       	ldi	r21, 0x3F	; 63
    331c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3320:	88 23       	and	r24, r24
    3322:	2c f4       	brge	.+10     	; 0x332e <SS_voidSelectEmptySlot+0x17e>
		__ticks = 1;
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	9c 8b       	std	Y+20, r25	; 0x14
    332a:	8b 8b       	std	Y+19, r24	; 0x13
    332c:	3f c0       	rjmp	.+126    	; 0x33ac <SS_voidSelectEmptySlot+0x1fc>
	else if (__tmp > 65535)
    332e:	6d 89       	ldd	r22, Y+21	; 0x15
    3330:	7e 89       	ldd	r23, Y+22	; 0x16
    3332:	8f 89       	ldd	r24, Y+23	; 0x17
    3334:	98 8d       	ldd	r25, Y+24	; 0x18
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	3f ef       	ldi	r19, 0xFF	; 255
    333a:	4f e7       	ldi	r20, 0x7F	; 127
    333c:	57 e4       	ldi	r21, 0x47	; 71
    333e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3342:	18 16       	cp	r1, r24
    3344:	4c f5       	brge	.+82     	; 0x3398 <SS_voidSelectEmptySlot+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3346:	69 8d       	ldd	r22, Y+25	; 0x19
    3348:	7a 8d       	ldd	r23, Y+26	; 0x1a
    334a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    334c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	40 e2       	ldi	r20, 0x20	; 32
    3354:	51 e4       	ldi	r21, 0x41	; 65
    3356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	bc 01       	movw	r22, r24
    3360:	cd 01       	movw	r24, r26
    3362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	9c 8b       	std	Y+20, r25	; 0x14
    336c:	8b 8b       	std	Y+19, r24	; 0x13
    336e:	0f c0       	rjmp	.+30     	; 0x338e <SS_voidSelectEmptySlot+0x1de>
    3370:	80 e9       	ldi	r24, 0x90	; 144
    3372:	91 e0       	ldi	r25, 0x01	; 1
    3374:	9a 8b       	std	Y+18, r25	; 0x12
    3376:	89 8b       	std	Y+17, r24	; 0x11
    3378:	89 89       	ldd	r24, Y+17	; 0x11
    337a:	9a 89       	ldd	r25, Y+18	; 0x12
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	f1 f7       	brne	.-4      	; 0x337c <SS_voidSelectEmptySlot+0x1cc>
    3380:	9a 8b       	std	Y+18, r25	; 0x12
    3382:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3384:	8b 89       	ldd	r24, Y+19	; 0x13
    3386:	9c 89       	ldd	r25, Y+20	; 0x14
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	9c 8b       	std	Y+20, r25	; 0x14
    338c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    338e:	8b 89       	ldd	r24, Y+19	; 0x13
    3390:	9c 89       	ldd	r25, Y+20	; 0x14
    3392:	00 97       	sbiw	r24, 0x00	; 0
    3394:	69 f7       	brne	.-38     	; 0x3370 <SS_voidSelectEmptySlot+0x1c0>
    3396:	14 c0       	rjmp	.+40     	; 0x33c0 <SS_voidSelectEmptySlot+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3398:	6d 89       	ldd	r22, Y+21	; 0x15
    339a:	7e 89       	ldd	r23, Y+22	; 0x16
    339c:	8f 89       	ldd	r24, Y+23	; 0x17
    339e:	98 8d       	ldd	r25, Y+24	; 0x18
    33a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	9c 8b       	std	Y+20, r25	; 0x14
    33aa:	8b 8b       	std	Y+19, r24	; 0x13
    33ac:	8b 89       	ldd	r24, Y+19	; 0x13
    33ae:	9c 89       	ldd	r25, Y+20	; 0x14
    33b0:	98 8b       	std	Y+16, r25	; 0x10
    33b2:	8f 87       	std	Y+15, r24	; 0x0f
    33b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b6:	98 89       	ldd	r25, Y+16	; 0x10
    33b8:	01 97       	sbiw	r24, 0x01	; 1
    33ba:	f1 f7       	brne	.-4      	; 0x33b8 <SS_voidSelectEmptySlot+0x208>
    33bc:	98 8b       	std	Y+16, r25	; 0x10
    33be:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		/*check if username at slot 3 is exist or not*/
		EEPROM_voidReadByte(EEPROM_user3_check, &user3_check);
    33c0:	9e 01       	movw	r18, r28
    33c2:	23 5d       	subi	r18, 0xD3	; 211
    33c4:	3f 4f       	sbci	r19, 0xFF	; 255
    33c6:	83 e0       	ldi	r24, 0x03	; 3
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	b9 01       	movw	r22, r18
    33cc:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	a0 e2       	ldi	r26, 0x20	; 32
    33d6:	b1 e4       	ldi	r27, 0x41	; 65
    33d8:	8b 87       	std	Y+11, r24	; 0x0b
    33da:	9c 87       	std	Y+12, r25	; 0x0c
    33dc:	ad 87       	std	Y+13, r26	; 0x0d
    33de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	4a e7       	ldi	r20, 0x7A	; 122
    33ee:	55 e4       	ldi	r21, 0x45	; 69
    33f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	8f 83       	std	Y+7, r24	; 0x07
    33fa:	98 87       	std	Y+8, r25	; 0x08
    33fc:	a9 87       	std	Y+9, r26	; 0x09
    33fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3400:	6f 81       	ldd	r22, Y+7	; 0x07
    3402:	78 85       	ldd	r23, Y+8	; 0x08
    3404:	89 85       	ldd	r24, Y+9	; 0x09
    3406:	9a 85       	ldd	r25, Y+10	; 0x0a
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	40 e8       	ldi	r20, 0x80	; 128
    340e:	5f e3       	ldi	r21, 0x3F	; 63
    3410:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3414:	88 23       	and	r24, r24
    3416:	2c f4       	brge	.+10     	; 0x3422 <SS_voidSelectEmptySlot+0x272>
		__ticks = 1;
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	9e 83       	std	Y+6, r25	; 0x06
    341e:	8d 83       	std	Y+5, r24	; 0x05
    3420:	3f c0       	rjmp	.+126    	; 0x34a0 <SS_voidSelectEmptySlot+0x2f0>
	else if (__tmp > 65535)
    3422:	6f 81       	ldd	r22, Y+7	; 0x07
    3424:	78 85       	ldd	r23, Y+8	; 0x08
    3426:	89 85       	ldd	r24, Y+9	; 0x09
    3428:	9a 85       	ldd	r25, Y+10	; 0x0a
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	3f ef       	ldi	r19, 0xFF	; 255
    342e:	4f e7       	ldi	r20, 0x7F	; 127
    3430:	57 e4       	ldi	r21, 0x47	; 71
    3432:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3436:	18 16       	cp	r1, r24
    3438:	4c f5       	brge	.+82     	; 0x348c <SS_voidSelectEmptySlot+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    343a:	6b 85       	ldd	r22, Y+11	; 0x0b
    343c:	7c 85       	ldd	r23, Y+12	; 0x0c
    343e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3440:	9e 85       	ldd	r25, Y+14	; 0x0e
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	40 e2       	ldi	r20, 0x20	; 32
    3448:	51 e4       	ldi	r21, 0x41	; 65
    344a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	bc 01       	movw	r22, r24
    3454:	cd 01       	movw	r24, r26
    3456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	9e 83       	std	Y+6, r25	; 0x06
    3460:	8d 83       	std	Y+5, r24	; 0x05
    3462:	0f c0       	rjmp	.+30     	; 0x3482 <SS_voidSelectEmptySlot+0x2d2>
    3464:	80 e9       	ldi	r24, 0x90	; 144
    3466:	91 e0       	ldi	r25, 0x01	; 1
    3468:	9c 83       	std	Y+4, r25	; 0x04
    346a:	8b 83       	std	Y+3, r24	; 0x03
    346c:	8b 81       	ldd	r24, Y+3	; 0x03
    346e:	9c 81       	ldd	r25, Y+4	; 0x04
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	f1 f7       	brne	.-4      	; 0x3470 <SS_voidSelectEmptySlot+0x2c0>
    3474:	9c 83       	std	Y+4, r25	; 0x04
    3476:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3478:	8d 81       	ldd	r24, Y+5	; 0x05
    347a:	9e 81       	ldd	r25, Y+6	; 0x06
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	9e 83       	std	Y+6, r25	; 0x06
    3480:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3482:	8d 81       	ldd	r24, Y+5	; 0x05
    3484:	9e 81       	ldd	r25, Y+6	; 0x06
    3486:	00 97       	sbiw	r24, 0x00	; 0
    3488:	69 f7       	brne	.-38     	; 0x3464 <SS_voidSelectEmptySlot+0x2b4>
    348a:	14 c0       	rjmp	.+40     	; 0x34b4 <SS_voidSelectEmptySlot+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    348c:	6f 81       	ldd	r22, Y+7	; 0x07
    348e:	78 85       	ldd	r23, Y+8	; 0x08
    3490:	89 85       	ldd	r24, Y+9	; 0x09
    3492:	9a 85       	ldd	r25, Y+10	; 0x0a
    3494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3498:	dc 01       	movw	r26, r24
    349a:	cb 01       	movw	r24, r22
    349c:	9e 83       	std	Y+6, r25	; 0x06
    349e:	8d 83       	std	Y+5, r24	; 0x05
    34a0:	8d 81       	ldd	r24, Y+5	; 0x05
    34a2:	9e 81       	ldd	r25, Y+6	; 0x06
    34a4:	9a 83       	std	Y+2, r25	; 0x02
    34a6:	89 83       	std	Y+1, r24	; 0x01
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	9a 81       	ldd	r25, Y+2	; 0x02
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	f1 f7       	brne	.-4      	; 0x34ac <SS_voidSelectEmptySlot+0x2fc>
    34b0:	9a 83       	std	Y+2, r25	; 0x02
    34b2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);

		if (user1_check != 1)
    34b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    34b6:	81 30       	cpi	r24, 0x01	; 1
    34b8:	29 f0       	breq	.+10     	; 0x34c4 <SS_voidSelectEmptySlot+0x314>
			*copy_tUser = user1;
    34ba:	ee a5       	ldd	r30, Y+46	; 0x2e
    34bc:	ff a5       	ldd	r31, Y+47	; 0x2f
    34be:	82 e0       	ldi	r24, 0x02	; 2
    34c0:	80 83       	st	Z, r24
    34c2:	0f c0       	rjmp	.+30     	; 0x34e2 <SS_voidSelectEmptySlot+0x332>
		else if (user2_check != 1)
    34c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    34c6:	81 30       	cpi	r24, 0x01	; 1
    34c8:	29 f0       	breq	.+10     	; 0x34d4 <SS_voidSelectEmptySlot+0x324>
			*copy_tUser = user2;
    34ca:	ee a5       	ldd	r30, Y+46	; 0x2e
    34cc:	ff a5       	ldd	r31, Y+47	; 0x2f
    34ce:	83 e0       	ldi	r24, 0x03	; 3
    34d0:	80 83       	st	Z, r24
    34d2:	07 c0       	rjmp	.+14     	; 0x34e2 <SS_voidSelectEmptySlot+0x332>
		else if (user3_check != 1)
    34d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    34d6:	81 30       	cpi	r24, 0x01	; 1
    34d8:	21 f0       	breq	.+8      	; 0x34e2 <SS_voidSelectEmptySlot+0x332>
			*copy_tUser = user3;
    34da:	ee a5       	ldd	r30, Y+46	; 0x2e
    34dc:	ff a5       	ldd	r31, Y+47	; 0x2f
    34de:	84 e0       	ldi	r24, 0x04	; 4
    34e0:	80 83       	st	Z, r24

	}
}
    34e2:	af 96       	adiw	r28, 0x2f	; 47
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	f8 94       	cli
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	cd bf       	out	0x3d, r28	; 61
    34ee:	cf 91       	pop	r28
    34f0:	df 91       	pop	r29
    34f2:	08 95       	ret

000034f4 <SS_voidDeleteUser>:
 *   Parameters    : Void
 *   Return Value  : Void
 *   Remarks       : None
 **********************************************************************************************/

static void SS_voidDeleteUser() {
    34f4:	0f 93       	push	r16
    34f6:	1f 93       	push	r17
    34f8:	df 93       	push	r29
    34fa:	cf 93       	push	r28
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	c2 5a       	subi	r28, 0xA2	; 162
    3502:	d0 40       	sbci	r29, 0x00	; 0
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
	u8 user1_check = 0;
    350e:	fe 01       	movw	r30, r28
    3510:	e3 56       	subi	r30, 0x63	; 99
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	10 82       	st	Z, r1
	u8 user2_check = 0;
    3516:	fe 01       	movw	r30, r28
    3518:	e2 56       	subi	r30, 0x62	; 98
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	10 82       	st	Z, r1
	u8 user3_check = 0;
    351e:	fe 01       	movw	r30, r28
    3520:	e1 56       	subi	r30, 0x61	; 97
    3522:	ff 4f       	sbci	r31, 0xFF	; 255
    3524:	10 82       	st	Z, r1
	u8 local_u8RxData;
	u8 counter;
	u8 EEPROM_Position;

	UART_voidTxString((u8*) "Choose user To delete");
    3526:	8b e2       	ldi	r24, 0x2B	; 43
    3528:	92 e0       	ldi	r25, 0x02	; 2
    352a:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

	//check if user1 is created  then copy username
	EEPROM_voidReadByte( EEPROM_user1_check, &user1_check);
    352e:	9e 01       	movw	r18, r28
    3530:	23 56       	subi	r18, 0x63	; 99
    3532:	3f 4f       	sbci	r19, 0xFF	; 255
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	b9 01       	movw	r22, r18
    353a:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    353e:	fe 01       	movw	r30, r28
    3540:	e9 56       	subi	r30, 0x69	; 105
    3542:	ff 4f       	sbci	r31, 0xFF	; 255
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	a0 e2       	ldi	r26, 0x20	; 32
    354a:	b1 e4       	ldi	r27, 0x41	; 65
    354c:	80 83       	st	Z, r24
    354e:	91 83       	std	Z+1, r25	; 0x01
    3550:	a2 83       	std	Z+2, r26	; 0x02
    3552:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3554:	8e 01       	movw	r16, r28
    3556:	0d 56       	subi	r16, 0x6D	; 109
    3558:	1f 4f       	sbci	r17, 0xFF	; 255
    355a:	fe 01       	movw	r30, r28
    355c:	e9 56       	subi	r30, 0x69	; 105
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	60 81       	ld	r22, Z
    3562:	71 81       	ldd	r23, Z+1	; 0x01
    3564:	82 81       	ldd	r24, Z+2	; 0x02
    3566:	93 81       	ldd	r25, Z+3	; 0x03
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	4a e7       	ldi	r20, 0x7A	; 122
    356e:	55 e4       	ldi	r21, 0x45	; 69
    3570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	f8 01       	movw	r30, r16
    357a:	80 83       	st	Z, r24
    357c:	91 83       	std	Z+1, r25	; 0x01
    357e:	a2 83       	std	Z+2, r26	; 0x02
    3580:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3582:	fe 01       	movw	r30, r28
    3584:	ed 56       	subi	r30, 0x6D	; 109
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	60 81       	ld	r22, Z
    358a:	71 81       	ldd	r23, Z+1	; 0x01
    358c:	82 81       	ldd	r24, Z+2	; 0x02
    358e:	93 81       	ldd	r25, Z+3	; 0x03
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	40 e8       	ldi	r20, 0x80	; 128
    3596:	5f e3       	ldi	r21, 0x3F	; 63
    3598:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    359c:	88 23       	and	r24, r24
    359e:	44 f4       	brge	.+16     	; 0x35b0 <SS_voidDeleteUser+0xbc>
		__ticks = 1;
    35a0:	fe 01       	movw	r30, r28
    35a2:	ef 56       	subi	r30, 0x6F	; 111
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	91 83       	std	Z+1, r25	; 0x01
    35ac:	80 83       	st	Z, r24
    35ae:	64 c0       	rjmp	.+200    	; 0x3678 <SS_voidDeleteUser+0x184>
	else if (__tmp > 65535)
    35b0:	fe 01       	movw	r30, r28
    35b2:	ed 56       	subi	r30, 0x6D	; 109
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	60 81       	ld	r22, Z
    35b8:	71 81       	ldd	r23, Z+1	; 0x01
    35ba:	82 81       	ldd	r24, Z+2	; 0x02
    35bc:	93 81       	ldd	r25, Z+3	; 0x03
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	3f ef       	ldi	r19, 0xFF	; 255
    35c2:	4f e7       	ldi	r20, 0x7F	; 127
    35c4:	57 e4       	ldi	r21, 0x47	; 71
    35c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ca:	18 16       	cp	r1, r24
    35cc:	0c f0       	brlt	.+2      	; 0x35d0 <SS_voidDeleteUser+0xdc>
    35ce:	43 c0       	rjmp	.+134    	; 0x3656 <SS_voidDeleteUser+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d0:	fe 01       	movw	r30, r28
    35d2:	e9 56       	subi	r30, 0x69	; 105
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	60 81       	ld	r22, Z
    35d8:	71 81       	ldd	r23, Z+1	; 0x01
    35da:	82 81       	ldd	r24, Z+2	; 0x02
    35dc:	93 81       	ldd	r25, Z+3	; 0x03
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	40 e2       	ldi	r20, 0x20	; 32
    35e4:	51 e4       	ldi	r21, 0x41	; 65
    35e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	8e 01       	movw	r16, r28
    35f0:	0f 56       	subi	r16, 0x6F	; 111
    35f2:	1f 4f       	sbci	r17, 0xFF	; 255
    35f4:	bc 01       	movw	r22, r24
    35f6:	cd 01       	movw	r24, r26
    35f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	f8 01       	movw	r30, r16
    3602:	91 83       	std	Z+1, r25	; 0x01
    3604:	80 83       	st	Z, r24
    3606:	1f c0       	rjmp	.+62     	; 0x3646 <SS_voidDeleteUser+0x152>
    3608:	fe 01       	movw	r30, r28
    360a:	e1 57       	subi	r30, 0x71	; 113
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	80 e9       	ldi	r24, 0x90	; 144
    3610:	91 e0       	ldi	r25, 0x01	; 1
    3612:	91 83       	std	Z+1, r25	; 0x01
    3614:	80 83       	st	Z, r24
    3616:	fe 01       	movw	r30, r28
    3618:	e1 57       	subi	r30, 0x71	; 113
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	80 81       	ld	r24, Z
    361e:	91 81       	ldd	r25, Z+1	; 0x01
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	f1 f7       	brne	.-4      	; 0x3620 <SS_voidDeleteUser+0x12c>
    3624:	fe 01       	movw	r30, r28
    3626:	e1 57       	subi	r30, 0x71	; 113
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	91 83       	std	Z+1, r25	; 0x01
    362c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362e:	de 01       	movw	r26, r28
    3630:	af 56       	subi	r26, 0x6F	; 111
    3632:	bf 4f       	sbci	r27, 0xFF	; 255
    3634:	fe 01       	movw	r30, r28
    3636:	ef 56       	subi	r30, 0x6F	; 111
    3638:	ff 4f       	sbci	r31, 0xFF	; 255
    363a:	80 81       	ld	r24, Z
    363c:	91 81       	ldd	r25, Z+1	; 0x01
    363e:	01 97       	sbiw	r24, 0x01	; 1
    3640:	11 96       	adiw	r26, 0x01	; 1
    3642:	9c 93       	st	X, r25
    3644:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3646:	fe 01       	movw	r30, r28
    3648:	ef 56       	subi	r30, 0x6F	; 111
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	80 81       	ld	r24, Z
    364e:	91 81       	ldd	r25, Z+1	; 0x01
    3650:	00 97       	sbiw	r24, 0x00	; 0
    3652:	d1 f6       	brne	.-76     	; 0x3608 <SS_voidDeleteUser+0x114>
    3654:	28 c0       	rjmp	.+80     	; 0x36a6 <SS_voidDeleteUser+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3656:	8e 01       	movw	r16, r28
    3658:	0f 56       	subi	r16, 0x6F	; 111
    365a:	1f 4f       	sbci	r17, 0xFF	; 255
    365c:	fe 01       	movw	r30, r28
    365e:	ed 56       	subi	r30, 0x6D	; 109
    3660:	ff 4f       	sbci	r31, 0xFF	; 255
    3662:	60 81       	ld	r22, Z
    3664:	71 81       	ldd	r23, Z+1	; 0x01
    3666:	82 81       	ldd	r24, Z+2	; 0x02
    3668:	93 81       	ldd	r25, Z+3	; 0x03
    366a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	f8 01       	movw	r30, r16
    3674:	91 83       	std	Z+1, r25	; 0x01
    3676:	80 83       	st	Z, r24
    3678:	de 01       	movw	r26, r28
    367a:	a3 57       	subi	r26, 0x73	; 115
    367c:	bf 4f       	sbci	r27, 0xFF	; 255
    367e:	fe 01       	movw	r30, r28
    3680:	ef 56       	subi	r30, 0x6F	; 111
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	80 81       	ld	r24, Z
    3686:	91 81       	ldd	r25, Z+1	; 0x01
    3688:	11 96       	adiw	r26, 0x01	; 1
    368a:	9c 93       	st	X, r25
    368c:	8e 93       	st	-X, r24
    368e:	fe 01       	movw	r30, r28
    3690:	e3 57       	subi	r30, 0x73	; 115
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	80 81       	ld	r24, Z
    3696:	91 81       	ldd	r25, Z+1	; 0x01
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	f1 f7       	brne	.-4      	; 0x3698 <SS_voidDeleteUser+0x1a4>
    369c:	fe 01       	movw	r30, r28
    369e:	e3 57       	subi	r30, 0x73	; 115
    36a0:	ff 4f       	sbci	r31, 0xFF	; 255
    36a2:	91 83       	std	Z+1, r25	; 0x01
    36a4:	80 83       	st	Z, r24
	_delay_ms(10);

	EEPROM_Position = EEPROM_user1_username;
    36a6:	fe 01       	movw	r30, r28
    36a8:	e5 56       	subi	r30, 0x65	; 101
    36aa:	ff 4f       	sbci	r31, 0xFF	; 255
    36ac:	89 e0       	ldi	r24, 0x09	; 9
    36ae:	80 83       	st	Z, r24
	if (user1_check == 1) {
    36b0:	fe 01       	movw	r30, r28
    36b2:	e3 56       	subi	r30, 0x63	; 99
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	80 81       	ld	r24, Z
    36b8:	81 30       	cpi	r24, 0x01	; 1
    36ba:	09 f0       	breq	.+2      	; 0x36be <SS_voidDeleteUser+0x1ca>
    36bc:	e9 c0       	rjmp	.+466    	; 0x3890 <SS_voidDeleteUser+0x39c>
		UART_voidTxChar('1');
    36be:	81 e3       	ldi	r24, 0x31	; 49
    36c0:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
		UART_voidTxChar('-');
    36c4:	8d e2       	ldi	r24, 0x2D	; 45
    36c6:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
		for (counter = 0; counter < Maximum_password; counter++) {
    36ca:	fe 01       	movw	r30, r28
    36cc:	e4 56       	subi	r30, 0x64	; 100
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	10 82       	st	Z, r1
    36d2:	d7 c0       	rjmp	.+430    	; 0x3882 <SS_voidDeleteUser+0x38e>
			EEPROM_voidReadByte(EEPROM_Position, &local_u8RxData);
    36d4:	fe 01       	movw	r30, r28
    36d6:	e5 56       	subi	r30, 0x65	; 101
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	80 81       	ld	r24, Z
    36dc:	88 2f       	mov	r24, r24
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	9e 01       	movw	r18, r28
    36e2:	20 56       	subi	r18, 0x60	; 96
    36e4:	3f 4f       	sbci	r19, 0xFF	; 255
    36e6:	b9 01       	movw	r22, r18
    36e8:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    36ec:	fe 01       	movw	r30, r28
    36ee:	e7 57       	subi	r30, 0x77	; 119
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	a0 e2       	ldi	r26, 0x20	; 32
    36f8:	b1 e4       	ldi	r27, 0x41	; 65
    36fa:	80 83       	st	Z, r24
    36fc:	91 83       	std	Z+1, r25	; 0x01
    36fe:	a2 83       	std	Z+2, r26	; 0x02
    3700:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3702:	8e 01       	movw	r16, r28
    3704:	0b 57       	subi	r16, 0x7B	; 123
    3706:	1f 4f       	sbci	r17, 0xFF	; 255
    3708:	fe 01       	movw	r30, r28
    370a:	e7 57       	subi	r30, 0x77	; 119
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	60 81       	ld	r22, Z
    3710:	71 81       	ldd	r23, Z+1	; 0x01
    3712:	82 81       	ldd	r24, Z+2	; 0x02
    3714:	93 81       	ldd	r25, Z+3	; 0x03
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	4a e7       	ldi	r20, 0x7A	; 122
    371c:	55 e4       	ldi	r21, 0x45	; 69
    371e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3722:	dc 01       	movw	r26, r24
    3724:	cb 01       	movw	r24, r22
    3726:	f8 01       	movw	r30, r16
    3728:	80 83       	st	Z, r24
    372a:	91 83       	std	Z+1, r25	; 0x01
    372c:	a2 83       	std	Z+2, r26	; 0x02
    372e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3730:	fe 01       	movw	r30, r28
    3732:	eb 57       	subi	r30, 0x7B	; 123
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	60 81       	ld	r22, Z
    3738:	71 81       	ldd	r23, Z+1	; 0x01
    373a:	82 81       	ldd	r24, Z+2	; 0x02
    373c:	93 81       	ldd	r25, Z+3	; 0x03
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e8       	ldi	r20, 0x80	; 128
    3744:	5f e3       	ldi	r21, 0x3F	; 63
    3746:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    374a:	88 23       	and	r24, r24
    374c:	44 f4       	brge	.+16     	; 0x375e <SS_voidDeleteUser+0x26a>
		__ticks = 1;
    374e:	fe 01       	movw	r30, r28
    3750:	ed 57       	subi	r30, 0x7D	; 125
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	91 83       	std	Z+1, r25	; 0x01
    375a:	80 83       	st	Z, r24
    375c:	64 c0       	rjmp	.+200    	; 0x3826 <SS_voidDeleteUser+0x332>
	else if (__tmp > 65535)
    375e:	fe 01       	movw	r30, r28
    3760:	eb 57       	subi	r30, 0x7B	; 123
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	60 81       	ld	r22, Z
    3766:	71 81       	ldd	r23, Z+1	; 0x01
    3768:	82 81       	ldd	r24, Z+2	; 0x02
    376a:	93 81       	ldd	r25, Z+3	; 0x03
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	3f ef       	ldi	r19, 0xFF	; 255
    3770:	4f e7       	ldi	r20, 0x7F	; 127
    3772:	57 e4       	ldi	r21, 0x47	; 71
    3774:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3778:	18 16       	cp	r1, r24
    377a:	0c f0       	brlt	.+2      	; 0x377e <SS_voidDeleteUser+0x28a>
    377c:	43 c0       	rjmp	.+134    	; 0x3804 <SS_voidDeleteUser+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377e:	fe 01       	movw	r30, r28
    3780:	e7 57       	subi	r30, 0x77	; 119
    3782:	ff 4f       	sbci	r31, 0xFF	; 255
    3784:	60 81       	ld	r22, Z
    3786:	71 81       	ldd	r23, Z+1	; 0x01
    3788:	82 81       	ldd	r24, Z+2	; 0x02
    378a:	93 81       	ldd	r25, Z+3	; 0x03
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	40 e2       	ldi	r20, 0x20	; 32
    3792:	51 e4       	ldi	r21, 0x41	; 65
    3794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	8e 01       	movw	r16, r28
    379e:	0d 57       	subi	r16, 0x7D	; 125
    37a0:	1f 4f       	sbci	r17, 0xFF	; 255
    37a2:	bc 01       	movw	r22, r24
    37a4:	cd 01       	movw	r24, r26
    37a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	f8 01       	movw	r30, r16
    37b0:	91 83       	std	Z+1, r25	; 0x01
    37b2:	80 83       	st	Z, r24
    37b4:	1f c0       	rjmp	.+62     	; 0x37f4 <SS_voidDeleteUser+0x300>
    37b6:	fe 01       	movw	r30, r28
    37b8:	ef 57       	subi	r30, 0x7F	; 127
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	80 e9       	ldi	r24, 0x90	; 144
    37be:	91 e0       	ldi	r25, 0x01	; 1
    37c0:	91 83       	std	Z+1, r25	; 0x01
    37c2:	80 83       	st	Z, r24
    37c4:	fe 01       	movw	r30, r28
    37c6:	ef 57       	subi	r30, 0x7F	; 127
    37c8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ca:	80 81       	ld	r24, Z
    37cc:	91 81       	ldd	r25, Z+1	; 0x01
    37ce:	01 97       	sbiw	r24, 0x01	; 1
    37d0:	f1 f7       	brne	.-4      	; 0x37ce <SS_voidDeleteUser+0x2da>
    37d2:	fe 01       	movw	r30, r28
    37d4:	ef 57       	subi	r30, 0x7F	; 127
    37d6:	ff 4f       	sbci	r31, 0xFF	; 255
    37d8:	91 83       	std	Z+1, r25	; 0x01
    37da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37dc:	de 01       	movw	r26, r28
    37de:	ad 57       	subi	r26, 0x7D	; 125
    37e0:	bf 4f       	sbci	r27, 0xFF	; 255
    37e2:	fe 01       	movw	r30, r28
    37e4:	ed 57       	subi	r30, 0x7D	; 125
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	80 81       	ld	r24, Z
    37ea:	91 81       	ldd	r25, Z+1	; 0x01
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	11 96       	adiw	r26, 0x01	; 1
    37f0:	9c 93       	st	X, r25
    37f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f4:	fe 01       	movw	r30, r28
    37f6:	ed 57       	subi	r30, 0x7D	; 125
    37f8:	ff 4f       	sbci	r31, 0xFF	; 255
    37fa:	80 81       	ld	r24, Z
    37fc:	91 81       	ldd	r25, Z+1	; 0x01
    37fe:	00 97       	sbiw	r24, 0x00	; 0
    3800:	d1 f6       	brne	.-76     	; 0x37b6 <SS_voidDeleteUser+0x2c2>
    3802:	27 c0       	rjmp	.+78     	; 0x3852 <SS_voidDeleteUser+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3804:	8e 01       	movw	r16, r28
    3806:	0d 57       	subi	r16, 0x7D	; 125
    3808:	1f 4f       	sbci	r17, 0xFF	; 255
    380a:	fe 01       	movw	r30, r28
    380c:	eb 57       	subi	r30, 0x7B	; 123
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	60 81       	ld	r22, Z
    3812:	71 81       	ldd	r23, Z+1	; 0x01
    3814:	82 81       	ldd	r24, Z+2	; 0x02
    3816:	93 81       	ldd	r25, Z+3	; 0x03
    3818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	f8 01       	movw	r30, r16
    3822:	91 83       	std	Z+1, r25	; 0x01
    3824:	80 83       	st	Z, r24
    3826:	de 01       	movw	r26, r28
    3828:	a1 58       	subi	r26, 0x81	; 129
    382a:	bf 4f       	sbci	r27, 0xFF	; 255
    382c:	fe 01       	movw	r30, r28
    382e:	ed 57       	subi	r30, 0x7D	; 125
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	80 81       	ld	r24, Z
    3834:	91 81       	ldd	r25, Z+1	; 0x01
    3836:	8d 93       	st	X+, r24
    3838:	9c 93       	st	X, r25
    383a:	fe 01       	movw	r30, r28
    383c:	e1 58       	subi	r30, 0x81	; 129
    383e:	ff 4f       	sbci	r31, 0xFF	; 255
    3840:	80 81       	ld	r24, Z
    3842:	91 81       	ldd	r25, Z+1	; 0x01
    3844:	01 97       	sbiw	r24, 0x01	; 1
    3846:	f1 f7       	brne	.-4      	; 0x3844 <SS_voidDeleteUser+0x350>
    3848:	fe 01       	movw	r30, r28
    384a:	e1 58       	subi	r30, 0x81	; 129
    384c:	ff 4f       	sbci	r31, 0xFF	; 255
    384e:	91 83       	std	Z+1, r25	; 0x01
    3850:	80 83       	st	Z, r24
			_delay_ms(10);
			UART_voidTxChar(local_u8RxData);
    3852:	fe 01       	movw	r30, r28
    3854:	e0 56       	subi	r30, 0x60	; 96
    3856:	ff 4f       	sbci	r31, 0xFF	; 255
    3858:	80 81       	ld	r24, Z
    385a:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
			EEPROM_Position++;
    385e:	de 01       	movw	r26, r28
    3860:	a5 56       	subi	r26, 0x65	; 101
    3862:	bf 4f       	sbci	r27, 0xFF	; 255
    3864:	fe 01       	movw	r30, r28
    3866:	e5 56       	subi	r30, 0x65	; 101
    3868:	ff 4f       	sbci	r31, 0xFF	; 255
    386a:	80 81       	ld	r24, Z
    386c:	8f 5f       	subi	r24, 0xFF	; 255
    386e:	8c 93       	st	X, r24

	EEPROM_Position = EEPROM_user1_username;
	if (user1_check == 1) {
		UART_voidTxChar('1');
		UART_voidTxChar('-');
		for (counter = 0; counter < Maximum_password; counter++) {
    3870:	de 01       	movw	r26, r28
    3872:	a4 56       	subi	r26, 0x64	; 100
    3874:	bf 4f       	sbci	r27, 0xFF	; 255
    3876:	fe 01       	movw	r30, r28
    3878:	e4 56       	subi	r30, 0x64	; 100
    387a:	ff 4f       	sbci	r31, 0xFF	; 255
    387c:	80 81       	ld	r24, Z
    387e:	8f 5f       	subi	r24, 0xFF	; 255
    3880:	8c 93       	st	X, r24
    3882:	fe 01       	movw	r30, r28
    3884:	e4 56       	subi	r30, 0x64	; 100
    3886:	ff 4f       	sbci	r31, 0xFF	; 255
    3888:	80 81       	ld	r24, Z
    388a:	85 30       	cpi	r24, 0x05	; 5
    388c:	08 f4       	brcc	.+2      	; 0x3890 <SS_voidDeleteUser+0x39c>
    388e:	22 cf       	rjmp	.-444    	; 0x36d4 <SS_voidDeleteUser+0x1e0>
			EEPROM_Position++;
		}
	}

//check if user2 is created  then copy username
	EEPROM_voidReadByte( EEPROM_user2_check, &user2_check);
    3890:	9e 01       	movw	r18, r28
    3892:	22 56       	subi	r18, 0x62	; 98
    3894:	3f 4f       	sbci	r19, 0xFF	; 255
    3896:	82 e0       	ldi	r24, 0x02	; 2
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	b9 01       	movw	r22, r18
    389c:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    38a0:	fe 01       	movw	r30, r28
    38a2:	e5 58       	subi	r30, 0x85	; 133
    38a4:	ff 4f       	sbci	r31, 0xFF	; 255
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	a0 e2       	ldi	r26, 0x20	; 32
    38ac:	b1 e4       	ldi	r27, 0x41	; 65
    38ae:	80 83       	st	Z, r24
    38b0:	91 83       	std	Z+1, r25	; 0x01
    38b2:	a2 83       	std	Z+2, r26	; 0x02
    38b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b6:	8e 01       	movw	r16, r28
    38b8:	09 58       	subi	r16, 0x89	; 137
    38ba:	1f 4f       	sbci	r17, 0xFF	; 255
    38bc:	fe 01       	movw	r30, r28
    38be:	e5 58       	subi	r30, 0x85	; 133
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	60 81       	ld	r22, Z
    38c4:	71 81       	ldd	r23, Z+1	; 0x01
    38c6:	82 81       	ldd	r24, Z+2	; 0x02
    38c8:	93 81       	ldd	r25, Z+3	; 0x03
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	4a e7       	ldi	r20, 0x7A	; 122
    38d0:	55 e4       	ldi	r21, 0x45	; 69
    38d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d6:	dc 01       	movw	r26, r24
    38d8:	cb 01       	movw	r24, r22
    38da:	f8 01       	movw	r30, r16
    38dc:	80 83       	st	Z, r24
    38de:	91 83       	std	Z+1, r25	; 0x01
    38e0:	a2 83       	std	Z+2, r26	; 0x02
    38e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38e4:	fe 01       	movw	r30, r28
    38e6:	e9 58       	subi	r30, 0x89	; 137
    38e8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ea:	60 81       	ld	r22, Z
    38ec:	71 81       	ldd	r23, Z+1	; 0x01
    38ee:	82 81       	ldd	r24, Z+2	; 0x02
    38f0:	93 81       	ldd	r25, Z+3	; 0x03
    38f2:	20 e0       	ldi	r18, 0x00	; 0
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	40 e8       	ldi	r20, 0x80	; 128
    38f8:	5f e3       	ldi	r21, 0x3F	; 63
    38fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38fe:	88 23       	and	r24, r24
    3900:	44 f4       	brge	.+16     	; 0x3912 <SS_voidDeleteUser+0x41e>
		__ticks = 1;
    3902:	fe 01       	movw	r30, r28
    3904:	eb 58       	subi	r30, 0x8B	; 139
    3906:	ff 4f       	sbci	r31, 0xFF	; 255
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	91 83       	std	Z+1, r25	; 0x01
    390e:	80 83       	st	Z, r24
    3910:	64 c0       	rjmp	.+200    	; 0x39da <SS_voidDeleteUser+0x4e6>
	else if (__tmp > 65535)
    3912:	fe 01       	movw	r30, r28
    3914:	e9 58       	subi	r30, 0x89	; 137
    3916:	ff 4f       	sbci	r31, 0xFF	; 255
    3918:	60 81       	ld	r22, Z
    391a:	71 81       	ldd	r23, Z+1	; 0x01
    391c:	82 81       	ldd	r24, Z+2	; 0x02
    391e:	93 81       	ldd	r25, Z+3	; 0x03
    3920:	20 e0       	ldi	r18, 0x00	; 0
    3922:	3f ef       	ldi	r19, 0xFF	; 255
    3924:	4f e7       	ldi	r20, 0x7F	; 127
    3926:	57 e4       	ldi	r21, 0x47	; 71
    3928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    392c:	18 16       	cp	r1, r24
    392e:	0c f0       	brlt	.+2      	; 0x3932 <SS_voidDeleteUser+0x43e>
    3930:	43 c0       	rjmp	.+134    	; 0x39b8 <SS_voidDeleteUser+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3932:	fe 01       	movw	r30, r28
    3934:	e5 58       	subi	r30, 0x85	; 133
    3936:	ff 4f       	sbci	r31, 0xFF	; 255
    3938:	60 81       	ld	r22, Z
    393a:	71 81       	ldd	r23, Z+1	; 0x01
    393c:	82 81       	ldd	r24, Z+2	; 0x02
    393e:	93 81       	ldd	r25, Z+3	; 0x03
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	40 e2       	ldi	r20, 0x20	; 32
    3946:	51 e4       	ldi	r21, 0x41	; 65
    3948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	8e 01       	movw	r16, r28
    3952:	0b 58       	subi	r16, 0x8B	; 139
    3954:	1f 4f       	sbci	r17, 0xFF	; 255
    3956:	bc 01       	movw	r22, r24
    3958:	cd 01       	movw	r24, r26
    395a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	f8 01       	movw	r30, r16
    3964:	91 83       	std	Z+1, r25	; 0x01
    3966:	80 83       	st	Z, r24
    3968:	1f c0       	rjmp	.+62     	; 0x39a8 <SS_voidDeleteUser+0x4b4>
    396a:	fe 01       	movw	r30, r28
    396c:	ed 58       	subi	r30, 0x8D	; 141
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	80 e9       	ldi	r24, 0x90	; 144
    3972:	91 e0       	ldi	r25, 0x01	; 1
    3974:	91 83       	std	Z+1, r25	; 0x01
    3976:	80 83       	st	Z, r24
    3978:	fe 01       	movw	r30, r28
    397a:	ed 58       	subi	r30, 0x8D	; 141
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	80 81       	ld	r24, Z
    3980:	91 81       	ldd	r25, Z+1	; 0x01
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	f1 f7       	brne	.-4      	; 0x3982 <SS_voidDeleteUser+0x48e>
    3986:	fe 01       	movw	r30, r28
    3988:	ed 58       	subi	r30, 0x8D	; 141
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	91 83       	std	Z+1, r25	; 0x01
    398e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3990:	de 01       	movw	r26, r28
    3992:	ab 58       	subi	r26, 0x8B	; 139
    3994:	bf 4f       	sbci	r27, 0xFF	; 255
    3996:	fe 01       	movw	r30, r28
    3998:	eb 58       	subi	r30, 0x8B	; 139
    399a:	ff 4f       	sbci	r31, 0xFF	; 255
    399c:	80 81       	ld	r24, Z
    399e:	91 81       	ldd	r25, Z+1	; 0x01
    39a0:	01 97       	sbiw	r24, 0x01	; 1
    39a2:	11 96       	adiw	r26, 0x01	; 1
    39a4:	9c 93       	st	X, r25
    39a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39a8:	fe 01       	movw	r30, r28
    39aa:	eb 58       	subi	r30, 0x8B	; 139
    39ac:	ff 4f       	sbci	r31, 0xFF	; 255
    39ae:	80 81       	ld	r24, Z
    39b0:	91 81       	ldd	r25, Z+1	; 0x01
    39b2:	00 97       	sbiw	r24, 0x00	; 0
    39b4:	d1 f6       	brne	.-76     	; 0x396a <SS_voidDeleteUser+0x476>
    39b6:	28 c0       	rjmp	.+80     	; 0x3a08 <SS_voidDeleteUser+0x514>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b8:	8e 01       	movw	r16, r28
    39ba:	0b 58       	subi	r16, 0x8B	; 139
    39bc:	1f 4f       	sbci	r17, 0xFF	; 255
    39be:	fe 01       	movw	r30, r28
    39c0:	e9 58       	subi	r30, 0x89	; 137
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	60 81       	ld	r22, Z
    39c6:	71 81       	ldd	r23, Z+1	; 0x01
    39c8:	82 81       	ldd	r24, Z+2	; 0x02
    39ca:	93 81       	ldd	r25, Z+3	; 0x03
    39cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	f8 01       	movw	r30, r16
    39d6:	91 83       	std	Z+1, r25	; 0x01
    39d8:	80 83       	st	Z, r24
    39da:	de 01       	movw	r26, r28
    39dc:	af 58       	subi	r26, 0x8F	; 143
    39de:	bf 4f       	sbci	r27, 0xFF	; 255
    39e0:	fe 01       	movw	r30, r28
    39e2:	eb 58       	subi	r30, 0x8B	; 139
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	80 81       	ld	r24, Z
    39e8:	91 81       	ldd	r25, Z+1	; 0x01
    39ea:	11 96       	adiw	r26, 0x01	; 1
    39ec:	9c 93       	st	X, r25
    39ee:	8e 93       	st	-X, r24
    39f0:	fe 01       	movw	r30, r28
    39f2:	ef 58       	subi	r30, 0x8F	; 143
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	80 81       	ld	r24, Z
    39f8:	91 81       	ldd	r25, Z+1	; 0x01
    39fa:	01 97       	sbiw	r24, 0x01	; 1
    39fc:	f1 f7       	brne	.-4      	; 0x39fa <SS_voidDeleteUser+0x506>
    39fe:	fe 01       	movw	r30, r28
    3a00:	ef 58       	subi	r30, 0x8F	; 143
    3a02:	ff 4f       	sbci	r31, 0xFF	; 255
    3a04:	91 83       	std	Z+1, r25	; 0x01
    3a06:	80 83       	st	Z, r24
	_delay_ms(10);
	EEPROM_Position = EEPROM_user2_username;
    3a08:	fe 01       	movw	r30, r28
    3a0a:	e5 56       	subi	r30, 0x65	; 101
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	83 e1       	ldi	r24, 0x13	; 19
    3a10:	80 83       	st	Z, r24
	if (user2_check == 1) {
    3a12:	fe 01       	movw	r30, r28
    3a14:	e2 56       	subi	r30, 0x62	; 98
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	80 81       	ld	r24, Z
    3a1a:	81 30       	cpi	r24, 0x01	; 1
    3a1c:	09 f0       	breq	.+2      	; 0x3a20 <SS_voidDeleteUser+0x52c>
    3a1e:	e9 c0       	rjmp	.+466    	; 0x3bf2 <SS_voidDeleteUser+0x6fe>
		UART_voidTxChar('2');
    3a20:	82 e3       	ldi	r24, 0x32	; 50
    3a22:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
		UART_voidTxChar('-');
    3a26:	8d e2       	ldi	r24, 0x2D	; 45
    3a28:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
		for (counter = 0; counter < Maximum_password; counter++) {
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	e4 56       	subi	r30, 0x64	; 100
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	10 82       	st	Z, r1
    3a34:	d7 c0       	rjmp	.+430    	; 0x3be4 <SS_voidDeleteUser+0x6f0>
			EEPROM_voidReadByte(EEPROM_Position, &local_u8RxData);
    3a36:	fe 01       	movw	r30, r28
    3a38:	e5 56       	subi	r30, 0x65	; 101
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	80 81       	ld	r24, Z
    3a3e:	88 2f       	mov	r24, r24
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	9e 01       	movw	r18, r28
    3a44:	20 56       	subi	r18, 0x60	; 96
    3a46:	3f 4f       	sbci	r19, 0xFF	; 255
    3a48:	b9 01       	movw	r22, r18
    3a4a:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    3a4e:	fe 01       	movw	r30, r28
    3a50:	e3 59       	subi	r30, 0x93	; 147
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	80 e0       	ldi	r24, 0x00	; 0
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	a0 e2       	ldi	r26, 0x20	; 32
    3a5a:	b1 e4       	ldi	r27, 0x41	; 65
    3a5c:	80 83       	st	Z, r24
    3a5e:	91 83       	std	Z+1, r25	; 0x01
    3a60:	a2 83       	std	Z+2, r26	; 0x02
    3a62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a64:	8e 01       	movw	r16, r28
    3a66:	07 59       	subi	r16, 0x97	; 151
    3a68:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	e3 59       	subi	r30, 0x93	; 147
    3a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a70:	60 81       	ld	r22, Z
    3a72:	71 81       	ldd	r23, Z+1	; 0x01
    3a74:	82 81       	ldd	r24, Z+2	; 0x02
    3a76:	93 81       	ldd	r25, Z+3	; 0x03
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	4a e7       	ldi	r20, 0x7A	; 122
    3a7e:	55 e4       	ldi	r21, 0x45	; 69
    3a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	f8 01       	movw	r30, r16
    3a8a:	80 83       	st	Z, r24
    3a8c:	91 83       	std	Z+1, r25	; 0x01
    3a8e:	a2 83       	std	Z+2, r26	; 0x02
    3a90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a92:	fe 01       	movw	r30, r28
    3a94:	e7 59       	subi	r30, 0x97	; 151
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	60 81       	ld	r22, Z
    3a9a:	71 81       	ldd	r23, Z+1	; 0x01
    3a9c:	82 81       	ldd	r24, Z+2	; 0x02
    3a9e:	93 81       	ldd	r25, Z+3	; 0x03
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	40 e8       	ldi	r20, 0x80	; 128
    3aa6:	5f e3       	ldi	r21, 0x3F	; 63
    3aa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aac:	88 23       	and	r24, r24
    3aae:	44 f4       	brge	.+16     	; 0x3ac0 <SS_voidDeleteUser+0x5cc>
		__ticks = 1;
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	e9 59       	subi	r30, 0x99	; 153
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	91 83       	std	Z+1, r25	; 0x01
    3abc:	80 83       	st	Z, r24
    3abe:	64 c0       	rjmp	.+200    	; 0x3b88 <SS_voidDeleteUser+0x694>
	else if (__tmp > 65535)
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	e7 59       	subi	r30, 0x97	; 151
    3ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac6:	60 81       	ld	r22, Z
    3ac8:	71 81       	ldd	r23, Z+1	; 0x01
    3aca:	82 81       	ldd	r24, Z+2	; 0x02
    3acc:	93 81       	ldd	r25, Z+3	; 0x03
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	3f ef       	ldi	r19, 0xFF	; 255
    3ad2:	4f e7       	ldi	r20, 0x7F	; 127
    3ad4:	57 e4       	ldi	r21, 0x47	; 71
    3ad6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ada:	18 16       	cp	r1, r24
    3adc:	0c f0       	brlt	.+2      	; 0x3ae0 <SS_voidDeleteUser+0x5ec>
    3ade:	43 c0       	rjmp	.+134    	; 0x3b66 <SS_voidDeleteUser+0x672>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae0:	fe 01       	movw	r30, r28
    3ae2:	e3 59       	subi	r30, 0x93	; 147
    3ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae6:	60 81       	ld	r22, Z
    3ae8:	71 81       	ldd	r23, Z+1	; 0x01
    3aea:	82 81       	ldd	r24, Z+2	; 0x02
    3aec:	93 81       	ldd	r25, Z+3	; 0x03
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	40 e2       	ldi	r20, 0x20	; 32
    3af4:	51 e4       	ldi	r21, 0x41	; 65
    3af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3afa:	dc 01       	movw	r26, r24
    3afc:	cb 01       	movw	r24, r22
    3afe:	8e 01       	movw	r16, r28
    3b00:	09 59       	subi	r16, 0x99	; 153
    3b02:	1f 4f       	sbci	r17, 0xFF	; 255
    3b04:	bc 01       	movw	r22, r24
    3b06:	cd 01       	movw	r24, r26
    3b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	f8 01       	movw	r30, r16
    3b12:	91 83       	std	Z+1, r25	; 0x01
    3b14:	80 83       	st	Z, r24
    3b16:	1f c0       	rjmp	.+62     	; 0x3b56 <SS_voidDeleteUser+0x662>
    3b18:	fe 01       	movw	r30, r28
    3b1a:	eb 59       	subi	r30, 0x9B	; 155
    3b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1e:	80 e9       	ldi	r24, 0x90	; 144
    3b20:	91 e0       	ldi	r25, 0x01	; 1
    3b22:	91 83       	std	Z+1, r25	; 0x01
    3b24:	80 83       	st	Z, r24
    3b26:	fe 01       	movw	r30, r28
    3b28:	eb 59       	subi	r30, 0x9B	; 155
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	80 81       	ld	r24, Z
    3b2e:	91 81       	ldd	r25, Z+1	; 0x01
    3b30:	01 97       	sbiw	r24, 0x01	; 1
    3b32:	f1 f7       	brne	.-4      	; 0x3b30 <SS_voidDeleteUser+0x63c>
    3b34:	fe 01       	movw	r30, r28
    3b36:	eb 59       	subi	r30, 0x9B	; 155
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b3e:	de 01       	movw	r26, r28
    3b40:	a9 59       	subi	r26, 0x99	; 153
    3b42:	bf 4f       	sbci	r27, 0xFF	; 255
    3b44:	fe 01       	movw	r30, r28
    3b46:	e9 59       	subi	r30, 0x99	; 153
    3b48:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4a:	80 81       	ld	r24, Z
    3b4c:	91 81       	ldd	r25, Z+1	; 0x01
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	11 96       	adiw	r26, 0x01	; 1
    3b52:	9c 93       	st	X, r25
    3b54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b56:	fe 01       	movw	r30, r28
    3b58:	e9 59       	subi	r30, 0x99	; 153
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	80 81       	ld	r24, Z
    3b5e:	91 81       	ldd	r25, Z+1	; 0x01
    3b60:	00 97       	sbiw	r24, 0x00	; 0
    3b62:	d1 f6       	brne	.-76     	; 0x3b18 <SS_voidDeleteUser+0x624>
    3b64:	27 c0       	rjmp	.+78     	; 0x3bb4 <SS_voidDeleteUser+0x6c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b66:	8e 01       	movw	r16, r28
    3b68:	09 59       	subi	r16, 0x99	; 153
    3b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b6c:	fe 01       	movw	r30, r28
    3b6e:	e7 59       	subi	r30, 0x97	; 151
    3b70:	ff 4f       	sbci	r31, 0xFF	; 255
    3b72:	60 81       	ld	r22, Z
    3b74:	71 81       	ldd	r23, Z+1	; 0x01
    3b76:	82 81       	ldd	r24, Z+2	; 0x02
    3b78:	93 81       	ldd	r25, Z+3	; 0x03
    3b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7e:	dc 01       	movw	r26, r24
    3b80:	cb 01       	movw	r24, r22
    3b82:	f8 01       	movw	r30, r16
    3b84:	91 83       	std	Z+1, r25	; 0x01
    3b86:	80 83       	st	Z, r24
    3b88:	de 01       	movw	r26, r28
    3b8a:	ad 59       	subi	r26, 0x9D	; 157
    3b8c:	bf 4f       	sbci	r27, 0xFF	; 255
    3b8e:	fe 01       	movw	r30, r28
    3b90:	e9 59       	subi	r30, 0x99	; 153
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	80 81       	ld	r24, Z
    3b96:	91 81       	ldd	r25, Z+1	; 0x01
    3b98:	8d 93       	st	X+, r24
    3b9a:	9c 93       	st	X, r25
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	ed 59       	subi	r30, 0x9D	; 157
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	80 81       	ld	r24, Z
    3ba4:	91 81       	ldd	r25, Z+1	; 0x01
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	f1 f7       	brne	.-4      	; 0x3ba6 <SS_voidDeleteUser+0x6b2>
    3baa:	fe 01       	movw	r30, r28
    3bac:	ed 59       	subi	r30, 0x9D	; 157
    3bae:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb0:	91 83       	std	Z+1, r25	; 0x01
    3bb2:	80 83       	st	Z, r24
			_delay_ms(10);
			UART_voidTxChar(local_u8RxData);
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	e0 56       	subi	r30, 0x60	; 96
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	80 81       	ld	r24, Z
    3bbc:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
			EEPROM_Position++;
    3bc0:	de 01       	movw	r26, r28
    3bc2:	a5 56       	subi	r26, 0x65	; 101
    3bc4:	bf 4f       	sbci	r27, 0xFF	; 255
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	e5 56       	subi	r30, 0x65	; 101
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	80 81       	ld	r24, Z
    3bce:	8f 5f       	subi	r24, 0xFF	; 255
    3bd0:	8c 93       	st	X, r24
	_delay_ms(10);
	EEPROM_Position = EEPROM_user2_username;
	if (user2_check == 1) {
		UART_voidTxChar('2');
		UART_voidTxChar('-');
		for (counter = 0; counter < Maximum_password; counter++) {
    3bd2:	de 01       	movw	r26, r28
    3bd4:	a4 56       	subi	r26, 0x64	; 100
    3bd6:	bf 4f       	sbci	r27, 0xFF	; 255
    3bd8:	fe 01       	movw	r30, r28
    3bda:	e4 56       	subi	r30, 0x64	; 100
    3bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bde:	80 81       	ld	r24, Z
    3be0:	8f 5f       	subi	r24, 0xFF	; 255
    3be2:	8c 93       	st	X, r24
    3be4:	fe 01       	movw	r30, r28
    3be6:	e4 56       	subi	r30, 0x64	; 100
    3be8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bea:	80 81       	ld	r24, Z
    3bec:	85 30       	cpi	r24, 0x05	; 5
    3bee:	08 f4       	brcc	.+2      	; 0x3bf2 <SS_voidDeleteUser+0x6fe>
    3bf0:	22 cf       	rjmp	.-444    	; 0x3a36 <SS_voidDeleteUser+0x542>
			EEPROM_Position++;
		}
	}

//check if user3 is created  then copy username
	EEPROM_voidReadByte( EEPROM_user3_check, &user3_check);
    3bf2:	9e 01       	movw	r18, r28
    3bf4:	21 56       	subi	r18, 0x61	; 97
    3bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    3bf8:	83 e0       	ldi	r24, 0x03	; 3
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	b9 01       	movw	r22, r18
    3bfe:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    3c02:	fe 01       	movw	r30, r28
    3c04:	e1 5a       	subi	r30, 0xA1	; 161
    3c06:	ff 4f       	sbci	r31, 0xFF	; 255
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	a0 e2       	ldi	r26, 0x20	; 32
    3c0e:	b1 e4       	ldi	r27, 0x41	; 65
    3c10:	80 83       	st	Z, r24
    3c12:	91 83       	std	Z+1, r25	; 0x01
    3c14:	a2 83       	std	Z+2, r26	; 0x02
    3c16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c18:	8e 01       	movw	r16, r28
    3c1a:	05 5a       	subi	r16, 0xA5	; 165
    3c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1e:	fe 01       	movw	r30, r28
    3c20:	e1 5a       	subi	r30, 0xA1	; 161
    3c22:	ff 4f       	sbci	r31, 0xFF	; 255
    3c24:	60 81       	ld	r22, Z
    3c26:	71 81       	ldd	r23, Z+1	; 0x01
    3c28:	82 81       	ldd	r24, Z+2	; 0x02
    3c2a:	93 81       	ldd	r25, Z+3	; 0x03
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	4a e7       	ldi	r20, 0x7A	; 122
    3c32:	55 e4       	ldi	r21, 0x45	; 69
    3c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	f8 01       	movw	r30, r16
    3c3e:	80 83       	st	Z, r24
    3c40:	91 83       	std	Z+1, r25	; 0x01
    3c42:	a2 83       	std	Z+2, r26	; 0x02
    3c44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c46:	fe 01       	movw	r30, r28
    3c48:	e5 5a       	subi	r30, 0xA5	; 165
    3c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4c:	60 81       	ld	r22, Z
    3c4e:	71 81       	ldd	r23, Z+1	; 0x01
    3c50:	82 81       	ldd	r24, Z+2	; 0x02
    3c52:	93 81       	ldd	r25, Z+3	; 0x03
    3c54:	20 e0       	ldi	r18, 0x00	; 0
    3c56:	30 e0       	ldi	r19, 0x00	; 0
    3c58:	40 e8       	ldi	r20, 0x80	; 128
    3c5a:	5f e3       	ldi	r21, 0x3F	; 63
    3c5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c60:	88 23       	and	r24, r24
    3c62:	44 f4       	brge	.+16     	; 0x3c74 <SS_voidDeleteUser+0x780>
		__ticks = 1;
    3c64:	fe 01       	movw	r30, r28
    3c66:	e7 5a       	subi	r30, 0xA7	; 167
    3c68:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	91 83       	std	Z+1, r25	; 0x01
    3c70:	80 83       	st	Z, r24
    3c72:	64 c0       	rjmp	.+200    	; 0x3d3c <SS_voidDeleteUser+0x848>
	else if (__tmp > 65535)
    3c74:	fe 01       	movw	r30, r28
    3c76:	e5 5a       	subi	r30, 0xA5	; 165
    3c78:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7a:	60 81       	ld	r22, Z
    3c7c:	71 81       	ldd	r23, Z+1	; 0x01
    3c7e:	82 81       	ldd	r24, Z+2	; 0x02
    3c80:	93 81       	ldd	r25, Z+3	; 0x03
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	3f ef       	ldi	r19, 0xFF	; 255
    3c86:	4f e7       	ldi	r20, 0x7F	; 127
    3c88:	57 e4       	ldi	r21, 0x47	; 71
    3c8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c8e:	18 16       	cp	r1, r24
    3c90:	0c f0       	brlt	.+2      	; 0x3c94 <SS_voidDeleteUser+0x7a0>
    3c92:	43 c0       	rjmp	.+134    	; 0x3d1a <SS_voidDeleteUser+0x826>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c94:	fe 01       	movw	r30, r28
    3c96:	e1 5a       	subi	r30, 0xA1	; 161
    3c98:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9a:	60 81       	ld	r22, Z
    3c9c:	71 81       	ldd	r23, Z+1	; 0x01
    3c9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ca0:	93 81       	ldd	r25, Z+3	; 0x03
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	40 e2       	ldi	r20, 0x20	; 32
    3ca8:	51 e4       	ldi	r21, 0x41	; 65
    3caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	8e 01       	movw	r16, r28
    3cb4:	07 5a       	subi	r16, 0xA7	; 167
    3cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb8:	bc 01       	movw	r22, r24
    3cba:	cd 01       	movw	r24, r26
    3cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	f8 01       	movw	r30, r16
    3cc6:	91 83       	std	Z+1, r25	; 0x01
    3cc8:	80 83       	st	Z, r24
    3cca:	1f c0       	rjmp	.+62     	; 0x3d0a <SS_voidDeleteUser+0x816>
    3ccc:	fe 01       	movw	r30, r28
    3cce:	e9 5a       	subi	r30, 0xA9	; 169
    3cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd2:	80 e9       	ldi	r24, 0x90	; 144
    3cd4:	91 e0       	ldi	r25, 0x01	; 1
    3cd6:	91 83       	std	Z+1, r25	; 0x01
    3cd8:	80 83       	st	Z, r24
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e9 5a       	subi	r30, 0xA9	; 169
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	80 81       	ld	r24, Z
    3ce2:	91 81       	ldd	r25, Z+1	; 0x01
    3ce4:	01 97       	sbiw	r24, 0x01	; 1
    3ce6:	f1 f7       	brne	.-4      	; 0x3ce4 <SS_voidDeleteUser+0x7f0>
    3ce8:	fe 01       	movw	r30, r28
    3cea:	e9 5a       	subi	r30, 0xA9	; 169
    3cec:	ff 4f       	sbci	r31, 0xFF	; 255
    3cee:	91 83       	std	Z+1, r25	; 0x01
    3cf0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cf2:	de 01       	movw	r26, r28
    3cf4:	a7 5a       	subi	r26, 0xA7	; 167
    3cf6:	bf 4f       	sbci	r27, 0xFF	; 255
    3cf8:	fe 01       	movw	r30, r28
    3cfa:	e7 5a       	subi	r30, 0xA7	; 167
    3cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfe:	80 81       	ld	r24, Z
    3d00:	91 81       	ldd	r25, Z+1	; 0x01
    3d02:	01 97       	sbiw	r24, 0x01	; 1
    3d04:	11 96       	adiw	r26, 0x01	; 1
    3d06:	9c 93       	st	X, r25
    3d08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	e7 5a       	subi	r30, 0xA7	; 167
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	80 81       	ld	r24, Z
    3d12:	91 81       	ldd	r25, Z+1	; 0x01
    3d14:	00 97       	sbiw	r24, 0x00	; 0
    3d16:	d1 f6       	brne	.-76     	; 0x3ccc <SS_voidDeleteUser+0x7d8>
    3d18:	28 c0       	rjmp	.+80     	; 0x3d6a <SS_voidDeleteUser+0x876>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d1a:	8e 01       	movw	r16, r28
    3d1c:	07 5a       	subi	r16, 0xA7	; 167
    3d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d20:	fe 01       	movw	r30, r28
    3d22:	e5 5a       	subi	r30, 0xA5	; 165
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	60 81       	ld	r22, Z
    3d28:	71 81       	ldd	r23, Z+1	; 0x01
    3d2a:	82 81       	ldd	r24, Z+2	; 0x02
    3d2c:	93 81       	ldd	r25, Z+3	; 0x03
    3d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d32:	dc 01       	movw	r26, r24
    3d34:	cb 01       	movw	r24, r22
    3d36:	f8 01       	movw	r30, r16
    3d38:	91 83       	std	Z+1, r25	; 0x01
    3d3a:	80 83       	st	Z, r24
    3d3c:	de 01       	movw	r26, r28
    3d3e:	ab 5a       	subi	r26, 0xAB	; 171
    3d40:	bf 4f       	sbci	r27, 0xFF	; 255
    3d42:	fe 01       	movw	r30, r28
    3d44:	e7 5a       	subi	r30, 0xA7	; 167
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	80 81       	ld	r24, Z
    3d4a:	91 81       	ldd	r25, Z+1	; 0x01
    3d4c:	11 96       	adiw	r26, 0x01	; 1
    3d4e:	9c 93       	st	X, r25
    3d50:	8e 93       	st	-X, r24
    3d52:	fe 01       	movw	r30, r28
    3d54:	eb 5a       	subi	r30, 0xAB	; 171
    3d56:	ff 4f       	sbci	r31, 0xFF	; 255
    3d58:	80 81       	ld	r24, Z
    3d5a:	91 81       	ldd	r25, Z+1	; 0x01
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	f1 f7       	brne	.-4      	; 0x3d5c <SS_voidDeleteUser+0x868>
    3d60:	fe 01       	movw	r30, r28
    3d62:	eb 5a       	subi	r30, 0xAB	; 171
    3d64:	ff 4f       	sbci	r31, 0xFF	; 255
    3d66:	91 83       	std	Z+1, r25	; 0x01
    3d68:	80 83       	st	Z, r24
	_delay_ms(10);
	EEPROM_Position = EEPROM_user3_username;
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	e5 56       	subi	r30, 0x65	; 101
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	8d e1       	ldi	r24, 0x1D	; 29
    3d72:	80 83       	st	Z, r24
	if (user3_check == 1) {
    3d74:	fe 01       	movw	r30, r28
    3d76:	e1 56       	subi	r30, 0x61	; 97
    3d78:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7a:	80 81       	ld	r24, Z
    3d7c:	81 30       	cpi	r24, 0x01	; 1
    3d7e:	09 f0       	breq	.+2      	; 0x3d82 <SS_voidDeleteUser+0x88e>
    3d80:	e9 c0       	rjmp	.+466    	; 0x3f54 <SS_voidDeleteUser+0xa60>
		UART_voidTxChar('3');
    3d82:	83 e3       	ldi	r24, 0x33	; 51
    3d84:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
		UART_voidTxChar('-');
    3d88:	8d e2       	ldi	r24, 0x2D	; 45
    3d8a:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
		for (counter = 0; counter < Maximum_password; counter++) {
    3d8e:	fe 01       	movw	r30, r28
    3d90:	e4 56       	subi	r30, 0x64	; 100
    3d92:	ff 4f       	sbci	r31, 0xFF	; 255
    3d94:	10 82       	st	Z, r1
    3d96:	d7 c0       	rjmp	.+430    	; 0x3f46 <SS_voidDeleteUser+0xa52>
			EEPROM_voidReadByte(EEPROM_Position, &local_u8RxData);
    3d98:	fe 01       	movw	r30, r28
    3d9a:	e5 56       	subi	r30, 0x65	; 101
    3d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9e:	80 81       	ld	r24, Z
    3da0:	88 2f       	mov	r24, r24
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	9e 01       	movw	r18, r28
    3da6:	20 56       	subi	r18, 0x60	; 96
    3da8:	3f 4f       	sbci	r19, 0xFF	; 255
    3daa:	b9 01       	movw	r22, r18
    3dac:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    3db0:	fe 01       	movw	r30, r28
    3db2:	ef 5a       	subi	r30, 0xAF	; 175
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	a0 e2       	ldi	r26, 0x20	; 32
    3dbc:	b1 e4       	ldi	r27, 0x41	; 65
    3dbe:	80 83       	st	Z, r24
    3dc0:	91 83       	std	Z+1, r25	; 0x01
    3dc2:	a2 83       	std	Z+2, r26	; 0x02
    3dc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dc6:	8e 01       	movw	r16, r28
    3dc8:	03 5b       	subi	r16, 0xB3	; 179
    3dca:	1f 4f       	sbci	r17, 0xFF	; 255
    3dcc:	fe 01       	movw	r30, r28
    3dce:	ef 5a       	subi	r30, 0xAF	; 175
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	60 81       	ld	r22, Z
    3dd4:	71 81       	ldd	r23, Z+1	; 0x01
    3dd6:	82 81       	ldd	r24, Z+2	; 0x02
    3dd8:	93 81       	ldd	r25, Z+3	; 0x03
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	4a e7       	ldi	r20, 0x7A	; 122
    3de0:	55 e4       	ldi	r21, 0x45	; 69
    3de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	f8 01       	movw	r30, r16
    3dec:	80 83       	st	Z, r24
    3dee:	91 83       	std	Z+1, r25	; 0x01
    3df0:	a2 83       	std	Z+2, r26	; 0x02
    3df2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3df4:	fe 01       	movw	r30, r28
    3df6:	e3 5b       	subi	r30, 0xB3	; 179
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	60 81       	ld	r22, Z
    3dfc:	71 81       	ldd	r23, Z+1	; 0x01
    3dfe:	82 81       	ldd	r24, Z+2	; 0x02
    3e00:	93 81       	ldd	r25, Z+3	; 0x03
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	40 e8       	ldi	r20, 0x80	; 128
    3e08:	5f e3       	ldi	r21, 0x3F	; 63
    3e0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e0e:	88 23       	and	r24, r24
    3e10:	44 f4       	brge	.+16     	; 0x3e22 <SS_voidDeleteUser+0x92e>
		__ticks = 1;
    3e12:	fe 01       	movw	r30, r28
    3e14:	e5 5b       	subi	r30, 0xB5	; 181
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	91 83       	std	Z+1, r25	; 0x01
    3e1e:	80 83       	st	Z, r24
    3e20:	64 c0       	rjmp	.+200    	; 0x3eea <SS_voidDeleteUser+0x9f6>
	else if (__tmp > 65535)
    3e22:	fe 01       	movw	r30, r28
    3e24:	e3 5b       	subi	r30, 0xB3	; 179
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	60 81       	ld	r22, Z
    3e2a:	71 81       	ldd	r23, Z+1	; 0x01
    3e2c:	82 81       	ldd	r24, Z+2	; 0x02
    3e2e:	93 81       	ldd	r25, Z+3	; 0x03
    3e30:	20 e0       	ldi	r18, 0x00	; 0
    3e32:	3f ef       	ldi	r19, 0xFF	; 255
    3e34:	4f e7       	ldi	r20, 0x7F	; 127
    3e36:	57 e4       	ldi	r21, 0x47	; 71
    3e38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e3c:	18 16       	cp	r1, r24
    3e3e:	0c f0       	brlt	.+2      	; 0x3e42 <SS_voidDeleteUser+0x94e>
    3e40:	43 c0       	rjmp	.+134    	; 0x3ec8 <SS_voidDeleteUser+0x9d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e42:	fe 01       	movw	r30, r28
    3e44:	ef 5a       	subi	r30, 0xAF	; 175
    3e46:	ff 4f       	sbci	r31, 0xFF	; 255
    3e48:	60 81       	ld	r22, Z
    3e4a:	71 81       	ldd	r23, Z+1	; 0x01
    3e4c:	82 81       	ldd	r24, Z+2	; 0x02
    3e4e:	93 81       	ldd	r25, Z+3	; 0x03
    3e50:	20 e0       	ldi	r18, 0x00	; 0
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	40 e2       	ldi	r20, 0x20	; 32
    3e56:	51 e4       	ldi	r21, 0x41	; 65
    3e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	cb 01       	movw	r24, r22
    3e60:	8e 01       	movw	r16, r28
    3e62:	05 5b       	subi	r16, 0xB5	; 181
    3e64:	1f 4f       	sbci	r17, 0xFF	; 255
    3e66:	bc 01       	movw	r22, r24
    3e68:	cd 01       	movw	r24, r26
    3e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	f8 01       	movw	r30, r16
    3e74:	91 83       	std	Z+1, r25	; 0x01
    3e76:	80 83       	st	Z, r24
    3e78:	1f c0       	rjmp	.+62     	; 0x3eb8 <SS_voidDeleteUser+0x9c4>
    3e7a:	fe 01       	movw	r30, r28
    3e7c:	e7 5b       	subi	r30, 0xB7	; 183
    3e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e80:	80 e9       	ldi	r24, 0x90	; 144
    3e82:	91 e0       	ldi	r25, 0x01	; 1
    3e84:	91 83       	std	Z+1, r25	; 0x01
    3e86:	80 83       	st	Z, r24
    3e88:	fe 01       	movw	r30, r28
    3e8a:	e7 5b       	subi	r30, 0xB7	; 183
    3e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8e:	80 81       	ld	r24, Z
    3e90:	91 81       	ldd	r25, Z+1	; 0x01
    3e92:	01 97       	sbiw	r24, 0x01	; 1
    3e94:	f1 f7       	brne	.-4      	; 0x3e92 <SS_voidDeleteUser+0x99e>
    3e96:	fe 01       	movw	r30, r28
    3e98:	e7 5b       	subi	r30, 0xB7	; 183
    3e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9c:	91 83       	std	Z+1, r25	; 0x01
    3e9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ea0:	de 01       	movw	r26, r28
    3ea2:	a5 5b       	subi	r26, 0xB5	; 181
    3ea4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	e5 5b       	subi	r30, 0xB5	; 181
    3eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3eac:	80 81       	ld	r24, Z
    3eae:	91 81       	ldd	r25, Z+1	; 0x01
    3eb0:	01 97       	sbiw	r24, 0x01	; 1
    3eb2:	11 96       	adiw	r26, 0x01	; 1
    3eb4:	9c 93       	st	X, r25
    3eb6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eb8:	fe 01       	movw	r30, r28
    3eba:	e5 5b       	subi	r30, 0xB5	; 181
    3ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebe:	80 81       	ld	r24, Z
    3ec0:	91 81       	ldd	r25, Z+1	; 0x01
    3ec2:	00 97       	sbiw	r24, 0x00	; 0
    3ec4:	d1 f6       	brne	.-76     	; 0x3e7a <SS_voidDeleteUser+0x986>
    3ec6:	27 c0       	rjmp	.+78     	; 0x3f16 <SS_voidDeleteUser+0xa22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ec8:	8e 01       	movw	r16, r28
    3eca:	05 5b       	subi	r16, 0xB5	; 181
    3ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ece:	fe 01       	movw	r30, r28
    3ed0:	e3 5b       	subi	r30, 0xB3	; 179
    3ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed4:	60 81       	ld	r22, Z
    3ed6:	71 81       	ldd	r23, Z+1	; 0x01
    3ed8:	82 81       	ldd	r24, Z+2	; 0x02
    3eda:	93 81       	ldd	r25, Z+3	; 0x03
    3edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	f8 01       	movw	r30, r16
    3ee6:	91 83       	std	Z+1, r25	; 0x01
    3ee8:	80 83       	st	Z, r24
    3eea:	de 01       	movw	r26, r28
    3eec:	a9 5b       	subi	r26, 0xB9	; 185
    3eee:	bf 4f       	sbci	r27, 0xFF	; 255
    3ef0:	fe 01       	movw	r30, r28
    3ef2:	e5 5b       	subi	r30, 0xB5	; 181
    3ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef6:	80 81       	ld	r24, Z
    3ef8:	91 81       	ldd	r25, Z+1	; 0x01
    3efa:	8d 93       	st	X+, r24
    3efc:	9c 93       	st	X, r25
    3efe:	fe 01       	movw	r30, r28
    3f00:	e9 5b       	subi	r30, 0xB9	; 185
    3f02:	ff 4f       	sbci	r31, 0xFF	; 255
    3f04:	80 81       	ld	r24, Z
    3f06:	91 81       	ldd	r25, Z+1	; 0x01
    3f08:	01 97       	sbiw	r24, 0x01	; 1
    3f0a:	f1 f7       	brne	.-4      	; 0x3f08 <SS_voidDeleteUser+0xa14>
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	e9 5b       	subi	r30, 0xB9	; 185
    3f10:	ff 4f       	sbci	r31, 0xFF	; 255
    3f12:	91 83       	std	Z+1, r25	; 0x01
    3f14:	80 83       	st	Z, r24
			_delay_ms(10);
			UART_voidTxChar(local_u8RxData);
    3f16:	fe 01       	movw	r30, r28
    3f18:	e0 56       	subi	r30, 0x60	; 96
    3f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1c:	80 81       	ld	r24, Z
    3f1e:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
			EEPROM_Position++;
    3f22:	de 01       	movw	r26, r28
    3f24:	a5 56       	subi	r26, 0x65	; 101
    3f26:	bf 4f       	sbci	r27, 0xFF	; 255
    3f28:	fe 01       	movw	r30, r28
    3f2a:	e5 56       	subi	r30, 0x65	; 101
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	80 81       	ld	r24, Z
    3f30:	8f 5f       	subi	r24, 0xFF	; 255
    3f32:	8c 93       	st	X, r24
	_delay_ms(10);
	EEPROM_Position = EEPROM_user3_username;
	if (user3_check == 1) {
		UART_voidTxChar('3');
		UART_voidTxChar('-');
		for (counter = 0; counter < Maximum_password; counter++) {
    3f34:	de 01       	movw	r26, r28
    3f36:	a4 56       	subi	r26, 0x64	; 100
    3f38:	bf 4f       	sbci	r27, 0xFF	; 255
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	e4 56       	subi	r30, 0x64	; 100
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	80 81       	ld	r24, Z
    3f42:	8f 5f       	subi	r24, 0xFF	; 255
    3f44:	8c 93       	st	X, r24
    3f46:	fe 01       	movw	r30, r28
    3f48:	e4 56       	subi	r30, 0x64	; 100
    3f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4c:	80 81       	ld	r24, Z
    3f4e:	85 30       	cpi	r24, 0x05	; 5
    3f50:	08 f4       	brcc	.+2      	; 0x3f54 <SS_voidDeleteUser+0xa60>
    3f52:	22 cf       	rjmp	.-444    	; 0x3d98 <SS_voidDeleteUser+0x8a4>
			UART_voidTxChar(local_u8RxData);
			EEPROM_Position++;
		}
	}

	if (user1_check != 1 && user2_check != 1 && user3_check != 1) {
    3f54:	fe 01       	movw	r30, r28
    3f56:	e3 56       	subi	r30, 0x63	; 99
    3f58:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5a:	80 81       	ld	r24, Z
    3f5c:	81 30       	cpi	r24, 0x01	; 1
    3f5e:	09 f4       	brne	.+2      	; 0x3f62 <SS_voidDeleteUser+0xa6e>
    3f60:	98 c0       	rjmp	.+304    	; 0x4092 <SS_voidDeleteUser+0xb9e>
    3f62:	fe 01       	movw	r30, r28
    3f64:	e2 56       	subi	r30, 0x62	; 98
    3f66:	ff 4f       	sbci	r31, 0xFF	; 255
    3f68:	80 81       	ld	r24, Z
    3f6a:	81 30       	cpi	r24, 0x01	; 1
    3f6c:	09 f4       	brne	.+2      	; 0x3f70 <SS_voidDeleteUser+0xa7c>
    3f6e:	91 c0       	rjmp	.+290    	; 0x4092 <SS_voidDeleteUser+0xb9e>
    3f70:	fe 01       	movw	r30, r28
    3f72:	e1 56       	subi	r30, 0x61	; 97
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	80 81       	ld	r24, Z
    3f78:	81 30       	cpi	r24, 0x01	; 1
    3f7a:	09 f4       	brne	.+2      	; 0x3f7e <SS_voidDeleteUser+0xa8a>
    3f7c:	8a c0       	rjmp	.+276    	; 0x4092 <SS_voidDeleteUser+0xb9e>
		UART_voidTxString((u8*) "No user exist ");
    3f7e:	81 e4       	ldi	r24, 0x41	; 65
    3f80:	92 e0       	ldi	r25, 0x02	; 2
    3f82:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    3f86:	fe 01       	movw	r30, r28
    3f88:	ed 5b       	subi	r30, 0xBD	; 189
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	80 e0       	ldi	r24, 0x00	; 0
    3f8e:	90 e8       	ldi	r25, 0x80	; 128
    3f90:	ab e3       	ldi	r26, 0x3B	; 59
    3f92:	b5 e4       	ldi	r27, 0x45	; 69
    3f94:	80 83       	st	Z, r24
    3f96:	91 83       	std	Z+1, r25	; 0x01
    3f98:	a2 83       	std	Z+2, r26	; 0x02
    3f9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f9c:	8e 01       	movw	r16, r28
    3f9e:	01 5c       	subi	r16, 0xC1	; 193
    3fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	ed 5b       	subi	r30, 0xBD	; 189
    3fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa8:	60 81       	ld	r22, Z
    3faa:	71 81       	ldd	r23, Z+1	; 0x01
    3fac:	82 81       	ldd	r24, Z+2	; 0x02
    3fae:	93 81       	ldd	r25, Z+3	; 0x03
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	4a e7       	ldi	r20, 0x7A	; 122
    3fb6:	55 e4       	ldi	r21, 0x45	; 69
    3fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	f8 01       	movw	r30, r16
    3fc2:	80 83       	st	Z, r24
    3fc4:	91 83       	std	Z+1, r25	; 0x01
    3fc6:	a2 83       	std	Z+2, r26	; 0x02
    3fc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fca:	fe 01       	movw	r30, r28
    3fcc:	ff 96       	adiw	r30, 0x3f	; 63
    3fce:	60 81       	ld	r22, Z
    3fd0:	71 81       	ldd	r23, Z+1	; 0x01
    3fd2:	82 81       	ldd	r24, Z+2	; 0x02
    3fd4:	93 81       	ldd	r25, Z+3	; 0x03
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	40 e8       	ldi	r20, 0x80	; 128
    3fdc:	5f e3       	ldi	r21, 0x3F	; 63
    3fde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fe2:	88 23       	and	r24, r24
    3fe4:	2c f4       	brge	.+10     	; 0x3ff0 <SS_voidDeleteUser+0xafc>
		__ticks = 1;
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	9e af       	std	Y+62, r25	; 0x3e
    3fec:	8d af       	std	Y+61, r24	; 0x3d
    3fee:	46 c0       	rjmp	.+140    	; 0x407c <SS_voidDeleteUser+0xb88>
	else if (__tmp > 65535)
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	ff 96       	adiw	r30, 0x3f	; 63
    3ff4:	60 81       	ld	r22, Z
    3ff6:	71 81       	ldd	r23, Z+1	; 0x01
    3ff8:	82 81       	ldd	r24, Z+2	; 0x02
    3ffa:	93 81       	ldd	r25, Z+3	; 0x03
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	3f ef       	ldi	r19, 0xFF	; 255
    4000:	4f e7       	ldi	r20, 0x7F	; 127
    4002:	57 e4       	ldi	r21, 0x47	; 71
    4004:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4008:	18 16       	cp	r1, r24
    400a:	64 f5       	brge	.+88     	; 0x4064 <SS_voidDeleteUser+0xb70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    400c:	fe 01       	movw	r30, r28
    400e:	ed 5b       	subi	r30, 0xBD	; 189
    4010:	ff 4f       	sbci	r31, 0xFF	; 255
    4012:	60 81       	ld	r22, Z
    4014:	71 81       	ldd	r23, Z+1	; 0x01
    4016:	82 81       	ldd	r24, Z+2	; 0x02
    4018:	93 81       	ldd	r25, Z+3	; 0x03
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	40 e2       	ldi	r20, 0x20	; 32
    4020:	51 e4       	ldi	r21, 0x41	; 65
    4022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4026:	dc 01       	movw	r26, r24
    4028:	cb 01       	movw	r24, r22
    402a:	bc 01       	movw	r22, r24
    402c:	cd 01       	movw	r24, r26
    402e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4032:	dc 01       	movw	r26, r24
    4034:	cb 01       	movw	r24, r22
    4036:	9e af       	std	Y+62, r25	; 0x3e
    4038:	8d af       	std	Y+61, r24	; 0x3d
    403a:	0f c0       	rjmp	.+30     	; 0x405a <SS_voidDeleteUser+0xb66>
    403c:	80 e9       	ldi	r24, 0x90	; 144
    403e:	91 e0       	ldi	r25, 0x01	; 1
    4040:	9c af       	std	Y+60, r25	; 0x3c
    4042:	8b af       	std	Y+59, r24	; 0x3b
    4044:	8b ad       	ldd	r24, Y+59	; 0x3b
    4046:	9c ad       	ldd	r25, Y+60	; 0x3c
    4048:	01 97       	sbiw	r24, 0x01	; 1
    404a:	f1 f7       	brne	.-4      	; 0x4048 <SS_voidDeleteUser+0xb54>
    404c:	9c af       	std	Y+60, r25	; 0x3c
    404e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4050:	8d ad       	ldd	r24, Y+61	; 0x3d
    4052:	9e ad       	ldd	r25, Y+62	; 0x3e
    4054:	01 97       	sbiw	r24, 0x01	; 1
    4056:	9e af       	std	Y+62, r25	; 0x3e
    4058:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    405a:	8d ad       	ldd	r24, Y+61	; 0x3d
    405c:	9e ad       	ldd	r25, Y+62	; 0x3e
    405e:	00 97       	sbiw	r24, 0x00	; 0
    4060:	69 f7       	brne	.-38     	; 0x403c <SS_voidDeleteUser+0xb48>
    4062:	4c c2       	rjmp	.+1176   	; 0x44fc <SS_voidDeleteUser+0x1008>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4064:	fe 01       	movw	r30, r28
    4066:	ff 96       	adiw	r30, 0x3f	; 63
    4068:	60 81       	ld	r22, Z
    406a:	71 81       	ldd	r23, Z+1	; 0x01
    406c:	82 81       	ldd	r24, Z+2	; 0x02
    406e:	93 81       	ldd	r25, Z+3	; 0x03
    4070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4074:	dc 01       	movw	r26, r24
    4076:	cb 01       	movw	r24, r22
    4078:	9e af       	std	Y+62, r25	; 0x3e
    407a:	8d af       	std	Y+61, r24	; 0x3d
    407c:	8d ad       	ldd	r24, Y+61	; 0x3d
    407e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4080:	9a af       	std	Y+58, r25	; 0x3a
    4082:	89 af       	std	Y+57, r24	; 0x39
    4084:	89 ad       	ldd	r24, Y+57	; 0x39
    4086:	9a ad       	ldd	r25, Y+58	; 0x3a
    4088:	01 97       	sbiw	r24, 0x01	; 1
    408a:	f1 f7       	brne	.-4      	; 0x4088 <SS_voidDeleteUser+0xb94>
    408c:	9a af       	std	Y+58, r25	; 0x3a
    408e:	89 af       	std	Y+57, r24	; 0x39
    4090:	35 c2       	rjmp	.+1130   	; 0x44fc <SS_voidDeleteUser+0x1008>
		_delay_ms(3000);
		return;
	}
	UART_voidTxNewLine();
    4092:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
// read user inpput

	do {
		UART_voidRxChar(&local_u8RxData);
    4096:	ce 01       	movw	r24, r28
    4098:	80 56       	subi	r24, 0x60	; 96
    409a:	9f 4f       	sbci	r25, 0xFF	; 255
    409c:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
	} while (local_u8RxData == NULL );
    40a0:	fe 01       	movw	r30, r28
    40a2:	e0 56       	subi	r30, 0x60	; 96
    40a4:	ff 4f       	sbci	r31, 0xFF	; 255
    40a6:	80 81       	ld	r24, Z
    40a8:	88 2f       	mov	r24, r24
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	00 97       	sbiw	r24, 0x00	; 0
    40ae:	99 f3       	breq	.-26     	; 0x4096 <SS_voidDeleteUser+0xba2>

	switch (local_u8RxData) {
    40b0:	fe 01       	movw	r30, r28
    40b2:	e0 56       	subi	r30, 0x60	; 96
    40b4:	ff 4f       	sbci	r31, 0xFF	; 255
    40b6:	80 81       	ld	r24, Z
    40b8:	28 2f       	mov	r18, r24
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	cf 55       	subi	r28, 0x5F	; 95
    40be:	df 4f       	sbci	r29, 0xFF	; 255
    40c0:	39 83       	std	Y+1, r19	; 0x01
    40c2:	28 83       	st	Y, r18
    40c4:	c1 5a       	subi	r28, 0xA1	; 161
    40c6:	d0 40       	sbci	r29, 0x00	; 0
    40c8:	cf 55       	subi	r28, 0x5F	; 95
    40ca:	df 4f       	sbci	r29, 0xFF	; 255
    40cc:	88 81       	ld	r24, Y
    40ce:	99 81       	ldd	r25, Y+1	; 0x01
    40d0:	c1 5a       	subi	r28, 0xA1	; 161
    40d2:	d0 40       	sbci	r29, 0x00	; 0
    40d4:	82 33       	cpi	r24, 0x32	; 50
    40d6:	91 05       	cpc	r25, r1
    40d8:	09 f4       	brne	.+2      	; 0x40dc <SS_voidDeleteUser+0xbe8>
    40da:	96 c0       	rjmp	.+300    	; 0x4208 <SS_voidDeleteUser+0xd14>
    40dc:	cf 55       	subi	r28, 0x5F	; 95
    40de:	df 4f       	sbci	r29, 0xFF	; 255
    40e0:	e8 81       	ld	r30, Y
    40e2:	f9 81       	ldd	r31, Y+1	; 0x01
    40e4:	c1 5a       	subi	r28, 0xA1	; 161
    40e6:	d0 40       	sbci	r29, 0x00	; 0
    40e8:	e3 33       	cpi	r30, 0x33	; 51
    40ea:	f1 05       	cpc	r31, r1
    40ec:	09 f4       	brne	.+2      	; 0x40f0 <SS_voidDeleteUser+0xbfc>
    40ee:	0e c1       	rjmp	.+540    	; 0x430c <SS_voidDeleteUser+0xe18>
    40f0:	cf 55       	subi	r28, 0x5F	; 95
    40f2:	df 4f       	sbci	r29, 0xFF	; 255
    40f4:	28 81       	ld	r18, Y
    40f6:	39 81       	ldd	r19, Y+1	; 0x01
    40f8:	c1 5a       	subi	r28, 0xA1	; 161
    40fa:	d0 40       	sbci	r29, 0x00	; 0
    40fc:	21 33       	cpi	r18, 0x31	; 49
    40fe:	31 05       	cpc	r19, r1
    4100:	09 f0       	breq	.+2      	; 0x4104 <SS_voidDeleteUser+0xc10>
    4102:	86 c1       	rjmp	.+780    	; 0x4410 <SS_voidDeleteUser+0xf1c>
	case '1':
		EEPROM_voidWriteByte(EEPROM_user1_check, 0);
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	60 e0       	ldi	r22, 0x00	; 0
    410a:	0e 94 87 51 	call	0xa30e	; 0xa30e <EEPROM_voidWriteByte>
		LCD_voidClear();
    410e:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "user deleted");
    4112:	80 e5       	ldi	r24, 0x50	; 80
    4114:	92 e0       	ldi	r25, 0x02	; 2
    4116:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		UART_voidTxString((u8*) "user deleted");
    411a:	80 e5       	ldi	r24, 0x50	; 80
    411c:	92 e0       	ldi	r25, 0x02	; 2
    411e:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	aa ef       	ldi	r26, 0xFA	; 250
    4128:	b4 e4       	ldi	r27, 0x44	; 68
    412a:	8d ab       	std	Y+53, r24	; 0x35
    412c:	9e ab       	std	Y+54, r25	; 0x36
    412e:	af ab       	std	Y+55, r26	; 0x37
    4130:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4132:	6d a9       	ldd	r22, Y+53	; 0x35
    4134:	7e a9       	ldd	r23, Y+54	; 0x36
    4136:	8f a9       	ldd	r24, Y+55	; 0x37
    4138:	98 ad       	ldd	r25, Y+56	; 0x38
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	4a e7       	ldi	r20, 0x7A	; 122
    4140:	55 e4       	ldi	r21, 0x45	; 69
    4142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4146:	dc 01       	movw	r26, r24
    4148:	cb 01       	movw	r24, r22
    414a:	89 ab       	std	Y+49, r24	; 0x31
    414c:	9a ab       	std	Y+50, r25	; 0x32
    414e:	ab ab       	std	Y+51, r26	; 0x33
    4150:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4152:	69 a9       	ldd	r22, Y+49	; 0x31
    4154:	7a a9       	ldd	r23, Y+50	; 0x32
    4156:	8b a9       	ldd	r24, Y+51	; 0x33
    4158:	9c a9       	ldd	r25, Y+52	; 0x34
    415a:	20 e0       	ldi	r18, 0x00	; 0
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	40 e8       	ldi	r20, 0x80	; 128
    4160:	5f e3       	ldi	r21, 0x3F	; 63
    4162:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4166:	88 23       	and	r24, r24
    4168:	2c f4       	brge	.+10     	; 0x4174 <SS_voidDeleteUser+0xc80>
		__ticks = 1;
    416a:	81 e0       	ldi	r24, 0x01	; 1
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	98 ab       	std	Y+48, r25	; 0x30
    4170:	8f a7       	std	Y+47, r24	; 0x2f
    4172:	3f c0       	rjmp	.+126    	; 0x41f2 <SS_voidDeleteUser+0xcfe>
	else if (__tmp > 65535)
    4174:	69 a9       	ldd	r22, Y+49	; 0x31
    4176:	7a a9       	ldd	r23, Y+50	; 0x32
    4178:	8b a9       	ldd	r24, Y+51	; 0x33
    417a:	9c a9       	ldd	r25, Y+52	; 0x34
    417c:	20 e0       	ldi	r18, 0x00	; 0
    417e:	3f ef       	ldi	r19, 0xFF	; 255
    4180:	4f e7       	ldi	r20, 0x7F	; 127
    4182:	57 e4       	ldi	r21, 0x47	; 71
    4184:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4188:	18 16       	cp	r1, r24
    418a:	4c f5       	brge	.+82     	; 0x41de <SS_voidDeleteUser+0xcea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    418c:	6d a9       	ldd	r22, Y+53	; 0x35
    418e:	7e a9       	ldd	r23, Y+54	; 0x36
    4190:	8f a9       	ldd	r24, Y+55	; 0x37
    4192:	98 ad       	ldd	r25, Y+56	; 0x38
    4194:	20 e0       	ldi	r18, 0x00	; 0
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	40 e2       	ldi	r20, 0x20	; 32
    419a:	51 e4       	ldi	r21, 0x41	; 65
    419c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41a0:	dc 01       	movw	r26, r24
    41a2:	cb 01       	movw	r24, r22
    41a4:	bc 01       	movw	r22, r24
    41a6:	cd 01       	movw	r24, r26
    41a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ac:	dc 01       	movw	r26, r24
    41ae:	cb 01       	movw	r24, r22
    41b0:	98 ab       	std	Y+48, r25	; 0x30
    41b2:	8f a7       	std	Y+47, r24	; 0x2f
    41b4:	0f c0       	rjmp	.+30     	; 0x41d4 <SS_voidDeleteUser+0xce0>
    41b6:	80 e9       	ldi	r24, 0x90	; 144
    41b8:	91 e0       	ldi	r25, 0x01	; 1
    41ba:	9e a7       	std	Y+46, r25	; 0x2e
    41bc:	8d a7       	std	Y+45, r24	; 0x2d
    41be:	8d a5       	ldd	r24, Y+45	; 0x2d
    41c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    41c2:	01 97       	sbiw	r24, 0x01	; 1
    41c4:	f1 f7       	brne	.-4      	; 0x41c2 <SS_voidDeleteUser+0xcce>
    41c6:	9e a7       	std	Y+46, r25	; 0x2e
    41c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    41cc:	98 a9       	ldd	r25, Y+48	; 0x30
    41ce:	01 97       	sbiw	r24, 0x01	; 1
    41d0:	98 ab       	std	Y+48, r25	; 0x30
    41d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    41d6:	98 a9       	ldd	r25, Y+48	; 0x30
    41d8:	00 97       	sbiw	r24, 0x00	; 0
    41da:	69 f7       	brne	.-38     	; 0x41b6 <SS_voidDeleteUser+0xcc2>
    41dc:	8f c1       	rjmp	.+798    	; 0x44fc <SS_voidDeleteUser+0x1008>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41de:	69 a9       	ldd	r22, Y+49	; 0x31
    41e0:	7a a9       	ldd	r23, Y+50	; 0x32
    41e2:	8b a9       	ldd	r24, Y+51	; 0x33
    41e4:	9c a9       	ldd	r25, Y+52	; 0x34
    41e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ea:	dc 01       	movw	r26, r24
    41ec:	cb 01       	movw	r24, r22
    41ee:	98 ab       	std	Y+48, r25	; 0x30
    41f0:	8f a7       	std	Y+47, r24	; 0x2f
    41f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    41f4:	98 a9       	ldd	r25, Y+48	; 0x30
    41f6:	9c a7       	std	Y+44, r25	; 0x2c
    41f8:	8b a7       	std	Y+43, r24	; 0x2b
    41fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    41fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    41fe:	01 97       	sbiw	r24, 0x01	; 1
    4200:	f1 f7       	brne	.-4      	; 0x41fe <SS_voidDeleteUser+0xd0a>
    4202:	9c a7       	std	Y+44, r25	; 0x2c
    4204:	8b a7       	std	Y+43, r24	; 0x2b
    4206:	7a c1       	rjmp	.+756    	; 0x44fc <SS_voidDeleteUser+0x1008>
		_delay_ms(2000);
		break;
	case '2':
		EEPROM_voidWriteByte(EEPROM_user2_check, 0);
    4208:	82 e0       	ldi	r24, 0x02	; 2
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	60 e0       	ldi	r22, 0x00	; 0
    420e:	0e 94 87 51 	call	0xa30e	; 0xa30e <EEPROM_voidWriteByte>
		LCD_voidClear();
    4212:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "user deleted");
    4216:	80 e5       	ldi	r24, 0x50	; 80
    4218:	92 e0       	ldi	r25, 0x02	; 2
    421a:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		UART_voidTxString((u8*) "user deleted");
    421e:	80 e5       	ldi	r24, 0x50	; 80
    4220:	92 e0       	ldi	r25, 0x02	; 2
    4222:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    4226:	80 e0       	ldi	r24, 0x00	; 0
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	aa ef       	ldi	r26, 0xFA	; 250
    422c:	b4 e4       	ldi	r27, 0x44	; 68
    422e:	8f a3       	std	Y+39, r24	; 0x27
    4230:	98 a7       	std	Y+40, r25	; 0x28
    4232:	a9 a7       	std	Y+41, r26	; 0x29
    4234:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4236:	6f a1       	ldd	r22, Y+39	; 0x27
    4238:	78 a5       	ldd	r23, Y+40	; 0x28
    423a:	89 a5       	ldd	r24, Y+41	; 0x29
    423c:	9a a5       	ldd	r25, Y+42	; 0x2a
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	4a e7       	ldi	r20, 0x7A	; 122
    4244:	55 e4       	ldi	r21, 0x45	; 69
    4246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    424a:	dc 01       	movw	r26, r24
    424c:	cb 01       	movw	r24, r22
    424e:	8b a3       	std	Y+35, r24	; 0x23
    4250:	9c a3       	std	Y+36, r25	; 0x24
    4252:	ad a3       	std	Y+37, r26	; 0x25
    4254:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4256:	6b a1       	ldd	r22, Y+35	; 0x23
    4258:	7c a1       	ldd	r23, Y+36	; 0x24
    425a:	8d a1       	ldd	r24, Y+37	; 0x25
    425c:	9e a1       	ldd	r25, Y+38	; 0x26
    425e:	20 e0       	ldi	r18, 0x00	; 0
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	40 e8       	ldi	r20, 0x80	; 128
    4264:	5f e3       	ldi	r21, 0x3F	; 63
    4266:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    426a:	88 23       	and	r24, r24
    426c:	2c f4       	brge	.+10     	; 0x4278 <SS_voidDeleteUser+0xd84>
		__ticks = 1;
    426e:	81 e0       	ldi	r24, 0x01	; 1
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	9a a3       	std	Y+34, r25	; 0x22
    4274:	89 a3       	std	Y+33, r24	; 0x21
    4276:	3f c0       	rjmp	.+126    	; 0x42f6 <SS_voidDeleteUser+0xe02>
	else if (__tmp > 65535)
    4278:	6b a1       	ldd	r22, Y+35	; 0x23
    427a:	7c a1       	ldd	r23, Y+36	; 0x24
    427c:	8d a1       	ldd	r24, Y+37	; 0x25
    427e:	9e a1       	ldd	r25, Y+38	; 0x26
    4280:	20 e0       	ldi	r18, 0x00	; 0
    4282:	3f ef       	ldi	r19, 0xFF	; 255
    4284:	4f e7       	ldi	r20, 0x7F	; 127
    4286:	57 e4       	ldi	r21, 0x47	; 71
    4288:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    428c:	18 16       	cp	r1, r24
    428e:	4c f5       	brge	.+82     	; 0x42e2 <SS_voidDeleteUser+0xdee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4290:	6f a1       	ldd	r22, Y+39	; 0x27
    4292:	78 a5       	ldd	r23, Y+40	; 0x28
    4294:	89 a5       	ldd	r24, Y+41	; 0x29
    4296:	9a a5       	ldd	r25, Y+42	; 0x2a
    4298:	20 e0       	ldi	r18, 0x00	; 0
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	40 e2       	ldi	r20, 0x20	; 32
    429e:	51 e4       	ldi	r21, 0x41	; 65
    42a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42a4:	dc 01       	movw	r26, r24
    42a6:	cb 01       	movw	r24, r22
    42a8:	bc 01       	movw	r22, r24
    42aa:	cd 01       	movw	r24, r26
    42ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b0:	dc 01       	movw	r26, r24
    42b2:	cb 01       	movw	r24, r22
    42b4:	9a a3       	std	Y+34, r25	; 0x22
    42b6:	89 a3       	std	Y+33, r24	; 0x21
    42b8:	0f c0       	rjmp	.+30     	; 0x42d8 <SS_voidDeleteUser+0xde4>
    42ba:	80 e9       	ldi	r24, 0x90	; 144
    42bc:	91 e0       	ldi	r25, 0x01	; 1
    42be:	98 a3       	std	Y+32, r25	; 0x20
    42c0:	8f 8f       	std	Y+31, r24	; 0x1f
    42c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42c4:	98 a1       	ldd	r25, Y+32	; 0x20
    42c6:	01 97       	sbiw	r24, 0x01	; 1
    42c8:	f1 f7       	brne	.-4      	; 0x42c6 <SS_voidDeleteUser+0xdd2>
    42ca:	98 a3       	std	Y+32, r25	; 0x20
    42cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ce:	89 a1       	ldd	r24, Y+33	; 0x21
    42d0:	9a a1       	ldd	r25, Y+34	; 0x22
    42d2:	01 97       	sbiw	r24, 0x01	; 1
    42d4:	9a a3       	std	Y+34, r25	; 0x22
    42d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42d8:	89 a1       	ldd	r24, Y+33	; 0x21
    42da:	9a a1       	ldd	r25, Y+34	; 0x22
    42dc:	00 97       	sbiw	r24, 0x00	; 0
    42de:	69 f7       	brne	.-38     	; 0x42ba <SS_voidDeleteUser+0xdc6>
    42e0:	0d c1       	rjmp	.+538    	; 0x44fc <SS_voidDeleteUser+0x1008>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42e2:	6b a1       	ldd	r22, Y+35	; 0x23
    42e4:	7c a1       	ldd	r23, Y+36	; 0x24
    42e6:	8d a1       	ldd	r24, Y+37	; 0x25
    42e8:	9e a1       	ldd	r25, Y+38	; 0x26
    42ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ee:	dc 01       	movw	r26, r24
    42f0:	cb 01       	movw	r24, r22
    42f2:	9a a3       	std	Y+34, r25	; 0x22
    42f4:	89 a3       	std	Y+33, r24	; 0x21
    42f6:	89 a1       	ldd	r24, Y+33	; 0x21
    42f8:	9a a1       	ldd	r25, Y+34	; 0x22
    42fa:	9e 8f       	std	Y+30, r25	; 0x1e
    42fc:	8d 8f       	std	Y+29, r24	; 0x1d
    42fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4300:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4302:	01 97       	sbiw	r24, 0x01	; 1
    4304:	f1 f7       	brne	.-4      	; 0x4302 <SS_voidDeleteUser+0xe0e>
    4306:	9e 8f       	std	Y+30, r25	; 0x1e
    4308:	8d 8f       	std	Y+29, r24	; 0x1d
    430a:	f8 c0       	rjmp	.+496    	; 0x44fc <SS_voidDeleteUser+0x1008>
		_delay_ms(2000);
		break;
	case '3':
		EEPROM_voidWriteByte(EEPROM_user3_check, 0);
    430c:	83 e0       	ldi	r24, 0x03	; 3
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	60 e0       	ldi	r22, 0x00	; 0
    4312:	0e 94 87 51 	call	0xa30e	; 0xa30e <EEPROM_voidWriteByte>
		LCD_voidClear();
    4316:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "user deleted");
    431a:	80 e5       	ldi	r24, 0x50	; 80
    431c:	92 e0       	ldi	r25, 0x02	; 2
    431e:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		UART_voidTxString((u8*) "user deleted");
    4322:	80 e5       	ldi	r24, 0x50	; 80
    4324:	92 e0       	ldi	r25, 0x02	; 2
    4326:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    432a:	80 e0       	ldi	r24, 0x00	; 0
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	aa ef       	ldi	r26, 0xFA	; 250
    4330:	b4 e4       	ldi	r27, 0x44	; 68
    4332:	89 8f       	std	Y+25, r24	; 0x19
    4334:	9a 8f       	std	Y+26, r25	; 0x1a
    4336:	ab 8f       	std	Y+27, r26	; 0x1b
    4338:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    433a:	69 8d       	ldd	r22, Y+25	; 0x19
    433c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    433e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4340:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	4a e7       	ldi	r20, 0x7A	; 122
    4348:	55 e4       	ldi	r21, 0x45	; 69
    434a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	8d 8b       	std	Y+21, r24	; 0x15
    4354:	9e 8b       	std	Y+22, r25	; 0x16
    4356:	af 8b       	std	Y+23, r26	; 0x17
    4358:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    435a:	6d 89       	ldd	r22, Y+21	; 0x15
    435c:	7e 89       	ldd	r23, Y+22	; 0x16
    435e:	8f 89       	ldd	r24, Y+23	; 0x17
    4360:	98 8d       	ldd	r25, Y+24	; 0x18
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	40 e8       	ldi	r20, 0x80	; 128
    4368:	5f e3       	ldi	r21, 0x3F	; 63
    436a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    436e:	88 23       	and	r24, r24
    4370:	2c f4       	brge	.+10     	; 0x437c <SS_voidDeleteUser+0xe88>
		__ticks = 1;
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	9c 8b       	std	Y+20, r25	; 0x14
    4378:	8b 8b       	std	Y+19, r24	; 0x13
    437a:	3f c0       	rjmp	.+126    	; 0x43fa <SS_voidDeleteUser+0xf06>
	else if (__tmp > 65535)
    437c:	6d 89       	ldd	r22, Y+21	; 0x15
    437e:	7e 89       	ldd	r23, Y+22	; 0x16
    4380:	8f 89       	ldd	r24, Y+23	; 0x17
    4382:	98 8d       	ldd	r25, Y+24	; 0x18
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	3f ef       	ldi	r19, 0xFF	; 255
    4388:	4f e7       	ldi	r20, 0x7F	; 127
    438a:	57 e4       	ldi	r21, 0x47	; 71
    438c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4390:	18 16       	cp	r1, r24
    4392:	4c f5       	brge	.+82     	; 0x43e6 <SS_voidDeleteUser+0xef2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4394:	69 8d       	ldd	r22, Y+25	; 0x19
    4396:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4398:	8b 8d       	ldd	r24, Y+27	; 0x1b
    439a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	40 e2       	ldi	r20, 0x20	; 32
    43a2:	51 e4       	ldi	r21, 0x41	; 65
    43a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a8:	dc 01       	movw	r26, r24
    43aa:	cb 01       	movw	r24, r22
    43ac:	bc 01       	movw	r22, r24
    43ae:	cd 01       	movw	r24, r26
    43b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b4:	dc 01       	movw	r26, r24
    43b6:	cb 01       	movw	r24, r22
    43b8:	9c 8b       	std	Y+20, r25	; 0x14
    43ba:	8b 8b       	std	Y+19, r24	; 0x13
    43bc:	0f c0       	rjmp	.+30     	; 0x43dc <SS_voidDeleteUser+0xee8>
    43be:	80 e9       	ldi	r24, 0x90	; 144
    43c0:	91 e0       	ldi	r25, 0x01	; 1
    43c2:	9a 8b       	std	Y+18, r25	; 0x12
    43c4:	89 8b       	std	Y+17, r24	; 0x11
    43c6:	89 89       	ldd	r24, Y+17	; 0x11
    43c8:	9a 89       	ldd	r25, Y+18	; 0x12
    43ca:	01 97       	sbiw	r24, 0x01	; 1
    43cc:	f1 f7       	brne	.-4      	; 0x43ca <SS_voidDeleteUser+0xed6>
    43ce:	9a 8b       	std	Y+18, r25	; 0x12
    43d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d2:	8b 89       	ldd	r24, Y+19	; 0x13
    43d4:	9c 89       	ldd	r25, Y+20	; 0x14
    43d6:	01 97       	sbiw	r24, 0x01	; 1
    43d8:	9c 8b       	std	Y+20, r25	; 0x14
    43da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43dc:	8b 89       	ldd	r24, Y+19	; 0x13
    43de:	9c 89       	ldd	r25, Y+20	; 0x14
    43e0:	00 97       	sbiw	r24, 0x00	; 0
    43e2:	69 f7       	brne	.-38     	; 0x43be <SS_voidDeleteUser+0xeca>
    43e4:	8b c0       	rjmp	.+278    	; 0x44fc <SS_voidDeleteUser+0x1008>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e6:	6d 89       	ldd	r22, Y+21	; 0x15
    43e8:	7e 89       	ldd	r23, Y+22	; 0x16
    43ea:	8f 89       	ldd	r24, Y+23	; 0x17
    43ec:	98 8d       	ldd	r25, Y+24	; 0x18
    43ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f2:	dc 01       	movw	r26, r24
    43f4:	cb 01       	movw	r24, r22
    43f6:	9c 8b       	std	Y+20, r25	; 0x14
    43f8:	8b 8b       	std	Y+19, r24	; 0x13
    43fa:	8b 89       	ldd	r24, Y+19	; 0x13
    43fc:	9c 89       	ldd	r25, Y+20	; 0x14
    43fe:	98 8b       	std	Y+16, r25	; 0x10
    4400:	8f 87       	std	Y+15, r24	; 0x0f
    4402:	8f 85       	ldd	r24, Y+15	; 0x0f
    4404:	98 89       	ldd	r25, Y+16	; 0x10
    4406:	01 97       	sbiw	r24, 0x01	; 1
    4408:	f1 f7       	brne	.-4      	; 0x4406 <SS_voidDeleteUser+0xf12>
    440a:	98 8b       	std	Y+16, r25	; 0x10
    440c:	8f 87       	std	Y+15, r24	; 0x0f
    440e:	76 c0       	rjmp	.+236    	; 0x44fc <SS_voidDeleteUser+0x1008>
		_delay_ms(2000);
		break;
	default:

		UART_voidTxString((u8*) "Invalid Entry");
    4410:	8a ed       	ldi	r24, 0xDA	; 218
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    4418:	80 e0       	ldi	r24, 0x00	; 0
    441a:	90 e8       	ldi	r25, 0x80	; 128
    441c:	ab e3       	ldi	r26, 0x3B	; 59
    441e:	b5 e4       	ldi	r27, 0x45	; 69
    4420:	8b 87       	std	Y+11, r24	; 0x0b
    4422:	9c 87       	std	Y+12, r25	; 0x0c
    4424:	ad 87       	std	Y+13, r26	; 0x0d
    4426:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4428:	6b 85       	ldd	r22, Y+11	; 0x0b
    442a:	7c 85       	ldd	r23, Y+12	; 0x0c
    442c:	8d 85       	ldd	r24, Y+13	; 0x0d
    442e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4430:	20 e0       	ldi	r18, 0x00	; 0
    4432:	30 e0       	ldi	r19, 0x00	; 0
    4434:	4a e7       	ldi	r20, 0x7A	; 122
    4436:	55 e4       	ldi	r21, 0x45	; 69
    4438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    443c:	dc 01       	movw	r26, r24
    443e:	cb 01       	movw	r24, r22
    4440:	8f 83       	std	Y+7, r24	; 0x07
    4442:	98 87       	std	Y+8, r25	; 0x08
    4444:	a9 87       	std	Y+9, r26	; 0x09
    4446:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4448:	6f 81       	ldd	r22, Y+7	; 0x07
    444a:	78 85       	ldd	r23, Y+8	; 0x08
    444c:	89 85       	ldd	r24, Y+9	; 0x09
    444e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4450:	20 e0       	ldi	r18, 0x00	; 0
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	40 e8       	ldi	r20, 0x80	; 128
    4456:	5f e3       	ldi	r21, 0x3F	; 63
    4458:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    445c:	88 23       	and	r24, r24
    445e:	2c f4       	brge	.+10     	; 0x446a <SS_voidDeleteUser+0xf76>
		__ticks = 1;
    4460:	81 e0       	ldi	r24, 0x01	; 1
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	9e 83       	std	Y+6, r25	; 0x06
    4466:	8d 83       	std	Y+5, r24	; 0x05
    4468:	3f c0       	rjmp	.+126    	; 0x44e8 <SS_voidDeleteUser+0xff4>
	else if (__tmp > 65535)
    446a:	6f 81       	ldd	r22, Y+7	; 0x07
    446c:	78 85       	ldd	r23, Y+8	; 0x08
    446e:	89 85       	ldd	r24, Y+9	; 0x09
    4470:	9a 85       	ldd	r25, Y+10	; 0x0a
    4472:	20 e0       	ldi	r18, 0x00	; 0
    4474:	3f ef       	ldi	r19, 0xFF	; 255
    4476:	4f e7       	ldi	r20, 0x7F	; 127
    4478:	57 e4       	ldi	r21, 0x47	; 71
    447a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    447e:	18 16       	cp	r1, r24
    4480:	4c f5       	brge	.+82     	; 0x44d4 <SS_voidDeleteUser+0xfe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4482:	6b 85       	ldd	r22, Y+11	; 0x0b
    4484:	7c 85       	ldd	r23, Y+12	; 0x0c
    4486:	8d 85       	ldd	r24, Y+13	; 0x0d
    4488:	9e 85       	ldd	r25, Y+14	; 0x0e
    448a:	20 e0       	ldi	r18, 0x00	; 0
    448c:	30 e0       	ldi	r19, 0x00	; 0
    448e:	40 e2       	ldi	r20, 0x20	; 32
    4490:	51 e4       	ldi	r21, 0x41	; 65
    4492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4496:	dc 01       	movw	r26, r24
    4498:	cb 01       	movw	r24, r22
    449a:	bc 01       	movw	r22, r24
    449c:	cd 01       	movw	r24, r26
    449e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a2:	dc 01       	movw	r26, r24
    44a4:	cb 01       	movw	r24, r22
    44a6:	9e 83       	std	Y+6, r25	; 0x06
    44a8:	8d 83       	std	Y+5, r24	; 0x05
    44aa:	0f c0       	rjmp	.+30     	; 0x44ca <SS_voidDeleteUser+0xfd6>
    44ac:	80 e9       	ldi	r24, 0x90	; 144
    44ae:	91 e0       	ldi	r25, 0x01	; 1
    44b0:	9c 83       	std	Y+4, r25	; 0x04
    44b2:	8b 83       	std	Y+3, r24	; 0x03
    44b4:	8b 81       	ldd	r24, Y+3	; 0x03
    44b6:	9c 81       	ldd	r25, Y+4	; 0x04
    44b8:	01 97       	sbiw	r24, 0x01	; 1
    44ba:	f1 f7       	brne	.-4      	; 0x44b8 <SS_voidDeleteUser+0xfc4>
    44bc:	9c 83       	std	Y+4, r25	; 0x04
    44be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44c0:	8d 81       	ldd	r24, Y+5	; 0x05
    44c2:	9e 81       	ldd	r25, Y+6	; 0x06
    44c4:	01 97       	sbiw	r24, 0x01	; 1
    44c6:	9e 83       	std	Y+6, r25	; 0x06
    44c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ca:	8d 81       	ldd	r24, Y+5	; 0x05
    44cc:	9e 81       	ldd	r25, Y+6	; 0x06
    44ce:	00 97       	sbiw	r24, 0x00	; 0
    44d0:	69 f7       	brne	.-38     	; 0x44ac <SS_voidDeleteUser+0xfb8>
    44d2:	14 c0       	rjmp	.+40     	; 0x44fc <SS_voidDeleteUser+0x1008>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44d4:	6f 81       	ldd	r22, Y+7	; 0x07
    44d6:	78 85       	ldd	r23, Y+8	; 0x08
    44d8:	89 85       	ldd	r24, Y+9	; 0x09
    44da:	9a 85       	ldd	r25, Y+10	; 0x0a
    44dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e0:	dc 01       	movw	r26, r24
    44e2:	cb 01       	movw	r24, r22
    44e4:	9e 83       	std	Y+6, r25	; 0x06
    44e6:	8d 83       	std	Y+5, r24	; 0x05
    44e8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ea:	9e 81       	ldd	r25, Y+6	; 0x06
    44ec:	9a 83       	std	Y+2, r25	; 0x02
    44ee:	89 83       	std	Y+1, r24	; 0x01
    44f0:	89 81       	ldd	r24, Y+1	; 0x01
    44f2:	9a 81       	ldd	r25, Y+2	; 0x02
    44f4:	01 97       	sbiw	r24, 0x01	; 1
    44f6:	f1 f7       	brne	.-4      	; 0x44f4 <SS_voidDeleteUser+0x1000>
    44f8:	9a 83       	std	Y+2, r25	; 0x02
    44fa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);

	}
}
    44fc:	ce 55       	subi	r28, 0x5E	; 94
    44fe:	df 4f       	sbci	r29, 0xFF	; 255
    4500:	0f b6       	in	r0, 0x3f	; 63
    4502:	f8 94       	cli
    4504:	de bf       	out	0x3e, r29	; 62
    4506:	0f be       	out	0x3f, r0	; 63
    4508:	cd bf       	out	0x3d, r28	; 61
    450a:	cf 91       	pop	r28
    450c:	df 91       	pop	r29
    450e:	1f 91       	pop	r17
    4510:	0f 91       	pop	r16
    4512:	08 95       	ret

00004514 <SS_voidChangePassword>:
 *   Parameters    : Void
 *   Return Value  : Void
 *   Remarks       : None
 **********************************************************************************************/

static void SS_voidChangePassword() {
    4514:	0f 93       	push	r16
    4516:	1f 93       	push	r17
    4518:	df 93       	push	r29
    451a:	cf 93       	push	r28
    451c:	cd b7       	in	r28, 0x3d	; 61
    451e:	de b7       	in	r29, 0x3e	; 62
    4520:	c6 58       	subi	r28, 0x86	; 134
    4522:	d0 40       	sbci	r29, 0x00	; 0
    4524:	0f b6       	in	r0, 0x3f	; 63
    4526:	f8 94       	cli
    4528:	de bf       	out	0x3e, r29	; 62
    452a:	0f be       	out	0x3f, r0	; 63
    452c:	cd bf       	out	0x3d, r28	; 61

	u8 user1_check = 0;
    452e:	fe 01       	movw	r30, r28
    4530:	ef 57       	subi	r30, 0x7F	; 127
    4532:	ff 4f       	sbci	r31, 0xFF	; 255
    4534:	10 82       	st	Z, r1
	u8 user2_check = 0;
    4536:	fe 01       	movw	r30, r28
    4538:	ee 57       	subi	r30, 0x7E	; 126
    453a:	ff 4f       	sbci	r31, 0xFF	; 255
    453c:	10 82       	st	Z, r1
	u8 user3_check = 0;
    453e:	fe 01       	movw	r30, r28
    4540:	ed 57       	subi	r30, 0x7D	; 125
    4542:	ff 4f       	sbci	r31, 0xFF	; 255
    4544:	10 82       	st	Z, r1
	u8 local_u8RxData;
	u8 counter;
	u8 EEPROM_Position = 0;
    4546:	fe 01       	movw	r30, r28
    4548:	e1 58       	subi	r30, 0x81	; 129
    454a:	ff 4f       	sbci	r31, 0xFF	; 255
    454c:	10 82       	st	Z, r1

	UART_voidTxString((u8*) "Choose user to change password");
    454e:	8d e5       	ldi	r24, 0x5D	; 93
    4550:	92 e0       	ldi	r25, 0x02	; 2
    4552:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

	UART_voidTxString((u8*) "1-admin ");
    4556:	8c e7       	ldi	r24, 0x7C	; 124
    4558:	92 e0       	ldi	r25, 0x02	; 2
    455a:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	//check if user1 is created  then copy username
	EEPROM_voidReadByte( EEPROM_user1_check, &user1_check);
    455e:	9e 01       	movw	r18, r28
    4560:	2f 57       	subi	r18, 0x7F	; 127
    4562:	3f 4f       	sbci	r19, 0xFF	; 255
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	b9 01       	movw	r22, r18
    456a:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    456e:	fe 01       	movw	r30, r28
    4570:	e5 58       	subi	r30, 0x85	; 133
    4572:	ff 4f       	sbci	r31, 0xFF	; 255
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	a0 e2       	ldi	r26, 0x20	; 32
    457a:	b1 e4       	ldi	r27, 0x41	; 65
    457c:	80 83       	st	Z, r24
    457e:	91 83       	std	Z+1, r25	; 0x01
    4580:	a2 83       	std	Z+2, r26	; 0x02
    4582:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4584:	8e 01       	movw	r16, r28
    4586:	09 58       	subi	r16, 0x89	; 137
    4588:	1f 4f       	sbci	r17, 0xFF	; 255
    458a:	fe 01       	movw	r30, r28
    458c:	e5 58       	subi	r30, 0x85	; 133
    458e:	ff 4f       	sbci	r31, 0xFF	; 255
    4590:	60 81       	ld	r22, Z
    4592:	71 81       	ldd	r23, Z+1	; 0x01
    4594:	82 81       	ldd	r24, Z+2	; 0x02
    4596:	93 81       	ldd	r25, Z+3	; 0x03
    4598:	20 e0       	ldi	r18, 0x00	; 0
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	4a e7       	ldi	r20, 0x7A	; 122
    459e:	55 e4       	ldi	r21, 0x45	; 69
    45a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a4:	dc 01       	movw	r26, r24
    45a6:	cb 01       	movw	r24, r22
    45a8:	f8 01       	movw	r30, r16
    45aa:	80 83       	st	Z, r24
    45ac:	91 83       	std	Z+1, r25	; 0x01
    45ae:	a2 83       	std	Z+2, r26	; 0x02
    45b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45b2:	fe 01       	movw	r30, r28
    45b4:	e9 58       	subi	r30, 0x89	; 137
    45b6:	ff 4f       	sbci	r31, 0xFF	; 255
    45b8:	60 81       	ld	r22, Z
    45ba:	71 81       	ldd	r23, Z+1	; 0x01
    45bc:	82 81       	ldd	r24, Z+2	; 0x02
    45be:	93 81       	ldd	r25, Z+3	; 0x03
    45c0:	20 e0       	ldi	r18, 0x00	; 0
    45c2:	30 e0       	ldi	r19, 0x00	; 0
    45c4:	40 e8       	ldi	r20, 0x80	; 128
    45c6:	5f e3       	ldi	r21, 0x3F	; 63
    45c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45cc:	88 23       	and	r24, r24
    45ce:	44 f4       	brge	.+16     	; 0x45e0 <SS_voidChangePassword+0xcc>
		__ticks = 1;
    45d0:	fe 01       	movw	r30, r28
    45d2:	eb 58       	subi	r30, 0x8B	; 139
    45d4:	ff 4f       	sbci	r31, 0xFF	; 255
    45d6:	81 e0       	ldi	r24, 0x01	; 1
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	91 83       	std	Z+1, r25	; 0x01
    45dc:	80 83       	st	Z, r24
    45de:	64 c0       	rjmp	.+200    	; 0x46a8 <SS_voidChangePassword+0x194>
	else if (__tmp > 65535)
    45e0:	fe 01       	movw	r30, r28
    45e2:	e9 58       	subi	r30, 0x89	; 137
    45e4:	ff 4f       	sbci	r31, 0xFF	; 255
    45e6:	60 81       	ld	r22, Z
    45e8:	71 81       	ldd	r23, Z+1	; 0x01
    45ea:	82 81       	ldd	r24, Z+2	; 0x02
    45ec:	93 81       	ldd	r25, Z+3	; 0x03
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	3f ef       	ldi	r19, 0xFF	; 255
    45f2:	4f e7       	ldi	r20, 0x7F	; 127
    45f4:	57 e4       	ldi	r21, 0x47	; 71
    45f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45fa:	18 16       	cp	r1, r24
    45fc:	0c f0       	brlt	.+2      	; 0x4600 <SS_voidChangePassword+0xec>
    45fe:	43 c0       	rjmp	.+134    	; 0x4686 <SS_voidChangePassword+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4600:	fe 01       	movw	r30, r28
    4602:	e5 58       	subi	r30, 0x85	; 133
    4604:	ff 4f       	sbci	r31, 0xFF	; 255
    4606:	60 81       	ld	r22, Z
    4608:	71 81       	ldd	r23, Z+1	; 0x01
    460a:	82 81       	ldd	r24, Z+2	; 0x02
    460c:	93 81       	ldd	r25, Z+3	; 0x03
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	40 e2       	ldi	r20, 0x20	; 32
    4614:	51 e4       	ldi	r21, 0x41	; 65
    4616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    461a:	dc 01       	movw	r26, r24
    461c:	cb 01       	movw	r24, r22
    461e:	8e 01       	movw	r16, r28
    4620:	0b 58       	subi	r16, 0x8B	; 139
    4622:	1f 4f       	sbci	r17, 0xFF	; 255
    4624:	bc 01       	movw	r22, r24
    4626:	cd 01       	movw	r24, r26
    4628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    462c:	dc 01       	movw	r26, r24
    462e:	cb 01       	movw	r24, r22
    4630:	f8 01       	movw	r30, r16
    4632:	91 83       	std	Z+1, r25	; 0x01
    4634:	80 83       	st	Z, r24
    4636:	1f c0       	rjmp	.+62     	; 0x4676 <SS_voidChangePassword+0x162>
    4638:	fe 01       	movw	r30, r28
    463a:	ed 58       	subi	r30, 0x8D	; 141
    463c:	ff 4f       	sbci	r31, 0xFF	; 255
    463e:	80 e9       	ldi	r24, 0x90	; 144
    4640:	91 e0       	ldi	r25, 0x01	; 1
    4642:	91 83       	std	Z+1, r25	; 0x01
    4644:	80 83       	st	Z, r24
    4646:	fe 01       	movw	r30, r28
    4648:	ed 58       	subi	r30, 0x8D	; 141
    464a:	ff 4f       	sbci	r31, 0xFF	; 255
    464c:	80 81       	ld	r24, Z
    464e:	91 81       	ldd	r25, Z+1	; 0x01
    4650:	01 97       	sbiw	r24, 0x01	; 1
    4652:	f1 f7       	brne	.-4      	; 0x4650 <SS_voidChangePassword+0x13c>
    4654:	fe 01       	movw	r30, r28
    4656:	ed 58       	subi	r30, 0x8D	; 141
    4658:	ff 4f       	sbci	r31, 0xFF	; 255
    465a:	91 83       	std	Z+1, r25	; 0x01
    465c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    465e:	de 01       	movw	r26, r28
    4660:	ab 58       	subi	r26, 0x8B	; 139
    4662:	bf 4f       	sbci	r27, 0xFF	; 255
    4664:	fe 01       	movw	r30, r28
    4666:	eb 58       	subi	r30, 0x8B	; 139
    4668:	ff 4f       	sbci	r31, 0xFF	; 255
    466a:	80 81       	ld	r24, Z
    466c:	91 81       	ldd	r25, Z+1	; 0x01
    466e:	01 97       	sbiw	r24, 0x01	; 1
    4670:	11 96       	adiw	r26, 0x01	; 1
    4672:	9c 93       	st	X, r25
    4674:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4676:	fe 01       	movw	r30, r28
    4678:	eb 58       	subi	r30, 0x8B	; 139
    467a:	ff 4f       	sbci	r31, 0xFF	; 255
    467c:	80 81       	ld	r24, Z
    467e:	91 81       	ldd	r25, Z+1	; 0x01
    4680:	00 97       	sbiw	r24, 0x00	; 0
    4682:	d1 f6       	brne	.-76     	; 0x4638 <SS_voidChangePassword+0x124>
    4684:	28 c0       	rjmp	.+80     	; 0x46d6 <SS_voidChangePassword+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4686:	8e 01       	movw	r16, r28
    4688:	0b 58       	subi	r16, 0x8B	; 139
    468a:	1f 4f       	sbci	r17, 0xFF	; 255
    468c:	fe 01       	movw	r30, r28
    468e:	e9 58       	subi	r30, 0x89	; 137
    4690:	ff 4f       	sbci	r31, 0xFF	; 255
    4692:	60 81       	ld	r22, Z
    4694:	71 81       	ldd	r23, Z+1	; 0x01
    4696:	82 81       	ldd	r24, Z+2	; 0x02
    4698:	93 81       	ldd	r25, Z+3	; 0x03
    469a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    469e:	dc 01       	movw	r26, r24
    46a0:	cb 01       	movw	r24, r22
    46a2:	f8 01       	movw	r30, r16
    46a4:	91 83       	std	Z+1, r25	; 0x01
    46a6:	80 83       	st	Z, r24
    46a8:	de 01       	movw	r26, r28
    46aa:	af 58       	subi	r26, 0x8F	; 143
    46ac:	bf 4f       	sbci	r27, 0xFF	; 255
    46ae:	fe 01       	movw	r30, r28
    46b0:	eb 58       	subi	r30, 0x8B	; 139
    46b2:	ff 4f       	sbci	r31, 0xFF	; 255
    46b4:	80 81       	ld	r24, Z
    46b6:	91 81       	ldd	r25, Z+1	; 0x01
    46b8:	11 96       	adiw	r26, 0x01	; 1
    46ba:	9c 93       	st	X, r25
    46bc:	8e 93       	st	-X, r24
    46be:	fe 01       	movw	r30, r28
    46c0:	ef 58       	subi	r30, 0x8F	; 143
    46c2:	ff 4f       	sbci	r31, 0xFF	; 255
    46c4:	80 81       	ld	r24, Z
    46c6:	91 81       	ldd	r25, Z+1	; 0x01
    46c8:	01 97       	sbiw	r24, 0x01	; 1
    46ca:	f1 f7       	brne	.-4      	; 0x46c8 <SS_voidChangePassword+0x1b4>
    46cc:	fe 01       	movw	r30, r28
    46ce:	ef 58       	subi	r30, 0x8F	; 143
    46d0:	ff 4f       	sbci	r31, 0xFF	; 255
    46d2:	91 83       	std	Z+1, r25	; 0x01
    46d4:	80 83       	st	Z, r24
	_delay_ms(10);

	EEPROM_Position = EEPROM_user1_username;
    46d6:	fe 01       	movw	r30, r28
    46d8:	e1 58       	subi	r30, 0x81	; 129
    46da:	ff 4f       	sbci	r31, 0xFF	; 255
    46dc:	89 e0       	ldi	r24, 0x09	; 9
    46de:	80 83       	st	Z, r24
	if (user1_check == 1) {
    46e0:	fe 01       	movw	r30, r28
    46e2:	ef 57       	subi	r30, 0x7F	; 127
    46e4:	ff 4f       	sbci	r31, 0xFF	; 255
    46e6:	80 81       	ld	r24, Z
    46e8:	81 30       	cpi	r24, 0x01	; 1
    46ea:	09 f0       	breq	.+2      	; 0x46ee <SS_voidChangePassword+0x1da>
    46ec:	eb c0       	rjmp	.+470    	; 0x48c4 <SS_voidChangePassword+0x3b0>
		UART_voidTxChar('2');
    46ee:	82 e3       	ldi	r24, 0x32	; 50
    46f0:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
		UART_voidTxChar('-');
    46f4:	8d e2       	ldi	r24, 0x2D	; 45
    46f6:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
		for (counter = 0; counter < Maximum_password; counter++) {
    46fa:	fe 01       	movw	r30, r28
    46fc:	e0 58       	subi	r30, 0x80	; 128
    46fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4700:	10 82       	st	Z, r1
    4702:	d7 c0       	rjmp	.+430    	; 0x48b2 <SS_voidChangePassword+0x39e>
			EEPROM_voidReadByte(EEPROM_Position, &local_u8RxData);
    4704:	fe 01       	movw	r30, r28
    4706:	e1 58       	subi	r30, 0x81	; 129
    4708:	ff 4f       	sbci	r31, 0xFF	; 255
    470a:	80 81       	ld	r24, Z
    470c:	88 2f       	mov	r24, r24
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	9e 01       	movw	r18, r28
    4712:	2c 57       	subi	r18, 0x7C	; 124
    4714:	3f 4f       	sbci	r19, 0xFF	; 255
    4716:	b9 01       	movw	r22, r18
    4718:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    471c:	fe 01       	movw	r30, r28
    471e:	e3 59       	subi	r30, 0x93	; 147
    4720:	ff 4f       	sbci	r31, 0xFF	; 255
    4722:	80 e0       	ldi	r24, 0x00	; 0
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	a0 e2       	ldi	r26, 0x20	; 32
    4728:	b1 e4       	ldi	r27, 0x41	; 65
    472a:	80 83       	st	Z, r24
    472c:	91 83       	std	Z+1, r25	; 0x01
    472e:	a2 83       	std	Z+2, r26	; 0x02
    4730:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4732:	8e 01       	movw	r16, r28
    4734:	07 59       	subi	r16, 0x97	; 151
    4736:	1f 4f       	sbci	r17, 0xFF	; 255
    4738:	fe 01       	movw	r30, r28
    473a:	e3 59       	subi	r30, 0x93	; 147
    473c:	ff 4f       	sbci	r31, 0xFF	; 255
    473e:	60 81       	ld	r22, Z
    4740:	71 81       	ldd	r23, Z+1	; 0x01
    4742:	82 81       	ldd	r24, Z+2	; 0x02
    4744:	93 81       	ldd	r25, Z+3	; 0x03
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	4a e7       	ldi	r20, 0x7A	; 122
    474c:	55 e4       	ldi	r21, 0x45	; 69
    474e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4752:	dc 01       	movw	r26, r24
    4754:	cb 01       	movw	r24, r22
    4756:	f8 01       	movw	r30, r16
    4758:	80 83       	st	Z, r24
    475a:	91 83       	std	Z+1, r25	; 0x01
    475c:	a2 83       	std	Z+2, r26	; 0x02
    475e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4760:	fe 01       	movw	r30, r28
    4762:	e7 59       	subi	r30, 0x97	; 151
    4764:	ff 4f       	sbci	r31, 0xFF	; 255
    4766:	60 81       	ld	r22, Z
    4768:	71 81       	ldd	r23, Z+1	; 0x01
    476a:	82 81       	ldd	r24, Z+2	; 0x02
    476c:	93 81       	ldd	r25, Z+3	; 0x03
    476e:	20 e0       	ldi	r18, 0x00	; 0
    4770:	30 e0       	ldi	r19, 0x00	; 0
    4772:	40 e8       	ldi	r20, 0x80	; 128
    4774:	5f e3       	ldi	r21, 0x3F	; 63
    4776:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    477a:	88 23       	and	r24, r24
    477c:	44 f4       	brge	.+16     	; 0x478e <SS_voidChangePassword+0x27a>
		__ticks = 1;
    477e:	fe 01       	movw	r30, r28
    4780:	e9 59       	subi	r30, 0x99	; 153
    4782:	ff 4f       	sbci	r31, 0xFF	; 255
    4784:	81 e0       	ldi	r24, 0x01	; 1
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	91 83       	std	Z+1, r25	; 0x01
    478a:	80 83       	st	Z, r24
    478c:	64 c0       	rjmp	.+200    	; 0x4856 <SS_voidChangePassword+0x342>
	else if (__tmp > 65535)
    478e:	fe 01       	movw	r30, r28
    4790:	e7 59       	subi	r30, 0x97	; 151
    4792:	ff 4f       	sbci	r31, 0xFF	; 255
    4794:	60 81       	ld	r22, Z
    4796:	71 81       	ldd	r23, Z+1	; 0x01
    4798:	82 81       	ldd	r24, Z+2	; 0x02
    479a:	93 81       	ldd	r25, Z+3	; 0x03
    479c:	20 e0       	ldi	r18, 0x00	; 0
    479e:	3f ef       	ldi	r19, 0xFF	; 255
    47a0:	4f e7       	ldi	r20, 0x7F	; 127
    47a2:	57 e4       	ldi	r21, 0x47	; 71
    47a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47a8:	18 16       	cp	r1, r24
    47aa:	0c f0       	brlt	.+2      	; 0x47ae <SS_voidChangePassword+0x29a>
    47ac:	43 c0       	rjmp	.+134    	; 0x4834 <SS_voidChangePassword+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ae:	fe 01       	movw	r30, r28
    47b0:	e3 59       	subi	r30, 0x93	; 147
    47b2:	ff 4f       	sbci	r31, 0xFF	; 255
    47b4:	60 81       	ld	r22, Z
    47b6:	71 81       	ldd	r23, Z+1	; 0x01
    47b8:	82 81       	ldd	r24, Z+2	; 0x02
    47ba:	93 81       	ldd	r25, Z+3	; 0x03
    47bc:	20 e0       	ldi	r18, 0x00	; 0
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	40 e2       	ldi	r20, 0x20	; 32
    47c2:	51 e4       	ldi	r21, 0x41	; 65
    47c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47c8:	dc 01       	movw	r26, r24
    47ca:	cb 01       	movw	r24, r22
    47cc:	8e 01       	movw	r16, r28
    47ce:	09 59       	subi	r16, 0x99	; 153
    47d0:	1f 4f       	sbci	r17, 0xFF	; 255
    47d2:	bc 01       	movw	r22, r24
    47d4:	cd 01       	movw	r24, r26
    47d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47da:	dc 01       	movw	r26, r24
    47dc:	cb 01       	movw	r24, r22
    47de:	f8 01       	movw	r30, r16
    47e0:	91 83       	std	Z+1, r25	; 0x01
    47e2:	80 83       	st	Z, r24
    47e4:	1f c0       	rjmp	.+62     	; 0x4824 <SS_voidChangePassword+0x310>
    47e6:	fe 01       	movw	r30, r28
    47e8:	eb 59       	subi	r30, 0x9B	; 155
    47ea:	ff 4f       	sbci	r31, 0xFF	; 255
    47ec:	80 e9       	ldi	r24, 0x90	; 144
    47ee:	91 e0       	ldi	r25, 0x01	; 1
    47f0:	91 83       	std	Z+1, r25	; 0x01
    47f2:	80 83       	st	Z, r24
    47f4:	fe 01       	movw	r30, r28
    47f6:	eb 59       	subi	r30, 0x9B	; 155
    47f8:	ff 4f       	sbci	r31, 0xFF	; 255
    47fa:	80 81       	ld	r24, Z
    47fc:	91 81       	ldd	r25, Z+1	; 0x01
    47fe:	01 97       	sbiw	r24, 0x01	; 1
    4800:	f1 f7       	brne	.-4      	; 0x47fe <SS_voidChangePassword+0x2ea>
    4802:	fe 01       	movw	r30, r28
    4804:	eb 59       	subi	r30, 0x9B	; 155
    4806:	ff 4f       	sbci	r31, 0xFF	; 255
    4808:	91 83       	std	Z+1, r25	; 0x01
    480a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    480c:	de 01       	movw	r26, r28
    480e:	a9 59       	subi	r26, 0x99	; 153
    4810:	bf 4f       	sbci	r27, 0xFF	; 255
    4812:	fe 01       	movw	r30, r28
    4814:	e9 59       	subi	r30, 0x99	; 153
    4816:	ff 4f       	sbci	r31, 0xFF	; 255
    4818:	80 81       	ld	r24, Z
    481a:	91 81       	ldd	r25, Z+1	; 0x01
    481c:	01 97       	sbiw	r24, 0x01	; 1
    481e:	11 96       	adiw	r26, 0x01	; 1
    4820:	9c 93       	st	X, r25
    4822:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4824:	fe 01       	movw	r30, r28
    4826:	e9 59       	subi	r30, 0x99	; 153
    4828:	ff 4f       	sbci	r31, 0xFF	; 255
    482a:	80 81       	ld	r24, Z
    482c:	91 81       	ldd	r25, Z+1	; 0x01
    482e:	00 97       	sbiw	r24, 0x00	; 0
    4830:	d1 f6       	brne	.-76     	; 0x47e6 <SS_voidChangePassword+0x2d2>
    4832:	27 c0       	rjmp	.+78     	; 0x4882 <SS_voidChangePassword+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4834:	8e 01       	movw	r16, r28
    4836:	09 59       	subi	r16, 0x99	; 153
    4838:	1f 4f       	sbci	r17, 0xFF	; 255
    483a:	fe 01       	movw	r30, r28
    483c:	e7 59       	subi	r30, 0x97	; 151
    483e:	ff 4f       	sbci	r31, 0xFF	; 255
    4840:	60 81       	ld	r22, Z
    4842:	71 81       	ldd	r23, Z+1	; 0x01
    4844:	82 81       	ldd	r24, Z+2	; 0x02
    4846:	93 81       	ldd	r25, Z+3	; 0x03
    4848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    484c:	dc 01       	movw	r26, r24
    484e:	cb 01       	movw	r24, r22
    4850:	f8 01       	movw	r30, r16
    4852:	91 83       	std	Z+1, r25	; 0x01
    4854:	80 83       	st	Z, r24
    4856:	de 01       	movw	r26, r28
    4858:	ad 59       	subi	r26, 0x9D	; 157
    485a:	bf 4f       	sbci	r27, 0xFF	; 255
    485c:	fe 01       	movw	r30, r28
    485e:	e9 59       	subi	r30, 0x99	; 153
    4860:	ff 4f       	sbci	r31, 0xFF	; 255
    4862:	80 81       	ld	r24, Z
    4864:	91 81       	ldd	r25, Z+1	; 0x01
    4866:	8d 93       	st	X+, r24
    4868:	9c 93       	st	X, r25
    486a:	fe 01       	movw	r30, r28
    486c:	ed 59       	subi	r30, 0x9D	; 157
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	80 81       	ld	r24, Z
    4872:	91 81       	ldd	r25, Z+1	; 0x01
    4874:	01 97       	sbiw	r24, 0x01	; 1
    4876:	f1 f7       	brne	.-4      	; 0x4874 <SS_voidChangePassword+0x360>
    4878:	fe 01       	movw	r30, r28
    487a:	ed 59       	subi	r30, 0x9D	; 157
    487c:	ff 4f       	sbci	r31, 0xFF	; 255
    487e:	91 83       	std	Z+1, r25	; 0x01
    4880:	80 83       	st	Z, r24
			_delay_ms(10);
			UART_voidTxChar(local_u8RxData);
    4882:	fe 01       	movw	r30, r28
    4884:	ec 57       	subi	r30, 0x7C	; 124
    4886:	ff 4f       	sbci	r31, 0xFF	; 255
    4888:	80 81       	ld	r24, Z
    488a:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
			EEPROM_Position++;
    488e:	de 01       	movw	r26, r28
    4890:	a1 58       	subi	r26, 0x81	; 129
    4892:	bf 4f       	sbci	r27, 0xFF	; 255
    4894:	fe 01       	movw	r30, r28
    4896:	e1 58       	subi	r30, 0x81	; 129
    4898:	ff 4f       	sbci	r31, 0xFF	; 255
    489a:	80 81       	ld	r24, Z
    489c:	8f 5f       	subi	r24, 0xFF	; 255
    489e:	8c 93       	st	X, r24

	EEPROM_Position = EEPROM_user1_username;
	if (user1_check == 1) {
		UART_voidTxChar('2');
		UART_voidTxChar('-');
		for (counter = 0; counter < Maximum_password; counter++) {
    48a0:	de 01       	movw	r26, r28
    48a2:	a0 58       	subi	r26, 0x80	; 128
    48a4:	bf 4f       	sbci	r27, 0xFF	; 255
    48a6:	fe 01       	movw	r30, r28
    48a8:	e0 58       	subi	r30, 0x80	; 128
    48aa:	ff 4f       	sbci	r31, 0xFF	; 255
    48ac:	80 81       	ld	r24, Z
    48ae:	8f 5f       	subi	r24, 0xFF	; 255
    48b0:	8c 93       	st	X, r24
    48b2:	fe 01       	movw	r30, r28
    48b4:	e0 58       	subi	r30, 0x80	; 128
    48b6:	ff 4f       	sbci	r31, 0xFF	; 255
    48b8:	80 81       	ld	r24, Z
    48ba:	85 30       	cpi	r24, 0x05	; 5
    48bc:	08 f4       	brcc	.+2      	; 0x48c0 <SS_voidChangePassword+0x3ac>
    48be:	22 cf       	rjmp	.-444    	; 0x4704 <SS_voidChangePassword+0x1f0>
			EEPROM_voidReadByte(EEPROM_Position, &local_u8RxData);
			_delay_ms(10);
			UART_voidTxChar(local_u8RxData);
			EEPROM_Position++;
		}
		UART_voidTxNewLine();
    48c0:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
	}

//check if user2 is created  then copy username
	EEPROM_voidReadByte( EEPROM_user2_check, &user2_check);
    48c4:	9e 01       	movw	r18, r28
    48c6:	2e 57       	subi	r18, 0x7E	; 126
    48c8:	3f 4f       	sbci	r19, 0xFF	; 255
    48ca:	82 e0       	ldi	r24, 0x02	; 2
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	b9 01       	movw	r22, r18
    48d0:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    48d4:	fe 01       	movw	r30, r28
    48d6:	e1 5a       	subi	r30, 0xA1	; 161
    48d8:	ff 4f       	sbci	r31, 0xFF	; 255
    48da:	80 e0       	ldi	r24, 0x00	; 0
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	a0 e2       	ldi	r26, 0x20	; 32
    48e0:	b1 e4       	ldi	r27, 0x41	; 65
    48e2:	80 83       	st	Z, r24
    48e4:	91 83       	std	Z+1, r25	; 0x01
    48e6:	a2 83       	std	Z+2, r26	; 0x02
    48e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48ea:	8e 01       	movw	r16, r28
    48ec:	05 5a       	subi	r16, 0xA5	; 165
    48ee:	1f 4f       	sbci	r17, 0xFF	; 255
    48f0:	fe 01       	movw	r30, r28
    48f2:	e1 5a       	subi	r30, 0xA1	; 161
    48f4:	ff 4f       	sbci	r31, 0xFF	; 255
    48f6:	60 81       	ld	r22, Z
    48f8:	71 81       	ldd	r23, Z+1	; 0x01
    48fa:	82 81       	ldd	r24, Z+2	; 0x02
    48fc:	93 81       	ldd	r25, Z+3	; 0x03
    48fe:	20 e0       	ldi	r18, 0x00	; 0
    4900:	30 e0       	ldi	r19, 0x00	; 0
    4902:	4a e7       	ldi	r20, 0x7A	; 122
    4904:	55 e4       	ldi	r21, 0x45	; 69
    4906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    490a:	dc 01       	movw	r26, r24
    490c:	cb 01       	movw	r24, r22
    490e:	f8 01       	movw	r30, r16
    4910:	80 83       	st	Z, r24
    4912:	91 83       	std	Z+1, r25	; 0x01
    4914:	a2 83       	std	Z+2, r26	; 0x02
    4916:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4918:	fe 01       	movw	r30, r28
    491a:	e5 5a       	subi	r30, 0xA5	; 165
    491c:	ff 4f       	sbci	r31, 0xFF	; 255
    491e:	60 81       	ld	r22, Z
    4920:	71 81       	ldd	r23, Z+1	; 0x01
    4922:	82 81       	ldd	r24, Z+2	; 0x02
    4924:	93 81       	ldd	r25, Z+3	; 0x03
    4926:	20 e0       	ldi	r18, 0x00	; 0
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	40 e8       	ldi	r20, 0x80	; 128
    492c:	5f e3       	ldi	r21, 0x3F	; 63
    492e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4932:	88 23       	and	r24, r24
    4934:	44 f4       	brge	.+16     	; 0x4946 <SS_voidChangePassword+0x432>
		__ticks = 1;
    4936:	fe 01       	movw	r30, r28
    4938:	e7 5a       	subi	r30, 0xA7	; 167
    493a:	ff 4f       	sbci	r31, 0xFF	; 255
    493c:	81 e0       	ldi	r24, 0x01	; 1
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	91 83       	std	Z+1, r25	; 0x01
    4942:	80 83       	st	Z, r24
    4944:	64 c0       	rjmp	.+200    	; 0x4a0e <SS_voidChangePassword+0x4fa>
	else if (__tmp > 65535)
    4946:	fe 01       	movw	r30, r28
    4948:	e5 5a       	subi	r30, 0xA5	; 165
    494a:	ff 4f       	sbci	r31, 0xFF	; 255
    494c:	60 81       	ld	r22, Z
    494e:	71 81       	ldd	r23, Z+1	; 0x01
    4950:	82 81       	ldd	r24, Z+2	; 0x02
    4952:	93 81       	ldd	r25, Z+3	; 0x03
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	3f ef       	ldi	r19, 0xFF	; 255
    4958:	4f e7       	ldi	r20, 0x7F	; 127
    495a:	57 e4       	ldi	r21, 0x47	; 71
    495c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4960:	18 16       	cp	r1, r24
    4962:	0c f0       	brlt	.+2      	; 0x4966 <SS_voidChangePassword+0x452>
    4964:	43 c0       	rjmp	.+134    	; 0x49ec <SS_voidChangePassword+0x4d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4966:	fe 01       	movw	r30, r28
    4968:	e1 5a       	subi	r30, 0xA1	; 161
    496a:	ff 4f       	sbci	r31, 0xFF	; 255
    496c:	60 81       	ld	r22, Z
    496e:	71 81       	ldd	r23, Z+1	; 0x01
    4970:	82 81       	ldd	r24, Z+2	; 0x02
    4972:	93 81       	ldd	r25, Z+3	; 0x03
    4974:	20 e0       	ldi	r18, 0x00	; 0
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	40 e2       	ldi	r20, 0x20	; 32
    497a:	51 e4       	ldi	r21, 0x41	; 65
    497c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4980:	dc 01       	movw	r26, r24
    4982:	cb 01       	movw	r24, r22
    4984:	8e 01       	movw	r16, r28
    4986:	07 5a       	subi	r16, 0xA7	; 167
    4988:	1f 4f       	sbci	r17, 0xFF	; 255
    498a:	bc 01       	movw	r22, r24
    498c:	cd 01       	movw	r24, r26
    498e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4992:	dc 01       	movw	r26, r24
    4994:	cb 01       	movw	r24, r22
    4996:	f8 01       	movw	r30, r16
    4998:	91 83       	std	Z+1, r25	; 0x01
    499a:	80 83       	st	Z, r24
    499c:	1f c0       	rjmp	.+62     	; 0x49dc <SS_voidChangePassword+0x4c8>
    499e:	fe 01       	movw	r30, r28
    49a0:	e9 5a       	subi	r30, 0xA9	; 169
    49a2:	ff 4f       	sbci	r31, 0xFF	; 255
    49a4:	80 e9       	ldi	r24, 0x90	; 144
    49a6:	91 e0       	ldi	r25, 0x01	; 1
    49a8:	91 83       	std	Z+1, r25	; 0x01
    49aa:	80 83       	st	Z, r24
    49ac:	fe 01       	movw	r30, r28
    49ae:	e9 5a       	subi	r30, 0xA9	; 169
    49b0:	ff 4f       	sbci	r31, 0xFF	; 255
    49b2:	80 81       	ld	r24, Z
    49b4:	91 81       	ldd	r25, Z+1	; 0x01
    49b6:	01 97       	sbiw	r24, 0x01	; 1
    49b8:	f1 f7       	brne	.-4      	; 0x49b6 <SS_voidChangePassword+0x4a2>
    49ba:	fe 01       	movw	r30, r28
    49bc:	e9 5a       	subi	r30, 0xA9	; 169
    49be:	ff 4f       	sbci	r31, 0xFF	; 255
    49c0:	91 83       	std	Z+1, r25	; 0x01
    49c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49c4:	de 01       	movw	r26, r28
    49c6:	a7 5a       	subi	r26, 0xA7	; 167
    49c8:	bf 4f       	sbci	r27, 0xFF	; 255
    49ca:	fe 01       	movw	r30, r28
    49cc:	e7 5a       	subi	r30, 0xA7	; 167
    49ce:	ff 4f       	sbci	r31, 0xFF	; 255
    49d0:	80 81       	ld	r24, Z
    49d2:	91 81       	ldd	r25, Z+1	; 0x01
    49d4:	01 97       	sbiw	r24, 0x01	; 1
    49d6:	11 96       	adiw	r26, 0x01	; 1
    49d8:	9c 93       	st	X, r25
    49da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49dc:	fe 01       	movw	r30, r28
    49de:	e7 5a       	subi	r30, 0xA7	; 167
    49e0:	ff 4f       	sbci	r31, 0xFF	; 255
    49e2:	80 81       	ld	r24, Z
    49e4:	91 81       	ldd	r25, Z+1	; 0x01
    49e6:	00 97       	sbiw	r24, 0x00	; 0
    49e8:	d1 f6       	brne	.-76     	; 0x499e <SS_voidChangePassword+0x48a>
    49ea:	28 c0       	rjmp	.+80     	; 0x4a3c <SS_voidChangePassword+0x528>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49ec:	8e 01       	movw	r16, r28
    49ee:	07 5a       	subi	r16, 0xA7	; 167
    49f0:	1f 4f       	sbci	r17, 0xFF	; 255
    49f2:	fe 01       	movw	r30, r28
    49f4:	e5 5a       	subi	r30, 0xA5	; 165
    49f6:	ff 4f       	sbci	r31, 0xFF	; 255
    49f8:	60 81       	ld	r22, Z
    49fa:	71 81       	ldd	r23, Z+1	; 0x01
    49fc:	82 81       	ldd	r24, Z+2	; 0x02
    49fe:	93 81       	ldd	r25, Z+3	; 0x03
    4a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a04:	dc 01       	movw	r26, r24
    4a06:	cb 01       	movw	r24, r22
    4a08:	f8 01       	movw	r30, r16
    4a0a:	91 83       	std	Z+1, r25	; 0x01
    4a0c:	80 83       	st	Z, r24
    4a0e:	de 01       	movw	r26, r28
    4a10:	ab 5a       	subi	r26, 0xAB	; 171
    4a12:	bf 4f       	sbci	r27, 0xFF	; 255
    4a14:	fe 01       	movw	r30, r28
    4a16:	e7 5a       	subi	r30, 0xA7	; 167
    4a18:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1a:	80 81       	ld	r24, Z
    4a1c:	91 81       	ldd	r25, Z+1	; 0x01
    4a1e:	11 96       	adiw	r26, 0x01	; 1
    4a20:	9c 93       	st	X, r25
    4a22:	8e 93       	st	-X, r24
    4a24:	fe 01       	movw	r30, r28
    4a26:	eb 5a       	subi	r30, 0xAB	; 171
    4a28:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2a:	80 81       	ld	r24, Z
    4a2c:	91 81       	ldd	r25, Z+1	; 0x01
    4a2e:	01 97       	sbiw	r24, 0x01	; 1
    4a30:	f1 f7       	brne	.-4      	; 0x4a2e <SS_voidChangePassword+0x51a>
    4a32:	fe 01       	movw	r30, r28
    4a34:	eb 5a       	subi	r30, 0xAB	; 171
    4a36:	ff 4f       	sbci	r31, 0xFF	; 255
    4a38:	91 83       	std	Z+1, r25	; 0x01
    4a3a:	80 83       	st	Z, r24
	_delay_ms(10);
	EEPROM_Position = EEPROM_user2_username;
    4a3c:	fe 01       	movw	r30, r28
    4a3e:	e1 58       	subi	r30, 0x81	; 129
    4a40:	ff 4f       	sbci	r31, 0xFF	; 255
    4a42:	83 e1       	ldi	r24, 0x13	; 19
    4a44:	80 83       	st	Z, r24
	if (user2_check == 1) {
    4a46:	fe 01       	movw	r30, r28
    4a48:	ee 57       	subi	r30, 0x7E	; 126
    4a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4c:	80 81       	ld	r24, Z
    4a4e:	81 30       	cpi	r24, 0x01	; 1
    4a50:	09 f0       	breq	.+2      	; 0x4a54 <SS_voidChangePassword+0x540>
    4a52:	eb c0       	rjmp	.+470    	; 0x4c2a <SS_voidChangePassword+0x716>
		UART_voidTxChar('3');
    4a54:	83 e3       	ldi	r24, 0x33	; 51
    4a56:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
		UART_voidTxChar('-');
    4a5a:	8d e2       	ldi	r24, 0x2D	; 45
    4a5c:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
		for (counter = 0; counter < Maximum_password; counter++) {
    4a60:	fe 01       	movw	r30, r28
    4a62:	e0 58       	subi	r30, 0x80	; 128
    4a64:	ff 4f       	sbci	r31, 0xFF	; 255
    4a66:	10 82       	st	Z, r1
    4a68:	d7 c0       	rjmp	.+430    	; 0x4c18 <SS_voidChangePassword+0x704>
			EEPROM_voidReadByte(EEPROM_Position, &local_u8RxData);
    4a6a:	fe 01       	movw	r30, r28
    4a6c:	e1 58       	subi	r30, 0x81	; 129
    4a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a70:	80 81       	ld	r24, Z
    4a72:	88 2f       	mov	r24, r24
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	9e 01       	movw	r18, r28
    4a78:	2c 57       	subi	r18, 0x7C	; 124
    4a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a7c:	b9 01       	movw	r22, r18
    4a7e:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    4a82:	fe 01       	movw	r30, r28
    4a84:	ef 5a       	subi	r30, 0xAF	; 175
    4a86:	ff 4f       	sbci	r31, 0xFF	; 255
    4a88:	80 e0       	ldi	r24, 0x00	; 0
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	a0 e2       	ldi	r26, 0x20	; 32
    4a8e:	b1 e4       	ldi	r27, 0x41	; 65
    4a90:	80 83       	st	Z, r24
    4a92:	91 83       	std	Z+1, r25	; 0x01
    4a94:	a2 83       	std	Z+2, r26	; 0x02
    4a96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a98:	8e 01       	movw	r16, r28
    4a9a:	03 5b       	subi	r16, 0xB3	; 179
    4a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a9e:	fe 01       	movw	r30, r28
    4aa0:	ef 5a       	subi	r30, 0xAF	; 175
    4aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa4:	60 81       	ld	r22, Z
    4aa6:	71 81       	ldd	r23, Z+1	; 0x01
    4aa8:	82 81       	ldd	r24, Z+2	; 0x02
    4aaa:	93 81       	ldd	r25, Z+3	; 0x03
    4aac:	20 e0       	ldi	r18, 0x00	; 0
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	4a e7       	ldi	r20, 0x7A	; 122
    4ab2:	55 e4       	ldi	r21, 0x45	; 69
    4ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ab8:	dc 01       	movw	r26, r24
    4aba:	cb 01       	movw	r24, r22
    4abc:	f8 01       	movw	r30, r16
    4abe:	80 83       	st	Z, r24
    4ac0:	91 83       	std	Z+1, r25	; 0x01
    4ac2:	a2 83       	std	Z+2, r26	; 0x02
    4ac4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ac6:	fe 01       	movw	r30, r28
    4ac8:	e3 5b       	subi	r30, 0xB3	; 179
    4aca:	ff 4f       	sbci	r31, 0xFF	; 255
    4acc:	60 81       	ld	r22, Z
    4ace:	71 81       	ldd	r23, Z+1	; 0x01
    4ad0:	82 81       	ldd	r24, Z+2	; 0x02
    4ad2:	93 81       	ldd	r25, Z+3	; 0x03
    4ad4:	20 e0       	ldi	r18, 0x00	; 0
    4ad6:	30 e0       	ldi	r19, 0x00	; 0
    4ad8:	40 e8       	ldi	r20, 0x80	; 128
    4ada:	5f e3       	ldi	r21, 0x3F	; 63
    4adc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ae0:	88 23       	and	r24, r24
    4ae2:	44 f4       	brge	.+16     	; 0x4af4 <SS_voidChangePassword+0x5e0>
		__ticks = 1;
    4ae4:	fe 01       	movw	r30, r28
    4ae6:	e5 5b       	subi	r30, 0xB5	; 181
    4ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aea:	81 e0       	ldi	r24, 0x01	; 1
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	91 83       	std	Z+1, r25	; 0x01
    4af0:	80 83       	st	Z, r24
    4af2:	64 c0       	rjmp	.+200    	; 0x4bbc <SS_voidChangePassword+0x6a8>
	else if (__tmp > 65535)
    4af4:	fe 01       	movw	r30, r28
    4af6:	e3 5b       	subi	r30, 0xB3	; 179
    4af8:	ff 4f       	sbci	r31, 0xFF	; 255
    4afa:	60 81       	ld	r22, Z
    4afc:	71 81       	ldd	r23, Z+1	; 0x01
    4afe:	82 81       	ldd	r24, Z+2	; 0x02
    4b00:	93 81       	ldd	r25, Z+3	; 0x03
    4b02:	20 e0       	ldi	r18, 0x00	; 0
    4b04:	3f ef       	ldi	r19, 0xFF	; 255
    4b06:	4f e7       	ldi	r20, 0x7F	; 127
    4b08:	57 e4       	ldi	r21, 0x47	; 71
    4b0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b0e:	18 16       	cp	r1, r24
    4b10:	0c f0       	brlt	.+2      	; 0x4b14 <SS_voidChangePassword+0x600>
    4b12:	43 c0       	rjmp	.+134    	; 0x4b9a <SS_voidChangePassword+0x686>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b14:	fe 01       	movw	r30, r28
    4b16:	ef 5a       	subi	r30, 0xAF	; 175
    4b18:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1a:	60 81       	ld	r22, Z
    4b1c:	71 81       	ldd	r23, Z+1	; 0x01
    4b1e:	82 81       	ldd	r24, Z+2	; 0x02
    4b20:	93 81       	ldd	r25, Z+3	; 0x03
    4b22:	20 e0       	ldi	r18, 0x00	; 0
    4b24:	30 e0       	ldi	r19, 0x00	; 0
    4b26:	40 e2       	ldi	r20, 0x20	; 32
    4b28:	51 e4       	ldi	r21, 0x41	; 65
    4b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b2e:	dc 01       	movw	r26, r24
    4b30:	cb 01       	movw	r24, r22
    4b32:	8e 01       	movw	r16, r28
    4b34:	05 5b       	subi	r16, 0xB5	; 181
    4b36:	1f 4f       	sbci	r17, 0xFF	; 255
    4b38:	bc 01       	movw	r22, r24
    4b3a:	cd 01       	movw	r24, r26
    4b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b40:	dc 01       	movw	r26, r24
    4b42:	cb 01       	movw	r24, r22
    4b44:	f8 01       	movw	r30, r16
    4b46:	91 83       	std	Z+1, r25	; 0x01
    4b48:	80 83       	st	Z, r24
    4b4a:	1f c0       	rjmp	.+62     	; 0x4b8a <SS_voidChangePassword+0x676>
    4b4c:	fe 01       	movw	r30, r28
    4b4e:	e7 5b       	subi	r30, 0xB7	; 183
    4b50:	ff 4f       	sbci	r31, 0xFF	; 255
    4b52:	80 e9       	ldi	r24, 0x90	; 144
    4b54:	91 e0       	ldi	r25, 0x01	; 1
    4b56:	91 83       	std	Z+1, r25	; 0x01
    4b58:	80 83       	st	Z, r24
    4b5a:	fe 01       	movw	r30, r28
    4b5c:	e7 5b       	subi	r30, 0xB7	; 183
    4b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b60:	80 81       	ld	r24, Z
    4b62:	91 81       	ldd	r25, Z+1	; 0x01
    4b64:	01 97       	sbiw	r24, 0x01	; 1
    4b66:	f1 f7       	brne	.-4      	; 0x4b64 <SS_voidChangePassword+0x650>
    4b68:	fe 01       	movw	r30, r28
    4b6a:	e7 5b       	subi	r30, 0xB7	; 183
    4b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6e:	91 83       	std	Z+1, r25	; 0x01
    4b70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b72:	de 01       	movw	r26, r28
    4b74:	a5 5b       	subi	r26, 0xB5	; 181
    4b76:	bf 4f       	sbci	r27, 0xFF	; 255
    4b78:	fe 01       	movw	r30, r28
    4b7a:	e5 5b       	subi	r30, 0xB5	; 181
    4b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7e:	80 81       	ld	r24, Z
    4b80:	91 81       	ldd	r25, Z+1	; 0x01
    4b82:	01 97       	sbiw	r24, 0x01	; 1
    4b84:	11 96       	adiw	r26, 0x01	; 1
    4b86:	9c 93       	st	X, r25
    4b88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b8a:	fe 01       	movw	r30, r28
    4b8c:	e5 5b       	subi	r30, 0xB5	; 181
    4b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b90:	80 81       	ld	r24, Z
    4b92:	91 81       	ldd	r25, Z+1	; 0x01
    4b94:	00 97       	sbiw	r24, 0x00	; 0
    4b96:	d1 f6       	brne	.-76     	; 0x4b4c <SS_voidChangePassword+0x638>
    4b98:	27 c0       	rjmp	.+78     	; 0x4be8 <SS_voidChangePassword+0x6d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b9a:	8e 01       	movw	r16, r28
    4b9c:	05 5b       	subi	r16, 0xB5	; 181
    4b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    4ba0:	fe 01       	movw	r30, r28
    4ba2:	e3 5b       	subi	r30, 0xB3	; 179
    4ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba6:	60 81       	ld	r22, Z
    4ba8:	71 81       	ldd	r23, Z+1	; 0x01
    4baa:	82 81       	ldd	r24, Z+2	; 0x02
    4bac:	93 81       	ldd	r25, Z+3	; 0x03
    4bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb2:	dc 01       	movw	r26, r24
    4bb4:	cb 01       	movw	r24, r22
    4bb6:	f8 01       	movw	r30, r16
    4bb8:	91 83       	std	Z+1, r25	; 0x01
    4bba:	80 83       	st	Z, r24
    4bbc:	de 01       	movw	r26, r28
    4bbe:	a9 5b       	subi	r26, 0xB9	; 185
    4bc0:	bf 4f       	sbci	r27, 0xFF	; 255
    4bc2:	fe 01       	movw	r30, r28
    4bc4:	e5 5b       	subi	r30, 0xB5	; 181
    4bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc8:	80 81       	ld	r24, Z
    4bca:	91 81       	ldd	r25, Z+1	; 0x01
    4bcc:	8d 93       	st	X+, r24
    4bce:	9c 93       	st	X, r25
    4bd0:	fe 01       	movw	r30, r28
    4bd2:	e9 5b       	subi	r30, 0xB9	; 185
    4bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd6:	80 81       	ld	r24, Z
    4bd8:	91 81       	ldd	r25, Z+1	; 0x01
    4bda:	01 97       	sbiw	r24, 0x01	; 1
    4bdc:	f1 f7       	brne	.-4      	; 0x4bda <SS_voidChangePassword+0x6c6>
    4bde:	fe 01       	movw	r30, r28
    4be0:	e9 5b       	subi	r30, 0xB9	; 185
    4be2:	ff 4f       	sbci	r31, 0xFF	; 255
    4be4:	91 83       	std	Z+1, r25	; 0x01
    4be6:	80 83       	st	Z, r24
			_delay_ms(10);
			UART_voidTxChar(local_u8RxData);
    4be8:	fe 01       	movw	r30, r28
    4bea:	ec 57       	subi	r30, 0x7C	; 124
    4bec:	ff 4f       	sbci	r31, 0xFF	; 255
    4bee:	80 81       	ld	r24, Z
    4bf0:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
			EEPROM_Position++;
    4bf4:	de 01       	movw	r26, r28
    4bf6:	a1 58       	subi	r26, 0x81	; 129
    4bf8:	bf 4f       	sbci	r27, 0xFF	; 255
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	e1 58       	subi	r30, 0x81	; 129
    4bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4c00:	80 81       	ld	r24, Z
    4c02:	8f 5f       	subi	r24, 0xFF	; 255
    4c04:	8c 93       	st	X, r24
	_delay_ms(10);
	EEPROM_Position = EEPROM_user2_username;
	if (user2_check == 1) {
		UART_voidTxChar('3');
		UART_voidTxChar('-');
		for (counter = 0; counter < Maximum_password; counter++) {
    4c06:	de 01       	movw	r26, r28
    4c08:	a0 58       	subi	r26, 0x80	; 128
    4c0a:	bf 4f       	sbci	r27, 0xFF	; 255
    4c0c:	fe 01       	movw	r30, r28
    4c0e:	e0 58       	subi	r30, 0x80	; 128
    4c10:	ff 4f       	sbci	r31, 0xFF	; 255
    4c12:	80 81       	ld	r24, Z
    4c14:	8f 5f       	subi	r24, 0xFF	; 255
    4c16:	8c 93       	st	X, r24
    4c18:	fe 01       	movw	r30, r28
    4c1a:	e0 58       	subi	r30, 0x80	; 128
    4c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1e:	80 81       	ld	r24, Z
    4c20:	85 30       	cpi	r24, 0x05	; 5
    4c22:	08 f4       	brcc	.+2      	; 0x4c26 <SS_voidChangePassword+0x712>
    4c24:	22 cf       	rjmp	.-444    	; 0x4a6a <SS_voidChangePassword+0x556>
			EEPROM_voidReadByte(EEPROM_Position, &local_u8RxData);
			_delay_ms(10);
			UART_voidTxChar(local_u8RxData);
			EEPROM_Position++;
		}
		UART_voidTxNewLine();
    4c26:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
	}

//check if user3 is created  then copy username
	EEPROM_voidReadByte( EEPROM_user3_check, &user3_check);
    4c2a:	9e 01       	movw	r18, r28
    4c2c:	2d 57       	subi	r18, 0x7D	; 125
    4c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c30:	83 e0       	ldi	r24, 0x03	; 3
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	b9 01       	movw	r22, r18
    4c36:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    4c3a:	fe 01       	movw	r30, r28
    4c3c:	ed 5b       	subi	r30, 0xBD	; 189
    4c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c40:	80 e0       	ldi	r24, 0x00	; 0
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	a0 e2       	ldi	r26, 0x20	; 32
    4c46:	b1 e4       	ldi	r27, 0x41	; 65
    4c48:	80 83       	st	Z, r24
    4c4a:	91 83       	std	Z+1, r25	; 0x01
    4c4c:	a2 83       	std	Z+2, r26	; 0x02
    4c4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c50:	8e 01       	movw	r16, r28
    4c52:	01 5c       	subi	r16, 0xC1	; 193
    4c54:	1f 4f       	sbci	r17, 0xFF	; 255
    4c56:	fe 01       	movw	r30, r28
    4c58:	ed 5b       	subi	r30, 0xBD	; 189
    4c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5c:	60 81       	ld	r22, Z
    4c5e:	71 81       	ldd	r23, Z+1	; 0x01
    4c60:	82 81       	ldd	r24, Z+2	; 0x02
    4c62:	93 81       	ldd	r25, Z+3	; 0x03
    4c64:	20 e0       	ldi	r18, 0x00	; 0
    4c66:	30 e0       	ldi	r19, 0x00	; 0
    4c68:	4a e7       	ldi	r20, 0x7A	; 122
    4c6a:	55 e4       	ldi	r21, 0x45	; 69
    4c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c70:	dc 01       	movw	r26, r24
    4c72:	cb 01       	movw	r24, r22
    4c74:	f8 01       	movw	r30, r16
    4c76:	80 83       	st	Z, r24
    4c78:	91 83       	std	Z+1, r25	; 0x01
    4c7a:	a2 83       	std	Z+2, r26	; 0x02
    4c7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c7e:	fe 01       	movw	r30, r28
    4c80:	ff 96       	adiw	r30, 0x3f	; 63
    4c82:	60 81       	ld	r22, Z
    4c84:	71 81       	ldd	r23, Z+1	; 0x01
    4c86:	82 81       	ldd	r24, Z+2	; 0x02
    4c88:	93 81       	ldd	r25, Z+3	; 0x03
    4c8a:	20 e0       	ldi	r18, 0x00	; 0
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	40 e8       	ldi	r20, 0x80	; 128
    4c90:	5f e3       	ldi	r21, 0x3F	; 63
    4c92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c96:	88 23       	and	r24, r24
    4c98:	2c f4       	brge	.+10     	; 0x4ca4 <SS_voidChangePassword+0x790>
		__ticks = 1;
    4c9a:	81 e0       	ldi	r24, 0x01	; 1
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	9e af       	std	Y+62, r25	; 0x3e
    4ca0:	8d af       	std	Y+61, r24	; 0x3d
    4ca2:	46 c0       	rjmp	.+140    	; 0x4d30 <SS_voidChangePassword+0x81c>
	else if (__tmp > 65535)
    4ca4:	fe 01       	movw	r30, r28
    4ca6:	ff 96       	adiw	r30, 0x3f	; 63
    4ca8:	60 81       	ld	r22, Z
    4caa:	71 81       	ldd	r23, Z+1	; 0x01
    4cac:	82 81       	ldd	r24, Z+2	; 0x02
    4cae:	93 81       	ldd	r25, Z+3	; 0x03
    4cb0:	20 e0       	ldi	r18, 0x00	; 0
    4cb2:	3f ef       	ldi	r19, 0xFF	; 255
    4cb4:	4f e7       	ldi	r20, 0x7F	; 127
    4cb6:	57 e4       	ldi	r21, 0x47	; 71
    4cb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cbc:	18 16       	cp	r1, r24
    4cbe:	64 f5       	brge	.+88     	; 0x4d18 <SS_voidChangePassword+0x804>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cc0:	fe 01       	movw	r30, r28
    4cc2:	ed 5b       	subi	r30, 0xBD	; 189
    4cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc6:	60 81       	ld	r22, Z
    4cc8:	71 81       	ldd	r23, Z+1	; 0x01
    4cca:	82 81       	ldd	r24, Z+2	; 0x02
    4ccc:	93 81       	ldd	r25, Z+3	; 0x03
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	40 e2       	ldi	r20, 0x20	; 32
    4cd4:	51 e4       	ldi	r21, 0x41	; 65
    4cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cda:	dc 01       	movw	r26, r24
    4cdc:	cb 01       	movw	r24, r22
    4cde:	bc 01       	movw	r22, r24
    4ce0:	cd 01       	movw	r24, r26
    4ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce6:	dc 01       	movw	r26, r24
    4ce8:	cb 01       	movw	r24, r22
    4cea:	9e af       	std	Y+62, r25	; 0x3e
    4cec:	8d af       	std	Y+61, r24	; 0x3d
    4cee:	0f c0       	rjmp	.+30     	; 0x4d0e <SS_voidChangePassword+0x7fa>
    4cf0:	80 e9       	ldi	r24, 0x90	; 144
    4cf2:	91 e0       	ldi	r25, 0x01	; 1
    4cf4:	9c af       	std	Y+60, r25	; 0x3c
    4cf6:	8b af       	std	Y+59, r24	; 0x3b
    4cf8:	8b ad       	ldd	r24, Y+59	; 0x3b
    4cfa:	9c ad       	ldd	r25, Y+60	; 0x3c
    4cfc:	01 97       	sbiw	r24, 0x01	; 1
    4cfe:	f1 f7       	brne	.-4      	; 0x4cfc <SS_voidChangePassword+0x7e8>
    4d00:	9c af       	std	Y+60, r25	; 0x3c
    4d02:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d04:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d06:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d08:	01 97       	sbiw	r24, 0x01	; 1
    4d0a:	9e af       	std	Y+62, r25	; 0x3e
    4d0c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d10:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d12:	00 97       	sbiw	r24, 0x00	; 0
    4d14:	69 f7       	brne	.-38     	; 0x4cf0 <SS_voidChangePassword+0x7dc>
    4d16:	16 c0       	rjmp	.+44     	; 0x4d44 <SS_voidChangePassword+0x830>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d18:	fe 01       	movw	r30, r28
    4d1a:	ff 96       	adiw	r30, 0x3f	; 63
    4d1c:	60 81       	ld	r22, Z
    4d1e:	71 81       	ldd	r23, Z+1	; 0x01
    4d20:	82 81       	ldd	r24, Z+2	; 0x02
    4d22:	93 81       	ldd	r25, Z+3	; 0x03
    4d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d28:	dc 01       	movw	r26, r24
    4d2a:	cb 01       	movw	r24, r22
    4d2c:	9e af       	std	Y+62, r25	; 0x3e
    4d2e:	8d af       	std	Y+61, r24	; 0x3d
    4d30:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d32:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d34:	9a af       	std	Y+58, r25	; 0x3a
    4d36:	89 af       	std	Y+57, r24	; 0x39
    4d38:	89 ad       	ldd	r24, Y+57	; 0x39
    4d3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    4d3c:	01 97       	sbiw	r24, 0x01	; 1
    4d3e:	f1 f7       	brne	.-4      	; 0x4d3c <SS_voidChangePassword+0x828>
    4d40:	9a af       	std	Y+58, r25	; 0x3a
    4d42:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	EEPROM_Position = EEPROM_user3_username;
    4d44:	fe 01       	movw	r30, r28
    4d46:	e1 58       	subi	r30, 0x81	; 129
    4d48:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4a:	8d e1       	ldi	r24, 0x1D	; 29
    4d4c:	80 83       	st	Z, r24
	if (user3_check == 1) {
    4d4e:	fe 01       	movw	r30, r28
    4d50:	ed 57       	subi	r30, 0x7D	; 125
    4d52:	ff 4f       	sbci	r31, 0xFF	; 255
    4d54:	80 81       	ld	r24, Z
    4d56:	81 30       	cpi	r24, 0x01	; 1
    4d58:	09 f0       	breq	.+2      	; 0x4d5c <SS_voidChangePassword+0x848>
    4d5a:	aa c0       	rjmp	.+340    	; 0x4eb0 <SS_voidChangePassword+0x99c>
		UART_voidTxChar('4');
    4d5c:	84 e3       	ldi	r24, 0x34	; 52
    4d5e:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
		UART_voidTxChar('-');
    4d62:	8d e2       	ldi	r24, 0x2D	; 45
    4d64:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
		for (counter = 0; counter < Maximum_password; counter++) {
    4d68:	fe 01       	movw	r30, r28
    4d6a:	e0 58       	subi	r30, 0x80	; 128
    4d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6e:	10 82       	st	Z, r1
    4d70:	96 c0       	rjmp	.+300    	; 0x4e9e <SS_voidChangePassword+0x98a>
			EEPROM_voidReadByte(EEPROM_Position, &local_u8RxData);
    4d72:	fe 01       	movw	r30, r28
    4d74:	e1 58       	subi	r30, 0x81	; 129
    4d76:	ff 4f       	sbci	r31, 0xFF	; 255
    4d78:	80 81       	ld	r24, Z
    4d7a:	88 2f       	mov	r24, r24
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	9e 01       	movw	r18, r28
    4d80:	2c 57       	subi	r18, 0x7C	; 124
    4d82:	3f 4f       	sbci	r19, 0xFF	; 255
    4d84:	b9 01       	movw	r22, r18
    4d86:	0e 94 22 52 	call	0xa444	; 0xa444 <EEPROM_voidReadByte>
    4d8a:	80 e0       	ldi	r24, 0x00	; 0
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	a0 e2       	ldi	r26, 0x20	; 32
    4d90:	b1 e4       	ldi	r27, 0x41	; 65
    4d92:	8d ab       	std	Y+53, r24	; 0x35
    4d94:	9e ab       	std	Y+54, r25	; 0x36
    4d96:	af ab       	std	Y+55, r26	; 0x37
    4d98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d9a:	6d a9       	ldd	r22, Y+53	; 0x35
    4d9c:	7e a9       	ldd	r23, Y+54	; 0x36
    4d9e:	8f a9       	ldd	r24, Y+55	; 0x37
    4da0:	98 ad       	ldd	r25, Y+56	; 0x38
    4da2:	20 e0       	ldi	r18, 0x00	; 0
    4da4:	30 e0       	ldi	r19, 0x00	; 0
    4da6:	4a e7       	ldi	r20, 0x7A	; 122
    4da8:	55 e4       	ldi	r21, 0x45	; 69
    4daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dae:	dc 01       	movw	r26, r24
    4db0:	cb 01       	movw	r24, r22
    4db2:	89 ab       	std	Y+49, r24	; 0x31
    4db4:	9a ab       	std	Y+50, r25	; 0x32
    4db6:	ab ab       	std	Y+51, r26	; 0x33
    4db8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4dba:	69 a9       	ldd	r22, Y+49	; 0x31
    4dbc:	7a a9       	ldd	r23, Y+50	; 0x32
    4dbe:	8b a9       	ldd	r24, Y+51	; 0x33
    4dc0:	9c a9       	ldd	r25, Y+52	; 0x34
    4dc2:	20 e0       	ldi	r18, 0x00	; 0
    4dc4:	30 e0       	ldi	r19, 0x00	; 0
    4dc6:	40 e8       	ldi	r20, 0x80	; 128
    4dc8:	5f e3       	ldi	r21, 0x3F	; 63
    4dca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4dce:	88 23       	and	r24, r24
    4dd0:	2c f4       	brge	.+10     	; 0x4ddc <SS_voidChangePassword+0x8c8>
		__ticks = 1;
    4dd2:	81 e0       	ldi	r24, 0x01	; 1
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	98 ab       	std	Y+48, r25	; 0x30
    4dd8:	8f a7       	std	Y+47, r24	; 0x2f
    4dda:	3f c0       	rjmp	.+126    	; 0x4e5a <SS_voidChangePassword+0x946>
	else if (__tmp > 65535)
    4ddc:	69 a9       	ldd	r22, Y+49	; 0x31
    4dde:	7a a9       	ldd	r23, Y+50	; 0x32
    4de0:	8b a9       	ldd	r24, Y+51	; 0x33
    4de2:	9c a9       	ldd	r25, Y+52	; 0x34
    4de4:	20 e0       	ldi	r18, 0x00	; 0
    4de6:	3f ef       	ldi	r19, 0xFF	; 255
    4de8:	4f e7       	ldi	r20, 0x7F	; 127
    4dea:	57 e4       	ldi	r21, 0x47	; 71
    4dec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4df0:	18 16       	cp	r1, r24
    4df2:	4c f5       	brge	.+82     	; 0x4e46 <SS_voidChangePassword+0x932>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4df4:	6d a9       	ldd	r22, Y+53	; 0x35
    4df6:	7e a9       	ldd	r23, Y+54	; 0x36
    4df8:	8f a9       	ldd	r24, Y+55	; 0x37
    4dfa:	98 ad       	ldd	r25, Y+56	; 0x38
    4dfc:	20 e0       	ldi	r18, 0x00	; 0
    4dfe:	30 e0       	ldi	r19, 0x00	; 0
    4e00:	40 e2       	ldi	r20, 0x20	; 32
    4e02:	51 e4       	ldi	r21, 0x41	; 65
    4e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e08:	dc 01       	movw	r26, r24
    4e0a:	cb 01       	movw	r24, r22
    4e0c:	bc 01       	movw	r22, r24
    4e0e:	cd 01       	movw	r24, r26
    4e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e14:	dc 01       	movw	r26, r24
    4e16:	cb 01       	movw	r24, r22
    4e18:	98 ab       	std	Y+48, r25	; 0x30
    4e1a:	8f a7       	std	Y+47, r24	; 0x2f
    4e1c:	0f c0       	rjmp	.+30     	; 0x4e3c <SS_voidChangePassword+0x928>
    4e1e:	80 e9       	ldi	r24, 0x90	; 144
    4e20:	91 e0       	ldi	r25, 0x01	; 1
    4e22:	9e a7       	std	Y+46, r25	; 0x2e
    4e24:	8d a7       	std	Y+45, r24	; 0x2d
    4e26:	8d a5       	ldd	r24, Y+45	; 0x2d
    4e28:	9e a5       	ldd	r25, Y+46	; 0x2e
    4e2a:	01 97       	sbiw	r24, 0x01	; 1
    4e2c:	f1 f7       	brne	.-4      	; 0x4e2a <SS_voidChangePassword+0x916>
    4e2e:	9e a7       	std	Y+46, r25	; 0x2e
    4e30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e32:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e34:	98 a9       	ldd	r25, Y+48	; 0x30
    4e36:	01 97       	sbiw	r24, 0x01	; 1
    4e38:	98 ab       	std	Y+48, r25	; 0x30
    4e3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e3e:	98 a9       	ldd	r25, Y+48	; 0x30
    4e40:	00 97       	sbiw	r24, 0x00	; 0
    4e42:	69 f7       	brne	.-38     	; 0x4e1e <SS_voidChangePassword+0x90a>
    4e44:	14 c0       	rjmp	.+40     	; 0x4e6e <SS_voidChangePassword+0x95a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e46:	69 a9       	ldd	r22, Y+49	; 0x31
    4e48:	7a a9       	ldd	r23, Y+50	; 0x32
    4e4a:	8b a9       	ldd	r24, Y+51	; 0x33
    4e4c:	9c a9       	ldd	r25, Y+52	; 0x34
    4e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e52:	dc 01       	movw	r26, r24
    4e54:	cb 01       	movw	r24, r22
    4e56:	98 ab       	std	Y+48, r25	; 0x30
    4e58:	8f a7       	std	Y+47, r24	; 0x2f
    4e5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e5c:	98 a9       	ldd	r25, Y+48	; 0x30
    4e5e:	9c a7       	std	Y+44, r25	; 0x2c
    4e60:	8b a7       	std	Y+43, r24	; 0x2b
    4e62:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e64:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e66:	01 97       	sbiw	r24, 0x01	; 1
    4e68:	f1 f7       	brne	.-4      	; 0x4e66 <SS_voidChangePassword+0x952>
    4e6a:	9c a7       	std	Y+44, r25	; 0x2c
    4e6c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			UART_voidTxChar(local_u8RxData);
    4e6e:	fe 01       	movw	r30, r28
    4e70:	ec 57       	subi	r30, 0x7C	; 124
    4e72:	ff 4f       	sbci	r31, 0xFF	; 255
    4e74:	80 81       	ld	r24, Z
    4e76:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
			EEPROM_Position++;
    4e7a:	de 01       	movw	r26, r28
    4e7c:	a1 58       	subi	r26, 0x81	; 129
    4e7e:	bf 4f       	sbci	r27, 0xFF	; 255
    4e80:	fe 01       	movw	r30, r28
    4e82:	e1 58       	subi	r30, 0x81	; 129
    4e84:	ff 4f       	sbci	r31, 0xFF	; 255
    4e86:	80 81       	ld	r24, Z
    4e88:	8f 5f       	subi	r24, 0xFF	; 255
    4e8a:	8c 93       	st	X, r24
	_delay_ms(10);
	EEPROM_Position = EEPROM_user3_username;
	if (user3_check == 1) {
		UART_voidTxChar('4');
		UART_voidTxChar('-');
		for (counter = 0; counter < Maximum_password; counter++) {
    4e8c:	de 01       	movw	r26, r28
    4e8e:	a0 58       	subi	r26, 0x80	; 128
    4e90:	bf 4f       	sbci	r27, 0xFF	; 255
    4e92:	fe 01       	movw	r30, r28
    4e94:	e0 58       	subi	r30, 0x80	; 128
    4e96:	ff 4f       	sbci	r31, 0xFF	; 255
    4e98:	80 81       	ld	r24, Z
    4e9a:	8f 5f       	subi	r24, 0xFF	; 255
    4e9c:	8c 93       	st	X, r24
    4e9e:	fe 01       	movw	r30, r28
    4ea0:	e0 58       	subi	r30, 0x80	; 128
    4ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea4:	80 81       	ld	r24, Z
    4ea6:	85 30       	cpi	r24, 0x05	; 5
    4ea8:	08 f4       	brcc	.+2      	; 0x4eac <SS_voidChangePassword+0x998>
    4eaa:	63 cf       	rjmp	.-314    	; 0x4d72 <SS_voidChangePassword+0x85e>
			EEPROM_voidReadByte(EEPROM_Position, &local_u8RxData);
			_delay_ms(10);
			UART_voidTxChar(local_u8RxData);
			EEPROM_Position++;
		}
		UART_voidTxNewLine();
    4eac:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
	}

	/* read user inpput  to select user*/

	do {
		UART_voidRxChar(&local_u8RxData);
    4eb0:	ce 01       	movw	r24, r28
    4eb2:	8c 57       	subi	r24, 0x7C	; 124
    4eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    4eb6:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
	} while (local_u8RxData == NULL );
    4eba:	fe 01       	movw	r30, r28
    4ebc:	ec 57       	subi	r30, 0x7C	; 124
    4ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec0:	80 81       	ld	r24, Z
    4ec2:	88 2f       	mov	r24, r24
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	00 97       	sbiw	r24, 0x00	; 0
    4ec8:	99 f3       	breq	.-26     	; 0x4eb0 <SS_voidChangePassword+0x99c>

	switch (local_u8RxData) {
    4eca:	fe 01       	movw	r30, r28
    4ecc:	ec 57       	subi	r30, 0x7C	; 124
    4ece:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed0:	80 81       	ld	r24, Z
    4ed2:	28 2f       	mov	r18, r24
    4ed4:	30 e0       	ldi	r19, 0x00	; 0
    4ed6:	cb 57       	subi	r28, 0x7B	; 123
    4ed8:	df 4f       	sbci	r29, 0xFF	; 255
    4eda:	39 83       	std	Y+1, r19	; 0x01
    4edc:	28 83       	st	Y, r18
    4ede:	c5 58       	subi	r28, 0x85	; 133
    4ee0:	d0 40       	sbci	r29, 0x00	; 0
    4ee2:	cb 57       	subi	r28, 0x7B	; 123
    4ee4:	df 4f       	sbci	r29, 0xFF	; 255
    4ee6:	88 81       	ld	r24, Y
    4ee8:	99 81       	ldd	r25, Y+1	; 0x01
    4eea:	c5 58       	subi	r28, 0x85	; 133
    4eec:	d0 40       	sbci	r29, 0x00	; 0
    4eee:	82 33       	cpi	r24, 0x32	; 50
    4ef0:	91 05       	cpc	r25, r1
    4ef2:	61 f1       	breq	.+88     	; 0x4f4c <SS_voidChangePassword+0xa38>
    4ef4:	cb 57       	subi	r28, 0x7B	; 123
    4ef6:	df 4f       	sbci	r29, 0xFF	; 255
    4ef8:	e8 81       	ld	r30, Y
    4efa:	f9 81       	ldd	r31, Y+1	; 0x01
    4efc:	c5 58       	subi	r28, 0x85	; 133
    4efe:	d0 40       	sbci	r29, 0x00	; 0
    4f00:	e3 33       	cpi	r30, 0x33	; 51
    4f02:	f1 05       	cpc	r31, r1
    4f04:	54 f4       	brge	.+20     	; 0x4f1a <SS_voidChangePassword+0xa06>
    4f06:	cb 57       	subi	r28, 0x7B	; 123
    4f08:	df 4f       	sbci	r29, 0xFF	; 255
    4f0a:	28 81       	ld	r18, Y
    4f0c:	39 81       	ldd	r19, Y+1	; 0x01
    4f0e:	c5 58       	subi	r28, 0x85	; 133
    4f10:	d0 40       	sbci	r29, 0x00	; 0
    4f12:	21 33       	cpi	r18, 0x31	; 49
    4f14:	31 05       	cpc	r19, r1
    4f16:	a1 f0       	breq	.+40     	; 0x4f40 <SS_voidChangePassword+0xa2c>
    4f18:	2b c0       	rjmp	.+86     	; 0x4f70 <SS_voidChangePassword+0xa5c>
    4f1a:	cb 57       	subi	r28, 0x7B	; 123
    4f1c:	df 4f       	sbci	r29, 0xFF	; 255
    4f1e:	88 81       	ld	r24, Y
    4f20:	99 81       	ldd	r25, Y+1	; 0x01
    4f22:	c5 58       	subi	r28, 0x85	; 133
    4f24:	d0 40       	sbci	r29, 0x00	; 0
    4f26:	83 33       	cpi	r24, 0x33	; 51
    4f28:	91 05       	cpc	r25, r1
    4f2a:	b1 f0       	breq	.+44     	; 0x4f58 <SS_voidChangePassword+0xa44>
    4f2c:	cb 57       	subi	r28, 0x7B	; 123
    4f2e:	df 4f       	sbci	r29, 0xFF	; 255
    4f30:	e8 81       	ld	r30, Y
    4f32:	f9 81       	ldd	r31, Y+1	; 0x01
    4f34:	c5 58       	subi	r28, 0x85	; 133
    4f36:	d0 40       	sbci	r29, 0x00	; 0
    4f38:	e4 33       	cpi	r30, 0x34	; 52
    4f3a:	f1 05       	cpc	r31, r1
    4f3c:	99 f0       	breq	.+38     	; 0x4f64 <SS_voidChangePassword+0xa50>
    4f3e:	18 c0       	rjmp	.+48     	; 0x4f70 <SS_voidChangePassword+0xa5c>
	case '1':
		EEPROM_Position = EEPROM_admin_password;
    4f40:	fe 01       	movw	r30, r28
    4f42:	e1 58       	subi	r30, 0x81	; 129
    4f44:	ff 4f       	sbci	r31, 0xFF	; 255
    4f46:	84 e0       	ldi	r24, 0x04	; 4
    4f48:	80 83       	st	Z, r24
    4f4a:	88 c0       	rjmp	.+272    	; 0x505c <SS_voidChangePassword+0xb48>
		break;
	case '2':
		EEPROM_Position = EEPROM_user1_password;
    4f4c:	fe 01       	movw	r30, r28
    4f4e:	e1 58       	subi	r30, 0x81	; 129
    4f50:	ff 4f       	sbci	r31, 0xFF	; 255
    4f52:	8e e0       	ldi	r24, 0x0E	; 14
    4f54:	80 83       	st	Z, r24
    4f56:	82 c0       	rjmp	.+260    	; 0x505c <SS_voidChangePassword+0xb48>
		break;
	case '3':
		EEPROM_Position = EEPROM_user2_password;
    4f58:	fe 01       	movw	r30, r28
    4f5a:	e1 58       	subi	r30, 0x81	; 129
    4f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5e:	88 e1       	ldi	r24, 0x18	; 24
    4f60:	80 83       	st	Z, r24
    4f62:	7c c0       	rjmp	.+248    	; 0x505c <SS_voidChangePassword+0xb48>
		break;
	case '4':
		EEPROM_Position = EEPROM_user3_password;
    4f64:	fe 01       	movw	r30, r28
    4f66:	e1 58       	subi	r30, 0x81	; 129
    4f68:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6a:	82 e2       	ldi	r24, 0x22	; 34
    4f6c:	80 83       	st	Z, r24
    4f6e:	76 c0       	rjmp	.+236    	; 0x505c <SS_voidChangePassword+0xb48>

		break;
	default:

		UART_voidTxString((u8*) "Invalid Entry");
    4f70:	8a ed       	ldi	r24, 0xDA	; 218
    4f72:	90 e0       	ldi	r25, 0x00	; 0
    4f74:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    4f78:	80 e0       	ldi	r24, 0x00	; 0
    4f7a:	90 e8       	ldi	r25, 0x80	; 128
    4f7c:	ab e3       	ldi	r26, 0x3B	; 59
    4f7e:	b5 e4       	ldi	r27, 0x45	; 69
    4f80:	8f a3       	std	Y+39, r24	; 0x27
    4f82:	98 a7       	std	Y+40, r25	; 0x28
    4f84:	a9 a7       	std	Y+41, r26	; 0x29
    4f86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f88:	6f a1       	ldd	r22, Y+39	; 0x27
    4f8a:	78 a5       	ldd	r23, Y+40	; 0x28
    4f8c:	89 a5       	ldd	r24, Y+41	; 0x29
    4f8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4f90:	20 e0       	ldi	r18, 0x00	; 0
    4f92:	30 e0       	ldi	r19, 0x00	; 0
    4f94:	4a e7       	ldi	r20, 0x7A	; 122
    4f96:	55 e4       	ldi	r21, 0x45	; 69
    4f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f9c:	dc 01       	movw	r26, r24
    4f9e:	cb 01       	movw	r24, r22
    4fa0:	8b a3       	std	Y+35, r24	; 0x23
    4fa2:	9c a3       	std	Y+36, r25	; 0x24
    4fa4:	ad a3       	std	Y+37, r26	; 0x25
    4fa6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4fa8:	6b a1       	ldd	r22, Y+35	; 0x23
    4faa:	7c a1       	ldd	r23, Y+36	; 0x24
    4fac:	8d a1       	ldd	r24, Y+37	; 0x25
    4fae:	9e a1       	ldd	r25, Y+38	; 0x26
    4fb0:	20 e0       	ldi	r18, 0x00	; 0
    4fb2:	30 e0       	ldi	r19, 0x00	; 0
    4fb4:	40 e8       	ldi	r20, 0x80	; 128
    4fb6:	5f e3       	ldi	r21, 0x3F	; 63
    4fb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fbc:	88 23       	and	r24, r24
    4fbe:	2c f4       	brge	.+10     	; 0x4fca <SS_voidChangePassword+0xab6>
		__ticks = 1;
    4fc0:	81 e0       	ldi	r24, 0x01	; 1
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	9a a3       	std	Y+34, r25	; 0x22
    4fc6:	89 a3       	std	Y+33, r24	; 0x21
    4fc8:	3f c0       	rjmp	.+126    	; 0x5048 <SS_voidChangePassword+0xb34>
	else if (__tmp > 65535)
    4fca:	6b a1       	ldd	r22, Y+35	; 0x23
    4fcc:	7c a1       	ldd	r23, Y+36	; 0x24
    4fce:	8d a1       	ldd	r24, Y+37	; 0x25
    4fd0:	9e a1       	ldd	r25, Y+38	; 0x26
    4fd2:	20 e0       	ldi	r18, 0x00	; 0
    4fd4:	3f ef       	ldi	r19, 0xFF	; 255
    4fd6:	4f e7       	ldi	r20, 0x7F	; 127
    4fd8:	57 e4       	ldi	r21, 0x47	; 71
    4fda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fde:	18 16       	cp	r1, r24
    4fe0:	4c f5       	brge	.+82     	; 0x5034 <SS_voidChangePassword+0xb20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fe2:	6f a1       	ldd	r22, Y+39	; 0x27
    4fe4:	78 a5       	ldd	r23, Y+40	; 0x28
    4fe6:	89 a5       	ldd	r24, Y+41	; 0x29
    4fe8:	9a a5       	ldd	r25, Y+42	; 0x2a
    4fea:	20 e0       	ldi	r18, 0x00	; 0
    4fec:	30 e0       	ldi	r19, 0x00	; 0
    4fee:	40 e2       	ldi	r20, 0x20	; 32
    4ff0:	51 e4       	ldi	r21, 0x41	; 65
    4ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ff6:	dc 01       	movw	r26, r24
    4ff8:	cb 01       	movw	r24, r22
    4ffa:	bc 01       	movw	r22, r24
    4ffc:	cd 01       	movw	r24, r26
    4ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5002:	dc 01       	movw	r26, r24
    5004:	cb 01       	movw	r24, r22
    5006:	9a a3       	std	Y+34, r25	; 0x22
    5008:	89 a3       	std	Y+33, r24	; 0x21
    500a:	0f c0       	rjmp	.+30     	; 0x502a <SS_voidChangePassword+0xb16>
    500c:	80 e9       	ldi	r24, 0x90	; 144
    500e:	91 e0       	ldi	r25, 0x01	; 1
    5010:	98 a3       	std	Y+32, r25	; 0x20
    5012:	8f 8f       	std	Y+31, r24	; 0x1f
    5014:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5016:	98 a1       	ldd	r25, Y+32	; 0x20
    5018:	01 97       	sbiw	r24, 0x01	; 1
    501a:	f1 f7       	brne	.-4      	; 0x5018 <SS_voidChangePassword+0xb04>
    501c:	98 a3       	std	Y+32, r25	; 0x20
    501e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5020:	89 a1       	ldd	r24, Y+33	; 0x21
    5022:	9a a1       	ldd	r25, Y+34	; 0x22
    5024:	01 97       	sbiw	r24, 0x01	; 1
    5026:	9a a3       	std	Y+34, r25	; 0x22
    5028:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    502a:	89 a1       	ldd	r24, Y+33	; 0x21
    502c:	9a a1       	ldd	r25, Y+34	; 0x22
    502e:	00 97       	sbiw	r24, 0x00	; 0
    5030:	69 f7       	brne	.-38     	; 0x500c <SS_voidChangePassword+0xaf8>
    5032:	14 c0       	rjmp	.+40     	; 0x505c <SS_voidChangePassword+0xb48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5034:	6b a1       	ldd	r22, Y+35	; 0x23
    5036:	7c a1       	ldd	r23, Y+36	; 0x24
    5038:	8d a1       	ldd	r24, Y+37	; 0x25
    503a:	9e a1       	ldd	r25, Y+38	; 0x26
    503c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5040:	dc 01       	movw	r26, r24
    5042:	cb 01       	movw	r24, r22
    5044:	9a a3       	std	Y+34, r25	; 0x22
    5046:	89 a3       	std	Y+33, r24	; 0x21
    5048:	89 a1       	ldd	r24, Y+33	; 0x21
    504a:	9a a1       	ldd	r25, Y+34	; 0x22
    504c:	9e 8f       	std	Y+30, r25	; 0x1e
    504e:	8d 8f       	std	Y+29, r24	; 0x1d
    5050:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5052:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5054:	01 97       	sbiw	r24, 0x01	; 1
    5056:	f1 f7       	brne	.-4      	; 0x5054 <SS_voidChangePassword+0xb40>
    5058:	9e 8f       	std	Y+30, r25	; 0x1e
    505a:	8d 8f       	std	Y+29, r24	; 0x1d

	}

	/* read user inpput  to change password for selected user*/

	UART_voidTxString((u8*) "type password");
    505c:	85 e8       	ldi	r24, 0x85	; 133
    505e:	92 e0       	ldi	r25, 0x02	; 2
    5060:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

	if (EEPROM_Position != 0) {
    5064:	fe 01       	movw	r30, r28
    5066:	e1 58       	subi	r30, 0x81	; 129
    5068:	ff 4f       	sbci	r31, 0xFF	; 255
    506a:	80 81       	ld	r24, Z
    506c:	88 23       	and	r24, r24
    506e:	09 f4       	brne	.+2      	; 0x5072 <SS_voidChangePassword+0xb5e>
    5070:	26 c1       	rjmp	.+588    	; 0x52be <SS_voidChangePassword+0xdaa>
		for (counter = 0; counter < Maximum_password; counter++) {
    5072:	fe 01       	movw	r30, r28
    5074:	e0 58       	subi	r30, 0x80	; 128
    5076:	ff 4f       	sbci	r31, 0xFF	; 255
    5078:	10 82       	st	Z, r1
    507a:	9e c0       	rjmp	.+316    	; 0x51b8 <SS_voidChangePassword+0xca4>
			do {
				UART_voidRxChar(&local_u8RxData);
    507c:	ce 01       	movw	r24, r28
    507e:	8c 57       	subi	r24, 0x7C	; 124
    5080:	9f 4f       	sbci	r25, 0xFF	; 255
    5082:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
			} while (local_u8RxData == NULL );
    5086:	fe 01       	movw	r30, r28
    5088:	ec 57       	subi	r30, 0x7C	; 124
    508a:	ff 4f       	sbci	r31, 0xFF	; 255
    508c:	80 81       	ld	r24, Z
    508e:	88 2f       	mov	r24, r24
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	00 97       	sbiw	r24, 0x00	; 0
    5094:	99 f3       	breq	.-26     	; 0x507c <SS_voidChangePassword+0xb68>

			EEPROM_voidWriteByte(EEPROM_Position, local_u8RxData);
    5096:	fe 01       	movw	r30, r28
    5098:	e1 58       	subi	r30, 0x81	; 129
    509a:	ff 4f       	sbci	r31, 0xFF	; 255
    509c:	80 81       	ld	r24, Z
    509e:	88 2f       	mov	r24, r24
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	fe 01       	movw	r30, r28
    50a4:	ec 57       	subi	r30, 0x7C	; 124
    50a6:	ff 4f       	sbci	r31, 0xFF	; 255
    50a8:	20 81       	ld	r18, Z
    50aa:	62 2f       	mov	r22, r18
    50ac:	0e 94 87 51 	call	0xa30e	; 0xa30e <EEPROM_voidWriteByte>
    50b0:	80 e0       	ldi	r24, 0x00	; 0
    50b2:	90 e0       	ldi	r25, 0x00	; 0
    50b4:	a0 e2       	ldi	r26, 0x20	; 32
    50b6:	b1 e4       	ldi	r27, 0x41	; 65
    50b8:	89 8f       	std	Y+25, r24	; 0x19
    50ba:	9a 8f       	std	Y+26, r25	; 0x1a
    50bc:	ab 8f       	std	Y+27, r26	; 0x1b
    50be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50c0:	69 8d       	ldd	r22, Y+25	; 0x19
    50c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50c8:	20 e0       	ldi	r18, 0x00	; 0
    50ca:	30 e0       	ldi	r19, 0x00	; 0
    50cc:	4a e7       	ldi	r20, 0x7A	; 122
    50ce:	55 e4       	ldi	r21, 0x45	; 69
    50d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22
    50d8:	8d 8b       	std	Y+21, r24	; 0x15
    50da:	9e 8b       	std	Y+22, r25	; 0x16
    50dc:	af 8b       	std	Y+23, r26	; 0x17
    50de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    50e0:	6d 89       	ldd	r22, Y+21	; 0x15
    50e2:	7e 89       	ldd	r23, Y+22	; 0x16
    50e4:	8f 89       	ldd	r24, Y+23	; 0x17
    50e6:	98 8d       	ldd	r25, Y+24	; 0x18
    50e8:	20 e0       	ldi	r18, 0x00	; 0
    50ea:	30 e0       	ldi	r19, 0x00	; 0
    50ec:	40 e8       	ldi	r20, 0x80	; 128
    50ee:	5f e3       	ldi	r21, 0x3F	; 63
    50f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50f4:	88 23       	and	r24, r24
    50f6:	2c f4       	brge	.+10     	; 0x5102 <SS_voidChangePassword+0xbee>
		__ticks = 1;
    50f8:	81 e0       	ldi	r24, 0x01	; 1
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	9c 8b       	std	Y+20, r25	; 0x14
    50fe:	8b 8b       	std	Y+19, r24	; 0x13
    5100:	3f c0       	rjmp	.+126    	; 0x5180 <SS_voidChangePassword+0xc6c>
	else if (__tmp > 65535)
    5102:	6d 89       	ldd	r22, Y+21	; 0x15
    5104:	7e 89       	ldd	r23, Y+22	; 0x16
    5106:	8f 89       	ldd	r24, Y+23	; 0x17
    5108:	98 8d       	ldd	r25, Y+24	; 0x18
    510a:	20 e0       	ldi	r18, 0x00	; 0
    510c:	3f ef       	ldi	r19, 0xFF	; 255
    510e:	4f e7       	ldi	r20, 0x7F	; 127
    5110:	57 e4       	ldi	r21, 0x47	; 71
    5112:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5116:	18 16       	cp	r1, r24
    5118:	4c f5       	brge	.+82     	; 0x516c <SS_voidChangePassword+0xc58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    511a:	69 8d       	ldd	r22, Y+25	; 0x19
    511c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    511e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5120:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5122:	20 e0       	ldi	r18, 0x00	; 0
    5124:	30 e0       	ldi	r19, 0x00	; 0
    5126:	40 e2       	ldi	r20, 0x20	; 32
    5128:	51 e4       	ldi	r21, 0x41	; 65
    512a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    512e:	dc 01       	movw	r26, r24
    5130:	cb 01       	movw	r24, r22
    5132:	bc 01       	movw	r22, r24
    5134:	cd 01       	movw	r24, r26
    5136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    513a:	dc 01       	movw	r26, r24
    513c:	cb 01       	movw	r24, r22
    513e:	9c 8b       	std	Y+20, r25	; 0x14
    5140:	8b 8b       	std	Y+19, r24	; 0x13
    5142:	0f c0       	rjmp	.+30     	; 0x5162 <SS_voidChangePassword+0xc4e>
    5144:	80 e9       	ldi	r24, 0x90	; 144
    5146:	91 e0       	ldi	r25, 0x01	; 1
    5148:	9a 8b       	std	Y+18, r25	; 0x12
    514a:	89 8b       	std	Y+17, r24	; 0x11
    514c:	89 89       	ldd	r24, Y+17	; 0x11
    514e:	9a 89       	ldd	r25, Y+18	; 0x12
    5150:	01 97       	sbiw	r24, 0x01	; 1
    5152:	f1 f7       	brne	.-4      	; 0x5150 <SS_voidChangePassword+0xc3c>
    5154:	9a 8b       	std	Y+18, r25	; 0x12
    5156:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5158:	8b 89       	ldd	r24, Y+19	; 0x13
    515a:	9c 89       	ldd	r25, Y+20	; 0x14
    515c:	01 97       	sbiw	r24, 0x01	; 1
    515e:	9c 8b       	std	Y+20, r25	; 0x14
    5160:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5162:	8b 89       	ldd	r24, Y+19	; 0x13
    5164:	9c 89       	ldd	r25, Y+20	; 0x14
    5166:	00 97       	sbiw	r24, 0x00	; 0
    5168:	69 f7       	brne	.-38     	; 0x5144 <SS_voidChangePassword+0xc30>
    516a:	14 c0       	rjmp	.+40     	; 0x5194 <SS_voidChangePassword+0xc80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    516c:	6d 89       	ldd	r22, Y+21	; 0x15
    516e:	7e 89       	ldd	r23, Y+22	; 0x16
    5170:	8f 89       	ldd	r24, Y+23	; 0x17
    5172:	98 8d       	ldd	r25, Y+24	; 0x18
    5174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5178:	dc 01       	movw	r26, r24
    517a:	cb 01       	movw	r24, r22
    517c:	9c 8b       	std	Y+20, r25	; 0x14
    517e:	8b 8b       	std	Y+19, r24	; 0x13
    5180:	8b 89       	ldd	r24, Y+19	; 0x13
    5182:	9c 89       	ldd	r25, Y+20	; 0x14
    5184:	98 8b       	std	Y+16, r25	; 0x10
    5186:	8f 87       	std	Y+15, r24	; 0x0f
    5188:	8f 85       	ldd	r24, Y+15	; 0x0f
    518a:	98 89       	ldd	r25, Y+16	; 0x10
    518c:	01 97       	sbiw	r24, 0x01	; 1
    518e:	f1 f7       	brne	.-4      	; 0x518c <SS_voidChangePassword+0xc78>
    5190:	98 8b       	std	Y+16, r25	; 0x10
    5192:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			EEPROM_Position++;
    5194:	de 01       	movw	r26, r28
    5196:	a1 58       	subi	r26, 0x81	; 129
    5198:	bf 4f       	sbci	r27, 0xFF	; 255
    519a:	fe 01       	movw	r30, r28
    519c:	e1 58       	subi	r30, 0x81	; 129
    519e:	ff 4f       	sbci	r31, 0xFF	; 255
    51a0:	80 81       	ld	r24, Z
    51a2:	8f 5f       	subi	r24, 0xFF	; 255
    51a4:	8c 93       	st	X, r24
	/* read user inpput  to change password for selected user*/

	UART_voidTxString((u8*) "type password");

	if (EEPROM_Position != 0) {
		for (counter = 0; counter < Maximum_password; counter++) {
    51a6:	de 01       	movw	r26, r28
    51a8:	a0 58       	subi	r26, 0x80	; 128
    51aa:	bf 4f       	sbci	r27, 0xFF	; 255
    51ac:	fe 01       	movw	r30, r28
    51ae:	e0 58       	subi	r30, 0x80	; 128
    51b0:	ff 4f       	sbci	r31, 0xFF	; 255
    51b2:	80 81       	ld	r24, Z
    51b4:	8f 5f       	subi	r24, 0xFF	; 255
    51b6:	8c 93       	st	X, r24
    51b8:	fe 01       	movw	r30, r28
    51ba:	e0 58       	subi	r30, 0x80	; 128
    51bc:	ff 4f       	sbci	r31, 0xFF	; 255
    51be:	80 81       	ld	r24, Z
    51c0:	85 30       	cpi	r24, 0x05	; 5
    51c2:	08 f4       	brcc	.+2      	; 0x51c6 <SS_voidChangePassword+0xcb2>
    51c4:	5b cf       	rjmp	.-330    	; 0x507c <SS_voidChangePassword+0xb68>

			EEPROM_voidWriteByte(EEPROM_Position, local_u8RxData);
			_delay_ms(10);
			EEPROM_Position++;
		}
		LCD_voidClear();
    51c6:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "password changed");
    51ca:	83 e9       	ldi	r24, 0x93	; 147
    51cc:	92 e0       	ldi	r25, 0x02	; 2
    51ce:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		UART_voidTxString((u8*) "password changed");
    51d2:	83 e9       	ldi	r24, 0x93	; 147
    51d4:	92 e0       	ldi	r25, 0x02	; 2
    51d6:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    51da:	80 e0       	ldi	r24, 0x00	; 0
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	aa ef       	ldi	r26, 0xFA	; 250
    51e0:	b4 e4       	ldi	r27, 0x44	; 68
    51e2:	8b 87       	std	Y+11, r24	; 0x0b
    51e4:	9c 87       	std	Y+12, r25	; 0x0c
    51e6:	ad 87       	std	Y+13, r26	; 0x0d
    51e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    51ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    51ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    51f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    51f2:	20 e0       	ldi	r18, 0x00	; 0
    51f4:	30 e0       	ldi	r19, 0x00	; 0
    51f6:	4a e7       	ldi	r20, 0x7A	; 122
    51f8:	55 e4       	ldi	r21, 0x45	; 69
    51fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51fe:	dc 01       	movw	r26, r24
    5200:	cb 01       	movw	r24, r22
    5202:	8f 83       	std	Y+7, r24	; 0x07
    5204:	98 87       	std	Y+8, r25	; 0x08
    5206:	a9 87       	std	Y+9, r26	; 0x09
    5208:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    520a:	6f 81       	ldd	r22, Y+7	; 0x07
    520c:	78 85       	ldd	r23, Y+8	; 0x08
    520e:	89 85       	ldd	r24, Y+9	; 0x09
    5210:	9a 85       	ldd	r25, Y+10	; 0x0a
    5212:	20 e0       	ldi	r18, 0x00	; 0
    5214:	30 e0       	ldi	r19, 0x00	; 0
    5216:	40 e8       	ldi	r20, 0x80	; 128
    5218:	5f e3       	ldi	r21, 0x3F	; 63
    521a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    521e:	88 23       	and	r24, r24
    5220:	2c f4       	brge	.+10     	; 0x522c <SS_voidChangePassword+0xd18>
		__ticks = 1;
    5222:	81 e0       	ldi	r24, 0x01	; 1
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	9e 83       	std	Y+6, r25	; 0x06
    5228:	8d 83       	std	Y+5, r24	; 0x05
    522a:	3f c0       	rjmp	.+126    	; 0x52aa <SS_voidChangePassword+0xd96>
	else if (__tmp > 65535)
    522c:	6f 81       	ldd	r22, Y+7	; 0x07
    522e:	78 85       	ldd	r23, Y+8	; 0x08
    5230:	89 85       	ldd	r24, Y+9	; 0x09
    5232:	9a 85       	ldd	r25, Y+10	; 0x0a
    5234:	20 e0       	ldi	r18, 0x00	; 0
    5236:	3f ef       	ldi	r19, 0xFF	; 255
    5238:	4f e7       	ldi	r20, 0x7F	; 127
    523a:	57 e4       	ldi	r21, 0x47	; 71
    523c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5240:	18 16       	cp	r1, r24
    5242:	4c f5       	brge	.+82     	; 0x5296 <SS_voidChangePassword+0xd82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5244:	6b 85       	ldd	r22, Y+11	; 0x0b
    5246:	7c 85       	ldd	r23, Y+12	; 0x0c
    5248:	8d 85       	ldd	r24, Y+13	; 0x0d
    524a:	9e 85       	ldd	r25, Y+14	; 0x0e
    524c:	20 e0       	ldi	r18, 0x00	; 0
    524e:	30 e0       	ldi	r19, 0x00	; 0
    5250:	40 e2       	ldi	r20, 0x20	; 32
    5252:	51 e4       	ldi	r21, 0x41	; 65
    5254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5258:	dc 01       	movw	r26, r24
    525a:	cb 01       	movw	r24, r22
    525c:	bc 01       	movw	r22, r24
    525e:	cd 01       	movw	r24, r26
    5260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5264:	dc 01       	movw	r26, r24
    5266:	cb 01       	movw	r24, r22
    5268:	9e 83       	std	Y+6, r25	; 0x06
    526a:	8d 83       	std	Y+5, r24	; 0x05
    526c:	0f c0       	rjmp	.+30     	; 0x528c <SS_voidChangePassword+0xd78>
    526e:	80 e9       	ldi	r24, 0x90	; 144
    5270:	91 e0       	ldi	r25, 0x01	; 1
    5272:	9c 83       	std	Y+4, r25	; 0x04
    5274:	8b 83       	std	Y+3, r24	; 0x03
    5276:	8b 81       	ldd	r24, Y+3	; 0x03
    5278:	9c 81       	ldd	r25, Y+4	; 0x04
    527a:	01 97       	sbiw	r24, 0x01	; 1
    527c:	f1 f7       	brne	.-4      	; 0x527a <SS_voidChangePassword+0xd66>
    527e:	9c 83       	std	Y+4, r25	; 0x04
    5280:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5282:	8d 81       	ldd	r24, Y+5	; 0x05
    5284:	9e 81       	ldd	r25, Y+6	; 0x06
    5286:	01 97       	sbiw	r24, 0x01	; 1
    5288:	9e 83       	std	Y+6, r25	; 0x06
    528a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    528c:	8d 81       	ldd	r24, Y+5	; 0x05
    528e:	9e 81       	ldd	r25, Y+6	; 0x06
    5290:	00 97       	sbiw	r24, 0x00	; 0
    5292:	69 f7       	brne	.-38     	; 0x526e <SS_voidChangePassword+0xd5a>
    5294:	14 c0       	rjmp	.+40     	; 0x52be <SS_voidChangePassword+0xdaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5296:	6f 81       	ldd	r22, Y+7	; 0x07
    5298:	78 85       	ldd	r23, Y+8	; 0x08
    529a:	89 85       	ldd	r24, Y+9	; 0x09
    529c:	9a 85       	ldd	r25, Y+10	; 0x0a
    529e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52a2:	dc 01       	movw	r26, r24
    52a4:	cb 01       	movw	r24, r22
    52a6:	9e 83       	std	Y+6, r25	; 0x06
    52a8:	8d 83       	std	Y+5, r24	; 0x05
    52aa:	8d 81       	ldd	r24, Y+5	; 0x05
    52ac:	9e 81       	ldd	r25, Y+6	; 0x06
    52ae:	9a 83       	std	Y+2, r25	; 0x02
    52b0:	89 83       	std	Y+1, r24	; 0x01
    52b2:	89 81       	ldd	r24, Y+1	; 0x01
    52b4:	9a 81       	ldd	r25, Y+2	; 0x02
    52b6:	01 97       	sbiw	r24, 0x01	; 1
    52b8:	f1 f7       	brne	.-4      	; 0x52b6 <SS_voidChangePassword+0xda2>
    52ba:	9a 83       	std	Y+2, r25	; 0x02
    52bc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);

	}
}
    52be:	ca 57       	subi	r28, 0x7A	; 122
    52c0:	df 4f       	sbci	r29, 0xFF	; 255
    52c2:	0f b6       	in	r0, 0x3f	; 63
    52c4:	f8 94       	cli
    52c6:	de bf       	out	0x3e, r29	; 62
    52c8:	0f be       	out	0x3f, r0	; 63
    52ca:	cd bf       	out	0x3d, r28	; 61
    52cc:	cf 91       	pop	r28
    52ce:	df 91       	pop	r29
    52d0:	1f 91       	pop	r17
    52d2:	0f 91       	pop	r16
    52d4:	08 95       	ret

000052d6 <UART_voidInit>:
#include "UART_interface.h"
#include "UART_register.h"


void UART_voidInit(void)
{
    52d6:	df 93       	push	r29
    52d8:	cf 93       	push	r28
    52da:	cd b7       	in	r28, 0x3d	; 61
    52dc:	de b7       	in	r29, 0x3e	; 62
	// Set Buad Rate = 9600
	CLR_BIT(UCSRA_REG, U2X);
    52de:	ab e2       	ldi	r26, 0x2B	; 43
    52e0:	b0 e0       	ldi	r27, 0x00	; 0
    52e2:	eb e2       	ldi	r30, 0x2B	; 43
    52e4:	f0 e0       	ldi	r31, 0x00	; 0
    52e6:	80 81       	ld	r24, Z
    52e8:	8d 7f       	andi	r24, 0xFD	; 253
    52ea:	8c 93       	st	X, r24
	UBRRL_REG = 103;
    52ec:	e9 e2       	ldi	r30, 0x29	; 41
    52ee:	f0 e0       	ldi	r31, 0x00	; 0
    52f0:	87 e6       	ldi	r24, 0x67	; 103
    52f2:	80 83       	st	Z, r24
	// select UART MODE = Asynchronous
	// configure no parity
	// configure stop bits = 1
	// configure data bits = 8
	// configure no polarity
	CLR_BIT(UCSRB_REG, UCSZ2);
    52f4:	aa e2       	ldi	r26, 0x2A	; 42
    52f6:	b0 e0       	ldi	r27, 0x00	; 0
    52f8:	ea e2       	ldi	r30, 0x2A	; 42
    52fa:	f0 e0       	ldi	r31, 0x00	; 0
    52fc:	80 81       	ld	r24, Z
    52fe:	8b 7f       	andi	r24, 0xFB	; 251
    5300:	8c 93       	st	X, r24
	UCSRC_REG = 0x86; //0b10000110;
    5302:	e0 e4       	ldi	r30, 0x40	; 64
    5304:	f0 e0       	ldi	r31, 0x00	; 0
    5306:	86 e8       	ldi	r24, 0x86	; 134
    5308:	80 83       	st	Z, r24
	
	//Enable Tx
	SET_BIT(UCSRB_REG, TXEN);
    530a:	aa e2       	ldi	r26, 0x2A	; 42
    530c:	b0 e0       	ldi	r27, 0x00	; 0
    530e:	ea e2       	ldi	r30, 0x2A	; 42
    5310:	f0 e0       	ldi	r31, 0x00	; 0
    5312:	80 81       	ld	r24, Z
    5314:	88 60       	ori	r24, 0x08	; 8
    5316:	8c 93       	st	X, r24
	
	//Enable Rx
	SET_BIT(UCSRB_REG, RXEN);
    5318:	aa e2       	ldi	r26, 0x2A	; 42
    531a:	b0 e0       	ldi	r27, 0x00	; 0
    531c:	ea e2       	ldi	r30, 0x2A	; 42
    531e:	f0 e0       	ldi	r31, 0x00	; 0
    5320:	80 81       	ld	r24, Z
    5322:	80 61       	ori	r24, 0x10	; 16
    5324:	8c 93       	st	X, r24
}
    5326:	cf 91       	pop	r28
    5328:	df 91       	pop	r29
    532a:	08 95       	ret

0000532c <UART_voidTxChar>:


void UART_voidTxChar(u8 copy_u8TxData)
{
    532c:	df 93       	push	r29
    532e:	cf 93       	push	r28
    5330:	0f 92       	push	r0
    5332:	cd b7       	in	r28, 0x3d	; 61
    5334:	de b7       	in	r29, 0x3e	; 62
    5336:	89 83       	std	Y+1, r24	; 0x01
	UDR_REG = copy_u8TxData;
    5338:	ec e2       	ldi	r30, 0x2C	; 44
    533a:	f0 e0       	ldi	r31, 0x00	; 0
    533c:	89 81       	ldd	r24, Y+1	; 0x01
    533e:	80 83       	st	Z, r24
	while(0 == GET_BIT(UCSRA_REG, UDRE));
    5340:	eb e2       	ldi	r30, 0x2B	; 43
    5342:	f0 e0       	ldi	r31, 0x00	; 0
    5344:	80 81       	ld	r24, Z
    5346:	82 95       	swap	r24
    5348:	86 95       	lsr	r24
    534a:	87 70       	andi	r24, 0x07	; 7
    534c:	88 2f       	mov	r24, r24
    534e:	90 e0       	ldi	r25, 0x00	; 0
    5350:	81 70       	andi	r24, 0x01	; 1
    5352:	90 70       	andi	r25, 0x00	; 0
    5354:	00 97       	sbiw	r24, 0x00	; 0
    5356:	a1 f3       	breq	.-24     	; 0x5340 <UART_voidTxChar+0x14>
}
    5358:	0f 90       	pop	r0
    535a:	cf 91       	pop	r28
    535c:	df 91       	pop	r29
    535e:	08 95       	ret

00005360 <UART_voidTxString>:

void UART_voidTxString (u8* copy_pu8TxString){
    5360:	df 93       	push	r29
    5362:	cf 93       	push	r28
    5364:	00 d0       	rcall	.+0      	; 0x5366 <UART_voidTxString+0x6>
    5366:	0f 92       	push	r0
    5368:	cd b7       	in	r28, 0x3d	; 61
    536a:	de b7       	in	r29, 0x3e	; 62
    536c:	9b 83       	std	Y+3, r25	; 0x03
    536e:	8a 83       	std	Y+2, r24	; 0x02
	if (copy_pu8TxString != NULL)
    5370:	8a 81       	ldd	r24, Y+2	; 0x02
    5372:	9b 81       	ldd	r25, Y+3	; 0x03
    5374:	00 97       	sbiw	r24, 0x00	; 0
    5376:	e9 f0       	breq	.+58     	; 0x53b2 <UART_voidTxString+0x52>
	{
		u8 local_u8Counter=0;
    5378:	19 82       	std	Y+1, r1	; 0x01
    537a:	0e c0       	rjmp	.+28     	; 0x5398 <UART_voidTxString+0x38>
		while(copy_pu8TxString[local_u8Counter] != 0)
		{
			UART_voidTxChar(copy_pu8TxString[local_u8Counter]);
    537c:	89 81       	ldd	r24, Y+1	; 0x01
    537e:	28 2f       	mov	r18, r24
    5380:	30 e0       	ldi	r19, 0x00	; 0
    5382:	8a 81       	ldd	r24, Y+2	; 0x02
    5384:	9b 81       	ldd	r25, Y+3	; 0x03
    5386:	fc 01       	movw	r30, r24
    5388:	e2 0f       	add	r30, r18
    538a:	f3 1f       	adc	r31, r19
    538c:	80 81       	ld	r24, Z
    538e:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
			local_u8Counter++;
    5392:	89 81       	ldd	r24, Y+1	; 0x01
    5394:	8f 5f       	subi	r24, 0xFF	; 255
    5396:	89 83       	std	Y+1, r24	; 0x01

void UART_voidTxString (u8* copy_pu8TxString){
	if (copy_pu8TxString != NULL)
	{
		u8 local_u8Counter=0;
		while(copy_pu8TxString[local_u8Counter] != 0)
    5398:	89 81       	ldd	r24, Y+1	; 0x01
    539a:	28 2f       	mov	r18, r24
    539c:	30 e0       	ldi	r19, 0x00	; 0
    539e:	8a 81       	ldd	r24, Y+2	; 0x02
    53a0:	9b 81       	ldd	r25, Y+3	; 0x03
    53a2:	fc 01       	movw	r30, r24
    53a4:	e2 0f       	add	r30, r18
    53a6:	f3 1f       	adc	r31, r19
    53a8:	80 81       	ld	r24, Z
    53aa:	88 23       	and	r24, r24
    53ac:	39 f7       	brne	.-50     	; 0x537c <UART_voidTxString+0x1c>
		{
			UART_voidTxChar(copy_pu8TxString[local_u8Counter]);
			local_u8Counter++;
		}
		UART_voidTxNewLine();
    53ae:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
	} 

}
    53b2:	0f 90       	pop	r0
    53b4:	0f 90       	pop	r0
    53b6:	0f 90       	pop	r0
    53b8:	cf 91       	pop	r28
    53ba:	df 91       	pop	r29
    53bc:	08 95       	ret

000053be <UART_voidTxNumber>:




void UART_voidTxNumber(u8 copy_u8Number)
{
    53be:	df 93       	push	r29
    53c0:	cf 93       	push	r28
    53c2:	00 d0       	rcall	.+0      	; 0x53c4 <UART_voidTxNumber+0x6>
    53c4:	cd b7       	in	r28, 0x3d	; 61
    53c6:	de b7       	in	r29, 0x3e	; 62
    53c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u32ReversedNumber=1;
    53ca:	81 e0       	ldi	r24, 0x01	; 1
    53cc:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8Number == 0)
    53ce:	8a 81       	ldd	r24, Y+2	; 0x02
    53d0:	88 23       	and	r24, r24
    53d2:	01 f5       	brne	.+64     	; 0x5414 <UART_voidTxNumber+0x56>
	{
		UART_voidTxChar('0');
    53d4:	80 e3       	ldi	r24, 0x30	; 48
    53d6:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
    53da:	31 c0       	rjmp	.+98     	; 0x543e <UART_voidTxNumber+0x80>
	else
	{
		// Reverse The Number
		while(copy_u8Number != 0)
		{
			local_u32ReversedNumber = local_u32ReversedNumber*10+(copy_u8Number%10);
    53dc:	89 81       	ldd	r24, Y+1	; 0x01
    53de:	88 2f       	mov	r24, r24
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	9c 01       	movw	r18, r24
    53e4:	22 0f       	add	r18, r18
    53e6:	33 1f       	adc	r19, r19
    53e8:	c9 01       	movw	r24, r18
    53ea:	88 0f       	add	r24, r24
    53ec:	99 1f       	adc	r25, r25
    53ee:	88 0f       	add	r24, r24
    53f0:	99 1f       	adc	r25, r25
    53f2:	82 0f       	add	r24, r18
    53f4:	93 1f       	adc	r25, r19
    53f6:	28 2f       	mov	r18, r24
    53f8:	8a 81       	ldd	r24, Y+2	; 0x02
    53fa:	9a e0       	ldi	r25, 0x0A	; 10
    53fc:	69 2f       	mov	r22, r25
    53fe:	0e 94 85 5b 	call	0xb70a	; 0xb70a <__udivmodqi4>
    5402:	89 2f       	mov	r24, r25
    5404:	82 0f       	add	r24, r18
    5406:	89 83       	std	Y+1, r24	; 0x01
			copy_u8Number /= 10;
    5408:	8a 81       	ldd	r24, Y+2	; 0x02
    540a:	9a e0       	ldi	r25, 0x0A	; 10
    540c:	69 2f       	mov	r22, r25
    540e:	0e 94 85 5b 	call	0xb70a	; 0xb70a <__udivmodqi4>
    5412:	8a 83       	std	Y+2, r24	; 0x02
		UART_voidTxChar('0');
	}
	else
	{
		// Reverse The Number
		while(copy_u8Number != 0)
    5414:	8a 81       	ldd	r24, Y+2	; 0x02
    5416:	88 23       	and	r24, r24
    5418:	09 f7       	brne	.-62     	; 0x53dc <UART_voidTxNumber+0x1e>
			copy_u8Number /= 10;
		}

		do
		{
			UART_voidTxChar((local_u32ReversedNumber%10)+'0');
    541a:	89 81       	ldd	r24, Y+1	; 0x01
    541c:	9a e0       	ldi	r25, 0x0A	; 10
    541e:	69 2f       	mov	r22, r25
    5420:	0e 94 85 5b 	call	0xb70a	; 0xb70a <__udivmodqi4>
    5424:	89 2f       	mov	r24, r25
    5426:	80 5d       	subi	r24, 0xD0	; 208
    5428:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
			local_u32ReversedNumber /= 10;
    542c:	89 81       	ldd	r24, Y+1	; 0x01
    542e:	9a e0       	ldi	r25, 0x0A	; 10
    5430:	69 2f       	mov	r22, r25
    5432:	0e 94 85 5b 	call	0xb70a	; 0xb70a <__udivmodqi4>
    5436:	89 83       	std	Y+1, r24	; 0x01
		} while (local_u32ReversedNumber != 1);
    5438:	89 81       	ldd	r24, Y+1	; 0x01
    543a:	81 30       	cpi	r24, 0x01	; 1
    543c:	71 f7       	brne	.-36     	; 0x541a <UART_voidTxNumber+0x5c>
	}
}
    543e:	0f 90       	pop	r0
    5440:	0f 90       	pop	r0
    5442:	cf 91       	pop	r28
    5444:	df 91       	pop	r29
    5446:	08 95       	ret

00005448 <UART_voidTxNewLine>:
void UART_voidTxNewLine(){
    5448:	df 93       	push	r29
    544a:	cf 93       	push	r28
    544c:	cd b7       	in	r28, 0x3d	; 61
    544e:	de b7       	in	r29, 0x3e	; 62

	UART_voidTxChar(13);
    5450:	8d e0       	ldi	r24, 0x0D	; 13
    5452:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
	UART_voidTxChar(10);
    5456:	8a e0       	ldi	r24, 0x0A	; 10
    5458:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
}
    545c:	cf 91       	pop	r28
    545e:	df 91       	pop	r29
    5460:	08 95       	ret

00005462 <UART_voidRxChar>:

void UART_voidRxChar(u8* copy_pu8RxData)
{
    5462:	df 93       	push	r29
    5464:	cf 93       	push	r28
    5466:	00 d0       	rcall	.+0      	; 0x5468 <UART_voidRxChar+0x6>
    5468:	cd b7       	in	r28, 0x3d	; 61
    546a:	de b7       	in	r29, 0x3e	; 62
    546c:	9a 83       	std	Y+2, r25	; 0x02
    546e:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pu8RxData!=NULL)
    5470:	89 81       	ldd	r24, Y+1	; 0x01
    5472:	9a 81       	ldd	r25, Y+2	; 0x02
    5474:	00 97       	sbiw	r24, 0x00	; 0
    5476:	59 f0       	breq	.+22     	; 0x548e <UART_voidRxChar+0x2c>
	{
		while(0 == GET_BIT(UCSRA_REG, RXC));
    5478:	eb e2       	ldi	r30, 0x2B	; 43
    547a:	f0 e0       	ldi	r31, 0x00	; 0
    547c:	80 81       	ld	r24, Z
    547e:	88 23       	and	r24, r24
    5480:	dc f7       	brge	.-10     	; 0x5478 <UART_voidRxChar+0x16>
		{
			*copy_pu8RxData = UDR_REG;
    5482:	ec e2       	ldi	r30, 0x2C	; 44
    5484:	f0 e0       	ldi	r31, 0x00	; 0
    5486:	80 81       	ld	r24, Z
    5488:	e9 81       	ldd	r30, Y+1	; 0x01
    548a:	fa 81       	ldd	r31, Y+2	; 0x02
    548c:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    548e:	0f 90       	pop	r0
    5490:	0f 90       	pop	r0
    5492:	cf 91       	pop	r28
    5494:	df 91       	pop	r29
    5496:	08 95       	ret

00005498 <TWI_voidInit>:
/* MCAL */
#include "TWI_interface.h"
#include "TWI_register.h"
#include "TWI_private.h"

void TWI_voidInit() {
    5498:	df 93       	push	r29
    549a:	cf 93       	push	r28
    549c:	cd b7       	in	r28, 0x3d	; 61
    549e:	de b7       	in	r29, 0x3e	; 62
	TWBR_REG = 12;
    54a0:	e0 e2       	ldi	r30, 0x20	; 32
    54a2:	f0 e0       	ldi	r31, 0x00	; 0
    54a4:	8c e0       	ldi	r24, 0x0C	; 12
    54a6:	80 83       	st	Z, r24
	CLR_BIT(TWSR_REG, TWSR_TWPS0);
    54a8:	a1 e2       	ldi	r26, 0x21	; 33
    54aa:	b0 e0       	ldi	r27, 0x00	; 0
    54ac:	e1 e2       	ldi	r30, 0x21	; 33
    54ae:	f0 e0       	ldi	r31, 0x00	; 0
    54b0:	80 81       	ld	r24, Z
    54b2:	8e 7f       	andi	r24, 0xFE	; 254
    54b4:	8c 93       	st	X, r24
	CLR_BIT(TWSR_REG, TWSR_TWPS1);
    54b6:	a1 e2       	ldi	r26, 0x21	; 33
    54b8:	b0 e0       	ldi	r27, 0x00	; 0
    54ba:	e1 e2       	ldi	r30, 0x21	; 33
    54bc:	f0 e0       	ldi	r31, 0x00	; 0
    54be:	80 81       	ld	r24, Z
    54c0:	8d 7f       	andi	r24, 0xFD	; 253
    54c2:	8c 93       	st	X, r24

	SET_BIT(TWCR_REG, TWCR_TWEN);
    54c4:	a6 e5       	ldi	r26, 0x56	; 86
    54c6:	b0 e0       	ldi	r27, 0x00	; 0
    54c8:	e6 e5       	ldi	r30, 0x56	; 86
    54ca:	f0 e0       	ldi	r31, 0x00	; 0
    54cc:	80 81       	ld	r24, Z
    54ce:	84 60       	ori	r24, 0x04	; 4
    54d0:	8c 93       	st	X, r24

}
    54d2:	cf 91       	pop	r28
    54d4:	df 91       	pop	r29
    54d6:	08 95       	ret

000054d8 <TWI_voidSendStartCondition>:

void TWI_voidSendStartCondition(void) {
    54d8:	df 93       	push	r29
    54da:	cf 93       	push	r28
    54dc:	cd b7       	in	r28, 0x3d	; 61
    54de:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR_REG, TWCR_TWSTA);
    54e0:	a6 e5       	ldi	r26, 0x56	; 86
    54e2:	b0 e0       	ldi	r27, 0x00	; 0
    54e4:	e6 e5       	ldi	r30, 0x56	; 86
    54e6:	f0 e0       	ldi	r31, 0x00	; 0
    54e8:	80 81       	ld	r24, Z
    54ea:	80 62       	ori	r24, 0x20	; 32
    54ec:	8c 93       	st	X, r24

	//clear flag to start job
	SET_BIT(TWCR_REG, TWCR_TWINT);
    54ee:	a6 e5       	ldi	r26, 0x56	; 86
    54f0:	b0 e0       	ldi	r27, 0x00	; 0
    54f2:	e6 e5       	ldi	r30, 0x56	; 86
    54f4:	f0 e0       	ldi	r31, 0x00	; 0
    54f6:	80 81       	ld	r24, Z
    54f8:	80 68       	ori	r24, 0x80	; 128
    54fa:	8c 93       	st	X, r24

	//busy wait uti
	while (0 == GET_BIT(TWCR_REG, TWCR_TWINT))
    54fc:	e6 e5       	ldi	r30, 0x56	; 86
    54fe:	f0 e0       	ldi	r31, 0x00	; 0
    5500:	80 81       	ld	r24, Z
    5502:	88 23       	and	r24, r24
    5504:	dc f7       	brge	.-10     	; 0x54fc <TWI_voidSendStartCondition+0x24>
		;

	//check Staus code
	while (TWI_status_VALUE != TWI_Start_ACK)
    5506:	e1 e2       	ldi	r30, 0x21	; 33
    5508:	f0 e0       	ldi	r31, 0x00	; 0
    550a:	80 81       	ld	r24, Z
    550c:	88 2f       	mov	r24, r24
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	88 7f       	andi	r24, 0xF8	; 248
    5512:	90 70       	andi	r25, 0x00	; 0
    5514:	88 30       	cpi	r24, 0x08	; 8
    5516:	91 05       	cpc	r25, r1
    5518:	b1 f7       	brne	.-20     	; 0x5506 <TWI_voidSendStartCondition+0x2e>
		;

}
    551a:	cf 91       	pop	r28
    551c:	df 91       	pop	r29
    551e:	08 95       	ret

00005520 <TWI_voidSendRepeatStartCondition>:
void TWI_voidSendRepeatStartCondition(void) {
    5520:	df 93       	push	r29
    5522:	cf 93       	push	r28
    5524:	cd b7       	in	r28, 0x3d	; 61
    5526:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR_REG, TWCR_TWSTA);
    5528:	a6 e5       	ldi	r26, 0x56	; 86
    552a:	b0 e0       	ldi	r27, 0x00	; 0
    552c:	e6 e5       	ldi	r30, 0x56	; 86
    552e:	f0 e0       	ldi	r31, 0x00	; 0
    5530:	80 81       	ld	r24, Z
    5532:	80 62       	ori	r24, 0x20	; 32
    5534:	8c 93       	st	X, r24

	//clear flag to start job
	SET_BIT(TWCR_REG, TWCR_TWINT);
    5536:	a6 e5       	ldi	r26, 0x56	; 86
    5538:	b0 e0       	ldi	r27, 0x00	; 0
    553a:	e6 e5       	ldi	r30, 0x56	; 86
    553c:	f0 e0       	ldi	r31, 0x00	; 0
    553e:	80 81       	ld	r24, Z
    5540:	80 68       	ori	r24, 0x80	; 128
    5542:	8c 93       	st	X, r24

	//busy wait uti
	while (0 == GET_BIT(TWCR_REG, TWCR_TWINT))
    5544:	e6 e5       	ldi	r30, 0x56	; 86
    5546:	f0 e0       	ldi	r31, 0x00	; 0
    5548:	80 81       	ld	r24, Z
    554a:	88 23       	and	r24, r24
    554c:	dc f7       	brge	.-10     	; 0x5544 <TWI_voidSendRepeatStartCondition+0x24>
		;

	//check Staus code
	while (TWI_status_VALUE != TWI__REP_Start_ACK)
    554e:	e1 e2       	ldi	r30, 0x21	; 33
    5550:	f0 e0       	ldi	r31, 0x00	; 0
    5552:	80 81       	ld	r24, Z
    5554:	88 2f       	mov	r24, r24
    5556:	90 e0       	ldi	r25, 0x00	; 0
    5558:	88 7f       	andi	r24, 0xF8	; 248
    555a:	90 70       	andi	r25, 0x00	; 0
    555c:	80 31       	cpi	r24, 0x10	; 16
    555e:	91 05       	cpc	r25, r1
    5560:	b1 f7       	brne	.-20     	; 0x554e <TWI_voidSendRepeatStartCondition+0x2e>
		;
}
    5562:	cf 91       	pop	r28
    5564:	df 91       	pop	r29
    5566:	08 95       	ret

00005568 <TWI_voidSendStopCondition>:
void TWI_voidSendStopCondition(void) {
    5568:	df 93       	push	r29
    556a:	cf 93       	push	r28
    556c:	cd b7       	in	r28, 0x3d	; 61
    556e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR_REG, TWCR_TWSTO);
    5570:	a6 e5       	ldi	r26, 0x56	; 86
    5572:	b0 e0       	ldi	r27, 0x00	; 0
    5574:	e6 e5       	ldi	r30, 0x56	; 86
    5576:	f0 e0       	ldi	r31, 0x00	; 0
    5578:	80 81       	ld	r24, Z
    557a:	80 61       	ori	r24, 0x10	; 16
    557c:	8c 93       	st	X, r24

	//clear flag to start job
	SET_BIT(TWCR_REG, TWCR_TWINT);
    557e:	a6 e5       	ldi	r26, 0x56	; 86
    5580:	b0 e0       	ldi	r27, 0x00	; 0
    5582:	e6 e5       	ldi	r30, 0x56	; 86
    5584:	f0 e0       	ldi	r31, 0x00	; 0
    5586:	80 81       	ld	r24, Z
    5588:	80 68       	ori	r24, 0x80	; 128
    558a:	8c 93       	st	X, r24

}
    558c:	cf 91       	pop	r28
    558e:	df 91       	pop	r29
    5590:	08 95       	ret

00005592 <TWI_voidSendSlaveAddressWithWrite>:
void TWI_voidSendSlaveAddressWithWrite(u8 copy_u8SlaveAddress) {
    5592:	df 93       	push	r29
    5594:	cf 93       	push	r28
    5596:	0f 92       	push	r0
    5598:	cd b7       	in	r28, 0x3d	; 61
    559a:	de b7       	in	r29, 0x3e	; 62
    559c:	89 83       	std	Y+1, r24	; 0x01
	if (copy_u8SlaveAddress < 128) {
    559e:	89 81       	ldd	r24, Y+1	; 0x01
    55a0:	88 23       	and	r24, r24
    55a2:	4c f1       	brlt	.+82     	; 0x55f6 <TWI_voidSendSlaveAddressWithWrite+0x64>
		TWDR_REG = (copy_u8SlaveAddress << 1);
    55a4:	e3 e2       	ldi	r30, 0x23	; 35
    55a6:	f0 e0       	ldi	r31, 0x00	; 0
    55a8:	89 81       	ldd	r24, Y+1	; 0x01
    55aa:	88 0f       	add	r24, r24
    55ac:	80 83       	st	Z, r24
		//WRITE CONDITION
		CLR_BIT(TWDR_REG, 0);
    55ae:	a3 e2       	ldi	r26, 0x23	; 35
    55b0:	b0 e0       	ldi	r27, 0x00	; 0
    55b2:	e3 e2       	ldi	r30, 0x23	; 35
    55b4:	f0 e0       	ldi	r31, 0x00	; 0
    55b6:	80 81       	ld	r24, Z
    55b8:	8e 7f       	andi	r24, 0xFE	; 254
    55ba:	8c 93       	st	X, r24
		//CLEAR START
		CLR_BIT(TWCR_REG, TWCR_TWSTA);
    55bc:	a6 e5       	ldi	r26, 0x56	; 86
    55be:	b0 e0       	ldi	r27, 0x00	; 0
    55c0:	e6 e5       	ldi	r30, 0x56	; 86
    55c2:	f0 e0       	ldi	r31, 0x00	; 0
    55c4:	80 81       	ld	r24, Z
    55c6:	8f 7d       	andi	r24, 0xDF	; 223
    55c8:	8c 93       	st	X, r24

		//clear flag to start job
		SET_BIT(TWCR_REG, TWCR_TWINT);
    55ca:	a6 e5       	ldi	r26, 0x56	; 86
    55cc:	b0 e0       	ldi	r27, 0x00	; 0
    55ce:	e6 e5       	ldi	r30, 0x56	; 86
    55d0:	f0 e0       	ldi	r31, 0x00	; 0
    55d2:	80 81       	ld	r24, Z
    55d4:	80 68       	ori	r24, 0x80	; 128
    55d6:	8c 93       	st	X, r24

		//busy wait uti
		while (0 == GET_BIT(TWCR_REG, TWCR_TWINT))
    55d8:	e6 e5       	ldi	r30, 0x56	; 86
    55da:	f0 e0       	ldi	r31, 0x00	; 0
    55dc:	80 81       	ld	r24, Z
    55de:	88 23       	and	r24, r24
    55e0:	dc f7       	brge	.-10     	; 0x55d8 <TWI_voidSendSlaveAddressWithWrite+0x46>
			;

		//check Staus code
		while (TWI_status_VALUE != TWI_SLAVE_ADDRESS_WRITE_ACK)
    55e2:	e1 e2       	ldi	r30, 0x21	; 33
    55e4:	f0 e0       	ldi	r31, 0x00	; 0
    55e6:	80 81       	ld	r24, Z
    55e8:	88 2f       	mov	r24, r24
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	88 7f       	andi	r24, 0xF8	; 248
    55ee:	90 70       	andi	r25, 0x00	; 0
    55f0:	88 31       	cpi	r24, 0x18	; 24
    55f2:	91 05       	cpc	r25, r1
    55f4:	b1 f7       	brne	.-20     	; 0x55e2 <TWI_voidSendSlaveAddressWithWrite+0x50>
			;
	}

}
    55f6:	0f 90       	pop	r0
    55f8:	cf 91       	pop	r28
    55fa:	df 91       	pop	r29
    55fc:	08 95       	ret

000055fe <TWI_voidSendSlaveAddressWithRead>:
void TWI_voidSendSlaveAddressWithRead(u8 copy_u8SlaveAddress) {
    55fe:	df 93       	push	r29
    5600:	cf 93       	push	r28
    5602:	0f 92       	push	r0
    5604:	cd b7       	in	r28, 0x3d	; 61
    5606:	de b7       	in	r29, 0x3e	; 62
    5608:	89 83       	std	Y+1, r24	; 0x01
	if (copy_u8SlaveAddress < 128) {
    560a:	89 81       	ldd	r24, Y+1	; 0x01
    560c:	88 23       	and	r24, r24
    560e:	4c f1       	brlt	.+82     	; 0x5662 <TWI_voidSendSlaveAddressWithRead+0x64>
		TWDR_REG = (copy_u8SlaveAddress << 1);
    5610:	e3 e2       	ldi	r30, 0x23	; 35
    5612:	f0 e0       	ldi	r31, 0x00	; 0
    5614:	89 81       	ldd	r24, Y+1	; 0x01
    5616:	88 0f       	add	r24, r24
    5618:	80 83       	st	Z, r24
		//WRITE CONDITION
		SET_BIT(TWDR_REG, 0);
    561a:	a3 e2       	ldi	r26, 0x23	; 35
    561c:	b0 e0       	ldi	r27, 0x00	; 0
    561e:	e3 e2       	ldi	r30, 0x23	; 35
    5620:	f0 e0       	ldi	r31, 0x00	; 0
    5622:	80 81       	ld	r24, Z
    5624:	81 60       	ori	r24, 0x01	; 1
    5626:	8c 93       	st	X, r24
		//CLEAR START
		CLR_BIT(TWCR_REG, TWCR_TWSTA);
    5628:	a6 e5       	ldi	r26, 0x56	; 86
    562a:	b0 e0       	ldi	r27, 0x00	; 0
    562c:	e6 e5       	ldi	r30, 0x56	; 86
    562e:	f0 e0       	ldi	r31, 0x00	; 0
    5630:	80 81       	ld	r24, Z
    5632:	8f 7d       	andi	r24, 0xDF	; 223
    5634:	8c 93       	st	X, r24

		//clear flag to start job
		SET_BIT(TWCR_REG, TWCR_TWINT);
    5636:	a6 e5       	ldi	r26, 0x56	; 86
    5638:	b0 e0       	ldi	r27, 0x00	; 0
    563a:	e6 e5       	ldi	r30, 0x56	; 86
    563c:	f0 e0       	ldi	r31, 0x00	; 0
    563e:	80 81       	ld	r24, Z
    5640:	80 68       	ori	r24, 0x80	; 128
    5642:	8c 93       	st	X, r24

		//busy wait uti
		while (0 == GET_BIT(TWCR_REG, TWCR_TWINT))
    5644:	e6 e5       	ldi	r30, 0x56	; 86
    5646:	f0 e0       	ldi	r31, 0x00	; 0
    5648:	80 81       	ld	r24, Z
    564a:	88 23       	and	r24, r24
    564c:	dc f7       	brge	.-10     	; 0x5644 <TWI_voidSendSlaveAddressWithRead+0x46>
			;

		//check Staus code
		while (TWI_status_VALUE != TWI_SLAVE_ADDRESS_READ_ACK)
    564e:	e1 e2       	ldi	r30, 0x21	; 33
    5650:	f0 e0       	ldi	r31, 0x00	; 0
    5652:	80 81       	ld	r24, Z
    5654:	88 2f       	mov	r24, r24
    5656:	90 e0       	ldi	r25, 0x00	; 0
    5658:	88 7f       	andi	r24, 0xF8	; 248
    565a:	90 70       	andi	r25, 0x00	; 0
    565c:	80 34       	cpi	r24, 0x40	; 64
    565e:	91 05       	cpc	r25, r1
    5660:	b1 f7       	brne	.-20     	; 0x564e <TWI_voidSendSlaveAddressWithRead+0x50>
			;
	}
}
    5662:	0f 90       	pop	r0
    5664:	cf 91       	pop	r28
    5666:	df 91       	pop	r29
    5668:	08 95       	ret

0000566a <TWI_voidSendMasterByteData>:
void TWI_voidSendMasterByteData(u8 copy_u8TxData) {
    566a:	df 93       	push	r29
    566c:	cf 93       	push	r28
    566e:	0f 92       	push	r0
    5670:	cd b7       	in	r28, 0x3d	; 61
    5672:	de b7       	in	r29, 0x3e	; 62
    5674:	89 83       	std	Y+1, r24	; 0x01
	TWDR_REG = copy_u8TxData;
    5676:	e3 e2       	ldi	r30, 0x23	; 35
    5678:	f0 e0       	ldi	r31, 0x00	; 0
    567a:	89 81       	ldd	r24, Y+1	; 0x01
    567c:	80 83       	st	Z, r24
	//clear flag to start job
	SET_BIT(TWCR_REG, TWCR_TWINT);
    567e:	a6 e5       	ldi	r26, 0x56	; 86
    5680:	b0 e0       	ldi	r27, 0x00	; 0
    5682:	e6 e5       	ldi	r30, 0x56	; 86
    5684:	f0 e0       	ldi	r31, 0x00	; 0
    5686:	80 81       	ld	r24, Z
    5688:	80 68       	ori	r24, 0x80	; 128
    568a:	8c 93       	st	X, r24

	//busy wait uti
	while (0 == GET_BIT(TWCR_REG, TWCR_TWINT))
    568c:	e6 e5       	ldi	r30, 0x56	; 86
    568e:	f0 e0       	ldi	r31, 0x00	; 0
    5690:	80 81       	ld	r24, Z
    5692:	88 23       	and	r24, r24
    5694:	dc f7       	brge	.-10     	; 0x568c <TWI_voidSendMasterByteData+0x22>
		;

	//check Staus code
	while (TWI_status_VALUE != TWI_MASTER_DATA_TRANSMIT_ACK)
    5696:	e1 e2       	ldi	r30, 0x21	; 33
    5698:	f0 e0       	ldi	r31, 0x00	; 0
    569a:	80 81       	ld	r24, Z
    569c:	88 2f       	mov	r24, r24
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	88 7f       	andi	r24, 0xF8	; 248
    56a2:	90 70       	andi	r25, 0x00	; 0
    56a4:	88 32       	cpi	r24, 0x28	; 40
    56a6:	91 05       	cpc	r25, r1
    56a8:	b1 f7       	brne	.-20     	; 0x5696 <TWI_voidSendMasterByteData+0x2c>
		;

}
    56aa:	0f 90       	pop	r0
    56ac:	cf 91       	pop	r28
    56ae:	df 91       	pop	r29
    56b0:	08 95       	ret

000056b2 <TWI_voidReceiveMasterByteDataWithAck>:
void TWI_voidReceiveMasterByteDataWithAck(u8 *copy_u8RxData) {
    56b2:	df 93       	push	r29
    56b4:	cf 93       	push	r28
    56b6:	00 d0       	rcall	.+0      	; 0x56b8 <TWI_voidReceiveMasterByteDataWithAck+0x6>
    56b8:	cd b7       	in	r28, 0x3d	; 61
    56ba:	de b7       	in	r29, 0x3e	; 62
    56bc:	9a 83       	std	Y+2, r25	; 0x02
    56be:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8RxData != NULL)
    56c0:	89 81       	ldd	r24, Y+1	; 0x01
    56c2:	9a 81       	ldd	r25, Y+2	; 0x02
    56c4:	00 97       	sbiw	r24, 0x00	; 0
    56c6:	51 f1       	breq	.+84     	; 0x571c <TWI_voidReceiveMasterByteDataWithAck+0x6a>
	{
		//SEND ACK
		SET_BIT(TWCR_REG,  TWCR_TWEA);
    56c8:	a6 e5       	ldi	r26, 0x56	; 86
    56ca:	b0 e0       	ldi	r27, 0x00	; 0
    56cc:	e6 e5       	ldi	r30, 0x56	; 86
    56ce:	f0 e0       	ldi	r31, 0x00	; 0
    56d0:	80 81       	ld	r24, Z
    56d2:	80 64       	ori	r24, 0x40	; 64
    56d4:	8c 93       	st	X, r24

		//clear flag to start job
		SET_BIT(TWCR_REG, TWCR_TWINT);
    56d6:	a6 e5       	ldi	r26, 0x56	; 86
    56d8:	b0 e0       	ldi	r27, 0x00	; 0
    56da:	e6 e5       	ldi	r30, 0x56	; 86
    56dc:	f0 e0       	ldi	r31, 0x00	; 0
    56de:	80 81       	ld	r24, Z
    56e0:	80 68       	ori	r24, 0x80	; 128
    56e2:	8c 93       	st	X, r24

		//busy wait uti
		while (0 == GET_BIT(TWCR_REG, TWCR_TWINT))
    56e4:	e6 e5       	ldi	r30, 0x56	; 86
    56e6:	f0 e0       	ldi	r31, 0x00	; 0
    56e8:	80 81       	ld	r24, Z
    56ea:	88 23       	and	r24, r24
    56ec:	dc f7       	brge	.-10     	; 0x56e4 <TWI_voidReceiveMasterByteDataWithAck+0x32>
			;

		//check Staus code
		while (TWI_status_VALUE != TWI_MASTER_DATA_RECEIVE_ACK)			;
    56ee:	e1 e2       	ldi	r30, 0x21	; 33
    56f0:	f0 e0       	ldi	r31, 0x00	; 0
    56f2:	80 81       	ld	r24, Z
    56f4:	88 2f       	mov	r24, r24
    56f6:	90 e0       	ldi	r25, 0x00	; 0
    56f8:	88 7f       	andi	r24, 0xF8	; 248
    56fa:	90 70       	andi	r25, 0x00	; 0
    56fc:	80 35       	cpi	r24, 0x50	; 80
    56fe:	91 05       	cpc	r25, r1
    5700:	b1 f7       	brne	.-20     	; 0x56ee <TWI_voidReceiveMasterByteDataWithAck+0x3c>

		*copy_u8RxData = TWDR_REG;
    5702:	e3 e2       	ldi	r30, 0x23	; 35
    5704:	f0 e0       	ldi	r31, 0x00	; 0
    5706:	80 81       	ld	r24, Z
    5708:	e9 81       	ldd	r30, Y+1	; 0x01
    570a:	fa 81       	ldd	r31, Y+2	; 0x02
    570c:	80 83       	st	Z, r24

		//CLEAR ACK
		CLR_BIT(TWCR_REG,  TWCR_TWEA);
    570e:	a6 e5       	ldi	r26, 0x56	; 86
    5710:	b0 e0       	ldi	r27, 0x00	; 0
    5712:	e6 e5       	ldi	r30, 0x56	; 86
    5714:	f0 e0       	ldi	r31, 0x00	; 0
    5716:	80 81       	ld	r24, Z
    5718:	8f 7b       	andi	r24, 0xBF	; 191
    571a:	8c 93       	st	X, r24
	}

}
    571c:	0f 90       	pop	r0
    571e:	0f 90       	pop	r0
    5720:	cf 91       	pop	r28
    5722:	df 91       	pop	r29
    5724:	08 95       	ret

00005726 <TWI_voidReceiveMasterByteDataWithNAck>:
void TWI_voidReceiveMasterByteDataWithNAck(u8 *copy_u8RxData){
    5726:	df 93       	push	r29
    5728:	cf 93       	push	r28
    572a:	00 d0       	rcall	.+0      	; 0x572c <TWI_voidReceiveMasterByteDataWithNAck+0x6>
    572c:	cd b7       	in	r28, 0x3d	; 61
    572e:	de b7       	in	r29, 0x3e	; 62
    5730:	9a 83       	std	Y+2, r25	; 0x02
    5732:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8RxData != NULL)
    5734:	89 81       	ldd	r24, Y+1	; 0x01
    5736:	9a 81       	ldd	r25, Y+2	; 0x02
    5738:	00 97       	sbiw	r24, 0x00	; 0
    573a:	e1 f0       	breq	.+56     	; 0x5774 <TWI_voidReceiveMasterByteDataWithNAck+0x4e>
	{

		//clear flag to start job
		SET_BIT(TWCR_REG, TWCR_TWINT);
    573c:	a6 e5       	ldi	r26, 0x56	; 86
    573e:	b0 e0       	ldi	r27, 0x00	; 0
    5740:	e6 e5       	ldi	r30, 0x56	; 86
    5742:	f0 e0       	ldi	r31, 0x00	; 0
    5744:	80 81       	ld	r24, Z
    5746:	80 68       	ori	r24, 0x80	; 128
    5748:	8c 93       	st	X, r24

		//busy wait uti
		while (0 == GET_BIT(TWCR_REG, TWCR_TWINT))			;
    574a:	e6 e5       	ldi	r30, 0x56	; 86
    574c:	f0 e0       	ldi	r31, 0x00	; 0
    574e:	80 81       	ld	r24, Z
    5750:	88 23       	and	r24, r24
    5752:	dc f7       	brge	.-10     	; 0x574a <TWI_voidReceiveMasterByteDataWithNAck+0x24>

		//check Staus code
		while (TWI_status_VALUE != TWI_MASTER_DATA_RECEIVE_NACK)			;
    5754:	e1 e2       	ldi	r30, 0x21	; 33
    5756:	f0 e0       	ldi	r31, 0x00	; 0
    5758:	80 81       	ld	r24, Z
    575a:	88 2f       	mov	r24, r24
    575c:	90 e0       	ldi	r25, 0x00	; 0
    575e:	88 7f       	andi	r24, 0xF8	; 248
    5760:	90 70       	andi	r25, 0x00	; 0
    5762:	88 35       	cpi	r24, 0x58	; 88
    5764:	91 05       	cpc	r25, r1
    5766:	b1 f7       	brne	.-20     	; 0x5754 <TWI_voidReceiveMasterByteDataWithNAck+0x2e>

		*copy_u8RxData = TWDR_REG;
    5768:	e3 e2       	ldi	r30, 0x23	; 35
    576a:	f0 e0       	ldi	r31, 0x00	; 0
    576c:	80 81       	ld	r24, Z
    576e:	e9 81       	ldd	r30, Y+1	; 0x01
    5770:	fa 81       	ldd	r31, Y+2	; 0x02
    5772:	80 83       	st	Z, r24

	}
}
    5774:	0f 90       	pop	r0
    5776:	0f 90       	pop	r0
    5778:	cf 91       	pop	r28
    577a:	df 91       	pop	r29
    577c:	08 95       	ret

0000577e <TWI_voidListenToMaster>:

void TWI_voidListenToMaster(void) {
    577e:	df 93       	push	r29
    5780:	cf 93       	push	r28
    5782:	cd b7       	in	r28, 0x3d	; 61
    5784:	de b7       	in	r29, 0x3e	; 62
	while (0 == GET_BIT(TWCR_REG, TWCR_TWEA))
    5786:	e6 e5       	ldi	r30, 0x56	; 86
    5788:	f0 e0       	ldi	r31, 0x00	; 0
    578a:	80 81       	ld	r24, Z
    578c:	82 95       	swap	r24
    578e:	86 95       	lsr	r24
    5790:	86 95       	lsr	r24
    5792:	83 70       	andi	r24, 0x03	; 3
    5794:	88 2f       	mov	r24, r24
    5796:	90 e0       	ldi	r25, 0x00	; 0
    5798:	81 70       	andi	r24, 0x01	; 1
    579a:	90 70       	andi	r25, 0x00	; 0
    579c:	00 97       	sbiw	r24, 0x00	; 0
    579e:	99 f3       	breq	.-26     	; 0x5786 <TWI_voidListenToMaster+0x8>
		;

}
    57a0:	cf 91       	pop	r28
    57a2:	df 91       	pop	r29
    57a4:	08 95       	ret

000057a6 <TMR2_voidInit>:
static u8 PRV_u8PreloadValue = 0;
static u16 PRV_u16NoOfOVF = 0;
static TMR2_ClockSelect_t PRV_tClockSelect;

void TMR2_voidInit(TMR2_Timer2Mode_t copy_tTimer2Mode,
		TMR2_ClockSelect_t copy_tClockSelect) {
    57a6:	df 93       	push	r29
    57a8:	cf 93       	push	r28
    57aa:	00 d0       	rcall	.+0      	; 0x57ac <TMR2_voidInit+0x6>
    57ac:	00 d0       	rcall	.+0      	; 0x57ae <TMR2_voidInit+0x8>
    57ae:	cd b7       	in	r28, 0x3d	; 61
    57b0:	de b7       	in	r29, 0x3e	; 62
    57b2:	89 83       	std	Y+1, r24	; 0x01
    57b4:	6a 83       	std	Y+2, r22	; 0x02
	PRV_tClockSelect = copy_tClockSelect;
    57b6:	8a 81       	ldd	r24, Y+2	; 0x02
    57b8:	80 93 ff 05 	sts	0x05FF, r24

	//Waveform Generation Mode
	switch (copy_tTimer2Mode) {
    57bc:	89 81       	ldd	r24, Y+1	; 0x01
    57be:	28 2f       	mov	r18, r24
    57c0:	30 e0       	ldi	r19, 0x00	; 0
    57c2:	3c 83       	std	Y+4, r19	; 0x04
    57c4:	2b 83       	std	Y+3, r18	; 0x03
    57c6:	8b 81       	ldd	r24, Y+3	; 0x03
    57c8:	9c 81       	ldd	r25, Y+4	; 0x04
    57ca:	81 30       	cpi	r24, 0x01	; 1
    57cc:	91 05       	cpc	r25, r1
    57ce:	61 f1       	breq	.+88     	; 0x5828 <TMR2_voidInit+0x82>
    57d0:	2b 81       	ldd	r18, Y+3	; 0x03
    57d2:	3c 81       	ldd	r19, Y+4	; 0x04
    57d4:	22 30       	cpi	r18, 0x02	; 2
    57d6:	31 05       	cpc	r19, r1
    57d8:	2c f4       	brge	.+10     	; 0x57e4 <TMR2_voidInit+0x3e>
    57da:	8b 81       	ldd	r24, Y+3	; 0x03
    57dc:	9c 81       	ldd	r25, Y+4	; 0x04
    57de:	00 97       	sbiw	r24, 0x00	; 0
    57e0:	69 f0       	breq	.+26     	; 0x57fc <TMR2_voidInit+0x56>
    57e2:	59 c0       	rjmp	.+178    	; 0x5896 <TMR2_voidInit+0xf0>
    57e4:	2b 81       	ldd	r18, Y+3	; 0x03
    57e6:	3c 81       	ldd	r19, Y+4	; 0x04
    57e8:	22 30       	cpi	r18, 0x02	; 2
    57ea:	31 05       	cpc	r19, r1
    57ec:	61 f1       	breq	.+88     	; 0x5846 <TMR2_voidInit+0xa0>
    57ee:	8b 81       	ldd	r24, Y+3	; 0x03
    57f0:	9c 81       	ldd	r25, Y+4	; 0x04
    57f2:	83 30       	cpi	r24, 0x03	; 3
    57f4:	91 05       	cpc	r25, r1
    57f6:	09 f4       	brne	.+2      	; 0x57fa <TMR2_voidInit+0x54>
    57f8:	40 c0       	rjmp	.+128    	; 0x587a <TMR2_voidInit+0xd4>
    57fa:	4d c0       	rjmp	.+154    	; 0x5896 <TMR2_voidInit+0xf0>
	case TMR2_Normal_mode:
		CLR_BIT(TCCR2_REG, TCCR2_WGM20);
    57fc:	a5 e4       	ldi	r26, 0x45	; 69
    57fe:	b0 e0       	ldi	r27, 0x00	; 0
    5800:	e5 e4       	ldi	r30, 0x45	; 69
    5802:	f0 e0       	ldi	r31, 0x00	; 0
    5804:	80 81       	ld	r24, Z
    5806:	8f 7b       	andi	r24, 0xBF	; 191
    5808:	8c 93       	st	X, r24
		CLR_BIT(TCCR2_REG, TCCR2_WGM21);
    580a:	a5 e4       	ldi	r26, 0x45	; 69
    580c:	b0 e0       	ldi	r27, 0x00	; 0
    580e:	e5 e4       	ldi	r30, 0x45	; 69
    5810:	f0 e0       	ldi	r31, 0x00	; 0
    5812:	80 81       	ld	r24, Z
    5814:	87 7f       	andi	r24, 0xF7	; 247
    5816:	8c 93       	st	X, r24

		//Timer/Counter0 Overflow Interrupt Enable
		SET_BIT(TIMSK_REG, TIMSK_TOIE2);
    5818:	a9 e5       	ldi	r26, 0x59	; 89
    581a:	b0 e0       	ldi	r27, 0x00	; 0
    581c:	e9 e5       	ldi	r30, 0x59	; 89
    581e:	f0 e0       	ldi	r31, 0x00	; 0
    5820:	80 81       	ld	r24, Z
    5822:	80 64       	ori	r24, 0x40	; 64
    5824:	8c 93       	st	X, r24
    5826:	37 c0       	rjmp	.+110    	; 0x5896 <TMR2_voidInit+0xf0>

		break;
	case TMR2_PWM_mode:
		SET_BIT(TCCR2_REG, TCCR2_WGM20);
    5828:	a5 e4       	ldi	r26, 0x45	; 69
    582a:	b0 e0       	ldi	r27, 0x00	; 0
    582c:	e5 e4       	ldi	r30, 0x45	; 69
    582e:	f0 e0       	ldi	r31, 0x00	; 0
    5830:	80 81       	ld	r24, Z
    5832:	80 64       	ori	r24, 0x40	; 64
    5834:	8c 93       	st	X, r24
		CLR_BIT(TCCR2_REG, TCCR2_WGM21);
    5836:	a5 e4       	ldi	r26, 0x45	; 69
    5838:	b0 e0       	ldi	r27, 0x00	; 0
    583a:	e5 e4       	ldi	r30, 0x45	; 69
    583c:	f0 e0       	ldi	r31, 0x00	; 0
    583e:	80 81       	ld	r24, Z
    5840:	87 7f       	andi	r24, 0xF7	; 247
    5842:	8c 93       	st	X, r24
    5844:	28 c0       	rjmp	.+80     	; 0x5896 <TMR2_voidInit+0xf0>
		break;
	case TMR2_CTC_mode:
		CLR_BIT(TCCR2_REG, TCCR2_WGM20);
    5846:	a5 e4       	ldi	r26, 0x45	; 69
    5848:	b0 e0       	ldi	r27, 0x00	; 0
    584a:	e5 e4       	ldi	r30, 0x45	; 69
    584c:	f0 e0       	ldi	r31, 0x00	; 0
    584e:	80 81       	ld	r24, Z
    5850:	8f 7b       	andi	r24, 0xBF	; 191
    5852:	8c 93       	st	X, r24
		SET_BIT(TCCR2_REG, TCCR2_WGM21);
    5854:	a5 e4       	ldi	r26, 0x45	; 69
    5856:	b0 e0       	ldi	r27, 0x00	; 0
    5858:	e5 e4       	ldi	r30, 0x45	; 69
    585a:	f0 e0       	ldi	r31, 0x00	; 0
    585c:	80 81       	ld	r24, Z
    585e:	88 60       	ori	r24, 0x08	; 8
    5860:	8c 93       	st	X, r24

		//Timer/Counter0 CTC Interrupt Enable
		SET_BIT(TIMSK_REG, TIMSK_OCIE2);
    5862:	a9 e5       	ldi	r26, 0x59	; 89
    5864:	b0 e0       	ldi	r27, 0x00	; 0
    5866:	e9 e5       	ldi	r30, 0x59	; 89
    5868:	f0 e0       	ldi	r31, 0x00	; 0
    586a:	80 81       	ld	r24, Z
    586c:	80 68       	ori	r24, 0x80	; 128
    586e:	8c 93       	st	X, r24

		//SET Output Compare
		OCR2_REG = TMR2_COMPARE_VALUE;
    5870:	e3 e4       	ldi	r30, 0x43	; 67
    5872:	f0 e0       	ldi	r31, 0x00	; 0
    5874:	89 ef       	ldi	r24, 0xF9	; 249
    5876:	80 83       	st	Z, r24
    5878:	0e c0       	rjmp	.+28     	; 0x5896 <TMR2_voidInit+0xf0>

		break;
	case TMR2_Fast_PWM_mode:
		SET_BIT(TCCR2_REG, TCCR2_WGM20);
    587a:	a5 e4       	ldi	r26, 0x45	; 69
    587c:	b0 e0       	ldi	r27, 0x00	; 0
    587e:	e5 e4       	ldi	r30, 0x45	; 69
    5880:	f0 e0       	ldi	r31, 0x00	; 0
    5882:	80 81       	ld	r24, Z
    5884:	80 64       	ori	r24, 0x40	; 64
    5886:	8c 93       	st	X, r24
		SET_BIT(TCCR2_REG, TCCR2_WGM21);
    5888:	a5 e4       	ldi	r26, 0x45	; 69
    588a:	b0 e0       	ldi	r27, 0x00	; 0
    588c:	e5 e4       	ldi	r30, 0x45	; 69
    588e:	f0 e0       	ldi	r31, 0x00	; 0
    5890:	80 81       	ld	r24, Z
    5892:	88 60       	ori	r24, 0x08	; 8
    5894:	8c 93       	st	X, r24
		break;
	}

}
    5896:	0f 90       	pop	r0
    5898:	0f 90       	pop	r0
    589a:	0f 90       	pop	r0
    589c:	0f 90       	pop	r0
    589e:	cf 91       	pop	r28
    58a0:	df 91       	pop	r29
    58a2:	08 95       	ret

000058a4 <TMR2_voidStart>:

void TMR2_voidStart(void) {
    58a4:	df 93       	push	r29
    58a6:	cf 93       	push	r28
    58a8:	cd b7       	in	r28, 0x3d	; 61
    58aa:	de b7       	in	r29, 0x3e	; 62

//Clock Select
	TCCR2_REG &= 0xF8;
    58ac:	a5 e4       	ldi	r26, 0x45	; 69
    58ae:	b0 e0       	ldi	r27, 0x00	; 0
    58b0:	e5 e4       	ldi	r30, 0x45	; 69
    58b2:	f0 e0       	ldi	r31, 0x00	; 0
    58b4:	80 81       	ld	r24, Z
    58b6:	88 7f       	andi	r24, 0xF8	; 248
    58b8:	8c 93       	st	X, r24

	TCCR2_REG |= PRV_tClockSelect;
    58ba:	a5 e4       	ldi	r26, 0x45	; 69
    58bc:	b0 e0       	ldi	r27, 0x00	; 0
    58be:	e5 e4       	ldi	r30, 0x45	; 69
    58c0:	f0 e0       	ldi	r31, 0x00	; 0
    58c2:	90 81       	ld	r25, Z
    58c4:	80 91 ff 05 	lds	r24, 0x05FF
    58c8:	89 2b       	or	r24, r25
    58ca:	8c 93       	st	X, r24

}
    58cc:	cf 91       	pop	r28
    58ce:	df 91       	pop	r29
    58d0:	08 95       	ret

000058d2 <TMR2_voidStop>:

void TMR2_voidStop(void) {
    58d2:	df 93       	push	r29
    58d4:	cf 93       	push	r28
    58d6:	cd b7       	in	r28, 0x3d	; 61
    58d8:	de b7       	in	r29, 0x3e	; 62
	//Timer/Counter0 Overflow Interrupt Disable
	CLR_BIT(TIMSK_REG, TIMSK_TOIE2);
    58da:	a9 e5       	ldi	r26, 0x59	; 89
    58dc:	b0 e0       	ldi	r27, 0x00	; 0
    58de:	e9 e5       	ldi	r30, 0x59	; 89
    58e0:	f0 e0       	ldi	r31, 0x00	; 0
    58e2:	80 81       	ld	r24, Z
    58e4:	8f 7b       	andi	r24, 0xBF	; 191
    58e6:	8c 93       	st	X, r24
	CLR_BIT(TIMSK_REG, TIMSK_OCIE2);
    58e8:	a9 e5       	ldi	r26, 0x59	; 89
    58ea:	b0 e0       	ldi	r27, 0x00	; 0
    58ec:	e9 e5       	ldi	r30, 0x59	; 89
    58ee:	f0 e0       	ldi	r31, 0x00	; 0
    58f0:	80 81       	ld	r24, Z
    58f2:	8f 77       	andi	r24, 0x7F	; 127
    58f4:	8c 93       	st	X, r24

	//Clock Select
	TCCR2_REG &= 0xF8;
    58f6:	a5 e4       	ldi	r26, 0x45	; 69
    58f8:	b0 e0       	ldi	r27, 0x00	; 0
    58fa:	e5 e4       	ldi	r30, 0x45	; 69
    58fc:	f0 e0       	ldi	r31, 0x00	; 0
    58fe:	80 81       	ld	r24, Z
    5900:	88 7f       	andi	r24, 0xF8	; 248
    5902:	8c 93       	st	X, r24

}
    5904:	cf 91       	pop	r28
    5906:	df 91       	pop	r29
    5908:	08 95       	ret

0000590a <TMR2_voidSetDelay_ms_OVR>:

void TMR2_voidSetDelay_ms_OVR(u16 copy_u16DelayTime_ms) {
    590a:	ef 92       	push	r14
    590c:	ff 92       	push	r15
    590e:	0f 93       	push	r16
    5910:	1f 93       	push	r17
    5912:	df 93       	push	r29
    5914:	cf 93       	push	r28
    5916:	cd b7       	in	r28, 0x3d	; 61
    5918:	de b7       	in	r29, 0x3e	; 62
    591a:	28 97       	sbiw	r28, 0x08	; 8
    591c:	0f b6       	in	r0, 0x3f	; 63
    591e:	f8 94       	cli
    5920:	de bf       	out	0x3e, r29	; 62
    5922:	0f be       	out	0x3f, r0	; 63
    5924:	cd bf       	out	0x3d, r28	; 61
    5926:	9e 83       	std	Y+6, r25	; 0x06
    5928:	8d 83       	std	Y+5, r24	; 0x05
	if (PRV_tClockSelect != 0 && copy_u16DelayTime_ms != 0) {
    592a:	80 91 ff 05 	lds	r24, 0x05FF
    592e:	88 23       	and	r24, r24
    5930:	09 f4       	brne	.+2      	; 0x5934 <TMR2_voidSetDelay_ms_OVR+0x2a>
    5932:	eb c0       	rjmp	.+470    	; 0x5b0a <TMR2_voidSetDelay_ms_OVR+0x200>
    5934:	8d 81       	ldd	r24, Y+5	; 0x05
    5936:	9e 81       	ldd	r25, Y+6	; 0x06
    5938:	00 97       	sbiw	r24, 0x00	; 0
    593a:	09 f4       	brne	.+2      	; 0x593e <TMR2_voidSetDelay_ms_OVR+0x34>
    593c:	e6 c0       	rjmp	.+460    	; 0x5b0a <TMR2_voidSetDelay_ms_OVR+0x200>

		f32 Noofoverflow = 0;
    593e:	80 e0       	ldi	r24, 0x00	; 0
    5940:	90 e0       	ldi	r25, 0x00	; 0
    5942:	a0 e0       	ldi	r26, 0x00	; 0
    5944:	b0 e0       	ldi	r27, 0x00	; 0
    5946:	89 83       	std	Y+1, r24	; 0x01
    5948:	9a 83       	std	Y+2, r25	; 0x02
    594a:	ab 83       	std	Y+3, r26	; 0x03
    594c:	bc 83       	std	Y+4, r27	; 0x04
		switch (PRV_tClockSelect) {
    594e:	80 91 ff 05 	lds	r24, 0x05FF
    5952:	28 2f       	mov	r18, r24
    5954:	30 e0       	ldi	r19, 0x00	; 0
    5956:	38 87       	std	Y+8, r19	; 0x08
    5958:	2f 83       	std	Y+7, r18	; 0x07
    595a:	8f 81       	ldd	r24, Y+7	; 0x07
    595c:	98 85       	ldd	r25, Y+8	; 0x08
    595e:	83 30       	cpi	r24, 0x03	; 3
    5960:	91 05       	cpc	r25, r1
    5962:	b9 f1       	breq	.+110    	; 0x59d2 <TMR2_voidSetDelay_ms_OVR+0xc8>
    5964:	2f 81       	ldd	r18, Y+7	; 0x07
    5966:	38 85       	ldd	r19, Y+8	; 0x08
    5968:	24 30       	cpi	r18, 0x04	; 4
    596a:	31 05       	cpc	r19, r1
    596c:	5c f4       	brge	.+22     	; 0x5984 <TMR2_voidSetDelay_ms_OVR+0x7a>
    596e:	8f 81       	ldd	r24, Y+7	; 0x07
    5970:	98 85       	ldd	r25, Y+8	; 0x08
    5972:	81 30       	cpi	r24, 0x01	; 1
    5974:	91 05       	cpc	r25, r1
    5976:	d9 f0       	breq	.+54     	; 0x59ae <TMR2_voidSetDelay_ms_OVR+0xa4>
    5978:	2f 81       	ldd	r18, Y+7	; 0x07
    597a:	38 85       	ldd	r19, Y+8	; 0x08
    597c:	22 30       	cpi	r18, 0x02	; 2
    597e:	31 05       	cpc	r19, r1
    5980:	fc f4       	brge	.+62     	; 0x59c0 <TMR2_voidSetDelay_ms_OVR+0xb6>
    5982:	53 c0       	rjmp	.+166    	; 0x5a2a <TMR2_voidSetDelay_ms_OVR+0x120>
    5984:	8f 81       	ldd	r24, Y+7	; 0x07
    5986:	98 85       	ldd	r25, Y+8	; 0x08
    5988:	85 30       	cpi	r24, 0x05	; 5
    598a:	91 05       	cpc	r25, r1
    598c:	a1 f1       	breq	.+104    	; 0x59f6 <TMR2_voidSetDelay_ms_OVR+0xec>
    598e:	2f 81       	ldd	r18, Y+7	; 0x07
    5990:	38 85       	ldd	r19, Y+8	; 0x08
    5992:	25 30       	cpi	r18, 0x05	; 5
    5994:	31 05       	cpc	r19, r1
    5996:	34 f1       	brlt	.+76     	; 0x59e4 <TMR2_voidSetDelay_ms_OVR+0xda>
    5998:	8f 81       	ldd	r24, Y+7	; 0x07
    599a:	98 85       	ldd	r25, Y+8	; 0x08
    599c:	86 30       	cpi	r24, 0x06	; 6
    599e:	91 05       	cpc	r25, r1
    59a0:	99 f1       	breq	.+102    	; 0x5a08 <TMR2_voidSetDelay_ms_OVR+0xfe>
    59a2:	2f 81       	ldd	r18, Y+7	; 0x07
    59a4:	38 85       	ldd	r19, Y+8	; 0x08
    59a6:	27 30       	cpi	r18, 0x07	; 7
    59a8:	31 05       	cpc	r19, r1
    59aa:	b9 f1       	breq	.+110    	; 0x5a1a <TMR2_voidSetDelay_ms_OVR+0x110>
    59ac:	3e c0       	rjmp	.+124    	; 0x5a2a <TMR2_voidSetDelay_ms_OVR+0x120>
		case TMR2_Prescaler_0:

			break;
		case TMR2_Prescaler_1:
			Noofoverflow = F_CPU_KHZ;
    59ae:	80 e0       	ldi	r24, 0x00	; 0
    59b0:	90 e0       	ldi	r25, 0x00	; 0
    59b2:	aa e7       	ldi	r26, 0x7A	; 122
    59b4:	b6 e4       	ldi	r27, 0x46	; 70
    59b6:	89 83       	std	Y+1, r24	; 0x01
    59b8:	9a 83       	std	Y+2, r25	; 0x02
    59ba:	ab 83       	std	Y+3, r26	; 0x03
    59bc:	bc 83       	std	Y+4, r27	; 0x04
    59be:	35 c0       	rjmp	.+106    	; 0x5a2a <TMR2_voidSetDelay_ms_OVR+0x120>
			break;
		case TMR2_Prescaler_8:
			Noofoverflow = F_CPU_KHZ / 8;
    59c0:	80 e0       	ldi	r24, 0x00	; 0
    59c2:	90 e0       	ldi	r25, 0x00	; 0
    59c4:	aa ef       	ldi	r26, 0xFA	; 250
    59c6:	b4 e4       	ldi	r27, 0x44	; 68
    59c8:	89 83       	std	Y+1, r24	; 0x01
    59ca:	9a 83       	std	Y+2, r25	; 0x02
    59cc:	ab 83       	std	Y+3, r26	; 0x03
    59ce:	bc 83       	std	Y+4, r27	; 0x04
    59d0:	2c c0       	rjmp	.+88     	; 0x5a2a <TMR2_voidSetDelay_ms_OVR+0x120>
			break;
		case TMR2_Prescaler_32:
			Noofoverflow = F_CPU_KHZ / 32;
    59d2:	80 e0       	ldi	r24, 0x00	; 0
    59d4:	90 e0       	ldi	r25, 0x00	; 0
    59d6:	aa ef       	ldi	r26, 0xFA	; 250
    59d8:	b3 e4       	ldi	r27, 0x43	; 67
    59da:	89 83       	std	Y+1, r24	; 0x01
    59dc:	9a 83       	std	Y+2, r25	; 0x02
    59de:	ab 83       	std	Y+3, r26	; 0x03
    59e0:	bc 83       	std	Y+4, r27	; 0x04
    59e2:	23 c0       	rjmp	.+70     	; 0x5a2a <TMR2_voidSetDelay_ms_OVR+0x120>
			break;
		case TMR2_Prescaler_64:
			Noofoverflow = F_CPU_KHZ / 64;
    59e4:	80 e0       	ldi	r24, 0x00	; 0
    59e6:	90 e0       	ldi	r25, 0x00	; 0
    59e8:	aa e7       	ldi	r26, 0x7A	; 122
    59ea:	b3 e4       	ldi	r27, 0x43	; 67
    59ec:	89 83       	std	Y+1, r24	; 0x01
    59ee:	9a 83       	std	Y+2, r25	; 0x02
    59f0:	ab 83       	std	Y+3, r26	; 0x03
    59f2:	bc 83       	std	Y+4, r27	; 0x04
    59f4:	1a c0       	rjmp	.+52     	; 0x5a2a <TMR2_voidSetDelay_ms_OVR+0x120>
			break;
		case TMR2_Prescaler_128:
			Noofoverflow = F_CPU_KHZ / 128;
    59f6:	80 e0       	ldi	r24, 0x00	; 0
    59f8:	90 e0       	ldi	r25, 0x00	; 0
    59fa:	aa ef       	ldi	r26, 0xFA	; 250
    59fc:	b2 e4       	ldi	r27, 0x42	; 66
    59fe:	89 83       	std	Y+1, r24	; 0x01
    5a00:	9a 83       	std	Y+2, r25	; 0x02
    5a02:	ab 83       	std	Y+3, r26	; 0x03
    5a04:	bc 83       	std	Y+4, r27	; 0x04
    5a06:	11 c0       	rjmp	.+34     	; 0x5a2a <TMR2_voidSetDelay_ms_OVR+0x120>
			break;
		case TMR2_Prescaler_256:
			Noofoverflow = F_CPU_KHZ / 256;
    5a08:	80 e0       	ldi	r24, 0x00	; 0
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	a8 e7       	ldi	r26, 0x78	; 120
    5a0e:	b2 e4       	ldi	r27, 0x42	; 66
    5a10:	89 83       	std	Y+1, r24	; 0x01
    5a12:	9a 83       	std	Y+2, r25	; 0x02
    5a14:	ab 83       	std	Y+3, r26	; 0x03
    5a16:	bc 83       	std	Y+4, r27	; 0x04
    5a18:	08 c0       	rjmp	.+16     	; 0x5a2a <TMR2_voidSetDelay_ms_OVR+0x120>
			break;
		case TMR2_Prescaler_1024:
			Noofoverflow = F_CPU_KHZ / 1024;
    5a1a:	80 e0       	ldi	r24, 0x00	; 0
    5a1c:	90 e0       	ldi	r25, 0x00	; 0
    5a1e:	a0 e7       	ldi	r26, 0x70	; 112
    5a20:	b1 e4       	ldi	r27, 0x41	; 65
    5a22:	89 83       	std	Y+1, r24	; 0x01
    5a24:	9a 83       	std	Y+2, r25	; 0x02
    5a26:	ab 83       	std	Y+3, r26	; 0x03
    5a28:	bc 83       	std	Y+4, r27	; 0x04
			break;
		}
		Noofoverflow = (copy_u16DelayTime_ms * Noofoverflow) / (TMR2_OVF_MAX);
    5a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    5a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    5a2e:	cc 01       	movw	r24, r24
    5a30:	a0 e0       	ldi	r26, 0x00	; 0
    5a32:	b0 e0       	ldi	r27, 0x00	; 0
    5a34:	bc 01       	movw	r22, r24
    5a36:	cd 01       	movw	r24, r26
    5a38:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    5a3c:	dc 01       	movw	r26, r24
    5a3e:	cb 01       	movw	r24, r22
    5a40:	bc 01       	movw	r22, r24
    5a42:	cd 01       	movw	r24, r26
    5a44:	29 81       	ldd	r18, Y+1	; 0x01
    5a46:	3a 81       	ldd	r19, Y+2	; 0x02
    5a48:	4b 81       	ldd	r20, Y+3	; 0x03
    5a4a:	5c 81       	ldd	r21, Y+4	; 0x04
    5a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a50:	dc 01       	movw	r26, r24
    5a52:	cb 01       	movw	r24, r22
    5a54:	bc 01       	movw	r22, r24
    5a56:	cd 01       	movw	r24, r26
    5a58:	20 e0       	ldi	r18, 0x00	; 0
    5a5a:	30 e0       	ldi	r19, 0x00	; 0
    5a5c:	40 e8       	ldi	r20, 0x80	; 128
    5a5e:	53 e4       	ldi	r21, 0x43	; 67
    5a60:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5a64:	dc 01       	movw	r26, r24
    5a66:	cb 01       	movw	r24, r22
    5a68:	89 83       	std	Y+1, r24	; 0x01
    5a6a:	9a 83       	std	Y+2, r25	; 0x02
    5a6c:	ab 83       	std	Y+3, r26	; 0x03
    5a6e:	bc 83       	std	Y+4, r27	; 0x04

		PRV_u16NoOfOVF = Noofoverflow;
    5a70:	69 81       	ldd	r22, Y+1	; 0x01
    5a72:	7a 81       	ldd	r23, Y+2	; 0x02
    5a74:	8b 81       	ldd	r24, Y+3	; 0x03
    5a76:	9c 81       	ldd	r25, Y+4	; 0x04
    5a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a7c:	dc 01       	movw	r26, r24
    5a7e:	cb 01       	movw	r24, r22
    5a80:	90 93 fa 05 	sts	0x05FA, r25
    5a84:	80 93 f9 05 	sts	0x05F9, r24
		PRV_u8PreloadValue = (1 - Noofoverflow + PRV_u16NoOfOVF) * TMR2_OVF_MAX;
    5a88:	60 e0       	ldi	r22, 0x00	; 0
    5a8a:	70 e0       	ldi	r23, 0x00	; 0
    5a8c:	80 e8       	ldi	r24, 0x80	; 128
    5a8e:	9f e3       	ldi	r25, 0x3F	; 63
    5a90:	29 81       	ldd	r18, Y+1	; 0x01
    5a92:	3a 81       	ldd	r19, Y+2	; 0x02
    5a94:	4b 81       	ldd	r20, Y+3	; 0x03
    5a96:	5c 81       	ldd	r21, Y+4	; 0x04
    5a98:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5a9c:	dc 01       	movw	r26, r24
    5a9e:	cb 01       	movw	r24, r22
    5aa0:	7c 01       	movw	r14, r24
    5aa2:	8d 01       	movw	r16, r26
    5aa4:	80 91 f9 05 	lds	r24, 0x05F9
    5aa8:	90 91 fa 05 	lds	r25, 0x05FA
    5aac:	cc 01       	movw	r24, r24
    5aae:	a0 e0       	ldi	r26, 0x00	; 0
    5ab0:	b0 e0       	ldi	r27, 0x00	; 0
    5ab2:	bc 01       	movw	r22, r24
    5ab4:	cd 01       	movw	r24, r26
    5ab6:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    5aba:	9b 01       	movw	r18, r22
    5abc:	ac 01       	movw	r20, r24
    5abe:	c8 01       	movw	r24, r16
    5ac0:	b7 01       	movw	r22, r14
    5ac2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5ac6:	dc 01       	movw	r26, r24
    5ac8:	cb 01       	movw	r24, r22
    5aca:	bc 01       	movw	r22, r24
    5acc:	cd 01       	movw	r24, r26
    5ace:	20 e0       	ldi	r18, 0x00	; 0
    5ad0:	30 e0       	ldi	r19, 0x00	; 0
    5ad2:	40 e8       	ldi	r20, 0x80	; 128
    5ad4:	53 e4       	ldi	r21, 0x43	; 67
    5ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ada:	dc 01       	movw	r26, r24
    5adc:	cb 01       	movw	r24, r22
    5ade:	bc 01       	movw	r22, r24
    5ae0:	cd 01       	movw	r24, r26
    5ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ae6:	dc 01       	movw	r26, r24
    5ae8:	cb 01       	movw	r24, r22
    5aea:	80 93 f8 05 	sts	0x05F8, r24

		PRV_u16NoOfOVF++;
    5aee:	80 91 f9 05 	lds	r24, 0x05F9
    5af2:	90 91 fa 05 	lds	r25, 0x05FA
    5af6:	01 96       	adiw	r24, 0x01	; 1
    5af8:	90 93 fa 05 	sts	0x05FA, r25
    5afc:	80 93 f9 05 	sts	0x05F9, r24

		//Set Preload
		TCNT2_REG = PRV_u8PreloadValue;
    5b00:	e4 e4       	ldi	r30, 0x44	; 68
    5b02:	f0 e0       	ldi	r31, 0x00	; 0
    5b04:	80 91 f8 05 	lds	r24, 0x05F8
    5b08:	80 83       	st	Z, r24
	}
}
    5b0a:	28 96       	adiw	r28, 0x08	; 8
    5b0c:	0f b6       	in	r0, 0x3f	; 63
    5b0e:	f8 94       	cli
    5b10:	de bf       	out	0x3e, r29	; 62
    5b12:	0f be       	out	0x3f, r0	; 63
    5b14:	cd bf       	out	0x3d, r28	; 61
    5b16:	cf 91       	pop	r28
    5b18:	df 91       	pop	r29
    5b1a:	1f 91       	pop	r17
    5b1c:	0f 91       	pop	r16
    5b1e:	ff 90       	pop	r15
    5b20:	ef 90       	pop	r14
    5b22:	08 95       	ret

00005b24 <TMR2_voidSetDelay_ms_CTC>:
void TMR2_voidSetDelay_ms_CTC(u16 copy_u16DelayTime_ms) {
    5b24:	df 93       	push	r29
    5b26:	cf 93       	push	r28
    5b28:	00 d0       	rcall	.+0      	; 0x5b2a <TMR2_voidSetDelay_ms_CTC+0x6>
    5b2a:	00 d0       	rcall	.+0      	; 0x5b2c <TMR2_voidSetDelay_ms_CTC+0x8>
    5b2c:	cd b7       	in	r28, 0x3d	; 61
    5b2e:	de b7       	in	r29, 0x3e	; 62
    5b30:	9a 83       	std	Y+2, r25	; 0x02
    5b32:	89 83       	std	Y+1, r24	; 0x01
	switch (PRV_tClockSelect) {
    5b34:	80 91 ff 05 	lds	r24, 0x05FF
    5b38:	28 2f       	mov	r18, r24
    5b3a:	30 e0       	ldi	r19, 0x00	; 0
    5b3c:	3c 83       	std	Y+4, r19	; 0x04
    5b3e:	2b 83       	std	Y+3, r18	; 0x03
    5b40:	4b 81       	ldd	r20, Y+3	; 0x03
    5b42:	5c 81       	ldd	r21, Y+4	; 0x04
    5b44:	43 30       	cpi	r20, 0x03	; 3
    5b46:	51 05       	cpc	r21, r1
    5b48:	e1 f1       	breq	.+120    	; 0x5bc2 <TMR2_voidSetDelay_ms_CTC+0x9e>
    5b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    5b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    5b4e:	84 30       	cpi	r24, 0x04	; 4
    5b50:	91 05       	cpc	r25, r1
    5b52:	7c f4       	brge	.+30     	; 0x5b72 <TMR2_voidSetDelay_ms_CTC+0x4e>
    5b54:	2b 81       	ldd	r18, Y+3	; 0x03
    5b56:	3c 81       	ldd	r19, Y+4	; 0x04
    5b58:	21 30       	cpi	r18, 0x01	; 1
    5b5a:	31 05       	cpc	r19, r1
    5b5c:	21 f1       	breq	.+72     	; 0x5ba6 <TMR2_voidSetDelay_ms_CTC+0x82>
    5b5e:	4b 81       	ldd	r20, Y+3	; 0x03
    5b60:	5c 81       	ldd	r21, Y+4	; 0x04
    5b62:	42 30       	cpi	r20, 0x02	; 2
    5b64:	51 05       	cpc	r21, r1
    5b66:	34 f5       	brge	.+76     	; 0x5bb4 <TMR2_voidSetDelay_ms_CTC+0x90>
    5b68:	8b 81       	ldd	r24, Y+3	; 0x03
    5b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    5b6c:	00 97       	sbiw	r24, 0x00	; 0
    5b6e:	b1 f0       	breq	.+44     	; 0x5b9c <TMR2_voidSetDelay_ms_CTC+0x78>
    5b70:	4a c0       	rjmp	.+148    	; 0x5c06 <TMR2_voidSetDelay_ms_CTC+0xe2>
    5b72:	2b 81       	ldd	r18, Y+3	; 0x03
    5b74:	3c 81       	ldd	r19, Y+4	; 0x04
    5b76:	25 30       	cpi	r18, 0x05	; 5
    5b78:	31 05       	cpc	r19, r1
    5b7a:	89 f1       	breq	.+98     	; 0x5bde <TMR2_voidSetDelay_ms_CTC+0xba>
    5b7c:	4b 81       	ldd	r20, Y+3	; 0x03
    5b7e:	5c 81       	ldd	r21, Y+4	; 0x04
    5b80:	45 30       	cpi	r20, 0x05	; 5
    5b82:	51 05       	cpc	r21, r1
    5b84:	2c f1       	brlt	.+74     	; 0x5bd0 <TMR2_voidSetDelay_ms_CTC+0xac>
    5b86:	8b 81       	ldd	r24, Y+3	; 0x03
    5b88:	9c 81       	ldd	r25, Y+4	; 0x04
    5b8a:	86 30       	cpi	r24, 0x06	; 6
    5b8c:	91 05       	cpc	r25, r1
    5b8e:	71 f1       	breq	.+92     	; 0x5bec <TMR2_voidSetDelay_ms_CTC+0xc8>
    5b90:	2b 81       	ldd	r18, Y+3	; 0x03
    5b92:	3c 81       	ldd	r19, Y+4	; 0x04
    5b94:	27 30       	cpi	r18, 0x07	; 7
    5b96:	31 05       	cpc	r19, r1
    5b98:	81 f1       	breq	.+96     	; 0x5bfa <TMR2_voidSetDelay_ms_CTC+0xd6>
    5b9a:	35 c0       	rjmp	.+106    	; 0x5c06 <TMR2_voidSetDelay_ms_CTC+0xe2>
		case TMR2_Prescaler_0:
				PRV_u16No_Of_Interrupts_CTC = 0;
    5b9c:	10 92 f7 05 	sts	0x05F7, r1
    5ba0:	10 92 f6 05 	sts	0x05F6, r1
    5ba4:	30 c0       	rjmp	.+96     	; 0x5c06 <TMR2_voidSetDelay_ms_CTC+0xe2>
				break;
		case TMR2_Prescaler_1:
			PRV_u16No_Of_Interrupts_CTC = F_CPU_KHZ;
    5ba6:	80 e8       	ldi	r24, 0x80	; 128
    5ba8:	9e e3       	ldi	r25, 0x3E	; 62
    5baa:	90 93 f7 05 	sts	0x05F7, r25
    5bae:	80 93 f6 05 	sts	0x05F6, r24
    5bb2:	29 c0       	rjmp	.+82     	; 0x5c06 <TMR2_voidSetDelay_ms_CTC+0xe2>
			break;
		case TMR2_Prescaler_8:
			PRV_u16No_Of_Interrupts_CTC = (F_CPU_KHZ / 8);
    5bb4:	80 ed       	ldi	r24, 0xD0	; 208
    5bb6:	97 e0       	ldi	r25, 0x07	; 7
    5bb8:	90 93 f7 05 	sts	0x05F7, r25
    5bbc:	80 93 f6 05 	sts	0x05F6, r24
    5bc0:	22 c0       	rjmp	.+68     	; 0x5c06 <TMR2_voidSetDelay_ms_CTC+0xe2>
			break;
		case TMR2_Prescaler_32:
			PRV_u16No_Of_Interrupts_CTC = (F_CPU_KHZ / 32);
    5bc2:	84 ef       	ldi	r24, 0xF4	; 244
    5bc4:	91 e0       	ldi	r25, 0x01	; 1
    5bc6:	90 93 f7 05 	sts	0x05F7, r25
    5bca:	80 93 f6 05 	sts	0x05F6, r24
    5bce:	1b c0       	rjmp	.+54     	; 0x5c06 <TMR2_voidSetDelay_ms_CTC+0xe2>
			break;
		case TMR2_Prescaler_64:
			PRV_u16No_Of_Interrupts_CTC = (F_CPU_KHZ / 64);
    5bd0:	8a ef       	ldi	r24, 0xFA	; 250
    5bd2:	90 e0       	ldi	r25, 0x00	; 0
    5bd4:	90 93 f7 05 	sts	0x05F7, r25
    5bd8:	80 93 f6 05 	sts	0x05F6, r24
    5bdc:	14 c0       	rjmp	.+40     	; 0x5c06 <TMR2_voidSetDelay_ms_CTC+0xe2>
			break;
		case TMR2_Prescaler_128:
			PRV_u16No_Of_Interrupts_CTC = (F_CPU_KHZ / 128);
    5bde:	8d e7       	ldi	r24, 0x7D	; 125
    5be0:	90 e0       	ldi	r25, 0x00	; 0
    5be2:	90 93 f7 05 	sts	0x05F7, r25
    5be6:	80 93 f6 05 	sts	0x05F6, r24
    5bea:	0d c0       	rjmp	.+26     	; 0x5c06 <TMR2_voidSetDelay_ms_CTC+0xe2>
			break;
		case TMR2_Prescaler_256:
			PRV_u16No_Of_Interrupts_CTC = (F_CPU_KHZ / 256);
    5bec:	8e e3       	ldi	r24, 0x3E	; 62
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	90 93 f7 05 	sts	0x05F7, r25
    5bf4:	80 93 f6 05 	sts	0x05F6, r24
    5bf8:	06 c0       	rjmp	.+12     	; 0x5c06 <TMR2_voidSetDelay_ms_CTC+0xe2>
			break;
		case TMR2_Prescaler_1024:
			PRV_u16No_Of_Interrupts_CTC = (F_CPU_KHZ / 1024);
    5bfa:	8f e0       	ldi	r24, 0x0F	; 15
    5bfc:	90 e0       	ldi	r25, 0x00	; 0
    5bfe:	90 93 f7 05 	sts	0x05F7, r25
    5c02:	80 93 f6 05 	sts	0x05F6, r24
			break;
		}

		PRV_u16No_Of_Interrupts_CTC /= (TMR2_COMPARE_VALUE + 1);
    5c06:	80 91 f6 05 	lds	r24, 0x05F6
    5c0a:	90 91 f7 05 	lds	r25, 0x05F7
    5c0e:	2a ef       	ldi	r18, 0xFA	; 250
    5c10:	30 e0       	ldi	r19, 0x00	; 0
    5c12:	b9 01       	movw	r22, r18
    5c14:	0e 94 91 5b 	call	0xb722	; 0xb722 <__udivmodhi4>
    5c18:	cb 01       	movw	r24, r22
    5c1a:	90 93 f7 05 	sts	0x05F7, r25
    5c1e:	80 93 f6 05 	sts	0x05F6, r24

		PRV_u16No_Of_Interrupts_CTC *= copy_u16DelayTime_ms;
    5c22:	20 91 f6 05 	lds	r18, 0x05F6
    5c26:	30 91 f7 05 	lds	r19, 0x05F7
    5c2a:	89 81       	ldd	r24, Y+1	; 0x01
    5c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c2e:	ac 01       	movw	r20, r24
    5c30:	24 9f       	mul	r18, r20
    5c32:	c0 01       	movw	r24, r0
    5c34:	25 9f       	mul	r18, r21
    5c36:	90 0d       	add	r25, r0
    5c38:	34 9f       	mul	r19, r20
    5c3a:	90 0d       	add	r25, r0
    5c3c:	11 24       	eor	r1, r1
    5c3e:	90 93 f7 05 	sts	0x05F7, r25
    5c42:	80 93 f6 05 	sts	0x05F6, r24

}
    5c46:	0f 90       	pop	r0
    5c48:	0f 90       	pop	r0
    5c4a:	0f 90       	pop	r0
    5c4c:	0f 90       	pop	r0
    5c4e:	cf 91       	pop	r28
    5c50:	df 91       	pop	r29
    5c52:	08 95       	ret

00005c54 <TMR2_voidSetCallBackOVR>:

void TMR2_voidSetCallBackOVR(void (*copy_pFunAction)(void)) {
    5c54:	df 93       	push	r29
    5c56:	cf 93       	push	r28
    5c58:	00 d0       	rcall	.+0      	; 0x5c5a <TMR2_voidSetCallBackOVR+0x6>
    5c5a:	cd b7       	in	r28, 0x3d	; 61
    5c5c:	de b7       	in	r29, 0x3e	; 62
    5c5e:	9a 83       	std	Y+2, r25	; 0x02
    5c60:	89 83       	std	Y+1, r24	; 0x01
	if (copy_pFunAction != NULL) {
    5c62:	89 81       	ldd	r24, Y+1	; 0x01
    5c64:	9a 81       	ldd	r25, Y+2	; 0x02
    5c66:	00 97       	sbiw	r24, 0x00	; 0
    5c68:	31 f0       	breq	.+12     	; 0x5c76 <TMR2_voidSetCallBackOVR+0x22>
		PRV_pFunCallBackOVR = copy_pFunAction;
    5c6a:	89 81       	ldd	r24, Y+1	; 0x01
    5c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c6e:	90 93 f3 05 	sts	0x05F3, r25
    5c72:	80 93 f2 05 	sts	0x05F2, r24
	}
}
    5c76:	0f 90       	pop	r0
    5c78:	0f 90       	pop	r0
    5c7a:	cf 91       	pop	r28
    5c7c:	df 91       	pop	r29
    5c7e:	08 95       	ret

00005c80 <TMR2_voidSetCallBackCTC>:

void TMR2_voidSetCallBackCTC(void (*copy_pFunAction)(void)) {
    5c80:	df 93       	push	r29
    5c82:	cf 93       	push	r28
    5c84:	00 d0       	rcall	.+0      	; 0x5c86 <TMR2_voidSetCallBackCTC+0x6>
    5c86:	cd b7       	in	r28, 0x3d	; 61
    5c88:	de b7       	in	r29, 0x3e	; 62
    5c8a:	9a 83       	std	Y+2, r25	; 0x02
    5c8c:	89 83       	std	Y+1, r24	; 0x01
	if (copy_pFunAction != NULL) {
    5c8e:	89 81       	ldd	r24, Y+1	; 0x01
    5c90:	9a 81       	ldd	r25, Y+2	; 0x02
    5c92:	00 97       	sbiw	r24, 0x00	; 0
    5c94:	31 f0       	breq	.+12     	; 0x5ca2 <TMR2_voidSetCallBackCTC+0x22>
		PRV_pFunCallBackCTC = copy_pFunAction;
    5c96:	89 81       	ldd	r24, Y+1	; 0x01
    5c98:	9a 81       	ldd	r25, Y+2	; 0x02
    5c9a:	90 93 f5 05 	sts	0x05F5, r25
    5c9e:	80 93 f4 05 	sts	0x05F4, r24
	}
}
    5ca2:	0f 90       	pop	r0
    5ca4:	0f 90       	pop	r0
    5ca6:	cf 91       	pop	r28
    5ca8:	df 91       	pop	r29
    5caa:	08 95       	ret

00005cac <__vector_5>:

//Overflow ISR
void __vector_5(void) __attribute__ ((signal));
void __vector_5(void) {
    5cac:	1f 92       	push	r1
    5cae:	0f 92       	push	r0
    5cb0:	0f b6       	in	r0, 0x3f	; 63
    5cb2:	0f 92       	push	r0
    5cb4:	11 24       	eor	r1, r1
    5cb6:	2f 93       	push	r18
    5cb8:	3f 93       	push	r19
    5cba:	4f 93       	push	r20
    5cbc:	5f 93       	push	r21
    5cbe:	6f 93       	push	r22
    5cc0:	7f 93       	push	r23
    5cc2:	8f 93       	push	r24
    5cc4:	9f 93       	push	r25
    5cc6:	af 93       	push	r26
    5cc8:	bf 93       	push	r27
    5cca:	ef 93       	push	r30
    5ccc:	ff 93       	push	r31
    5cce:	df 93       	push	r29
    5cd0:	cf 93       	push	r28
    5cd2:	cd b7       	in	r28, 0x3d	; 61
    5cd4:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16OVFCounter = 0;
	if (PRV_pFunCallBackOVR != NULL)
    5cd6:	80 91 f2 05 	lds	r24, 0x05F2
    5cda:	90 91 f3 05 	lds	r25, 0x05F3
    5cde:	00 97       	sbiw	r24, 0x00	; 0
    5ce0:	49 f0       	breq	.+18     	; 0x5cf4 <__vector_5+0x48>

		//Increase Counter
		local_u16OVFCounter++;
    5ce2:	80 91 fb 05 	lds	r24, 0x05FB
    5ce6:	90 91 fc 05 	lds	r25, 0x05FC
    5cea:	01 96       	adiw	r24, 0x01	; 1
    5cec:	90 93 fc 05 	sts	0x05FC, r25
    5cf0:	80 93 fb 05 	sts	0x05FB, r24
	if (local_u16OVFCounter == PRV_u16NoOfOVF) {
    5cf4:	20 91 fb 05 	lds	r18, 0x05FB
    5cf8:	30 91 fc 05 	lds	r19, 0x05FC
    5cfc:	80 91 f9 05 	lds	r24, 0x05F9
    5d00:	90 91 fa 05 	lds	r25, 0x05FA
    5d04:	28 17       	cp	r18, r24
    5d06:	39 07       	cpc	r19, r25
    5d08:	71 f4       	brne	.+28     	; 0x5d26 <__vector_5+0x7a>
		//set Preload Value
		TCNT2_REG = PRV_u8PreloadValue;
    5d0a:	e4 e4       	ldi	r30, 0x44	; 68
    5d0c:	f0 e0       	ldi	r31, 0x00	; 0
    5d0e:	80 91 f8 05 	lds	r24, 0x05F8
    5d12:	80 83       	st	Z, r24

		//Reset Counter
		local_u16OVFCounter = 0;
    5d14:	10 92 fc 05 	sts	0x05FC, r1
    5d18:	10 92 fb 05 	sts	0x05FB, r1

		//Call Function in Main
		PRV_pFunCallBackOVR();
    5d1c:	e0 91 f2 05 	lds	r30, 0x05F2
    5d20:	f0 91 f3 05 	lds	r31, 0x05F3
    5d24:	09 95       	icall
	}
}
    5d26:	cf 91       	pop	r28
    5d28:	df 91       	pop	r29
    5d2a:	ff 91       	pop	r31
    5d2c:	ef 91       	pop	r30
    5d2e:	bf 91       	pop	r27
    5d30:	af 91       	pop	r26
    5d32:	9f 91       	pop	r25
    5d34:	8f 91       	pop	r24
    5d36:	7f 91       	pop	r23
    5d38:	6f 91       	pop	r22
    5d3a:	5f 91       	pop	r21
    5d3c:	4f 91       	pop	r20
    5d3e:	3f 91       	pop	r19
    5d40:	2f 91       	pop	r18
    5d42:	0f 90       	pop	r0
    5d44:	0f be       	out	0x3f, r0	; 63
    5d46:	0f 90       	pop	r0
    5d48:	1f 90       	pop	r1
    5d4a:	18 95       	reti

00005d4c <__vector_4>:

//CTC ISR
void __vector_4(void) __attribute__ ((signal));
void __vector_4(void) {
    5d4c:	1f 92       	push	r1
    5d4e:	0f 92       	push	r0
    5d50:	0f b6       	in	r0, 0x3f	; 63
    5d52:	0f 92       	push	r0
    5d54:	11 24       	eor	r1, r1
    5d56:	2f 93       	push	r18
    5d58:	3f 93       	push	r19
    5d5a:	4f 93       	push	r20
    5d5c:	5f 93       	push	r21
    5d5e:	6f 93       	push	r22
    5d60:	7f 93       	push	r23
    5d62:	8f 93       	push	r24
    5d64:	9f 93       	push	r25
    5d66:	af 93       	push	r26
    5d68:	bf 93       	push	r27
    5d6a:	ef 93       	push	r30
    5d6c:	ff 93       	push	r31
    5d6e:	df 93       	push	r29
    5d70:	cf 93       	push	r28
    5d72:	cd b7       	in	r28, 0x3d	; 61
    5d74:	de b7       	in	r29, 0x3e	; 62
	static u16 counter = 0;
	if (PRV_pFunCallBackCTC != NULL)
    5d76:	80 91 f4 05 	lds	r24, 0x05F4
    5d7a:	90 91 f5 05 	lds	r25, 0x05F5
    5d7e:	00 97       	sbiw	r24, 0x00	; 0
    5d80:	49 f0       	breq	.+18     	; 0x5d94 <__vector_4+0x48>

		counter++;
    5d82:	80 91 fd 05 	lds	r24, 0x05FD
    5d86:	90 91 fe 05 	lds	r25, 0x05FE
    5d8a:	01 96       	adiw	r24, 0x01	; 1
    5d8c:	90 93 fe 05 	sts	0x05FE, r25
    5d90:	80 93 fd 05 	sts	0x05FD, r24
	if (counter == PRV_u16No_Of_Interrupts_CTC) {
    5d94:	20 91 fd 05 	lds	r18, 0x05FD
    5d98:	30 91 fe 05 	lds	r19, 0x05FE
    5d9c:	80 91 f6 05 	lds	r24, 0x05F6
    5da0:	90 91 f7 05 	lds	r25, 0x05F7
    5da4:	28 17       	cp	r18, r24
    5da6:	39 07       	cpc	r19, r25
    5da8:	49 f4       	brne	.+18     	; 0x5dbc <__vector_4+0x70>

		counter = 0;
    5daa:	10 92 fe 05 	sts	0x05FE, r1
    5dae:	10 92 fd 05 	sts	0x05FD, r1

		PRV_pFunCallBackCTC();
    5db2:	e0 91 f4 05 	lds	r30, 0x05F4
    5db6:	f0 91 f5 05 	lds	r31, 0x05F5
    5dba:	09 95       	icall
	}
}
    5dbc:	cf 91       	pop	r28
    5dbe:	df 91       	pop	r29
    5dc0:	ff 91       	pop	r31
    5dc2:	ef 91       	pop	r30
    5dc4:	bf 91       	pop	r27
    5dc6:	af 91       	pop	r26
    5dc8:	9f 91       	pop	r25
    5dca:	8f 91       	pop	r24
    5dcc:	7f 91       	pop	r23
    5dce:	6f 91       	pop	r22
    5dd0:	5f 91       	pop	r21
    5dd2:	4f 91       	pop	r20
    5dd4:	3f 91       	pop	r19
    5dd6:	2f 91       	pop	r18
    5dd8:	0f 90       	pop	r0
    5dda:	0f be       	out	0x3f, r0	; 63
    5ddc:	0f 90       	pop	r0
    5dde:	1f 90       	pop	r1
    5de0:	18 95       	reti

00005de2 <TMR0_voidInit>:
static void (*PRV_pFunCallBackOVF)(void) = NULL;
static void (*PRV_pFunCallBackCTC)(void) = NULL;
static u16 PRV_u16ctcCounter;

void TMR0_voidInit (void)
{
    5de2:	df 93       	push	r29
    5de4:	cf 93       	push	r28
    5de6:	cd b7       	in	r28, 0x3d	; 61
    5de8:	de b7       	in	r29, 0x3e	; 62
	#if TMR0_MODE == TMR0_NORMAL_MODE
	//Select Normal Mode
	CLR_BIT(TCCR0_REG,WGM00);
    5dea:	a3 e5       	ldi	r26, 0x53	; 83
    5dec:	b0 e0       	ldi	r27, 0x00	; 0
    5dee:	e3 e5       	ldi	r30, 0x53	; 83
    5df0:	f0 e0       	ldi	r31, 0x00	; 0
    5df2:	80 81       	ld	r24, Z
    5df4:	8f 7b       	andi	r24, 0xBF	; 191
    5df6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM01);
    5df8:	a3 e5       	ldi	r26, 0x53	; 83
    5dfa:	b0 e0       	ldi	r27, 0x00	; 0
    5dfc:	e3 e5       	ldi	r30, 0x53	; 83
    5dfe:	f0 e0       	ldi	r31, 0x00	; 0
    5e00:	80 81       	ld	r24, Z
    5e02:	87 7f       	andi	r24, 0xF7	; 247
    5e04:	8c 93       	st	X, r24
	//Enable Overflow Interrupt
	SET_BIT(TIMSK_REG,TOIE0);
    5e06:	a9 e5       	ldi	r26, 0x59	; 89
    5e08:	b0 e0       	ldi	r27, 0x00	; 0
    5e0a:	e9 e5       	ldi	r30, 0x59	; 89
    5e0c:	f0 e0       	ldi	r31, 0x00	; 0
    5e0e:	80 81       	ld	r24, Z
    5e10:	81 60       	ori	r24, 0x01	; 1
    5e12:	8c 93       	st	X, r24
	//Set Preload Value
	TCNT0_REG = TMR0_PRELOAD_VALUE;
    5e14:	e2 e5       	ldi	r30, 0x52	; 82
    5e16:	f0 e0       	ldi	r31, 0x00	; 0
    5e18:	8a e0       	ldi	r24, 0x0A	; 10
    5e1a:	80 83       	st	Z, r24
	SET_BIT(TIMSK_REG,OCIE0);
	//Init Timer With Output Compare Value
	OCR0_REG = TMR0_COMPARE_VALUE;
	#endif
	
}
    5e1c:	cf 91       	pop	r28
    5e1e:	df 91       	pop	r29
    5e20:	08 95       	ret

00005e22 <TMR0_voidStart>:
void TMR0_voidStart (void)
{
    5e22:	df 93       	push	r29
    5e24:	cf 93       	push	r28
    5e26:	cd b7       	in	r28, 0x3d	; 61
    5e28:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0_REG,CS00);
	SET_BIT(TCCR0_REG,CS01);
	CLR_BIT(TCCR0_REG,CS02);
	
	#elif TMR0_PRESCALER_VALUE == TMR0_64_PRESCALER
	SET_BIT(TCCR0_REG,CS00);
    5e2a:	a3 e5       	ldi	r26, 0x53	; 83
    5e2c:	b0 e0       	ldi	r27, 0x00	; 0
    5e2e:	e3 e5       	ldi	r30, 0x53	; 83
    5e30:	f0 e0       	ldi	r31, 0x00	; 0
    5e32:	80 81       	ld	r24, Z
    5e34:	81 60       	ori	r24, 0x01	; 1
    5e36:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,CS01);
    5e38:	a3 e5       	ldi	r26, 0x53	; 83
    5e3a:	b0 e0       	ldi	r27, 0x00	; 0
    5e3c:	e3 e5       	ldi	r30, 0x53	; 83
    5e3e:	f0 e0       	ldi	r31, 0x00	; 0
    5e40:	80 81       	ld	r24, Z
    5e42:	82 60       	ori	r24, 0x02	; 2
    5e44:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS02);
    5e46:	a3 e5       	ldi	r26, 0x53	; 83
    5e48:	b0 e0       	ldi	r27, 0x00	; 0
    5e4a:	e3 e5       	ldi	r30, 0x53	; 83
    5e4c:	f0 e0       	ldi	r31, 0x00	; 0
    5e4e:	80 81       	ld	r24, Z
    5e50:	8b 7f       	andi	r24, 0xFB	; 251
    5e52:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS01);
	SET_BIT(TCCR0_REG,CS02);
#endif
	
	
}
    5e54:	cf 91       	pop	r28
    5e56:	df 91       	pop	r29
    5e58:	08 95       	ret

00005e5a <TMR0_voidStop>:
void TMR0_voidStop (void)
{
    5e5a:	df 93       	push	r29
    5e5c:	cf 93       	push	r28
    5e5e:	cd b7       	in	r28, 0x3d	; 61
    5e60:	de b7       	in	r29, 0x3e	; 62
	//No Clock Source (Timer/Counter Stopped)
	CLR_BIT(TCCR0_REG,CS00);
    5e62:	a3 e5       	ldi	r26, 0x53	; 83
    5e64:	b0 e0       	ldi	r27, 0x00	; 0
    5e66:	e3 e5       	ldi	r30, 0x53	; 83
    5e68:	f0 e0       	ldi	r31, 0x00	; 0
    5e6a:	80 81       	ld	r24, Z
    5e6c:	8e 7f       	andi	r24, 0xFE	; 254
    5e6e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS01);
    5e70:	a3 e5       	ldi	r26, 0x53	; 83
    5e72:	b0 e0       	ldi	r27, 0x00	; 0
    5e74:	e3 e5       	ldi	r30, 0x53	; 83
    5e76:	f0 e0       	ldi	r31, 0x00	; 0
    5e78:	80 81       	ld	r24, Z
    5e7a:	8d 7f       	andi	r24, 0xFD	; 253
    5e7c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS02);
    5e7e:	a3 e5       	ldi	r26, 0x53	; 83
    5e80:	b0 e0       	ldi	r27, 0x00	; 0
    5e82:	e3 e5       	ldi	r30, 0x53	; 83
    5e84:	f0 e0       	ldi	r31, 0x00	; 0
    5e86:	80 81       	ld	r24, Z
    5e88:	8b 7f       	andi	r24, 0xFB	; 251
    5e8a:	8c 93       	st	X, r24
}
    5e8c:	cf 91       	pop	r28
    5e8e:	df 91       	pop	r29
    5e90:	08 95       	ret

00005e92 <TMR0_voidSetDelay_ms_UsingCTC>:
void TMR0_voidSetDelay_ms_UsingCTC(u16 copy_u16Delay_ms)
{
    5e92:	df 93       	push	r29
    5e94:	cf 93       	push	r28
    5e96:	00 d0       	rcall	.+0      	; 0x5e98 <TMR0_voidSetDelay_ms_UsingCTC+0x6>
    5e98:	cd b7       	in	r28, 0x3d	; 61
    5e9a:	de b7       	in	r29, 0x3e	; 62
    5e9c:	9a 83       	std	Y+2, r25	; 0x02
    5e9e:	89 83       	std	Y+1, r24	; 0x01
	//Under Condition TickTime = 4us
	OCR0_REG = TMR0_COMPARE_VALUE;
    5ea0:	ec e5       	ldi	r30, 0x5C	; 92
    5ea2:	f0 e0       	ldi	r31, 0x00	; 0
    5ea4:	89 ef       	ldi	r24, 0xF9	; 249
    5ea6:	80 83       	st	Z, r24
	copy_u16Delay_ms = PRV_u16ctcCounter;
    5ea8:	80 91 08 06 	lds	r24, 0x0608
    5eac:	90 91 09 06 	lds	r25, 0x0609
    5eb0:	9a 83       	std	Y+2, r25	; 0x02
    5eb2:	89 83       	std	Y+1, r24	; 0x01
}
    5eb4:	0f 90       	pop	r0
    5eb6:	0f 90       	pop	r0
    5eb8:	cf 91       	pop	r28
    5eba:	df 91       	pop	r29
    5ebc:	08 95       	ret

00005ebe <TMR0_voidSetCallBackOVF>:

void TMR0_voidSetCallBackOVF      (void(*copy_pFunAction)(void))
{
    5ebe:	df 93       	push	r29
    5ec0:	cf 93       	push	r28
    5ec2:	00 d0       	rcall	.+0      	; 0x5ec4 <TMR0_voidSetCallBackOVF+0x6>
    5ec4:	cd b7       	in	r28, 0x3d	; 61
    5ec6:	de b7       	in	r29, 0x3e	; 62
    5ec8:	9a 83       	std	Y+2, r25	; 0x02
    5eca:	89 83       	std	Y+1, r24	; 0x01
	if (copy_pFunAction !=NULL)
    5ecc:	89 81       	ldd	r24, Y+1	; 0x01
    5ece:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed0:	00 97       	sbiw	r24, 0x00	; 0
    5ed2:	31 f0       	breq	.+12     	; 0x5ee0 <TMR0_voidSetCallBackOVF+0x22>
	{
		PRV_pFunCallBackOVF = copy_pFunAction;
    5ed4:	89 81       	ldd	r24, Y+1	; 0x01
    5ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed8:	90 93 01 06 	sts	0x0601, r25
    5edc:	80 93 00 06 	sts	0x0600, r24
	} 
	else
	{
		//Return Error Statement
	}
}
    5ee0:	0f 90       	pop	r0
    5ee2:	0f 90       	pop	r0
    5ee4:	cf 91       	pop	r28
    5ee6:	df 91       	pop	r29
    5ee8:	08 95       	ret

00005eea <TMR0_voidSetCallBackCTC>:
void TMR0_voidSetCallBackCTC      (void(*copy_pFunAction)(void))
{
    5eea:	df 93       	push	r29
    5eec:	cf 93       	push	r28
    5eee:	00 d0       	rcall	.+0      	; 0x5ef0 <TMR0_voidSetCallBackCTC+0x6>
    5ef0:	cd b7       	in	r28, 0x3d	; 61
    5ef2:	de b7       	in	r29, 0x3e	; 62
    5ef4:	9a 83       	std	Y+2, r25	; 0x02
    5ef6:	89 83       	std	Y+1, r24	; 0x01
	if (copy_pFunAction != NULL)
    5ef8:	89 81       	ldd	r24, Y+1	; 0x01
    5efa:	9a 81       	ldd	r25, Y+2	; 0x02
    5efc:	00 97       	sbiw	r24, 0x00	; 0
    5efe:	31 f0       	breq	.+12     	; 0x5f0c <TMR0_voidSetCallBackCTC+0x22>
	{
		PRV_pFunCallBackCTC = copy_pFunAction;
    5f00:	89 81       	ldd	r24, Y+1	; 0x01
    5f02:	9a 81       	ldd	r25, Y+2	; 0x02
    5f04:	90 93 03 06 	sts	0x0603, r25
    5f08:	80 93 02 06 	sts	0x0602, r24
	} 
	else
	{
		//Return Error Statement
	}
}
    5f0c:	0f 90       	pop	r0
    5f0e:	0f 90       	pop	r0
    5f10:	cf 91       	pop	r28
    5f12:	df 91       	pop	r29
    5f14:	08 95       	ret

00005f16 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    5f16:	1f 92       	push	r1
    5f18:	0f 92       	push	r0
    5f1a:	0f b6       	in	r0, 0x3f	; 63
    5f1c:	0f 92       	push	r0
    5f1e:	11 24       	eor	r1, r1
    5f20:	2f 93       	push	r18
    5f22:	3f 93       	push	r19
    5f24:	4f 93       	push	r20
    5f26:	5f 93       	push	r21
    5f28:	6f 93       	push	r22
    5f2a:	7f 93       	push	r23
    5f2c:	8f 93       	push	r24
    5f2e:	9f 93       	push	r25
    5f30:	af 93       	push	r26
    5f32:	bf 93       	push	r27
    5f34:	ef 93       	push	r30
    5f36:	ff 93       	push	r31
    5f38:	df 93       	push	r29
    5f3a:	cf 93       	push	r28
    5f3c:	cd b7       	in	r28, 0x3d	; 61
    5f3e:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ctcCounter=0;
	local_u16ctcCounter++;
    5f40:	80 91 04 06 	lds	r24, 0x0604
    5f44:	90 91 05 06 	lds	r25, 0x0605
    5f48:	01 96       	adiw	r24, 0x01	; 1
    5f4a:	90 93 05 06 	sts	0x0605, r25
    5f4e:	80 93 04 06 	sts	0x0604, r24
	if (local_u16ctcCounter = PRV_u16ctcCounter)
    5f52:	80 91 08 06 	lds	r24, 0x0608
    5f56:	90 91 09 06 	lds	r25, 0x0609
    5f5a:	90 93 05 06 	sts	0x0605, r25
    5f5e:	80 93 04 06 	sts	0x0604, r24
    5f62:	80 91 04 06 	lds	r24, 0x0604
    5f66:	90 91 05 06 	lds	r25, 0x0605
    5f6a:	00 97       	sbiw	r24, 0x00	; 0
    5f6c:	49 f0       	breq	.+18     	; 0x5f80 <__vector_10+0x6a>
	{
		//Clear Counter
		local_u16ctcCounter = 0;
    5f6e:	10 92 05 06 	sts	0x0605, r1
    5f72:	10 92 04 06 	sts	0x0604, r1
		//Call Action
		PRV_pFunCallBackCTC();
    5f76:	e0 91 02 06 	lds	r30, 0x0602
    5f7a:	f0 91 03 06 	lds	r31, 0x0603
    5f7e:	09 95       	icall
	}
}
    5f80:	cf 91       	pop	r28
    5f82:	df 91       	pop	r29
    5f84:	ff 91       	pop	r31
    5f86:	ef 91       	pop	r30
    5f88:	bf 91       	pop	r27
    5f8a:	af 91       	pop	r26
    5f8c:	9f 91       	pop	r25
    5f8e:	8f 91       	pop	r24
    5f90:	7f 91       	pop	r23
    5f92:	6f 91       	pop	r22
    5f94:	5f 91       	pop	r21
    5f96:	4f 91       	pop	r20
    5f98:	3f 91       	pop	r19
    5f9a:	2f 91       	pop	r18
    5f9c:	0f 90       	pop	r0
    5f9e:	0f be       	out	0x3f, r0	; 63
    5fa0:	0f 90       	pop	r0
    5fa2:	1f 90       	pop	r1
    5fa4:	18 95       	reti

00005fa6 <__vector_11>:
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    5fa6:	1f 92       	push	r1
    5fa8:	0f 92       	push	r0
    5faa:	0f b6       	in	r0, 0x3f	; 63
    5fac:	0f 92       	push	r0
    5fae:	11 24       	eor	r1, r1
    5fb0:	2f 93       	push	r18
    5fb2:	3f 93       	push	r19
    5fb4:	4f 93       	push	r20
    5fb6:	5f 93       	push	r21
    5fb8:	6f 93       	push	r22
    5fba:	7f 93       	push	r23
    5fbc:	8f 93       	push	r24
    5fbe:	9f 93       	push	r25
    5fc0:	af 93       	push	r26
    5fc2:	bf 93       	push	r27
    5fc4:	ef 93       	push	r30
    5fc6:	ff 93       	push	r31
    5fc8:	df 93       	push	r29
    5fca:	cf 93       	push	r28
    5fcc:	cd b7       	in	r28, 0x3d	; 61
    5fce:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16OVFCounter=0;
	local_u16OVFCounter++;
    5fd0:	80 91 06 06 	lds	r24, 0x0606
    5fd4:	90 91 07 06 	lds	r25, 0x0607
    5fd8:	01 96       	adiw	r24, 0x01	; 1
    5fda:	90 93 07 06 	sts	0x0607, r25
    5fde:	80 93 06 06 	sts	0x0606, r24
	if (local_u16OVFCounter == TMR0_OVER_FLOW_COUNTER)
    5fe2:	80 91 06 06 	lds	r24, 0x0606
    5fe6:	90 91 07 06 	lds	r25, 0x0607
    5fea:	8a 30       	cpi	r24, 0x0A	; 10
    5fec:	91 05       	cpc	r25, r1
    5fee:	69 f4       	brne	.+26     	; 0x600a <__vector_11+0x64>
	{
		//Init Timer With Preload Value 
		TCNT0_REG = TMR0_PRELOAD_VALUE;
    5ff0:	e2 e5       	ldi	r30, 0x52	; 82
    5ff2:	f0 e0       	ldi	r31, 0x00	; 0
    5ff4:	8a e0       	ldi	r24, 0x0A	; 10
    5ff6:	80 83       	st	Z, r24
		//Reset Counter
		local_u16OVFCounter = 0;
    5ff8:	10 92 07 06 	sts	0x0607, r1
    5ffc:	10 92 06 06 	sts	0x0606, r1
		//Call Action
		PRV_pFunCallBackOVF();
    6000:	e0 91 00 06 	lds	r30, 0x0600
    6004:	f0 91 01 06 	lds	r31, 0x0601
    6008:	09 95       	icall
	}
}
    600a:	cf 91       	pop	r28
    600c:	df 91       	pop	r29
    600e:	ff 91       	pop	r31
    6010:	ef 91       	pop	r30
    6012:	bf 91       	pop	r27
    6014:	af 91       	pop	r26
    6016:	9f 91       	pop	r25
    6018:	8f 91       	pop	r24
    601a:	7f 91       	pop	r23
    601c:	6f 91       	pop	r22
    601e:	5f 91       	pop	r21
    6020:	4f 91       	pop	r20
    6022:	3f 91       	pop	r19
    6024:	2f 91       	pop	r18
    6026:	0f 90       	pop	r0
    6028:	0f be       	out	0x3f, r0	; 63
    602a:	0f 90       	pop	r0
    602c:	1f 90       	pop	r1
    602e:	18 95       	reti

00006030 <PWM0_voidInitChannel_0>:
#include "PWM_interface.h"
#include "PWM_private.h"
#include "PWM_register.h"

void PWM0_voidInitChannel_0 (void)
{
    6030:	df 93       	push	r29
    6032:	cf 93       	push	r28
    6034:	cd b7       	in	r28, 0x3d	; 61
    6036:	de b7       	in	r29, 0x3e	; 62
	//Select Fast PWM0 Mode
	SET_BIT(TCCR0_REG,WGM00);
    6038:	a3 e5       	ldi	r26, 0x53	; 83
    603a:	b0 e0       	ldi	r27, 0x00	; 0
    603c:	e3 e5       	ldi	r30, 0x53	; 83
    603e:	f0 e0       	ldi	r31, 0x00	; 0
    6040:	80 81       	ld	r24, Z
    6042:	80 64       	ori	r24, 0x40	; 64
    6044:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,WGM01);
    6046:	a3 e5       	ldi	r26, 0x53	; 83
    6048:	b0 e0       	ldi	r27, 0x00	; 0
    604a:	e3 e5       	ldi	r30, 0x53	; 83
    604c:	f0 e0       	ldi	r31, 0x00	; 0
    604e:	80 81       	ld	r24, Z
    6050:	88 60       	ori	r24, 0x08	; 8
    6052:	8c 93       	st	X, r24
	//Choose Between (Inverting-Non Inverting)
	#if PWM0_MODE == PWM0_NON_INVERTING_MODE
    CLR_BIT(TCCR0_REG,COM00);
    6054:	a3 e5       	ldi	r26, 0x53	; 83
    6056:	b0 e0       	ldi	r27, 0x00	; 0
    6058:	e3 e5       	ldi	r30, 0x53	; 83
    605a:	f0 e0       	ldi	r31, 0x00	; 0
    605c:	80 81       	ld	r24, Z
    605e:	8f 7e       	andi	r24, 0xEF	; 239
    6060:	8c 93       	st	X, r24
    SET_BIT(TCCR0_REG,COM01);
    6062:	a3 e5       	ldi	r26, 0x53	; 83
    6064:	b0 e0       	ldi	r27, 0x00	; 0
    6066:	e3 e5       	ldi	r30, 0x53	; 83
    6068:	f0 e0       	ldi	r31, 0x00	; 0
    606a:	80 81       	ld	r24, Z
    606c:	80 62       	ori	r24, 0x20	; 32
    606e:	8c 93       	st	X, r24
    SET_BIT(TCCR0_REG,COM01);	
	
#endif
	
	
}
    6070:	cf 91       	pop	r28
    6072:	df 91       	pop	r29
    6074:	08 95       	ret

00006076 <PWM0_voidGenerate_PWM_Channel_0>:
void PWM0_voidGenerate_PWM_Channel_0 (u8 copy_u8DutyCycle)
{
    6076:	df 93       	push	r29
    6078:	cf 93       	push	r28
    607a:	0f 92       	push	r0
    607c:	cd b7       	in	r28, 0x3d	; 61
    607e:	de b7       	in	r29, 0x3e	; 62
    6080:	89 83       	std	Y+1, r24	; 0x01
	if (copy_u8DutyCycle <= 100)
    6082:	89 81       	ldd	r24, Y+1	; 0x01
    6084:	85 36       	cpi	r24, 0x65	; 101
    6086:	f0 f4       	brcc	.+60     	; 0x60c4 <PWM0_voidGenerate_PWM_Channel_0+0x4e>
	{
		OCR0_REG = ((u16)copy_u8DutyCycle*256)-1;
    6088:	ec e5       	ldi	r30, 0x5C	; 92
    608a:	f0 e0       	ldi	r31, 0x00	; 0
    608c:	89 81       	ldd	r24, Y+1	; 0x01
    608e:	88 2f       	mov	r24, r24
    6090:	90 e0       	ldi	r25, 0x00	; 0
    6092:	98 2f       	mov	r25, r24
    6094:	88 27       	eor	r24, r24
    6096:	81 50       	subi	r24, 0x01	; 1
    6098:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG ,CS00);
		SET_BIT(TCCR0_REG ,CS01);
		CLR_BIT(TCCR0_REG ,CS02);
		
		#elif PWM0_PRESCALER == PWM_64_PRESCALER
		SET_BIT(TCCR0_REG ,CS00);
    609a:	a3 e5       	ldi	r26, 0x53	; 83
    609c:	b0 e0       	ldi	r27, 0x00	; 0
    609e:	e3 e5       	ldi	r30, 0x53	; 83
    60a0:	f0 e0       	ldi	r31, 0x00	; 0
    60a2:	80 81       	ld	r24, Z
    60a4:	81 60       	ori	r24, 0x01	; 1
    60a6:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG ,CS01);
    60a8:	a3 e5       	ldi	r26, 0x53	; 83
    60aa:	b0 e0       	ldi	r27, 0x00	; 0
    60ac:	e3 e5       	ldi	r30, 0x53	; 83
    60ae:	f0 e0       	ldi	r31, 0x00	; 0
    60b0:	80 81       	ld	r24, Z
    60b2:	82 60       	ori	r24, 0x02	; 2
    60b4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG ,CS02);
    60b6:	a3 e5       	ldi	r26, 0x53	; 83
    60b8:	b0 e0       	ldi	r27, 0x00	; 0
    60ba:	e3 e5       	ldi	r30, 0x53	; 83
    60bc:	f0 e0       	ldi	r31, 0x00	; 0
    60be:	80 81       	ld	r24, Z
    60c0:	8b 7f       	andi	r24, 0xFB	; 251
    60c2:	8c 93       	st	X, r24
	else
	{
		//Return Error Statement 
	}
	
}
    60c4:	0f 90       	pop	r0
    60c6:	cf 91       	pop	r28
    60c8:	df 91       	pop	r29
    60ca:	08 95       	ret

000060cc <PWM1_voidInitChannel_1A>:

void PWM1_voidInitChannel_1A (void)
{
    60cc:	df 93       	push	r29
    60ce:	cf 93       	push	r28
    60d0:	cd b7       	in	r28, 0x3d	; 61
    60d2:	de b7       	in	r29, 0x3e	; 62
	//Select Fast PWM (Mode 14 From Data Sheet)
	CLR_BIT(TCCR1A_REG,WGM10);
    60d4:	af e4       	ldi	r26, 0x4F	; 79
    60d6:	b0 e0       	ldi	r27, 0x00	; 0
    60d8:	ef e4       	ldi	r30, 0x4F	; 79
    60da:	f0 e0       	ldi	r31, 0x00	; 0
    60dc:	80 81       	ld	r24, Z
    60de:	8e 7f       	andi	r24, 0xFE	; 254
    60e0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,WGM11);
    60e2:	af e4       	ldi	r26, 0x4F	; 79
    60e4:	b0 e0       	ldi	r27, 0x00	; 0
    60e6:	ef e4       	ldi	r30, 0x4F	; 79
    60e8:	f0 e0       	ldi	r31, 0x00	; 0
    60ea:	80 81       	ld	r24, Z
    60ec:	82 60       	ori	r24, 0x02	; 2
    60ee:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM12);
    60f0:	ae e4       	ldi	r26, 0x4E	; 78
    60f2:	b0 e0       	ldi	r27, 0x00	; 0
    60f4:	ee e4       	ldi	r30, 0x4E	; 78
    60f6:	f0 e0       	ldi	r31, 0x00	; 0
    60f8:	80 81       	ld	r24, Z
    60fa:	88 60       	ori	r24, 0x08	; 8
    60fc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM13);
    60fe:	ae e4       	ldi	r26, 0x4E	; 78
    6100:	b0 e0       	ldi	r27, 0x00	; 0
    6102:	ee e4       	ldi	r30, 0x4E	; 78
    6104:	f0 e0       	ldi	r31, 0x00	; 0
    6106:	80 81       	ld	r24, Z
    6108:	80 61       	ori	r24, 0x10	; 16
    610a:	8c 93       	st	X, r24
	
	//Choose Between (Inverting-Non Inverting)
	#if PWM1_MODE == PWM1_NON_INVERTING_MODE
	CLR_BIT(TCCR1A_REG,COM1A0);
    610c:	af e4       	ldi	r26, 0x4F	; 79
    610e:	b0 e0       	ldi	r27, 0x00	; 0
    6110:	ef e4       	ldi	r30, 0x4F	; 79
    6112:	f0 e0       	ldi	r31, 0x00	; 0
    6114:	80 81       	ld	r24, Z
    6116:	8f 7b       	andi	r24, 0xBF	; 191
    6118:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,COM1A1);
    611a:	af e4       	ldi	r26, 0x4F	; 79
    611c:	b0 e0       	ldi	r27, 0x00	; 0
    611e:	ef e4       	ldi	r30, 0x4F	; 79
    6120:	f0 e0       	ldi	r31, 0x00	; 0
    6122:	80 81       	ld	r24, Z
    6124:	80 68       	ori	r24, 0x80	; 128
    6126:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,COM1A0);
	SET_BIT(TCCR1A_REG,COM1A1);

#endif
	
}
    6128:	cf 91       	pop	r28
    612a:	df 91       	pop	r29
    612c:	08 95       	ret

0000612e <PWM1_voidGenerate_PWM_Channel_1A>:
void PWM1_voidGenerate_PWM_Channel_1A  (u16 copy_u16Frequency_hz, f32 copy_f32DutyCycle)
{
    612e:	0f 93       	push	r16
    6130:	1f 93       	push	r17
    6132:	df 93       	push	r29
    6134:	cf 93       	push	r28
    6136:	00 d0       	rcall	.+0      	; 0x6138 <PWM1_voidGenerate_PWM_Channel_1A+0xa>
    6138:	00 d0       	rcall	.+0      	; 0x613a <PWM1_voidGenerate_PWM_Channel_1A+0xc>
    613a:	00 d0       	rcall	.+0      	; 0x613c <PWM1_voidGenerate_PWM_Channel_1A+0xe>
    613c:	cd b7       	in	r28, 0x3d	; 61
    613e:	de b7       	in	r29, 0x3e	; 62
    6140:	9a 83       	std	Y+2, r25	; 0x02
    6142:	89 83       	std	Y+1, r24	; 0x01
    6144:	4b 83       	std	Y+3, r20	; 0x03
    6146:	5c 83       	std	Y+4, r21	; 0x04
    6148:	6d 83       	std	Y+5, r22	; 0x05
    614a:	7e 83       	std	Y+6, r23	; 0x06
	if (copy_f32DutyCycle <= 100.0)
    614c:	6b 81       	ldd	r22, Y+3	; 0x03
    614e:	7c 81       	ldd	r23, Y+4	; 0x04
    6150:	8d 81       	ldd	r24, Y+5	; 0x05
    6152:	9e 81       	ldd	r25, Y+6	; 0x06
    6154:	20 e0       	ldi	r18, 0x00	; 0
    6156:	30 e0       	ldi	r19, 0x00	; 0
    6158:	48 ec       	ldi	r20, 0xC8	; 200
    615a:	52 e4       	ldi	r21, 0x42	; 66
    615c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    6160:	18 16       	cp	r1, r24
    6162:	0c f4       	brge	.+2      	; 0x6166 <PWM1_voidGenerate_PWM_Channel_1A+0x38>
    6164:	61 c0       	rjmp	.+194    	; 0x6228 <PWM1_voidGenerate_PWM_Channel_1A+0xfa>
	{
		// under condition tick time 4 MS by setting prescaller 64
		ICR1_U16_REG = ((1000000UL/copy_u16Frequency_hz)/4)-1;
    6166:	06 e4       	ldi	r16, 0x46	; 70
    6168:	10 e0       	ldi	r17, 0x00	; 0
    616a:	89 81       	ldd	r24, Y+1	; 0x01
    616c:	9a 81       	ldd	r25, Y+2	; 0x02
    616e:	9c 01       	movw	r18, r24
    6170:	40 e0       	ldi	r20, 0x00	; 0
    6172:	50 e0       	ldi	r21, 0x00	; 0
    6174:	80 e9       	ldi	r24, 0x90	; 144
    6176:	90 ed       	ldi	r25, 0xD0	; 208
    6178:	a3 e0       	ldi	r26, 0x03	; 3
    617a:	b0 e0       	ldi	r27, 0x00	; 0
    617c:	bc 01       	movw	r22, r24
    617e:	cd 01       	movw	r24, r26
    6180:	0e 94 a5 5b 	call	0xb74a	; 0xb74a <__udivmodsi4>
    6184:	da 01       	movw	r26, r20
    6186:	c9 01       	movw	r24, r18
    6188:	01 97       	sbiw	r24, 0x01	; 1
    618a:	f8 01       	movw	r30, r16
    618c:	91 83       	std	Z+1, r25	; 0x01
    618e:	80 83       	st	Z, r24
		
		OCR1A_U16_REG = (copy_f32DutyCycle*(ICR1_U16_REG+1)/100)-1;
    6190:	0a e4       	ldi	r16, 0x4A	; 74
    6192:	10 e0       	ldi	r17, 0x00	; 0
    6194:	e6 e4       	ldi	r30, 0x46	; 70
    6196:	f0 e0       	ldi	r31, 0x00	; 0
    6198:	80 81       	ld	r24, Z
    619a:	91 81       	ldd	r25, Z+1	; 0x01
    619c:	01 96       	adiw	r24, 0x01	; 1
    619e:	cc 01       	movw	r24, r24
    61a0:	a0 e0       	ldi	r26, 0x00	; 0
    61a2:	b0 e0       	ldi	r27, 0x00	; 0
    61a4:	bc 01       	movw	r22, r24
    61a6:	cd 01       	movw	r24, r26
    61a8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    61ac:	dc 01       	movw	r26, r24
    61ae:	cb 01       	movw	r24, r22
    61b0:	bc 01       	movw	r22, r24
    61b2:	cd 01       	movw	r24, r26
    61b4:	2b 81       	ldd	r18, Y+3	; 0x03
    61b6:	3c 81       	ldd	r19, Y+4	; 0x04
    61b8:	4d 81       	ldd	r20, Y+5	; 0x05
    61ba:	5e 81       	ldd	r21, Y+6	; 0x06
    61bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61c0:	dc 01       	movw	r26, r24
    61c2:	cb 01       	movw	r24, r22
    61c4:	bc 01       	movw	r22, r24
    61c6:	cd 01       	movw	r24, r26
    61c8:	20 e0       	ldi	r18, 0x00	; 0
    61ca:	30 e0       	ldi	r19, 0x00	; 0
    61cc:	48 ec       	ldi	r20, 0xC8	; 200
    61ce:	52 e4       	ldi	r21, 0x42	; 66
    61d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    61d4:	dc 01       	movw	r26, r24
    61d6:	cb 01       	movw	r24, r22
    61d8:	bc 01       	movw	r22, r24
    61da:	cd 01       	movw	r24, r26
    61dc:	20 e0       	ldi	r18, 0x00	; 0
    61de:	30 e0       	ldi	r19, 0x00	; 0
    61e0:	40 e8       	ldi	r20, 0x80	; 128
    61e2:	5f e3       	ldi	r21, 0x3F	; 63
    61e4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    61e8:	dc 01       	movw	r26, r24
    61ea:	cb 01       	movw	r24, r22
    61ec:	bc 01       	movw	r22, r24
    61ee:	cd 01       	movw	r24, r26
    61f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61f4:	dc 01       	movw	r26, r24
    61f6:	cb 01       	movw	r24, r22
    61f8:	f8 01       	movw	r30, r16
    61fa:	91 83       	std	Z+1, r25	; 0x01
    61fc:	80 83       	st	Z, r24
		// select prescaller 64
		SET_BIT(TCCR1B_REG, CS10);
    61fe:	ae e4       	ldi	r26, 0x4E	; 78
    6200:	b0 e0       	ldi	r27, 0x00	; 0
    6202:	ee e4       	ldi	r30, 0x4E	; 78
    6204:	f0 e0       	ldi	r31, 0x00	; 0
    6206:	80 81       	ld	r24, Z
    6208:	81 60       	ori	r24, 0x01	; 1
    620a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, CS11);
    620c:	ae e4       	ldi	r26, 0x4E	; 78
    620e:	b0 e0       	ldi	r27, 0x00	; 0
    6210:	ee e4       	ldi	r30, 0x4E	; 78
    6212:	f0 e0       	ldi	r31, 0x00	; 0
    6214:	80 81       	ld	r24, Z
    6216:	82 60       	ori	r24, 0x02	; 2
    6218:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, CS12);
    621a:	ae e4       	ldi	r26, 0x4E	; 78
    621c:	b0 e0       	ldi	r27, 0x00	; 0
    621e:	ee e4       	ldi	r30, 0x4E	; 78
    6220:	f0 e0       	ldi	r31, 0x00	; 0
    6222:	80 81       	ld	r24, Z
    6224:	8b 7f       	andi	r24, 0xFB	; 251
    6226:	8c 93       	st	X, r24
	} 
	else
	{
		//Return Error Statement
	}
	}
    6228:	26 96       	adiw	r28, 0x06	; 6
    622a:	0f b6       	in	r0, 0x3f	; 63
    622c:	f8 94       	cli
    622e:	de bf       	out	0x3e, r29	; 62
    6230:	0f be       	out	0x3f, r0	; 63
    6232:	cd bf       	out	0x3d, r28	; 61
    6234:	cf 91       	pop	r28
    6236:	df 91       	pop	r29
    6238:	1f 91       	pop	r17
    623a:	0f 91       	pop	r16
    623c:	08 95       	ret

0000623e <GI_voidEnable>:
//UTILES_LIB
#include "STD_TYPES.h"
#include "BIT_MATH.h"

void GI_voidEnable()
{
    623e:	df 93       	push	r29
    6240:	cf 93       	push	r28
    6242:	cd b7       	in	r28, 0x3d	; 61
    6244:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,I);
    6246:	af e5       	ldi	r26, 0x5F	; 95
    6248:	b0 e0       	ldi	r27, 0x00	; 0
    624a:	ef e5       	ldi	r30, 0x5F	; 95
    624c:	f0 e0       	ldi	r31, 0x00	; 0
    624e:	80 81       	ld	r24, Z
    6250:	80 68       	ori	r24, 0x80	; 128
    6252:	8c 93       	st	X, r24
}
    6254:	cf 91       	pop	r28
    6256:	df 91       	pop	r29
    6258:	08 95       	ret

0000625a <GI_voidDisable>:
void GI_voidDisable()
{
    625a:	df 93       	push	r29
    625c:	cf 93       	push	r28
    625e:	cd b7       	in	r28, 0x3d	; 61
    6260:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG_REG,I);
    6262:	af e5       	ldi	r26, 0x5F	; 95
    6264:	b0 e0       	ldi	r27, 0x00	; 0
    6266:	ef e5       	ldi	r30, 0x5F	; 95
    6268:	f0 e0       	ldi	r31, 0x00	; 0
    626a:	80 81       	ld	r24, Z
    626c:	8f 77       	andi	r24, 0x7F	; 127
    626e:	8c 93       	st	X, r24
}
    6270:	cf 91       	pop	r28
    6272:	df 91       	pop	r29
    6274:	08 95       	ret

00006276 <DIO_voidSetPinDirection>:
//MCAL
#include "DIO_interface.h"
#include "DIO_register.h"

void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
    6276:	df 93       	push	r29
    6278:	cf 93       	push	r28
    627a:	cd b7       	in	r28, 0x3d	; 61
    627c:	de b7       	in	r29, 0x3e	; 62
    627e:	2d 97       	sbiw	r28, 0x0d	; 13
    6280:	0f b6       	in	r0, 0x3f	; 63
    6282:	f8 94       	cli
    6284:	de bf       	out	0x3e, r29	; 62
    6286:	0f be       	out	0x3f, r0	; 63
    6288:	cd bf       	out	0x3d, r28	; 61
    628a:	89 83       	std	Y+1, r24	; 0x01
    628c:	6a 83       	std	Y+2, r22	; 0x02
    628e:	4b 83       	std	Y+3, r20	; 0x03
	if ((copy_u8PortId<4) && (copy_u8PinId<8) && ((copy_u8PinDirection==DIO_PIN_INPUT) || (copy_u8PinDirection==DIO_PIN_OUTPUT)))
    6290:	89 81       	ldd	r24, Y+1	; 0x01
    6292:	84 30       	cpi	r24, 0x04	; 4
    6294:	08 f0       	brcs	.+2      	; 0x6298 <DIO_voidSetPinDirection+0x22>
    6296:	0c c1       	rjmp	.+536    	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
    6298:	8a 81       	ldd	r24, Y+2	; 0x02
    629a:	88 30       	cpi	r24, 0x08	; 8
    629c:	08 f0       	brcs	.+2      	; 0x62a0 <DIO_voidSetPinDirection+0x2a>
    629e:	08 c1       	rjmp	.+528    	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
    62a0:	8b 81       	ldd	r24, Y+3	; 0x03
    62a2:	88 23       	and	r24, r24
    62a4:	21 f0       	breq	.+8      	; 0x62ae <DIO_voidSetPinDirection+0x38>
    62a6:	8b 81       	ldd	r24, Y+3	; 0x03
    62a8:	81 30       	cpi	r24, 0x01	; 1
    62aa:	09 f0       	breq	.+2      	; 0x62ae <DIO_voidSetPinDirection+0x38>
    62ac:	01 c1       	rjmp	.+514    	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
	{
		switch(copy_u8PortId)
    62ae:	89 81       	ldd	r24, Y+1	; 0x01
    62b0:	28 2f       	mov	r18, r24
    62b2:	30 e0       	ldi	r19, 0x00	; 0
    62b4:	3d 87       	std	Y+13, r19	; 0x0d
    62b6:	2c 87       	std	Y+12, r18	; 0x0c
    62b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    62ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    62bc:	81 30       	cpi	r24, 0x01	; 1
    62be:	91 05       	cpc	r25, r1
    62c0:	09 f4       	brne	.+2      	; 0x62c4 <DIO_voidSetPinDirection+0x4e>
    62c2:	4f c0       	rjmp	.+158    	; 0x6362 <DIO_voidSetPinDirection+0xec>
    62c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    62c6:	3d 85       	ldd	r19, Y+13	; 0x0d
    62c8:	22 30       	cpi	r18, 0x02	; 2
    62ca:	31 05       	cpc	r19, r1
    62cc:	2c f4       	brge	.+10     	; 0x62d8 <DIO_voidSetPinDirection+0x62>
    62ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    62d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    62d2:	00 97       	sbiw	r24, 0x00	; 0
    62d4:	71 f0       	breq	.+28     	; 0x62f2 <DIO_voidSetPinDirection+0x7c>
    62d6:	ec c0       	rjmp	.+472    	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
    62d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    62da:	3d 85       	ldd	r19, Y+13	; 0x0d
    62dc:	22 30       	cpi	r18, 0x02	; 2
    62de:	31 05       	cpc	r19, r1
    62e0:	09 f4       	brne	.+2      	; 0x62e4 <DIO_voidSetPinDirection+0x6e>
    62e2:	77 c0       	rjmp	.+238    	; 0x63d2 <DIO_voidSetPinDirection+0x15c>
    62e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    62e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    62e8:	83 30       	cpi	r24, 0x03	; 3
    62ea:	91 05       	cpc	r25, r1
    62ec:	09 f4       	brne	.+2      	; 0x62f0 <DIO_voidSetPinDirection+0x7a>
    62ee:	a9 c0       	rjmp	.+338    	; 0x6442 <DIO_voidSetPinDirection+0x1cc>
    62f0:	df c0       	rjmp	.+446    	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
		{
			case DIO_PORTA:
			switch(copy_u8PinDirection)
    62f2:	8b 81       	ldd	r24, Y+3	; 0x03
    62f4:	28 2f       	mov	r18, r24
    62f6:	30 e0       	ldi	r19, 0x00	; 0
    62f8:	3b 87       	std	Y+11, r19	; 0x0b
    62fa:	2a 87       	std	Y+10, r18	; 0x0a
    62fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    62fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    6300:	00 97       	sbiw	r24, 0x00	; 0
    6302:	31 f0       	breq	.+12     	; 0x6310 <DIO_voidSetPinDirection+0x9a>
    6304:	2a 85       	ldd	r18, Y+10	; 0x0a
    6306:	3b 85       	ldd	r19, Y+11	; 0x0b
    6308:	21 30       	cpi	r18, 0x01	; 1
    630a:	31 05       	cpc	r19, r1
    630c:	b1 f0       	breq	.+44     	; 0x633a <DIO_voidSetPinDirection+0xc4>
    630e:	d0 c0       	rjmp	.+416    	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
			{
				case DIO_PIN_INPUT:
				CLR_BIT(DDRA_REG,copy_u8PinId);
    6310:	aa e3       	ldi	r26, 0x3A	; 58
    6312:	b0 e0       	ldi	r27, 0x00	; 0
    6314:	ea e3       	ldi	r30, 0x3A	; 58
    6316:	f0 e0       	ldi	r31, 0x00	; 0
    6318:	80 81       	ld	r24, Z
    631a:	48 2f       	mov	r20, r24
    631c:	8a 81       	ldd	r24, Y+2	; 0x02
    631e:	28 2f       	mov	r18, r24
    6320:	30 e0       	ldi	r19, 0x00	; 0
    6322:	81 e0       	ldi	r24, 0x01	; 1
    6324:	90 e0       	ldi	r25, 0x00	; 0
    6326:	02 2e       	mov	r0, r18
    6328:	02 c0       	rjmp	.+4      	; 0x632e <DIO_voidSetPinDirection+0xb8>
    632a:	88 0f       	add	r24, r24
    632c:	99 1f       	adc	r25, r25
    632e:	0a 94       	dec	r0
    6330:	e2 f7       	brpl	.-8      	; 0x632a <DIO_voidSetPinDirection+0xb4>
    6332:	80 95       	com	r24
    6334:	84 23       	and	r24, r20
    6336:	8c 93       	st	X, r24
    6338:	bb c0       	rjmp	.+374    	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
				break;
				
				case DIO_PIN_OUTPUT:
				SET_BIT(DDRA_REG,copy_u8PinId);
    633a:	aa e3       	ldi	r26, 0x3A	; 58
    633c:	b0 e0       	ldi	r27, 0x00	; 0
    633e:	ea e3       	ldi	r30, 0x3A	; 58
    6340:	f0 e0       	ldi	r31, 0x00	; 0
    6342:	80 81       	ld	r24, Z
    6344:	48 2f       	mov	r20, r24
    6346:	8a 81       	ldd	r24, Y+2	; 0x02
    6348:	28 2f       	mov	r18, r24
    634a:	30 e0       	ldi	r19, 0x00	; 0
    634c:	81 e0       	ldi	r24, 0x01	; 1
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	02 2e       	mov	r0, r18
    6352:	02 c0       	rjmp	.+4      	; 0x6358 <DIO_voidSetPinDirection+0xe2>
    6354:	88 0f       	add	r24, r24
    6356:	99 1f       	adc	r25, r25
    6358:	0a 94       	dec	r0
    635a:	e2 f7       	brpl	.-8      	; 0x6354 <DIO_voidSetPinDirection+0xde>
    635c:	84 2b       	or	r24, r20
    635e:	8c 93       	st	X, r24
    6360:	a7 c0       	rjmp	.+334    	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
				break;
			}
			break;
			
			case DIO_PORTB:
			switch(copy_u8PinDirection)
    6362:	8b 81       	ldd	r24, Y+3	; 0x03
    6364:	28 2f       	mov	r18, r24
    6366:	30 e0       	ldi	r19, 0x00	; 0
    6368:	39 87       	std	Y+9, r19	; 0x09
    636a:	28 87       	std	Y+8, r18	; 0x08
    636c:	88 85       	ldd	r24, Y+8	; 0x08
    636e:	99 85       	ldd	r25, Y+9	; 0x09
    6370:	00 97       	sbiw	r24, 0x00	; 0
    6372:	31 f0       	breq	.+12     	; 0x6380 <DIO_voidSetPinDirection+0x10a>
    6374:	28 85       	ldd	r18, Y+8	; 0x08
    6376:	39 85       	ldd	r19, Y+9	; 0x09
    6378:	21 30       	cpi	r18, 0x01	; 1
    637a:	31 05       	cpc	r19, r1
    637c:	b1 f0       	breq	.+44     	; 0x63aa <DIO_voidSetPinDirection+0x134>
    637e:	98 c0       	rjmp	.+304    	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
			{
				case DIO_PIN_INPUT:
				CLR_BIT(DDRB_REG,copy_u8PinId);
    6380:	a7 e3       	ldi	r26, 0x37	; 55
    6382:	b0 e0       	ldi	r27, 0x00	; 0
    6384:	e7 e3       	ldi	r30, 0x37	; 55
    6386:	f0 e0       	ldi	r31, 0x00	; 0
    6388:	80 81       	ld	r24, Z
    638a:	48 2f       	mov	r20, r24
    638c:	8a 81       	ldd	r24, Y+2	; 0x02
    638e:	28 2f       	mov	r18, r24
    6390:	30 e0       	ldi	r19, 0x00	; 0
    6392:	81 e0       	ldi	r24, 0x01	; 1
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	02 2e       	mov	r0, r18
    6398:	02 c0       	rjmp	.+4      	; 0x639e <DIO_voidSetPinDirection+0x128>
    639a:	88 0f       	add	r24, r24
    639c:	99 1f       	adc	r25, r25
    639e:	0a 94       	dec	r0
    63a0:	e2 f7       	brpl	.-8      	; 0x639a <DIO_voidSetPinDirection+0x124>
    63a2:	80 95       	com	r24
    63a4:	84 23       	and	r24, r20
    63a6:	8c 93       	st	X, r24
    63a8:	83 c0       	rjmp	.+262    	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
				break;
				
				case DIO_PIN_OUTPUT:
				SET_BIT(DDRB_REG,copy_u8PinId);
    63aa:	a7 e3       	ldi	r26, 0x37	; 55
    63ac:	b0 e0       	ldi	r27, 0x00	; 0
    63ae:	e7 e3       	ldi	r30, 0x37	; 55
    63b0:	f0 e0       	ldi	r31, 0x00	; 0
    63b2:	80 81       	ld	r24, Z
    63b4:	48 2f       	mov	r20, r24
    63b6:	8a 81       	ldd	r24, Y+2	; 0x02
    63b8:	28 2f       	mov	r18, r24
    63ba:	30 e0       	ldi	r19, 0x00	; 0
    63bc:	81 e0       	ldi	r24, 0x01	; 1
    63be:	90 e0       	ldi	r25, 0x00	; 0
    63c0:	02 2e       	mov	r0, r18
    63c2:	02 c0       	rjmp	.+4      	; 0x63c8 <DIO_voidSetPinDirection+0x152>
    63c4:	88 0f       	add	r24, r24
    63c6:	99 1f       	adc	r25, r25
    63c8:	0a 94       	dec	r0
    63ca:	e2 f7       	brpl	.-8      	; 0x63c4 <DIO_voidSetPinDirection+0x14e>
    63cc:	84 2b       	or	r24, r20
    63ce:	8c 93       	st	X, r24
    63d0:	6f c0       	rjmp	.+222    	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
				break;
			}
			break;
			
			case DIO_PORTC:
			switch(copy_u8PinDirection)
    63d2:	8b 81       	ldd	r24, Y+3	; 0x03
    63d4:	28 2f       	mov	r18, r24
    63d6:	30 e0       	ldi	r19, 0x00	; 0
    63d8:	3f 83       	std	Y+7, r19	; 0x07
    63da:	2e 83       	std	Y+6, r18	; 0x06
    63dc:	8e 81       	ldd	r24, Y+6	; 0x06
    63de:	9f 81       	ldd	r25, Y+7	; 0x07
    63e0:	00 97       	sbiw	r24, 0x00	; 0
    63e2:	31 f0       	breq	.+12     	; 0x63f0 <DIO_voidSetPinDirection+0x17a>
    63e4:	2e 81       	ldd	r18, Y+6	; 0x06
    63e6:	3f 81       	ldd	r19, Y+7	; 0x07
    63e8:	21 30       	cpi	r18, 0x01	; 1
    63ea:	31 05       	cpc	r19, r1
    63ec:	b1 f0       	breq	.+44     	; 0x641a <DIO_voidSetPinDirection+0x1a4>
    63ee:	60 c0       	rjmp	.+192    	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
			{
				case DIO_PIN_INPUT:
				CLR_BIT(DDRC_REG,copy_u8PinId);
    63f0:	a4 e3       	ldi	r26, 0x34	; 52
    63f2:	b0 e0       	ldi	r27, 0x00	; 0
    63f4:	e4 e3       	ldi	r30, 0x34	; 52
    63f6:	f0 e0       	ldi	r31, 0x00	; 0
    63f8:	80 81       	ld	r24, Z
    63fa:	48 2f       	mov	r20, r24
    63fc:	8a 81       	ldd	r24, Y+2	; 0x02
    63fe:	28 2f       	mov	r18, r24
    6400:	30 e0       	ldi	r19, 0x00	; 0
    6402:	81 e0       	ldi	r24, 0x01	; 1
    6404:	90 e0       	ldi	r25, 0x00	; 0
    6406:	02 2e       	mov	r0, r18
    6408:	02 c0       	rjmp	.+4      	; 0x640e <DIO_voidSetPinDirection+0x198>
    640a:	88 0f       	add	r24, r24
    640c:	99 1f       	adc	r25, r25
    640e:	0a 94       	dec	r0
    6410:	e2 f7       	brpl	.-8      	; 0x640a <DIO_voidSetPinDirection+0x194>
    6412:	80 95       	com	r24
    6414:	84 23       	and	r24, r20
    6416:	8c 93       	st	X, r24
    6418:	4b c0       	rjmp	.+150    	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
				break;
				
				case DIO_PIN_OUTPUT:
				SET_BIT(DDRC_REG,copy_u8PinId);
    641a:	a4 e3       	ldi	r26, 0x34	; 52
    641c:	b0 e0       	ldi	r27, 0x00	; 0
    641e:	e4 e3       	ldi	r30, 0x34	; 52
    6420:	f0 e0       	ldi	r31, 0x00	; 0
    6422:	80 81       	ld	r24, Z
    6424:	48 2f       	mov	r20, r24
    6426:	8a 81       	ldd	r24, Y+2	; 0x02
    6428:	28 2f       	mov	r18, r24
    642a:	30 e0       	ldi	r19, 0x00	; 0
    642c:	81 e0       	ldi	r24, 0x01	; 1
    642e:	90 e0       	ldi	r25, 0x00	; 0
    6430:	02 2e       	mov	r0, r18
    6432:	02 c0       	rjmp	.+4      	; 0x6438 <DIO_voidSetPinDirection+0x1c2>
    6434:	88 0f       	add	r24, r24
    6436:	99 1f       	adc	r25, r25
    6438:	0a 94       	dec	r0
    643a:	e2 f7       	brpl	.-8      	; 0x6434 <DIO_voidSetPinDirection+0x1be>
    643c:	84 2b       	or	r24, r20
    643e:	8c 93       	st	X, r24
    6440:	37 c0       	rjmp	.+110    	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
				break;
			}
			break;
			
			case DIO_PORTD:
			switch(copy_u8PinDirection)
    6442:	8b 81       	ldd	r24, Y+3	; 0x03
    6444:	28 2f       	mov	r18, r24
    6446:	30 e0       	ldi	r19, 0x00	; 0
    6448:	3d 83       	std	Y+5, r19	; 0x05
    644a:	2c 83       	std	Y+4, r18	; 0x04
    644c:	8c 81       	ldd	r24, Y+4	; 0x04
    644e:	9d 81       	ldd	r25, Y+5	; 0x05
    6450:	00 97       	sbiw	r24, 0x00	; 0
    6452:	31 f0       	breq	.+12     	; 0x6460 <DIO_voidSetPinDirection+0x1ea>
    6454:	2c 81       	ldd	r18, Y+4	; 0x04
    6456:	3d 81       	ldd	r19, Y+5	; 0x05
    6458:	21 30       	cpi	r18, 0x01	; 1
    645a:	31 05       	cpc	r19, r1
    645c:	b1 f0       	breq	.+44     	; 0x648a <DIO_voidSetPinDirection+0x214>
    645e:	28 c0       	rjmp	.+80     	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
			{
				case DIO_PIN_INPUT:
				CLR_BIT(DDRD_REG,copy_u8PinId);
    6460:	a1 e3       	ldi	r26, 0x31	; 49
    6462:	b0 e0       	ldi	r27, 0x00	; 0
    6464:	e1 e3       	ldi	r30, 0x31	; 49
    6466:	f0 e0       	ldi	r31, 0x00	; 0
    6468:	80 81       	ld	r24, Z
    646a:	48 2f       	mov	r20, r24
    646c:	8a 81       	ldd	r24, Y+2	; 0x02
    646e:	28 2f       	mov	r18, r24
    6470:	30 e0       	ldi	r19, 0x00	; 0
    6472:	81 e0       	ldi	r24, 0x01	; 1
    6474:	90 e0       	ldi	r25, 0x00	; 0
    6476:	02 2e       	mov	r0, r18
    6478:	02 c0       	rjmp	.+4      	; 0x647e <DIO_voidSetPinDirection+0x208>
    647a:	88 0f       	add	r24, r24
    647c:	99 1f       	adc	r25, r25
    647e:	0a 94       	dec	r0
    6480:	e2 f7       	brpl	.-8      	; 0x647a <DIO_voidSetPinDirection+0x204>
    6482:	80 95       	com	r24
    6484:	84 23       	and	r24, r20
    6486:	8c 93       	st	X, r24
    6488:	13 c0       	rjmp	.+38     	; 0x64b0 <DIO_voidSetPinDirection+0x23a>
				break;
				
				case DIO_PIN_OUTPUT:
				SET_BIT(DDRD_REG,copy_u8PinId);
    648a:	a1 e3       	ldi	r26, 0x31	; 49
    648c:	b0 e0       	ldi	r27, 0x00	; 0
    648e:	e1 e3       	ldi	r30, 0x31	; 49
    6490:	f0 e0       	ldi	r31, 0x00	; 0
    6492:	80 81       	ld	r24, Z
    6494:	48 2f       	mov	r20, r24
    6496:	8a 81       	ldd	r24, Y+2	; 0x02
    6498:	28 2f       	mov	r18, r24
    649a:	30 e0       	ldi	r19, 0x00	; 0
    649c:	81 e0       	ldi	r24, 0x01	; 1
    649e:	90 e0       	ldi	r25, 0x00	; 0
    64a0:	02 2e       	mov	r0, r18
    64a2:	02 c0       	rjmp	.+4      	; 0x64a8 <DIO_voidSetPinDirection+0x232>
    64a4:	88 0f       	add	r24, r24
    64a6:	99 1f       	adc	r25, r25
    64a8:	0a 94       	dec	r0
    64aa:	e2 f7       	brpl	.-8      	; 0x64a4 <DIO_voidSetPinDirection+0x22e>
    64ac:	84 2b       	or	r24, r20
    64ae:	8c 93       	st	X, r24
	} 
	else
	{
		//Return Error Statement
	}
}
    64b0:	2d 96       	adiw	r28, 0x0d	; 13
    64b2:	0f b6       	in	r0, 0x3f	; 63
    64b4:	f8 94       	cli
    64b6:	de bf       	out	0x3e, r29	; 62
    64b8:	0f be       	out	0x3f, r0	; 63
    64ba:	cd bf       	out	0x3d, r28	; 61
    64bc:	cf 91       	pop	r28
    64be:	df 91       	pop	r29
    64c0:	08 95       	ret

000064c2 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
    64c2:	df 93       	push	r29
    64c4:	cf 93       	push	r28
    64c6:	cd b7       	in	r28, 0x3d	; 61
    64c8:	de b7       	in	r29, 0x3e	; 62
    64ca:	2d 97       	sbiw	r28, 0x0d	; 13
    64cc:	0f b6       	in	r0, 0x3f	; 63
    64ce:	f8 94       	cli
    64d0:	de bf       	out	0x3e, r29	; 62
    64d2:	0f be       	out	0x3f, r0	; 63
    64d4:	cd bf       	out	0x3d, r28	; 61
    64d6:	89 83       	std	Y+1, r24	; 0x01
    64d8:	6a 83       	std	Y+2, r22	; 0x02
    64da:	4b 83       	std	Y+3, r20	; 0x03
	if ((copy_u8PortId<4) && (copy_u8PinId<8) && ((copy_u8PinValue==DIO_PIN_LOW) || (copy_u8PinValue==DIO_PIN_HIGH)))
    64dc:	89 81       	ldd	r24, Y+1	; 0x01
    64de:	84 30       	cpi	r24, 0x04	; 4
    64e0:	08 f0       	brcs	.+2      	; 0x64e4 <DIO_voidSetPinValue+0x22>
    64e2:	0c c1       	rjmp	.+536    	; 0x66fc <DIO_voidSetPinValue+0x23a>
    64e4:	8a 81       	ldd	r24, Y+2	; 0x02
    64e6:	88 30       	cpi	r24, 0x08	; 8
    64e8:	08 f0       	brcs	.+2      	; 0x64ec <DIO_voidSetPinValue+0x2a>
    64ea:	08 c1       	rjmp	.+528    	; 0x66fc <DIO_voidSetPinValue+0x23a>
    64ec:	8b 81       	ldd	r24, Y+3	; 0x03
    64ee:	88 23       	and	r24, r24
    64f0:	21 f0       	breq	.+8      	; 0x64fa <DIO_voidSetPinValue+0x38>
    64f2:	8b 81       	ldd	r24, Y+3	; 0x03
    64f4:	81 30       	cpi	r24, 0x01	; 1
    64f6:	09 f0       	breq	.+2      	; 0x64fa <DIO_voidSetPinValue+0x38>
    64f8:	01 c1       	rjmp	.+514    	; 0x66fc <DIO_voidSetPinValue+0x23a>
	{
		switch(copy_u8PortId)
    64fa:	89 81       	ldd	r24, Y+1	; 0x01
    64fc:	28 2f       	mov	r18, r24
    64fe:	30 e0       	ldi	r19, 0x00	; 0
    6500:	3d 87       	std	Y+13, r19	; 0x0d
    6502:	2c 87       	std	Y+12, r18	; 0x0c
    6504:	8c 85       	ldd	r24, Y+12	; 0x0c
    6506:	9d 85       	ldd	r25, Y+13	; 0x0d
    6508:	81 30       	cpi	r24, 0x01	; 1
    650a:	91 05       	cpc	r25, r1
    650c:	09 f4       	brne	.+2      	; 0x6510 <DIO_voidSetPinValue+0x4e>
    650e:	4f c0       	rjmp	.+158    	; 0x65ae <DIO_voidSetPinValue+0xec>
    6510:	2c 85       	ldd	r18, Y+12	; 0x0c
    6512:	3d 85       	ldd	r19, Y+13	; 0x0d
    6514:	22 30       	cpi	r18, 0x02	; 2
    6516:	31 05       	cpc	r19, r1
    6518:	2c f4       	brge	.+10     	; 0x6524 <DIO_voidSetPinValue+0x62>
    651a:	8c 85       	ldd	r24, Y+12	; 0x0c
    651c:	9d 85       	ldd	r25, Y+13	; 0x0d
    651e:	00 97       	sbiw	r24, 0x00	; 0
    6520:	71 f0       	breq	.+28     	; 0x653e <DIO_voidSetPinValue+0x7c>
    6522:	ec c0       	rjmp	.+472    	; 0x66fc <DIO_voidSetPinValue+0x23a>
    6524:	2c 85       	ldd	r18, Y+12	; 0x0c
    6526:	3d 85       	ldd	r19, Y+13	; 0x0d
    6528:	22 30       	cpi	r18, 0x02	; 2
    652a:	31 05       	cpc	r19, r1
    652c:	09 f4       	brne	.+2      	; 0x6530 <DIO_voidSetPinValue+0x6e>
    652e:	77 c0       	rjmp	.+238    	; 0x661e <DIO_voidSetPinValue+0x15c>
    6530:	8c 85       	ldd	r24, Y+12	; 0x0c
    6532:	9d 85       	ldd	r25, Y+13	; 0x0d
    6534:	83 30       	cpi	r24, 0x03	; 3
    6536:	91 05       	cpc	r25, r1
    6538:	09 f4       	brne	.+2      	; 0x653c <DIO_voidSetPinValue+0x7a>
    653a:	a9 c0       	rjmp	.+338    	; 0x668e <DIO_voidSetPinValue+0x1cc>
    653c:	df c0       	rjmp	.+446    	; 0x66fc <DIO_voidSetPinValue+0x23a>
		{
			case DIO_PORTA:
			switch(copy_u8PinValue)
    653e:	8b 81       	ldd	r24, Y+3	; 0x03
    6540:	28 2f       	mov	r18, r24
    6542:	30 e0       	ldi	r19, 0x00	; 0
    6544:	3b 87       	std	Y+11, r19	; 0x0b
    6546:	2a 87       	std	Y+10, r18	; 0x0a
    6548:	8a 85       	ldd	r24, Y+10	; 0x0a
    654a:	9b 85       	ldd	r25, Y+11	; 0x0b
    654c:	00 97       	sbiw	r24, 0x00	; 0
    654e:	31 f0       	breq	.+12     	; 0x655c <DIO_voidSetPinValue+0x9a>
    6550:	2a 85       	ldd	r18, Y+10	; 0x0a
    6552:	3b 85       	ldd	r19, Y+11	; 0x0b
    6554:	21 30       	cpi	r18, 0x01	; 1
    6556:	31 05       	cpc	r19, r1
    6558:	b1 f0       	breq	.+44     	; 0x6586 <DIO_voidSetPinValue+0xc4>
    655a:	d0 c0       	rjmp	.+416    	; 0x66fc <DIO_voidSetPinValue+0x23a>
			{
				case DIO_PIN_LOW:
				CLR_BIT(PORTA_REG,copy_u8PinId);
    655c:	ab e3       	ldi	r26, 0x3B	; 59
    655e:	b0 e0       	ldi	r27, 0x00	; 0
    6560:	eb e3       	ldi	r30, 0x3B	; 59
    6562:	f0 e0       	ldi	r31, 0x00	; 0
    6564:	80 81       	ld	r24, Z
    6566:	48 2f       	mov	r20, r24
    6568:	8a 81       	ldd	r24, Y+2	; 0x02
    656a:	28 2f       	mov	r18, r24
    656c:	30 e0       	ldi	r19, 0x00	; 0
    656e:	81 e0       	ldi	r24, 0x01	; 1
    6570:	90 e0       	ldi	r25, 0x00	; 0
    6572:	02 2e       	mov	r0, r18
    6574:	02 c0       	rjmp	.+4      	; 0x657a <DIO_voidSetPinValue+0xb8>
    6576:	88 0f       	add	r24, r24
    6578:	99 1f       	adc	r25, r25
    657a:	0a 94       	dec	r0
    657c:	e2 f7       	brpl	.-8      	; 0x6576 <DIO_voidSetPinValue+0xb4>
    657e:	80 95       	com	r24
    6580:	84 23       	and	r24, r20
    6582:	8c 93       	st	X, r24
    6584:	bb c0       	rjmp	.+374    	; 0x66fc <DIO_voidSetPinValue+0x23a>
				break;
				
				case DIO_PIN_HIGH:
				SET_BIT(PORTA_REG,copy_u8PinId);
    6586:	ab e3       	ldi	r26, 0x3B	; 59
    6588:	b0 e0       	ldi	r27, 0x00	; 0
    658a:	eb e3       	ldi	r30, 0x3B	; 59
    658c:	f0 e0       	ldi	r31, 0x00	; 0
    658e:	80 81       	ld	r24, Z
    6590:	48 2f       	mov	r20, r24
    6592:	8a 81       	ldd	r24, Y+2	; 0x02
    6594:	28 2f       	mov	r18, r24
    6596:	30 e0       	ldi	r19, 0x00	; 0
    6598:	81 e0       	ldi	r24, 0x01	; 1
    659a:	90 e0       	ldi	r25, 0x00	; 0
    659c:	02 2e       	mov	r0, r18
    659e:	02 c0       	rjmp	.+4      	; 0x65a4 <DIO_voidSetPinValue+0xe2>
    65a0:	88 0f       	add	r24, r24
    65a2:	99 1f       	adc	r25, r25
    65a4:	0a 94       	dec	r0
    65a6:	e2 f7       	brpl	.-8      	; 0x65a0 <DIO_voidSetPinValue+0xde>
    65a8:	84 2b       	or	r24, r20
    65aa:	8c 93       	st	X, r24
    65ac:	a7 c0       	rjmp	.+334    	; 0x66fc <DIO_voidSetPinValue+0x23a>
				break;
			}
			break;
			
			case DIO_PORTB:
			switch(copy_u8PinValue)
    65ae:	8b 81       	ldd	r24, Y+3	; 0x03
    65b0:	28 2f       	mov	r18, r24
    65b2:	30 e0       	ldi	r19, 0x00	; 0
    65b4:	39 87       	std	Y+9, r19	; 0x09
    65b6:	28 87       	std	Y+8, r18	; 0x08
    65b8:	88 85       	ldd	r24, Y+8	; 0x08
    65ba:	99 85       	ldd	r25, Y+9	; 0x09
    65bc:	00 97       	sbiw	r24, 0x00	; 0
    65be:	31 f0       	breq	.+12     	; 0x65cc <DIO_voidSetPinValue+0x10a>
    65c0:	28 85       	ldd	r18, Y+8	; 0x08
    65c2:	39 85       	ldd	r19, Y+9	; 0x09
    65c4:	21 30       	cpi	r18, 0x01	; 1
    65c6:	31 05       	cpc	r19, r1
    65c8:	b1 f0       	breq	.+44     	; 0x65f6 <DIO_voidSetPinValue+0x134>
    65ca:	98 c0       	rjmp	.+304    	; 0x66fc <DIO_voidSetPinValue+0x23a>
			{
				case DIO_PIN_LOW:
				CLR_BIT(PORTB_REG,copy_u8PinId);
    65cc:	a8 e3       	ldi	r26, 0x38	; 56
    65ce:	b0 e0       	ldi	r27, 0x00	; 0
    65d0:	e8 e3       	ldi	r30, 0x38	; 56
    65d2:	f0 e0       	ldi	r31, 0x00	; 0
    65d4:	80 81       	ld	r24, Z
    65d6:	48 2f       	mov	r20, r24
    65d8:	8a 81       	ldd	r24, Y+2	; 0x02
    65da:	28 2f       	mov	r18, r24
    65dc:	30 e0       	ldi	r19, 0x00	; 0
    65de:	81 e0       	ldi	r24, 0x01	; 1
    65e0:	90 e0       	ldi	r25, 0x00	; 0
    65e2:	02 2e       	mov	r0, r18
    65e4:	02 c0       	rjmp	.+4      	; 0x65ea <DIO_voidSetPinValue+0x128>
    65e6:	88 0f       	add	r24, r24
    65e8:	99 1f       	adc	r25, r25
    65ea:	0a 94       	dec	r0
    65ec:	e2 f7       	brpl	.-8      	; 0x65e6 <DIO_voidSetPinValue+0x124>
    65ee:	80 95       	com	r24
    65f0:	84 23       	and	r24, r20
    65f2:	8c 93       	st	X, r24
    65f4:	83 c0       	rjmp	.+262    	; 0x66fc <DIO_voidSetPinValue+0x23a>
				break;
				
				case DIO_PIN_HIGH:
				SET_BIT(PORTB_REG,copy_u8PinId);
    65f6:	a8 e3       	ldi	r26, 0x38	; 56
    65f8:	b0 e0       	ldi	r27, 0x00	; 0
    65fa:	e8 e3       	ldi	r30, 0x38	; 56
    65fc:	f0 e0       	ldi	r31, 0x00	; 0
    65fe:	80 81       	ld	r24, Z
    6600:	48 2f       	mov	r20, r24
    6602:	8a 81       	ldd	r24, Y+2	; 0x02
    6604:	28 2f       	mov	r18, r24
    6606:	30 e0       	ldi	r19, 0x00	; 0
    6608:	81 e0       	ldi	r24, 0x01	; 1
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	02 2e       	mov	r0, r18
    660e:	02 c0       	rjmp	.+4      	; 0x6614 <DIO_voidSetPinValue+0x152>
    6610:	88 0f       	add	r24, r24
    6612:	99 1f       	adc	r25, r25
    6614:	0a 94       	dec	r0
    6616:	e2 f7       	brpl	.-8      	; 0x6610 <DIO_voidSetPinValue+0x14e>
    6618:	84 2b       	or	r24, r20
    661a:	8c 93       	st	X, r24
    661c:	6f c0       	rjmp	.+222    	; 0x66fc <DIO_voidSetPinValue+0x23a>
				break;
			}
			break;
			
			case DIO_PORTC:
			switch(copy_u8PinValue)
    661e:	8b 81       	ldd	r24, Y+3	; 0x03
    6620:	28 2f       	mov	r18, r24
    6622:	30 e0       	ldi	r19, 0x00	; 0
    6624:	3f 83       	std	Y+7, r19	; 0x07
    6626:	2e 83       	std	Y+6, r18	; 0x06
    6628:	8e 81       	ldd	r24, Y+6	; 0x06
    662a:	9f 81       	ldd	r25, Y+7	; 0x07
    662c:	00 97       	sbiw	r24, 0x00	; 0
    662e:	31 f0       	breq	.+12     	; 0x663c <DIO_voidSetPinValue+0x17a>
    6630:	2e 81       	ldd	r18, Y+6	; 0x06
    6632:	3f 81       	ldd	r19, Y+7	; 0x07
    6634:	21 30       	cpi	r18, 0x01	; 1
    6636:	31 05       	cpc	r19, r1
    6638:	b1 f0       	breq	.+44     	; 0x6666 <DIO_voidSetPinValue+0x1a4>
    663a:	60 c0       	rjmp	.+192    	; 0x66fc <DIO_voidSetPinValue+0x23a>
			{
				case DIO_PIN_LOW:
				CLR_BIT(PORTC_REG,copy_u8PinId);
    663c:	a5 e3       	ldi	r26, 0x35	; 53
    663e:	b0 e0       	ldi	r27, 0x00	; 0
    6640:	e5 e3       	ldi	r30, 0x35	; 53
    6642:	f0 e0       	ldi	r31, 0x00	; 0
    6644:	80 81       	ld	r24, Z
    6646:	48 2f       	mov	r20, r24
    6648:	8a 81       	ldd	r24, Y+2	; 0x02
    664a:	28 2f       	mov	r18, r24
    664c:	30 e0       	ldi	r19, 0x00	; 0
    664e:	81 e0       	ldi	r24, 0x01	; 1
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	02 2e       	mov	r0, r18
    6654:	02 c0       	rjmp	.+4      	; 0x665a <DIO_voidSetPinValue+0x198>
    6656:	88 0f       	add	r24, r24
    6658:	99 1f       	adc	r25, r25
    665a:	0a 94       	dec	r0
    665c:	e2 f7       	brpl	.-8      	; 0x6656 <DIO_voidSetPinValue+0x194>
    665e:	80 95       	com	r24
    6660:	84 23       	and	r24, r20
    6662:	8c 93       	st	X, r24
    6664:	4b c0       	rjmp	.+150    	; 0x66fc <DIO_voidSetPinValue+0x23a>
				break;
				
				case DIO_PIN_HIGH:
				SET_BIT(PORTC_REG,copy_u8PinId);
    6666:	a5 e3       	ldi	r26, 0x35	; 53
    6668:	b0 e0       	ldi	r27, 0x00	; 0
    666a:	e5 e3       	ldi	r30, 0x35	; 53
    666c:	f0 e0       	ldi	r31, 0x00	; 0
    666e:	80 81       	ld	r24, Z
    6670:	48 2f       	mov	r20, r24
    6672:	8a 81       	ldd	r24, Y+2	; 0x02
    6674:	28 2f       	mov	r18, r24
    6676:	30 e0       	ldi	r19, 0x00	; 0
    6678:	81 e0       	ldi	r24, 0x01	; 1
    667a:	90 e0       	ldi	r25, 0x00	; 0
    667c:	02 2e       	mov	r0, r18
    667e:	02 c0       	rjmp	.+4      	; 0x6684 <DIO_voidSetPinValue+0x1c2>
    6680:	88 0f       	add	r24, r24
    6682:	99 1f       	adc	r25, r25
    6684:	0a 94       	dec	r0
    6686:	e2 f7       	brpl	.-8      	; 0x6680 <DIO_voidSetPinValue+0x1be>
    6688:	84 2b       	or	r24, r20
    668a:	8c 93       	st	X, r24
    668c:	37 c0       	rjmp	.+110    	; 0x66fc <DIO_voidSetPinValue+0x23a>
				break;
			}
			break;
			
			case DIO_PORTD:
			switch(copy_u8PinValue)
    668e:	8b 81       	ldd	r24, Y+3	; 0x03
    6690:	28 2f       	mov	r18, r24
    6692:	30 e0       	ldi	r19, 0x00	; 0
    6694:	3d 83       	std	Y+5, r19	; 0x05
    6696:	2c 83       	std	Y+4, r18	; 0x04
    6698:	8c 81       	ldd	r24, Y+4	; 0x04
    669a:	9d 81       	ldd	r25, Y+5	; 0x05
    669c:	00 97       	sbiw	r24, 0x00	; 0
    669e:	31 f0       	breq	.+12     	; 0x66ac <DIO_voidSetPinValue+0x1ea>
    66a0:	2c 81       	ldd	r18, Y+4	; 0x04
    66a2:	3d 81       	ldd	r19, Y+5	; 0x05
    66a4:	21 30       	cpi	r18, 0x01	; 1
    66a6:	31 05       	cpc	r19, r1
    66a8:	b1 f0       	breq	.+44     	; 0x66d6 <DIO_voidSetPinValue+0x214>
    66aa:	28 c0       	rjmp	.+80     	; 0x66fc <DIO_voidSetPinValue+0x23a>
			{
				case DIO_PIN_LOW:
				CLR_BIT(PORTD_REG,copy_u8PinId);
    66ac:	a2 e3       	ldi	r26, 0x32	; 50
    66ae:	b0 e0       	ldi	r27, 0x00	; 0
    66b0:	e2 e3       	ldi	r30, 0x32	; 50
    66b2:	f0 e0       	ldi	r31, 0x00	; 0
    66b4:	80 81       	ld	r24, Z
    66b6:	48 2f       	mov	r20, r24
    66b8:	8a 81       	ldd	r24, Y+2	; 0x02
    66ba:	28 2f       	mov	r18, r24
    66bc:	30 e0       	ldi	r19, 0x00	; 0
    66be:	81 e0       	ldi	r24, 0x01	; 1
    66c0:	90 e0       	ldi	r25, 0x00	; 0
    66c2:	02 2e       	mov	r0, r18
    66c4:	02 c0       	rjmp	.+4      	; 0x66ca <DIO_voidSetPinValue+0x208>
    66c6:	88 0f       	add	r24, r24
    66c8:	99 1f       	adc	r25, r25
    66ca:	0a 94       	dec	r0
    66cc:	e2 f7       	brpl	.-8      	; 0x66c6 <DIO_voidSetPinValue+0x204>
    66ce:	80 95       	com	r24
    66d0:	84 23       	and	r24, r20
    66d2:	8c 93       	st	X, r24
    66d4:	13 c0       	rjmp	.+38     	; 0x66fc <DIO_voidSetPinValue+0x23a>
				break;
				
				case DIO_PIN_HIGH:
				SET_BIT(PORTD_REG,copy_u8PinId);
    66d6:	a2 e3       	ldi	r26, 0x32	; 50
    66d8:	b0 e0       	ldi	r27, 0x00	; 0
    66da:	e2 e3       	ldi	r30, 0x32	; 50
    66dc:	f0 e0       	ldi	r31, 0x00	; 0
    66de:	80 81       	ld	r24, Z
    66e0:	48 2f       	mov	r20, r24
    66e2:	8a 81       	ldd	r24, Y+2	; 0x02
    66e4:	28 2f       	mov	r18, r24
    66e6:	30 e0       	ldi	r19, 0x00	; 0
    66e8:	81 e0       	ldi	r24, 0x01	; 1
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	02 2e       	mov	r0, r18
    66ee:	02 c0       	rjmp	.+4      	; 0x66f4 <DIO_voidSetPinValue+0x232>
    66f0:	88 0f       	add	r24, r24
    66f2:	99 1f       	adc	r25, r25
    66f4:	0a 94       	dec	r0
    66f6:	e2 f7       	brpl	.-8      	; 0x66f0 <DIO_voidSetPinValue+0x22e>
    66f8:	84 2b       	or	r24, r20
    66fa:	8c 93       	st	X, r24
	else
	{
		//Return Error Statement
	}
	
}
    66fc:	2d 96       	adiw	r28, 0x0d	; 13
    66fe:	0f b6       	in	r0, 0x3f	; 63
    6700:	f8 94       	cli
    6702:	de bf       	out	0x3e, r29	; 62
    6704:	0f be       	out	0x3f, r0	; 63
    6706:	cd bf       	out	0x3d, r28	; 61
    6708:	cf 91       	pop	r28
    670a:	df 91       	pop	r29
    670c:	08 95       	ret

0000670e <DIO_voidGetPinValue>:
void DIO_voidGetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8* copy_pu8PinValue)
{
    670e:	df 93       	push	r29
    6710:	cf 93       	push	r28
    6712:	00 d0       	rcall	.+0      	; 0x6714 <DIO_voidGetPinValue+0x6>
    6714:	00 d0       	rcall	.+0      	; 0x6716 <DIO_voidGetPinValue+0x8>
    6716:	00 d0       	rcall	.+0      	; 0x6718 <DIO_voidGetPinValue+0xa>
    6718:	cd b7       	in	r28, 0x3d	; 61
    671a:	de b7       	in	r29, 0x3e	; 62
    671c:	89 83       	std	Y+1, r24	; 0x01
    671e:	6a 83       	std	Y+2, r22	; 0x02
    6720:	5c 83       	std	Y+4, r21	; 0x04
    6722:	4b 83       	std	Y+3, r20	; 0x03
	if ((copy_u8PortId<4) && (copy_u8PinId<8) && (copy_pu8PinValue != NULL))
    6724:	89 81       	ldd	r24, Y+1	; 0x01
    6726:	84 30       	cpi	r24, 0x04	; 4
    6728:	08 f0       	brcs	.+2      	; 0x672c <DIO_voidGetPinValue+0x1e>
    672a:	79 c0       	rjmp	.+242    	; 0x681e <DIO_voidGetPinValue+0x110>
    672c:	8a 81       	ldd	r24, Y+2	; 0x02
    672e:	88 30       	cpi	r24, 0x08	; 8
    6730:	08 f0       	brcs	.+2      	; 0x6734 <DIO_voidGetPinValue+0x26>
    6732:	75 c0       	rjmp	.+234    	; 0x681e <DIO_voidGetPinValue+0x110>
    6734:	8b 81       	ldd	r24, Y+3	; 0x03
    6736:	9c 81       	ldd	r25, Y+4	; 0x04
    6738:	00 97       	sbiw	r24, 0x00	; 0
    673a:	09 f4       	brne	.+2      	; 0x673e <DIO_voidGetPinValue+0x30>
    673c:	70 c0       	rjmp	.+224    	; 0x681e <DIO_voidGetPinValue+0x110>
	{
		switch(copy_u8PortId)
    673e:	89 81       	ldd	r24, Y+1	; 0x01
    6740:	28 2f       	mov	r18, r24
    6742:	30 e0       	ldi	r19, 0x00	; 0
    6744:	3e 83       	std	Y+6, r19	; 0x06
    6746:	2d 83       	std	Y+5, r18	; 0x05
    6748:	4d 81       	ldd	r20, Y+5	; 0x05
    674a:	5e 81       	ldd	r21, Y+6	; 0x06
    674c:	41 30       	cpi	r20, 0x01	; 1
    674e:	51 05       	cpc	r21, r1
    6750:	59 f1       	breq	.+86     	; 0x67a8 <DIO_voidGetPinValue+0x9a>
    6752:	8d 81       	ldd	r24, Y+5	; 0x05
    6754:	9e 81       	ldd	r25, Y+6	; 0x06
    6756:	82 30       	cpi	r24, 0x02	; 2
    6758:	91 05       	cpc	r25, r1
    675a:	34 f4       	brge	.+12     	; 0x6768 <DIO_voidGetPinValue+0x5a>
    675c:	2d 81       	ldd	r18, Y+5	; 0x05
    675e:	3e 81       	ldd	r19, Y+6	; 0x06
    6760:	21 15       	cp	r18, r1
    6762:	31 05       	cpc	r19, r1
    6764:	69 f0       	breq	.+26     	; 0x6780 <DIO_voidGetPinValue+0x72>
    6766:	5b c0       	rjmp	.+182    	; 0x681e <DIO_voidGetPinValue+0x110>
    6768:	4d 81       	ldd	r20, Y+5	; 0x05
    676a:	5e 81       	ldd	r21, Y+6	; 0x06
    676c:	42 30       	cpi	r20, 0x02	; 2
    676e:	51 05       	cpc	r21, r1
    6770:	79 f1       	breq	.+94     	; 0x67d0 <DIO_voidGetPinValue+0xc2>
    6772:	8d 81       	ldd	r24, Y+5	; 0x05
    6774:	9e 81       	ldd	r25, Y+6	; 0x06
    6776:	83 30       	cpi	r24, 0x03	; 3
    6778:	91 05       	cpc	r25, r1
    677a:	09 f4       	brne	.+2      	; 0x677e <DIO_voidGetPinValue+0x70>
    677c:	3d c0       	rjmp	.+122    	; 0x67f8 <DIO_voidGetPinValue+0xea>
    677e:	4f c0       	rjmp	.+158    	; 0x681e <DIO_voidGetPinValue+0x110>
		{
			case DIO_PORTA:
			*copy_pu8PinValue = GET_BIT(PINA_REG,copy_u8PinId);
    6780:	e9 e3       	ldi	r30, 0x39	; 57
    6782:	f0 e0       	ldi	r31, 0x00	; 0
    6784:	80 81       	ld	r24, Z
    6786:	28 2f       	mov	r18, r24
    6788:	30 e0       	ldi	r19, 0x00	; 0
    678a:	8a 81       	ldd	r24, Y+2	; 0x02
    678c:	88 2f       	mov	r24, r24
    678e:	90 e0       	ldi	r25, 0x00	; 0
    6790:	a9 01       	movw	r20, r18
    6792:	02 c0       	rjmp	.+4      	; 0x6798 <DIO_voidGetPinValue+0x8a>
    6794:	55 95       	asr	r21
    6796:	47 95       	ror	r20
    6798:	8a 95       	dec	r24
    679a:	e2 f7       	brpl	.-8      	; 0x6794 <DIO_voidGetPinValue+0x86>
    679c:	ca 01       	movw	r24, r20
    679e:	81 70       	andi	r24, 0x01	; 1
    67a0:	eb 81       	ldd	r30, Y+3	; 0x03
    67a2:	fc 81       	ldd	r31, Y+4	; 0x04
    67a4:	80 83       	st	Z, r24
    67a6:	3b c0       	rjmp	.+118    	; 0x681e <DIO_voidGetPinValue+0x110>
			break;
			
			case DIO_PORTB:
			*copy_pu8PinValue = GET_BIT(PINB_REG,copy_u8PinId);
    67a8:	e6 e3       	ldi	r30, 0x36	; 54
    67aa:	f0 e0       	ldi	r31, 0x00	; 0
    67ac:	80 81       	ld	r24, Z
    67ae:	28 2f       	mov	r18, r24
    67b0:	30 e0       	ldi	r19, 0x00	; 0
    67b2:	8a 81       	ldd	r24, Y+2	; 0x02
    67b4:	88 2f       	mov	r24, r24
    67b6:	90 e0       	ldi	r25, 0x00	; 0
    67b8:	a9 01       	movw	r20, r18
    67ba:	02 c0       	rjmp	.+4      	; 0x67c0 <DIO_voidGetPinValue+0xb2>
    67bc:	55 95       	asr	r21
    67be:	47 95       	ror	r20
    67c0:	8a 95       	dec	r24
    67c2:	e2 f7       	brpl	.-8      	; 0x67bc <DIO_voidGetPinValue+0xae>
    67c4:	ca 01       	movw	r24, r20
    67c6:	81 70       	andi	r24, 0x01	; 1
    67c8:	eb 81       	ldd	r30, Y+3	; 0x03
    67ca:	fc 81       	ldd	r31, Y+4	; 0x04
    67cc:	80 83       	st	Z, r24
    67ce:	27 c0       	rjmp	.+78     	; 0x681e <DIO_voidGetPinValue+0x110>
			break;
			
			case DIO_PORTC:
			*copy_pu8PinValue = GET_BIT(PINC_REG,copy_u8PinId);
    67d0:	e3 e3       	ldi	r30, 0x33	; 51
    67d2:	f0 e0       	ldi	r31, 0x00	; 0
    67d4:	80 81       	ld	r24, Z
    67d6:	28 2f       	mov	r18, r24
    67d8:	30 e0       	ldi	r19, 0x00	; 0
    67da:	8a 81       	ldd	r24, Y+2	; 0x02
    67dc:	88 2f       	mov	r24, r24
    67de:	90 e0       	ldi	r25, 0x00	; 0
    67e0:	a9 01       	movw	r20, r18
    67e2:	02 c0       	rjmp	.+4      	; 0x67e8 <DIO_voidGetPinValue+0xda>
    67e4:	55 95       	asr	r21
    67e6:	47 95       	ror	r20
    67e8:	8a 95       	dec	r24
    67ea:	e2 f7       	brpl	.-8      	; 0x67e4 <DIO_voidGetPinValue+0xd6>
    67ec:	ca 01       	movw	r24, r20
    67ee:	81 70       	andi	r24, 0x01	; 1
    67f0:	eb 81       	ldd	r30, Y+3	; 0x03
    67f2:	fc 81       	ldd	r31, Y+4	; 0x04
    67f4:	80 83       	st	Z, r24
    67f6:	13 c0       	rjmp	.+38     	; 0x681e <DIO_voidGetPinValue+0x110>
			break;
			
			case DIO_PORTD:
			*copy_pu8PinValue = GET_BIT(PIND_REG,copy_u8PinId);
    67f8:	e0 e3       	ldi	r30, 0x30	; 48
    67fa:	f0 e0       	ldi	r31, 0x00	; 0
    67fc:	80 81       	ld	r24, Z
    67fe:	28 2f       	mov	r18, r24
    6800:	30 e0       	ldi	r19, 0x00	; 0
    6802:	8a 81       	ldd	r24, Y+2	; 0x02
    6804:	88 2f       	mov	r24, r24
    6806:	90 e0       	ldi	r25, 0x00	; 0
    6808:	a9 01       	movw	r20, r18
    680a:	02 c0       	rjmp	.+4      	; 0x6810 <DIO_voidGetPinValue+0x102>
    680c:	55 95       	asr	r21
    680e:	47 95       	ror	r20
    6810:	8a 95       	dec	r24
    6812:	e2 f7       	brpl	.-8      	; 0x680c <DIO_voidGetPinValue+0xfe>
    6814:	ca 01       	movw	r24, r20
    6816:	81 70       	andi	r24, 0x01	; 1
    6818:	eb 81       	ldd	r30, Y+3	; 0x03
    681a:	fc 81       	ldd	r31, Y+4	; 0x04
    681c:	80 83       	st	Z, r24
	{
		//Return Error Statement

	}
	
}
    681e:	26 96       	adiw	r28, 0x06	; 6
    6820:	0f b6       	in	r0, 0x3f	; 63
    6822:	f8 94       	cli
    6824:	de bf       	out	0x3e, r29	; 62
    6826:	0f be       	out	0x3f, r0	; 63
    6828:	cd bf       	out	0x3d, r28	; 61
    682a:	cf 91       	pop	r28
    682c:	df 91       	pop	r29
    682e:	08 95       	ret

00006830 <DIO_voidTogglePinValue>:
void DIO_voidTogglePinValue(u8 copy_u8PortId, u8 copy_u8PinId)
{
    6830:	df 93       	push	r29
    6832:	cf 93       	push	r28
    6834:	00 d0       	rcall	.+0      	; 0x6836 <DIO_voidTogglePinValue+0x6>
    6836:	00 d0       	rcall	.+0      	; 0x6838 <DIO_voidTogglePinValue+0x8>
    6838:	cd b7       	in	r28, 0x3d	; 61
    683a:	de b7       	in	r29, 0x3e	; 62
    683c:	89 83       	std	Y+1, r24	; 0x01
    683e:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId<4) && (copy_u8PinId<8))
    6840:	89 81       	ldd	r24, Y+1	; 0x01
    6842:	84 30       	cpi	r24, 0x04	; 4
    6844:	08 f0       	brcs	.+2      	; 0x6848 <DIO_voidTogglePinValue+0x18>
    6846:	72 c0       	rjmp	.+228    	; 0x692c <DIO_voidTogglePinValue+0xfc>
    6848:	8a 81       	ldd	r24, Y+2	; 0x02
    684a:	88 30       	cpi	r24, 0x08	; 8
    684c:	08 f0       	brcs	.+2      	; 0x6850 <DIO_voidTogglePinValue+0x20>
    684e:	6e c0       	rjmp	.+220    	; 0x692c <DIO_voidTogglePinValue+0xfc>
	{
		switch(copy_u8PortId)
    6850:	89 81       	ldd	r24, Y+1	; 0x01
    6852:	28 2f       	mov	r18, r24
    6854:	30 e0       	ldi	r19, 0x00	; 0
    6856:	3c 83       	std	Y+4, r19	; 0x04
    6858:	2b 83       	std	Y+3, r18	; 0x03
    685a:	8b 81       	ldd	r24, Y+3	; 0x03
    685c:	9c 81       	ldd	r25, Y+4	; 0x04
    685e:	81 30       	cpi	r24, 0x01	; 1
    6860:	91 05       	cpc	r25, r1
    6862:	49 f1       	breq	.+82     	; 0x68b6 <DIO_voidTogglePinValue+0x86>
    6864:	2b 81       	ldd	r18, Y+3	; 0x03
    6866:	3c 81       	ldd	r19, Y+4	; 0x04
    6868:	22 30       	cpi	r18, 0x02	; 2
    686a:	31 05       	cpc	r19, r1
    686c:	2c f4       	brge	.+10     	; 0x6878 <DIO_voidTogglePinValue+0x48>
    686e:	8b 81       	ldd	r24, Y+3	; 0x03
    6870:	9c 81       	ldd	r25, Y+4	; 0x04
    6872:	00 97       	sbiw	r24, 0x00	; 0
    6874:	61 f0       	breq	.+24     	; 0x688e <DIO_voidTogglePinValue+0x5e>
    6876:	5a c0       	rjmp	.+180    	; 0x692c <DIO_voidTogglePinValue+0xfc>
    6878:	2b 81       	ldd	r18, Y+3	; 0x03
    687a:	3c 81       	ldd	r19, Y+4	; 0x04
    687c:	22 30       	cpi	r18, 0x02	; 2
    687e:	31 05       	cpc	r19, r1
    6880:	71 f1       	breq	.+92     	; 0x68de <DIO_voidTogglePinValue+0xae>
    6882:	8b 81       	ldd	r24, Y+3	; 0x03
    6884:	9c 81       	ldd	r25, Y+4	; 0x04
    6886:	83 30       	cpi	r24, 0x03	; 3
    6888:	91 05       	cpc	r25, r1
    688a:	e9 f1       	breq	.+122    	; 0x6906 <DIO_voidTogglePinValue+0xd6>
    688c:	4f c0       	rjmp	.+158    	; 0x692c <DIO_voidTogglePinValue+0xfc>
		{
			case DIO_PORTA:
			TOG_BIT(PORTA_REG,copy_u8PinId);
    688e:	ab e3       	ldi	r26, 0x3B	; 59
    6890:	b0 e0       	ldi	r27, 0x00	; 0
    6892:	eb e3       	ldi	r30, 0x3B	; 59
    6894:	f0 e0       	ldi	r31, 0x00	; 0
    6896:	80 81       	ld	r24, Z
    6898:	48 2f       	mov	r20, r24
    689a:	8a 81       	ldd	r24, Y+2	; 0x02
    689c:	28 2f       	mov	r18, r24
    689e:	30 e0       	ldi	r19, 0x00	; 0
    68a0:	81 e0       	ldi	r24, 0x01	; 1
    68a2:	90 e0       	ldi	r25, 0x00	; 0
    68a4:	02 2e       	mov	r0, r18
    68a6:	02 c0       	rjmp	.+4      	; 0x68ac <DIO_voidTogglePinValue+0x7c>
    68a8:	88 0f       	add	r24, r24
    68aa:	99 1f       	adc	r25, r25
    68ac:	0a 94       	dec	r0
    68ae:	e2 f7       	brpl	.-8      	; 0x68a8 <DIO_voidTogglePinValue+0x78>
    68b0:	84 27       	eor	r24, r20
    68b2:	8c 93       	st	X, r24
    68b4:	3b c0       	rjmp	.+118    	; 0x692c <DIO_voidTogglePinValue+0xfc>
			break; 
			
			case DIO_PORTB:
			TOG_BIT(PORTB_REG,copy_u8PinId);
    68b6:	a8 e3       	ldi	r26, 0x38	; 56
    68b8:	b0 e0       	ldi	r27, 0x00	; 0
    68ba:	e8 e3       	ldi	r30, 0x38	; 56
    68bc:	f0 e0       	ldi	r31, 0x00	; 0
    68be:	80 81       	ld	r24, Z
    68c0:	48 2f       	mov	r20, r24
    68c2:	8a 81       	ldd	r24, Y+2	; 0x02
    68c4:	28 2f       	mov	r18, r24
    68c6:	30 e0       	ldi	r19, 0x00	; 0
    68c8:	81 e0       	ldi	r24, 0x01	; 1
    68ca:	90 e0       	ldi	r25, 0x00	; 0
    68cc:	02 2e       	mov	r0, r18
    68ce:	02 c0       	rjmp	.+4      	; 0x68d4 <DIO_voidTogglePinValue+0xa4>
    68d0:	88 0f       	add	r24, r24
    68d2:	99 1f       	adc	r25, r25
    68d4:	0a 94       	dec	r0
    68d6:	e2 f7       	brpl	.-8      	; 0x68d0 <DIO_voidTogglePinValue+0xa0>
    68d8:	84 27       	eor	r24, r20
    68da:	8c 93       	st	X, r24
    68dc:	27 c0       	rjmp	.+78     	; 0x692c <DIO_voidTogglePinValue+0xfc>
			break;
			
			case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
    68de:	a5 e3       	ldi	r26, 0x35	; 53
    68e0:	b0 e0       	ldi	r27, 0x00	; 0
    68e2:	e5 e3       	ldi	r30, 0x35	; 53
    68e4:	f0 e0       	ldi	r31, 0x00	; 0
    68e6:	80 81       	ld	r24, Z
    68e8:	48 2f       	mov	r20, r24
    68ea:	8a 81       	ldd	r24, Y+2	; 0x02
    68ec:	28 2f       	mov	r18, r24
    68ee:	30 e0       	ldi	r19, 0x00	; 0
    68f0:	81 e0       	ldi	r24, 0x01	; 1
    68f2:	90 e0       	ldi	r25, 0x00	; 0
    68f4:	02 2e       	mov	r0, r18
    68f6:	02 c0       	rjmp	.+4      	; 0x68fc <DIO_voidTogglePinValue+0xcc>
    68f8:	88 0f       	add	r24, r24
    68fa:	99 1f       	adc	r25, r25
    68fc:	0a 94       	dec	r0
    68fe:	e2 f7       	brpl	.-8      	; 0x68f8 <DIO_voidTogglePinValue+0xc8>
    6900:	84 27       	eor	r24, r20
    6902:	8c 93       	st	X, r24
    6904:	13 c0       	rjmp	.+38     	; 0x692c <DIO_voidTogglePinValue+0xfc>
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
    6906:	a2 e3       	ldi	r26, 0x32	; 50
    6908:	b0 e0       	ldi	r27, 0x00	; 0
    690a:	e2 e3       	ldi	r30, 0x32	; 50
    690c:	f0 e0       	ldi	r31, 0x00	; 0
    690e:	80 81       	ld	r24, Z
    6910:	48 2f       	mov	r20, r24
    6912:	8a 81       	ldd	r24, Y+2	; 0x02
    6914:	28 2f       	mov	r18, r24
    6916:	30 e0       	ldi	r19, 0x00	; 0
    6918:	81 e0       	ldi	r24, 0x01	; 1
    691a:	90 e0       	ldi	r25, 0x00	; 0
    691c:	02 2e       	mov	r0, r18
    691e:	02 c0       	rjmp	.+4      	; 0x6924 <DIO_voidTogglePinValue+0xf4>
    6920:	88 0f       	add	r24, r24
    6922:	99 1f       	adc	r25, r25
    6924:	0a 94       	dec	r0
    6926:	e2 f7       	brpl	.-8      	; 0x6920 <DIO_voidTogglePinValue+0xf0>
    6928:	84 27       	eor	r24, r20
    692a:	8c 93       	st	X, r24
	{
		//Return Error Statement

	}
	
}
    692c:	0f 90       	pop	r0
    692e:	0f 90       	pop	r0
    6930:	0f 90       	pop	r0
    6932:	0f 90       	pop	r0
    6934:	cf 91       	pop	r28
    6936:	df 91       	pop	r29
    6938:	08 95       	ret

0000693a <DIO_voidActiveIntPullUpResistance>:
void DIO_voidActiveIntPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
    693a:	df 93       	push	r29
    693c:	cf 93       	push	r28
    693e:	00 d0       	rcall	.+0      	; 0x6940 <DIO_voidActiveIntPullUpResistance+0x6>
    6940:	00 d0       	rcall	.+0      	; 0x6942 <DIO_voidActiveIntPullUpResistance+0x8>
    6942:	cd b7       	in	r28, 0x3d	; 61
    6944:	de b7       	in	r29, 0x3e	; 62
    6946:	89 83       	std	Y+1, r24	; 0x01
    6948:	6a 83       	std	Y+2, r22	; 0x02
	//Pin Direction Should be Input To Active Internal PullUp Resistance
	if ((copy_u8PortId<4) && (copy_u8PinId<8))
    694a:	89 81       	ldd	r24, Y+1	; 0x01
    694c:	84 30       	cpi	r24, 0x04	; 4
    694e:	08 f0       	brcs	.+2      	; 0x6952 <DIO_voidActiveIntPullUpResistance+0x18>
    6950:	72 c0       	rjmp	.+228    	; 0x6a36 <DIO_voidActiveIntPullUpResistance+0xfc>
    6952:	8a 81       	ldd	r24, Y+2	; 0x02
    6954:	88 30       	cpi	r24, 0x08	; 8
    6956:	08 f0       	brcs	.+2      	; 0x695a <DIO_voidActiveIntPullUpResistance+0x20>
    6958:	6e c0       	rjmp	.+220    	; 0x6a36 <DIO_voidActiveIntPullUpResistance+0xfc>
	{
		switch(copy_u8PortId)
    695a:	89 81       	ldd	r24, Y+1	; 0x01
    695c:	28 2f       	mov	r18, r24
    695e:	30 e0       	ldi	r19, 0x00	; 0
    6960:	3c 83       	std	Y+4, r19	; 0x04
    6962:	2b 83       	std	Y+3, r18	; 0x03
    6964:	8b 81       	ldd	r24, Y+3	; 0x03
    6966:	9c 81       	ldd	r25, Y+4	; 0x04
    6968:	81 30       	cpi	r24, 0x01	; 1
    696a:	91 05       	cpc	r25, r1
    696c:	49 f1       	breq	.+82     	; 0x69c0 <DIO_voidActiveIntPullUpResistance+0x86>
    696e:	2b 81       	ldd	r18, Y+3	; 0x03
    6970:	3c 81       	ldd	r19, Y+4	; 0x04
    6972:	22 30       	cpi	r18, 0x02	; 2
    6974:	31 05       	cpc	r19, r1
    6976:	2c f4       	brge	.+10     	; 0x6982 <DIO_voidActiveIntPullUpResistance+0x48>
    6978:	8b 81       	ldd	r24, Y+3	; 0x03
    697a:	9c 81       	ldd	r25, Y+4	; 0x04
    697c:	00 97       	sbiw	r24, 0x00	; 0
    697e:	61 f0       	breq	.+24     	; 0x6998 <DIO_voidActiveIntPullUpResistance+0x5e>
    6980:	5a c0       	rjmp	.+180    	; 0x6a36 <DIO_voidActiveIntPullUpResistance+0xfc>
    6982:	2b 81       	ldd	r18, Y+3	; 0x03
    6984:	3c 81       	ldd	r19, Y+4	; 0x04
    6986:	22 30       	cpi	r18, 0x02	; 2
    6988:	31 05       	cpc	r19, r1
    698a:	71 f1       	breq	.+92     	; 0x69e8 <DIO_voidActiveIntPullUpResistance+0xae>
    698c:	8b 81       	ldd	r24, Y+3	; 0x03
    698e:	9c 81       	ldd	r25, Y+4	; 0x04
    6990:	83 30       	cpi	r24, 0x03	; 3
    6992:	91 05       	cpc	r25, r1
    6994:	e9 f1       	breq	.+122    	; 0x6a10 <DIO_voidActiveIntPullUpResistance+0xd6>
    6996:	4f c0       	rjmp	.+158    	; 0x6a36 <DIO_voidActiveIntPullUpResistance+0xfc>
		{
			case DIO_PORTA:
			SET_BIT(PORTA_REG,copy_u8PinId);
    6998:	ab e3       	ldi	r26, 0x3B	; 59
    699a:	b0 e0       	ldi	r27, 0x00	; 0
    699c:	eb e3       	ldi	r30, 0x3B	; 59
    699e:	f0 e0       	ldi	r31, 0x00	; 0
    69a0:	80 81       	ld	r24, Z
    69a2:	48 2f       	mov	r20, r24
    69a4:	8a 81       	ldd	r24, Y+2	; 0x02
    69a6:	28 2f       	mov	r18, r24
    69a8:	30 e0       	ldi	r19, 0x00	; 0
    69aa:	81 e0       	ldi	r24, 0x01	; 1
    69ac:	90 e0       	ldi	r25, 0x00	; 0
    69ae:	02 2e       	mov	r0, r18
    69b0:	02 c0       	rjmp	.+4      	; 0x69b6 <DIO_voidActiveIntPullUpResistance+0x7c>
    69b2:	88 0f       	add	r24, r24
    69b4:	99 1f       	adc	r25, r25
    69b6:	0a 94       	dec	r0
    69b8:	e2 f7       	brpl	.-8      	; 0x69b2 <DIO_voidActiveIntPullUpResistance+0x78>
    69ba:	84 2b       	or	r24, r20
    69bc:	8c 93       	st	X, r24
    69be:	3b c0       	rjmp	.+118    	; 0x6a36 <DIO_voidActiveIntPullUpResistance+0xfc>
			break;
			
			case DIO_PORTB:
			SET_BIT(PORTB_REG,copy_u8PinId);
    69c0:	a8 e3       	ldi	r26, 0x38	; 56
    69c2:	b0 e0       	ldi	r27, 0x00	; 0
    69c4:	e8 e3       	ldi	r30, 0x38	; 56
    69c6:	f0 e0       	ldi	r31, 0x00	; 0
    69c8:	80 81       	ld	r24, Z
    69ca:	48 2f       	mov	r20, r24
    69cc:	8a 81       	ldd	r24, Y+2	; 0x02
    69ce:	28 2f       	mov	r18, r24
    69d0:	30 e0       	ldi	r19, 0x00	; 0
    69d2:	81 e0       	ldi	r24, 0x01	; 1
    69d4:	90 e0       	ldi	r25, 0x00	; 0
    69d6:	02 2e       	mov	r0, r18
    69d8:	02 c0       	rjmp	.+4      	; 0x69de <DIO_voidActiveIntPullUpResistance+0xa4>
    69da:	88 0f       	add	r24, r24
    69dc:	99 1f       	adc	r25, r25
    69de:	0a 94       	dec	r0
    69e0:	e2 f7       	brpl	.-8      	; 0x69da <DIO_voidActiveIntPullUpResistance+0xa0>
    69e2:	84 2b       	or	r24, r20
    69e4:	8c 93       	st	X, r24
    69e6:	27 c0       	rjmp	.+78     	; 0x6a36 <DIO_voidActiveIntPullUpResistance+0xfc>
			break;
			
			case DIO_PORTC:
			SET_BIT(PORTC_REG,copy_u8PinId);
    69e8:	a5 e3       	ldi	r26, 0x35	; 53
    69ea:	b0 e0       	ldi	r27, 0x00	; 0
    69ec:	e5 e3       	ldi	r30, 0x35	; 53
    69ee:	f0 e0       	ldi	r31, 0x00	; 0
    69f0:	80 81       	ld	r24, Z
    69f2:	48 2f       	mov	r20, r24
    69f4:	8a 81       	ldd	r24, Y+2	; 0x02
    69f6:	28 2f       	mov	r18, r24
    69f8:	30 e0       	ldi	r19, 0x00	; 0
    69fa:	81 e0       	ldi	r24, 0x01	; 1
    69fc:	90 e0       	ldi	r25, 0x00	; 0
    69fe:	02 2e       	mov	r0, r18
    6a00:	02 c0       	rjmp	.+4      	; 0x6a06 <DIO_voidActiveIntPullUpResistance+0xcc>
    6a02:	88 0f       	add	r24, r24
    6a04:	99 1f       	adc	r25, r25
    6a06:	0a 94       	dec	r0
    6a08:	e2 f7       	brpl	.-8      	; 0x6a02 <DIO_voidActiveIntPullUpResistance+0xc8>
    6a0a:	84 2b       	or	r24, r20
    6a0c:	8c 93       	st	X, r24
    6a0e:	13 c0       	rjmp	.+38     	; 0x6a36 <DIO_voidActiveIntPullUpResistance+0xfc>
			break;
			
			case DIO_PORTD:
			SET_BIT(PORTD_REG,copy_u8PinId);
    6a10:	a2 e3       	ldi	r26, 0x32	; 50
    6a12:	b0 e0       	ldi	r27, 0x00	; 0
    6a14:	e2 e3       	ldi	r30, 0x32	; 50
    6a16:	f0 e0       	ldi	r31, 0x00	; 0
    6a18:	80 81       	ld	r24, Z
    6a1a:	48 2f       	mov	r20, r24
    6a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a1e:	28 2f       	mov	r18, r24
    6a20:	30 e0       	ldi	r19, 0x00	; 0
    6a22:	81 e0       	ldi	r24, 0x01	; 1
    6a24:	90 e0       	ldi	r25, 0x00	; 0
    6a26:	02 2e       	mov	r0, r18
    6a28:	02 c0       	rjmp	.+4      	; 0x6a2e <DIO_voidActiveIntPullUpResistance+0xf4>
    6a2a:	88 0f       	add	r24, r24
    6a2c:	99 1f       	adc	r25, r25
    6a2e:	0a 94       	dec	r0
    6a30:	e2 f7       	brpl	.-8      	; 0x6a2a <DIO_voidActiveIntPullUpResistance+0xf0>
    6a32:	84 2b       	or	r24, r20
    6a34:	8c 93       	st	X, r24
	}
	else
	{
		//Return Error Statement
	}
}
    6a36:	0f 90       	pop	r0
    6a38:	0f 90       	pop	r0
    6a3a:	0f 90       	pop	r0
    6a3c:	0f 90       	pop	r0
    6a3e:	cf 91       	pop	r28
    6a40:	df 91       	pop	r29
    6a42:	08 95       	ret

00006a44 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    6a44:	df 93       	push	r29
    6a46:	cf 93       	push	r28
    6a48:	cd b7       	in	r28, 0x3d	; 61
    6a4a:	de b7       	in	r29, 0x3e	; 62
    6a4c:	2c 97       	sbiw	r28, 0x0c	; 12
    6a4e:	0f b6       	in	r0, 0x3f	; 63
    6a50:	f8 94       	cli
    6a52:	de bf       	out	0x3e, r29	; 62
    6a54:	0f be       	out	0x3f, r0	; 63
    6a56:	cd bf       	out	0x3d, r28	; 61
    6a58:	89 83       	std	Y+1, r24	; 0x01
    6a5a:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId<4)&&((copy_u8PortDirection==DIO_PORT_INPUT)||(copy_u8PortDirection==DIO_PORT_OUTPUT)))
    6a5c:	89 81       	ldd	r24, Y+1	; 0x01
    6a5e:	84 30       	cpi	r24, 0x04	; 4
    6a60:	08 f0       	brcs	.+2      	; 0x6a64 <DIO_voidSetPortDirection+0x20>
    6a62:	86 c0       	rjmp	.+268    	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
    6a64:	8a 81       	ldd	r24, Y+2	; 0x02
    6a66:	88 23       	and	r24, r24
    6a68:	21 f0       	breq	.+8      	; 0x6a72 <DIO_voidSetPortDirection+0x2e>
    6a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    6a6c:	81 30       	cpi	r24, 0x01	; 1
    6a6e:	09 f0       	breq	.+2      	; 0x6a72 <DIO_voidSetPortDirection+0x2e>
    6a70:	7f c0       	rjmp	.+254    	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
	{
		switch(copy_u8PortId)
    6a72:	89 81       	ldd	r24, Y+1	; 0x01
    6a74:	28 2f       	mov	r18, r24
    6a76:	30 e0       	ldi	r19, 0x00	; 0
    6a78:	3c 87       	std	Y+12, r19	; 0x0c
    6a7a:	2b 87       	std	Y+11, r18	; 0x0b
    6a7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    6a7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6a80:	81 30       	cpi	r24, 0x01	; 1
    6a82:	91 05       	cpc	r25, r1
    6a84:	71 f1       	breq	.+92     	; 0x6ae2 <DIO_voidSetPortDirection+0x9e>
    6a86:	2b 85       	ldd	r18, Y+11	; 0x0b
    6a88:	3c 85       	ldd	r19, Y+12	; 0x0c
    6a8a:	22 30       	cpi	r18, 0x02	; 2
    6a8c:	31 05       	cpc	r19, r1
    6a8e:	2c f4       	brge	.+10     	; 0x6a9a <DIO_voidSetPortDirection+0x56>
    6a90:	8b 85       	ldd	r24, Y+11	; 0x0b
    6a92:	9c 85       	ldd	r25, Y+12	; 0x0c
    6a94:	00 97       	sbiw	r24, 0x00	; 0
    6a96:	69 f0       	breq	.+26     	; 0x6ab2 <DIO_voidSetPortDirection+0x6e>
    6a98:	6b c0       	rjmp	.+214    	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
    6a9a:	2b 85       	ldd	r18, Y+11	; 0x0b
    6a9c:	3c 85       	ldd	r19, Y+12	; 0x0c
    6a9e:	22 30       	cpi	r18, 0x02	; 2
    6aa0:	31 05       	cpc	r19, r1
    6aa2:	b9 f1       	breq	.+110    	; 0x6b12 <DIO_voidSetPortDirection+0xce>
    6aa4:	8b 85       	ldd	r24, Y+11	; 0x0b
    6aa6:	9c 85       	ldd	r25, Y+12	; 0x0c
    6aa8:	83 30       	cpi	r24, 0x03	; 3
    6aaa:	91 05       	cpc	r25, r1
    6aac:	09 f4       	brne	.+2      	; 0x6ab0 <DIO_voidSetPortDirection+0x6c>
    6aae:	49 c0       	rjmp	.+146    	; 0x6b42 <DIO_voidSetPortDirection+0xfe>
    6ab0:	5f c0       	rjmp	.+190    	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
		{
			case DIO_PORTA:
			switch(copy_u8PortDirection)
    6ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ab4:	28 2f       	mov	r18, r24
    6ab6:	30 e0       	ldi	r19, 0x00	; 0
    6ab8:	3a 87       	std	Y+10, r19	; 0x0a
    6aba:	29 87       	std	Y+9, r18	; 0x09
    6abc:	89 85       	ldd	r24, Y+9	; 0x09
    6abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ac0:	00 97       	sbiw	r24, 0x00	; 0
    6ac2:	31 f0       	breq	.+12     	; 0x6ad0 <DIO_voidSetPortDirection+0x8c>
    6ac4:	29 85       	ldd	r18, Y+9	; 0x09
    6ac6:	3a 85       	ldd	r19, Y+10	; 0x0a
    6ac8:	21 30       	cpi	r18, 0x01	; 1
    6aca:	31 05       	cpc	r19, r1
    6acc:	29 f0       	breq	.+10     	; 0x6ad8 <DIO_voidSetPortDirection+0x94>
    6ace:	50 c0       	rjmp	.+160    	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
			{
				case DIO_PORT_INPUT:
				DDRA_REG=0X00; //0b00000000
    6ad0:	ea e3       	ldi	r30, 0x3A	; 58
    6ad2:	f0 e0       	ldi	r31, 0x00	; 0
    6ad4:	10 82       	st	Z, r1
    6ad6:	4c c0       	rjmp	.+152    	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
				break;
				
				case DIO_PORT_OUTPUT:
				DDRA_REG=0XFF; //0b11111111
    6ad8:	ea e3       	ldi	r30, 0x3A	; 58
    6ada:	f0 e0       	ldi	r31, 0x00	; 0
    6adc:	8f ef       	ldi	r24, 0xFF	; 255
    6ade:	80 83       	st	Z, r24
    6ae0:	47 c0       	rjmp	.+142    	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
				break;
			}
			break;
			
			case DIO_PORTB:
			switch(copy_u8PortDirection)
    6ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ae4:	28 2f       	mov	r18, r24
    6ae6:	30 e0       	ldi	r19, 0x00	; 0
    6ae8:	38 87       	std	Y+8, r19	; 0x08
    6aea:	2f 83       	std	Y+7, r18	; 0x07
    6aec:	8f 81       	ldd	r24, Y+7	; 0x07
    6aee:	98 85       	ldd	r25, Y+8	; 0x08
    6af0:	00 97       	sbiw	r24, 0x00	; 0
    6af2:	31 f0       	breq	.+12     	; 0x6b00 <DIO_voidSetPortDirection+0xbc>
    6af4:	2f 81       	ldd	r18, Y+7	; 0x07
    6af6:	38 85       	ldd	r19, Y+8	; 0x08
    6af8:	21 30       	cpi	r18, 0x01	; 1
    6afa:	31 05       	cpc	r19, r1
    6afc:	29 f0       	breq	.+10     	; 0x6b08 <DIO_voidSetPortDirection+0xc4>
    6afe:	38 c0       	rjmp	.+112    	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
			{
				case DIO_PORT_INPUT:
				DDRB_REG=0X00; //0b00000000
    6b00:	e7 e3       	ldi	r30, 0x37	; 55
    6b02:	f0 e0       	ldi	r31, 0x00	; 0
    6b04:	10 82       	st	Z, r1
    6b06:	34 c0       	rjmp	.+104    	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
				break;
				
				case DIO_PORT_OUTPUT:
				DDRB_REG=0XFF; //0b11111111
    6b08:	e7 e3       	ldi	r30, 0x37	; 55
    6b0a:	f0 e0       	ldi	r31, 0x00	; 0
    6b0c:	8f ef       	ldi	r24, 0xFF	; 255
    6b0e:	80 83       	st	Z, r24
    6b10:	2f c0       	rjmp	.+94     	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
				break;
			}
			break;
			
			case DIO_PORTC:
			switch(copy_u8PortDirection)
    6b12:	8a 81       	ldd	r24, Y+2	; 0x02
    6b14:	28 2f       	mov	r18, r24
    6b16:	30 e0       	ldi	r19, 0x00	; 0
    6b18:	3e 83       	std	Y+6, r19	; 0x06
    6b1a:	2d 83       	std	Y+5, r18	; 0x05
    6b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    6b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    6b20:	00 97       	sbiw	r24, 0x00	; 0
    6b22:	31 f0       	breq	.+12     	; 0x6b30 <DIO_voidSetPortDirection+0xec>
    6b24:	2d 81       	ldd	r18, Y+5	; 0x05
    6b26:	3e 81       	ldd	r19, Y+6	; 0x06
    6b28:	21 30       	cpi	r18, 0x01	; 1
    6b2a:	31 05       	cpc	r19, r1
    6b2c:	29 f0       	breq	.+10     	; 0x6b38 <DIO_voidSetPortDirection+0xf4>
    6b2e:	20 c0       	rjmp	.+64     	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
			{
				case DIO_PORT_INPUT:
				DDRC_REG=0X00; //0b00000000
    6b30:	e4 e3       	ldi	r30, 0x34	; 52
    6b32:	f0 e0       	ldi	r31, 0x00	; 0
    6b34:	10 82       	st	Z, r1
    6b36:	1c c0       	rjmp	.+56     	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
				break;
				
				case DIO_PORT_OUTPUT:
				DDRC_REG=0XFF; //0b11111111
    6b38:	e4 e3       	ldi	r30, 0x34	; 52
    6b3a:	f0 e0       	ldi	r31, 0x00	; 0
    6b3c:	8f ef       	ldi	r24, 0xFF	; 255
    6b3e:	80 83       	st	Z, r24
    6b40:	17 c0       	rjmp	.+46     	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
				break;
			}
			break;
			
			case DIO_PORTD:
			switch(copy_u8PortDirection)
    6b42:	8a 81       	ldd	r24, Y+2	; 0x02
    6b44:	28 2f       	mov	r18, r24
    6b46:	30 e0       	ldi	r19, 0x00	; 0
    6b48:	3c 83       	std	Y+4, r19	; 0x04
    6b4a:	2b 83       	std	Y+3, r18	; 0x03
    6b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    6b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    6b50:	00 97       	sbiw	r24, 0x00	; 0
    6b52:	31 f0       	breq	.+12     	; 0x6b60 <DIO_voidSetPortDirection+0x11c>
    6b54:	2b 81       	ldd	r18, Y+3	; 0x03
    6b56:	3c 81       	ldd	r19, Y+4	; 0x04
    6b58:	21 30       	cpi	r18, 0x01	; 1
    6b5a:	31 05       	cpc	r19, r1
    6b5c:	29 f0       	breq	.+10     	; 0x6b68 <DIO_voidSetPortDirection+0x124>
    6b5e:	08 c0       	rjmp	.+16     	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
			{
				case DIO_PORT_INPUT:
				DDRD_REG=0X00; //0b00000000
    6b60:	e1 e3       	ldi	r30, 0x31	; 49
    6b62:	f0 e0       	ldi	r31, 0x00	; 0
    6b64:	10 82       	st	Z, r1
    6b66:	04 c0       	rjmp	.+8      	; 0x6b70 <DIO_voidSetPortDirection+0x12c>
				break;
				
				case DIO_PORT_OUTPUT:
				DDRD_REG=0XFF; //0b11111111
    6b68:	e1 e3       	ldi	r30, 0x31	; 49
    6b6a:	f0 e0       	ldi	r31, 0x00	; 0
    6b6c:	8f ef       	ldi	r24, 0xFF	; 255
    6b6e:	80 83       	st	Z, r24
	} 
	else
	{
		//Return Error Statement
	}
}
    6b70:	2c 96       	adiw	r28, 0x0c	; 12
    6b72:	0f b6       	in	r0, 0x3f	; 63
    6b74:	f8 94       	cli
    6b76:	de bf       	out	0x3e, r29	; 62
    6b78:	0f be       	out	0x3f, r0	; 63
    6b7a:	cd bf       	out	0x3d, r28	; 61
    6b7c:	cf 91       	pop	r28
    6b7e:	df 91       	pop	r29
    6b80:	08 95       	ret

00006b82 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 copy_u8PortId, u8 copy_u8PortValue)
{
    6b82:	df 93       	push	r29
    6b84:	cf 93       	push	r28
    6b86:	cd b7       	in	r28, 0x3d	; 61
    6b88:	de b7       	in	r29, 0x3e	; 62
    6b8a:	2c 97       	sbiw	r28, 0x0c	; 12
    6b8c:	0f b6       	in	r0, 0x3f	; 63
    6b8e:	f8 94       	cli
    6b90:	de bf       	out	0x3e, r29	; 62
    6b92:	0f be       	out	0x3f, r0	; 63
    6b94:	cd bf       	out	0x3d, r28	; 61
    6b96:	89 83       	std	Y+1, r24	; 0x01
    6b98:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId<4)&&((copy_u8PortValue==DIO_PORT_LOW)||(copy_u8PortValue==DIO_PORT_HIGH)))
    6b9a:	89 81       	ldd	r24, Y+1	; 0x01
    6b9c:	84 30       	cpi	r24, 0x04	; 4
    6b9e:	08 f0       	brcs	.+2      	; 0x6ba2 <DIO_voidSetPortValue+0x20>
    6ba0:	86 c0       	rjmp	.+268    	; 0x6cae <DIO_voidSetPortValue+0x12c>
    6ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ba4:	88 23       	and	r24, r24
    6ba6:	21 f0       	breq	.+8      	; 0x6bb0 <DIO_voidSetPortValue+0x2e>
    6ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    6baa:	81 30       	cpi	r24, 0x01	; 1
    6bac:	09 f0       	breq	.+2      	; 0x6bb0 <DIO_voidSetPortValue+0x2e>
    6bae:	7f c0       	rjmp	.+254    	; 0x6cae <DIO_voidSetPortValue+0x12c>
	{
		switch(copy_u8PortId)
    6bb0:	89 81       	ldd	r24, Y+1	; 0x01
    6bb2:	28 2f       	mov	r18, r24
    6bb4:	30 e0       	ldi	r19, 0x00	; 0
    6bb6:	3c 87       	std	Y+12, r19	; 0x0c
    6bb8:	2b 87       	std	Y+11, r18	; 0x0b
    6bba:	8b 85       	ldd	r24, Y+11	; 0x0b
    6bbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    6bbe:	81 30       	cpi	r24, 0x01	; 1
    6bc0:	91 05       	cpc	r25, r1
    6bc2:	71 f1       	breq	.+92     	; 0x6c20 <DIO_voidSetPortValue+0x9e>
    6bc4:	2b 85       	ldd	r18, Y+11	; 0x0b
    6bc6:	3c 85       	ldd	r19, Y+12	; 0x0c
    6bc8:	22 30       	cpi	r18, 0x02	; 2
    6bca:	31 05       	cpc	r19, r1
    6bcc:	2c f4       	brge	.+10     	; 0x6bd8 <DIO_voidSetPortValue+0x56>
    6bce:	8b 85       	ldd	r24, Y+11	; 0x0b
    6bd0:	9c 85       	ldd	r25, Y+12	; 0x0c
    6bd2:	00 97       	sbiw	r24, 0x00	; 0
    6bd4:	69 f0       	breq	.+26     	; 0x6bf0 <DIO_voidSetPortValue+0x6e>
    6bd6:	6b c0       	rjmp	.+214    	; 0x6cae <DIO_voidSetPortValue+0x12c>
    6bd8:	2b 85       	ldd	r18, Y+11	; 0x0b
    6bda:	3c 85       	ldd	r19, Y+12	; 0x0c
    6bdc:	22 30       	cpi	r18, 0x02	; 2
    6bde:	31 05       	cpc	r19, r1
    6be0:	b9 f1       	breq	.+110    	; 0x6c50 <DIO_voidSetPortValue+0xce>
    6be2:	8b 85       	ldd	r24, Y+11	; 0x0b
    6be4:	9c 85       	ldd	r25, Y+12	; 0x0c
    6be6:	83 30       	cpi	r24, 0x03	; 3
    6be8:	91 05       	cpc	r25, r1
    6bea:	09 f4       	brne	.+2      	; 0x6bee <DIO_voidSetPortValue+0x6c>
    6bec:	49 c0       	rjmp	.+146    	; 0x6c80 <DIO_voidSetPortValue+0xfe>
    6bee:	5f c0       	rjmp	.+190    	; 0x6cae <DIO_voidSetPortValue+0x12c>
		{
			case DIO_PORTA:
			switch(copy_u8PortValue)
    6bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    6bf2:	28 2f       	mov	r18, r24
    6bf4:	30 e0       	ldi	r19, 0x00	; 0
    6bf6:	3a 87       	std	Y+10, r19	; 0x0a
    6bf8:	29 87       	std	Y+9, r18	; 0x09
    6bfa:	89 85       	ldd	r24, Y+9	; 0x09
    6bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bfe:	00 97       	sbiw	r24, 0x00	; 0
    6c00:	31 f0       	breq	.+12     	; 0x6c0e <DIO_voidSetPortValue+0x8c>
    6c02:	29 85       	ldd	r18, Y+9	; 0x09
    6c04:	3a 85       	ldd	r19, Y+10	; 0x0a
    6c06:	21 30       	cpi	r18, 0x01	; 1
    6c08:	31 05       	cpc	r19, r1
    6c0a:	29 f0       	breq	.+10     	; 0x6c16 <DIO_voidSetPortValue+0x94>
    6c0c:	50 c0       	rjmp	.+160    	; 0x6cae <DIO_voidSetPortValue+0x12c>
			{
				case DIO_PORT_LOW:
				PORTA_REG=0X00; //0b00000000
    6c0e:	eb e3       	ldi	r30, 0x3B	; 59
    6c10:	f0 e0       	ldi	r31, 0x00	; 0
    6c12:	10 82       	st	Z, r1
    6c14:	4c c0       	rjmp	.+152    	; 0x6cae <DIO_voidSetPortValue+0x12c>
				break;
				
				case DIO_PORT_HIGH:
				PORTA_REG=0XFF; //0b11111111
    6c16:	eb e3       	ldi	r30, 0x3B	; 59
    6c18:	f0 e0       	ldi	r31, 0x00	; 0
    6c1a:	8f ef       	ldi	r24, 0xFF	; 255
    6c1c:	80 83       	st	Z, r24
    6c1e:	47 c0       	rjmp	.+142    	; 0x6cae <DIO_voidSetPortValue+0x12c>
				break;
			}
			break;
			
			case DIO_PORTB:
			switch(copy_u8PortValue)
    6c20:	8a 81       	ldd	r24, Y+2	; 0x02
    6c22:	28 2f       	mov	r18, r24
    6c24:	30 e0       	ldi	r19, 0x00	; 0
    6c26:	38 87       	std	Y+8, r19	; 0x08
    6c28:	2f 83       	std	Y+7, r18	; 0x07
    6c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    6c2c:	98 85       	ldd	r25, Y+8	; 0x08
    6c2e:	00 97       	sbiw	r24, 0x00	; 0
    6c30:	31 f0       	breq	.+12     	; 0x6c3e <DIO_voidSetPortValue+0xbc>
    6c32:	2f 81       	ldd	r18, Y+7	; 0x07
    6c34:	38 85       	ldd	r19, Y+8	; 0x08
    6c36:	21 30       	cpi	r18, 0x01	; 1
    6c38:	31 05       	cpc	r19, r1
    6c3a:	29 f0       	breq	.+10     	; 0x6c46 <DIO_voidSetPortValue+0xc4>
    6c3c:	38 c0       	rjmp	.+112    	; 0x6cae <DIO_voidSetPortValue+0x12c>
			{
				case DIO_PORT_LOW:
				PORTB_REG=0X00; //0b00000000
    6c3e:	e8 e3       	ldi	r30, 0x38	; 56
    6c40:	f0 e0       	ldi	r31, 0x00	; 0
    6c42:	10 82       	st	Z, r1
    6c44:	34 c0       	rjmp	.+104    	; 0x6cae <DIO_voidSetPortValue+0x12c>
				break;
				
				case DIO_PORT_HIGH:
				PORTB_REG=0XFF; //0b11111111
    6c46:	e8 e3       	ldi	r30, 0x38	; 56
    6c48:	f0 e0       	ldi	r31, 0x00	; 0
    6c4a:	8f ef       	ldi	r24, 0xFF	; 255
    6c4c:	80 83       	st	Z, r24
    6c4e:	2f c0       	rjmp	.+94     	; 0x6cae <DIO_voidSetPortValue+0x12c>
				break;
			}
			break;
			
			case DIO_PORTC:
			switch(copy_u8PortValue)
    6c50:	8a 81       	ldd	r24, Y+2	; 0x02
    6c52:	28 2f       	mov	r18, r24
    6c54:	30 e0       	ldi	r19, 0x00	; 0
    6c56:	3e 83       	std	Y+6, r19	; 0x06
    6c58:	2d 83       	std	Y+5, r18	; 0x05
    6c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    6c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    6c5e:	00 97       	sbiw	r24, 0x00	; 0
    6c60:	31 f0       	breq	.+12     	; 0x6c6e <DIO_voidSetPortValue+0xec>
    6c62:	2d 81       	ldd	r18, Y+5	; 0x05
    6c64:	3e 81       	ldd	r19, Y+6	; 0x06
    6c66:	21 30       	cpi	r18, 0x01	; 1
    6c68:	31 05       	cpc	r19, r1
    6c6a:	29 f0       	breq	.+10     	; 0x6c76 <DIO_voidSetPortValue+0xf4>
    6c6c:	20 c0       	rjmp	.+64     	; 0x6cae <DIO_voidSetPortValue+0x12c>
			{
				case DIO_PORT_LOW:
				PORTC_REG=0X00; //0b00000000
    6c6e:	e5 e3       	ldi	r30, 0x35	; 53
    6c70:	f0 e0       	ldi	r31, 0x00	; 0
    6c72:	10 82       	st	Z, r1
    6c74:	1c c0       	rjmp	.+56     	; 0x6cae <DIO_voidSetPortValue+0x12c>
				break;
				
				case DIO_PORT_HIGH:
				PORTC_REG=0XFF; //0b11111111
    6c76:	e5 e3       	ldi	r30, 0x35	; 53
    6c78:	f0 e0       	ldi	r31, 0x00	; 0
    6c7a:	8f ef       	ldi	r24, 0xFF	; 255
    6c7c:	80 83       	st	Z, r24
    6c7e:	17 c0       	rjmp	.+46     	; 0x6cae <DIO_voidSetPortValue+0x12c>
				break;
			}
			break;
			
			case DIO_PORTD:
			switch(copy_u8PortValue)
    6c80:	8a 81       	ldd	r24, Y+2	; 0x02
    6c82:	28 2f       	mov	r18, r24
    6c84:	30 e0       	ldi	r19, 0x00	; 0
    6c86:	3c 83       	std	Y+4, r19	; 0x04
    6c88:	2b 83       	std	Y+3, r18	; 0x03
    6c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    6c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    6c8e:	00 97       	sbiw	r24, 0x00	; 0
    6c90:	31 f0       	breq	.+12     	; 0x6c9e <DIO_voidSetPortValue+0x11c>
    6c92:	2b 81       	ldd	r18, Y+3	; 0x03
    6c94:	3c 81       	ldd	r19, Y+4	; 0x04
    6c96:	21 30       	cpi	r18, 0x01	; 1
    6c98:	31 05       	cpc	r19, r1
    6c9a:	29 f0       	breq	.+10     	; 0x6ca6 <DIO_voidSetPortValue+0x124>
    6c9c:	08 c0       	rjmp	.+16     	; 0x6cae <DIO_voidSetPortValue+0x12c>
			{
				case DIO_PORT_LOW:
				PORTD_REG=0X00; //0b00000000
    6c9e:	e2 e3       	ldi	r30, 0x32	; 50
    6ca0:	f0 e0       	ldi	r31, 0x00	; 0
    6ca2:	10 82       	st	Z, r1
    6ca4:	04 c0       	rjmp	.+8      	; 0x6cae <DIO_voidSetPortValue+0x12c>
				break;
				
				case DIO_PORT_HIGH:
				PORTD_REG=0XFF; //0b11111111
    6ca6:	e2 e3       	ldi	r30, 0x32	; 50
    6ca8:	f0 e0       	ldi	r31, 0x00	; 0
    6caa:	8f ef       	ldi	r24, 0xFF	; 255
    6cac:	80 83       	st	Z, r24
	}
	else
	{
		//Return Error Statement
	}
}
    6cae:	2c 96       	adiw	r28, 0x0c	; 12
    6cb0:	0f b6       	in	r0, 0x3f	; 63
    6cb2:	f8 94       	cli
    6cb4:	de bf       	out	0x3e, r29	; 62
    6cb6:	0f be       	out	0x3f, r0	; 63
    6cb8:	cd bf       	out	0x3d, r28	; 61
    6cba:	cf 91       	pop	r28
    6cbc:	df 91       	pop	r29
    6cbe:	08 95       	ret

00006cc0 <DIO_voidGetPortValue>:
void DIO_voidGetPortValue(u8 copy_u8PortId, u8* copy_pu8PortValue)
{
    6cc0:	df 93       	push	r29
    6cc2:	cf 93       	push	r28
    6cc4:	00 d0       	rcall	.+0      	; 0x6cc6 <DIO_voidGetPortValue+0x6>
    6cc6:	00 d0       	rcall	.+0      	; 0x6cc8 <DIO_voidGetPortValue+0x8>
    6cc8:	0f 92       	push	r0
    6cca:	cd b7       	in	r28, 0x3d	; 61
    6ccc:	de b7       	in	r29, 0x3e	; 62
    6cce:	89 83       	std	Y+1, r24	; 0x01
    6cd0:	7b 83       	std	Y+3, r23	; 0x03
    6cd2:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId<4)&&(copy_pu8PortValue != NULL))
    6cd4:	89 81       	ldd	r24, Y+1	; 0x01
    6cd6:	84 30       	cpi	r24, 0x04	; 4
    6cd8:	08 f0       	brcs	.+2      	; 0x6cdc <DIO_voidGetPortValue+0x1c>
    6cda:	3e c0       	rjmp	.+124    	; 0x6d58 <DIO_voidGetPortValue+0x98>
    6cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    6cde:	9b 81       	ldd	r25, Y+3	; 0x03
    6ce0:	00 97       	sbiw	r24, 0x00	; 0
    6ce2:	d1 f1       	breq	.+116    	; 0x6d58 <DIO_voidGetPortValue+0x98>
	{
		switch(copy_u8PortId)
    6ce4:	89 81       	ldd	r24, Y+1	; 0x01
    6ce6:	28 2f       	mov	r18, r24
    6ce8:	30 e0       	ldi	r19, 0x00	; 0
    6cea:	3d 83       	std	Y+5, r19	; 0x05
    6cec:	2c 83       	std	Y+4, r18	; 0x04
    6cee:	8c 81       	ldd	r24, Y+4	; 0x04
    6cf0:	9d 81       	ldd	r25, Y+5	; 0x05
    6cf2:	81 30       	cpi	r24, 0x01	; 1
    6cf4:	91 05       	cpc	r25, r1
    6cf6:	e1 f0       	breq	.+56     	; 0x6d30 <DIO_voidGetPortValue+0x70>
    6cf8:	2c 81       	ldd	r18, Y+4	; 0x04
    6cfa:	3d 81       	ldd	r19, Y+5	; 0x05
    6cfc:	22 30       	cpi	r18, 0x02	; 2
    6cfe:	31 05       	cpc	r19, r1
    6d00:	2c f4       	brge	.+10     	; 0x6d0c <DIO_voidGetPortValue+0x4c>
    6d02:	8c 81       	ldd	r24, Y+4	; 0x04
    6d04:	9d 81       	ldd	r25, Y+5	; 0x05
    6d06:	00 97       	sbiw	r24, 0x00	; 0
    6d08:	61 f0       	breq	.+24     	; 0x6d22 <DIO_voidGetPortValue+0x62>
    6d0a:	26 c0       	rjmp	.+76     	; 0x6d58 <DIO_voidGetPortValue+0x98>
    6d0c:	2c 81       	ldd	r18, Y+4	; 0x04
    6d0e:	3d 81       	ldd	r19, Y+5	; 0x05
    6d10:	22 30       	cpi	r18, 0x02	; 2
    6d12:	31 05       	cpc	r19, r1
    6d14:	a1 f0       	breq	.+40     	; 0x6d3e <DIO_voidGetPortValue+0x7e>
    6d16:	8c 81       	ldd	r24, Y+4	; 0x04
    6d18:	9d 81       	ldd	r25, Y+5	; 0x05
    6d1a:	83 30       	cpi	r24, 0x03	; 3
    6d1c:	91 05       	cpc	r25, r1
    6d1e:	b1 f0       	breq	.+44     	; 0x6d4c <DIO_voidGetPortValue+0x8c>
    6d20:	1b c0       	rjmp	.+54     	; 0x6d58 <DIO_voidGetPortValue+0x98>
		{
			case DIO_PORTA:
			*copy_pu8PortValue = PINA_REG;
    6d22:	e9 e3       	ldi	r30, 0x39	; 57
    6d24:	f0 e0       	ldi	r31, 0x00	; 0
    6d26:	80 81       	ld	r24, Z
    6d28:	ea 81       	ldd	r30, Y+2	; 0x02
    6d2a:	fb 81       	ldd	r31, Y+3	; 0x03
    6d2c:	80 83       	st	Z, r24
    6d2e:	14 c0       	rjmp	.+40     	; 0x6d58 <DIO_voidGetPortValue+0x98>
			break;
			
			case DIO_PORTB:
			*copy_pu8PortValue = PINB_REG;
    6d30:	e6 e3       	ldi	r30, 0x36	; 54
    6d32:	f0 e0       	ldi	r31, 0x00	; 0
    6d34:	80 81       	ld	r24, Z
    6d36:	ea 81       	ldd	r30, Y+2	; 0x02
    6d38:	fb 81       	ldd	r31, Y+3	; 0x03
    6d3a:	80 83       	st	Z, r24
    6d3c:	0d c0       	rjmp	.+26     	; 0x6d58 <DIO_voidGetPortValue+0x98>
			break;
			
			case DIO_PORTC:
			*copy_pu8PortValue = PINC_REG;
    6d3e:	e3 e3       	ldi	r30, 0x33	; 51
    6d40:	f0 e0       	ldi	r31, 0x00	; 0
    6d42:	80 81       	ld	r24, Z
    6d44:	ea 81       	ldd	r30, Y+2	; 0x02
    6d46:	fb 81       	ldd	r31, Y+3	; 0x03
    6d48:	80 83       	st	Z, r24
    6d4a:	06 c0       	rjmp	.+12     	; 0x6d58 <DIO_voidGetPortValue+0x98>
			break;
			
			case DIO_PORTD:
			*copy_pu8PortValue = PIND_REG;
    6d4c:	e0 e3       	ldi	r30, 0x30	; 48
    6d4e:	f0 e0       	ldi	r31, 0x00	; 0
    6d50:	80 81       	ld	r24, Z
    6d52:	ea 81       	ldd	r30, Y+2	; 0x02
    6d54:	fb 81       	ldd	r31, Y+3	; 0x03
    6d56:	80 83       	st	Z, r24
	} 
	else
	{
		//Return Error Statement
	}
}
    6d58:	0f 90       	pop	r0
    6d5a:	0f 90       	pop	r0
    6d5c:	0f 90       	pop	r0
    6d5e:	0f 90       	pop	r0
    6d60:	0f 90       	pop	r0
    6d62:	cf 91       	pop	r28
    6d64:	df 91       	pop	r29
    6d66:	08 95       	ret

00006d68 <DIO_voidTogglePortValue>:
void DIO_voidTogglePortValue(u8 copy_u8PortId)
{
    6d68:	df 93       	push	r29
    6d6a:	cf 93       	push	r28
    6d6c:	00 d0       	rcall	.+0      	; 0x6d6e <DIO_voidTogglePortValue+0x6>
    6d6e:	0f 92       	push	r0
    6d70:	cd b7       	in	r28, 0x3d	; 61
    6d72:	de b7       	in	r29, 0x3e	; 62
    6d74:	89 83       	std	Y+1, r24	; 0x01
	if (copy_u8PortId<4)
    6d76:	89 81       	ldd	r24, Y+1	; 0x01
    6d78:	84 30       	cpi	r24, 0x04	; 4
    6d7a:	08 f0       	brcs	.+2      	; 0x6d7e <DIO_voidTogglePortValue+0x16>
    6d7c:	3e c0       	rjmp	.+124    	; 0x6dfa <DIO_voidTogglePortValue+0x92>
	{
		switch(copy_u8PortId)
    6d7e:	89 81       	ldd	r24, Y+1	; 0x01
    6d80:	28 2f       	mov	r18, r24
    6d82:	30 e0       	ldi	r19, 0x00	; 0
    6d84:	3b 83       	std	Y+3, r19	; 0x03
    6d86:	2a 83       	std	Y+2, r18	; 0x02
    6d88:	8a 81       	ldd	r24, Y+2	; 0x02
    6d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    6d8c:	81 30       	cpi	r24, 0x01	; 1
    6d8e:	91 05       	cpc	r25, r1
    6d90:	e9 f0       	breq	.+58     	; 0x6dcc <DIO_voidTogglePortValue+0x64>
    6d92:	2a 81       	ldd	r18, Y+2	; 0x02
    6d94:	3b 81       	ldd	r19, Y+3	; 0x03
    6d96:	22 30       	cpi	r18, 0x02	; 2
    6d98:	31 05       	cpc	r19, r1
    6d9a:	2c f4       	brge	.+10     	; 0x6da6 <DIO_voidTogglePortValue+0x3e>
    6d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    6d9e:	9b 81       	ldd	r25, Y+3	; 0x03
    6da0:	00 97       	sbiw	r24, 0x00	; 0
    6da2:	61 f0       	breq	.+24     	; 0x6dbc <DIO_voidTogglePortValue+0x54>
    6da4:	2a c0       	rjmp	.+84     	; 0x6dfa <DIO_voidTogglePortValue+0x92>
    6da6:	2a 81       	ldd	r18, Y+2	; 0x02
    6da8:	3b 81       	ldd	r19, Y+3	; 0x03
    6daa:	22 30       	cpi	r18, 0x02	; 2
    6dac:	31 05       	cpc	r19, r1
    6dae:	b1 f0       	breq	.+44     	; 0x6ddc <DIO_voidTogglePortValue+0x74>
    6db0:	8a 81       	ldd	r24, Y+2	; 0x02
    6db2:	9b 81       	ldd	r25, Y+3	; 0x03
    6db4:	83 30       	cpi	r24, 0x03	; 3
    6db6:	91 05       	cpc	r25, r1
    6db8:	c9 f0       	breq	.+50     	; 0x6dec <DIO_voidTogglePortValue+0x84>
    6dba:	1f c0       	rjmp	.+62     	; 0x6dfa <DIO_voidTogglePortValue+0x92>
		{
			case DIO_PORTA:
			PORTA_REG^=0XFF; //0b11111111
    6dbc:	ab e3       	ldi	r26, 0x3B	; 59
    6dbe:	b0 e0       	ldi	r27, 0x00	; 0
    6dc0:	eb e3       	ldi	r30, 0x3B	; 59
    6dc2:	f0 e0       	ldi	r31, 0x00	; 0
    6dc4:	80 81       	ld	r24, Z
    6dc6:	80 95       	com	r24
    6dc8:	8c 93       	st	X, r24
    6dca:	17 c0       	rjmp	.+46     	; 0x6dfa <DIO_voidTogglePortValue+0x92>
			break;
			
			case DIO_PORTB:
			PORTB_REG^=0XFF; //0b11111111
    6dcc:	a8 e3       	ldi	r26, 0x38	; 56
    6dce:	b0 e0       	ldi	r27, 0x00	; 0
    6dd0:	e8 e3       	ldi	r30, 0x38	; 56
    6dd2:	f0 e0       	ldi	r31, 0x00	; 0
    6dd4:	80 81       	ld	r24, Z
    6dd6:	80 95       	com	r24
    6dd8:	8c 93       	st	X, r24
    6dda:	0f c0       	rjmp	.+30     	; 0x6dfa <DIO_voidTogglePortValue+0x92>
			break;
			
			case DIO_PORTC:
			PORTC_REG^=0XFF; //0b11111111
    6ddc:	a5 e3       	ldi	r26, 0x35	; 53
    6dde:	b0 e0       	ldi	r27, 0x00	; 0
    6de0:	e5 e3       	ldi	r30, 0x35	; 53
    6de2:	f0 e0       	ldi	r31, 0x00	; 0
    6de4:	80 81       	ld	r24, Z
    6de6:	80 95       	com	r24
    6de8:	8c 93       	st	X, r24
    6dea:	07 c0       	rjmp	.+14     	; 0x6dfa <DIO_voidTogglePortValue+0x92>
			break;
			
			case DIO_PORTD:
			PORTD_REG^=0XFF; //0b11111111
    6dec:	a2 e3       	ldi	r26, 0x32	; 50
    6dee:	b0 e0       	ldi	r27, 0x00	; 0
    6df0:	e2 e3       	ldi	r30, 0x32	; 50
    6df2:	f0 e0       	ldi	r31, 0x00	; 0
    6df4:	80 81       	ld	r24, Z
    6df6:	80 95       	com	r24
    6df8:	8c 93       	st	X, r24
	} 
	else
	{
		//Return Error Statement
	}
}
    6dfa:	0f 90       	pop	r0
    6dfc:	0f 90       	pop	r0
    6dfe:	0f 90       	pop	r0
    6e00:	cf 91       	pop	r28
    6e02:	df 91       	pop	r29
    6e04:	08 95       	ret

00006e06 <DIO_voidActiveIntPortPullUpResistance>:
void DIO_voidActiveIntPortPullUpResistance(u8 copy_u8PortId)
{
    6e06:	df 93       	push	r29
    6e08:	cf 93       	push	r28
    6e0a:	00 d0       	rcall	.+0      	; 0x6e0c <DIO_voidActiveIntPortPullUpResistance+0x6>
    6e0c:	0f 92       	push	r0
    6e0e:	cd b7       	in	r28, 0x3d	; 61
    6e10:	de b7       	in	r29, 0x3e	; 62
    6e12:	89 83       	std	Y+1, r24	; 0x01
	if (copy_u8PortId<4)
    6e14:	89 81       	ldd	r24, Y+1	; 0x01
    6e16:	84 30       	cpi	r24, 0x04	; 4
    6e18:	90 f5       	brcc	.+100    	; 0x6e7e <DIO_voidActiveIntPortPullUpResistance+0x78>
	{
		switch(copy_u8PortId)
    6e1a:	89 81       	ldd	r24, Y+1	; 0x01
    6e1c:	28 2f       	mov	r18, r24
    6e1e:	30 e0       	ldi	r19, 0x00	; 0
    6e20:	3b 83       	std	Y+3, r19	; 0x03
    6e22:	2a 83       	std	Y+2, r18	; 0x02
    6e24:	8a 81       	ldd	r24, Y+2	; 0x02
    6e26:	9b 81       	ldd	r25, Y+3	; 0x03
    6e28:	81 30       	cpi	r24, 0x01	; 1
    6e2a:	91 05       	cpc	r25, r1
    6e2c:	d1 f0       	breq	.+52     	; 0x6e62 <DIO_voidActiveIntPortPullUpResistance+0x5c>
    6e2e:	2a 81       	ldd	r18, Y+2	; 0x02
    6e30:	3b 81       	ldd	r19, Y+3	; 0x03
    6e32:	22 30       	cpi	r18, 0x02	; 2
    6e34:	31 05       	cpc	r19, r1
    6e36:	2c f4       	brge	.+10     	; 0x6e42 <DIO_voidActiveIntPortPullUpResistance+0x3c>
    6e38:	8a 81       	ldd	r24, Y+2	; 0x02
    6e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    6e3c:	00 97       	sbiw	r24, 0x00	; 0
    6e3e:	61 f0       	breq	.+24     	; 0x6e58 <DIO_voidActiveIntPortPullUpResistance+0x52>
    6e40:	1e c0       	rjmp	.+60     	; 0x6e7e <DIO_voidActiveIntPortPullUpResistance+0x78>
    6e42:	2a 81       	ldd	r18, Y+2	; 0x02
    6e44:	3b 81       	ldd	r19, Y+3	; 0x03
    6e46:	22 30       	cpi	r18, 0x02	; 2
    6e48:	31 05       	cpc	r19, r1
    6e4a:	81 f0       	breq	.+32     	; 0x6e6c <DIO_voidActiveIntPortPullUpResistance+0x66>
    6e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    6e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    6e50:	83 30       	cpi	r24, 0x03	; 3
    6e52:	91 05       	cpc	r25, r1
    6e54:	81 f0       	breq	.+32     	; 0x6e76 <DIO_voidActiveIntPortPullUpResistance+0x70>
    6e56:	13 c0       	rjmp	.+38     	; 0x6e7e <DIO_voidActiveIntPortPullUpResistance+0x78>
		{
			case DIO_PORTA:
			PORTA_REG=0XFF; //0b11111111 
    6e58:	eb e3       	ldi	r30, 0x3B	; 59
    6e5a:	f0 e0       	ldi	r31, 0x00	; 0
    6e5c:	8f ef       	ldi	r24, 0xFF	; 255
    6e5e:	80 83       	st	Z, r24
    6e60:	0e c0       	rjmp	.+28     	; 0x6e7e <DIO_voidActiveIntPortPullUpResistance+0x78>
			break;
			
			case DIO_PORTB:
			PORTB_REG=0XFF; //0b11111111
    6e62:	e8 e3       	ldi	r30, 0x38	; 56
    6e64:	f0 e0       	ldi	r31, 0x00	; 0
    6e66:	8f ef       	ldi	r24, 0xFF	; 255
    6e68:	80 83       	st	Z, r24
    6e6a:	09 c0       	rjmp	.+18     	; 0x6e7e <DIO_voidActiveIntPortPullUpResistance+0x78>
			break;
			
			case DIO_PORTC:
			PORTC_REG=0XFF; //0b11111111
    6e6c:	e5 e3       	ldi	r30, 0x35	; 53
    6e6e:	f0 e0       	ldi	r31, 0x00	; 0
    6e70:	8f ef       	ldi	r24, 0xFF	; 255
    6e72:	80 83       	st	Z, r24
    6e74:	04 c0       	rjmp	.+8      	; 0x6e7e <DIO_voidActiveIntPortPullUpResistance+0x78>
			break;
			
			case DIO_PORTD:
			PORTD_REG=0XFF; //0b11111111
    6e76:	e2 e3       	ldi	r30, 0x32	; 50
    6e78:	f0 e0       	ldi	r31, 0x00	; 0
    6e7a:	8f ef       	ldi	r24, 0xFF	; 255
    6e7c:	80 83       	st	Z, r24
	} 
	else
	{
		//Return Error Statement
	}
}
    6e7e:	0f 90       	pop	r0
    6e80:	0f 90       	pop	r0
    6e82:	0f 90       	pop	r0
    6e84:	cf 91       	pop	r28
    6e86:	df 91       	pop	r29
    6e88:	08 95       	ret

00006e8a <ADC_voidInit>:
#include "ADC_interface.h"
#include "ADC_register.h"


void ADC_voidInit (u8 copy_u8ReferenceVoltage)
{
    6e8a:	df 93       	push	r29
    6e8c:	cf 93       	push	r28
    6e8e:	00 d0       	rcall	.+0      	; 0x6e90 <ADC_voidInit+0x6>
    6e90:	0f 92       	push	r0
    6e92:	cd b7       	in	r28, 0x3d	; 61
    6e94:	de b7       	in	r29, 0x3e	; 62
    6e96:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8ReferenceVoltage)
    6e98:	89 81       	ldd	r24, Y+1	; 0x01
    6e9a:	28 2f       	mov	r18, r24
    6e9c:	30 e0       	ldi	r19, 0x00	; 0
    6e9e:	3b 83       	std	Y+3, r19	; 0x03
    6ea0:	2a 83       	std	Y+2, r18	; 0x02
    6ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    6ea6:	82 30       	cpi	r24, 0x02	; 2
    6ea8:	91 05       	cpc	r25, r1
    6eaa:	c9 f0       	breq	.+50     	; 0x6ede <ADC_voidInit+0x54>
    6eac:	2a 81       	ldd	r18, Y+2	; 0x02
    6eae:	3b 81       	ldd	r19, Y+3	; 0x03
    6eb0:	23 30       	cpi	r18, 0x03	; 3
    6eb2:	31 05       	cpc	r19, r1
    6eb4:	19 f1       	breq	.+70     	; 0x6efc <ADC_voidInit+0x72>
    6eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    6eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    6eba:	81 30       	cpi	r24, 0x01	; 1
    6ebc:	91 05       	cpc	r25, r1
    6ebe:	61 f5       	brne	.+88     	; 0x6f18 <ADC_voidInit+0x8e>
	{
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG, REFS0);
    6ec0:	a7 e2       	ldi	r26, 0x27	; 39
    6ec2:	b0 e0       	ldi	r27, 0x00	; 0
    6ec4:	e7 e2       	ldi	r30, 0x27	; 39
    6ec6:	f0 e0       	ldi	r31, 0x00	; 0
    6ec8:	80 81       	ld	r24, Z
    6eca:	80 64       	ori	r24, 0x40	; 64
    6ecc:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG, REFS1);
    6ece:	a7 e2       	ldi	r26, 0x27	; 39
    6ed0:	b0 e0       	ldi	r27, 0x00	; 0
    6ed2:	e7 e2       	ldi	r30, 0x27	; 39
    6ed4:	f0 e0       	ldi	r31, 0x00	; 0
    6ed6:	80 81       	ld	r24, Z
    6ed8:	8f 77       	andi	r24, 0x7F	; 127
    6eda:	8c 93       	st	X, r24
    6edc:	1d c0       	rjmp	.+58     	; 0x6f18 <ADC_voidInit+0x8e>
		break;
		
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG, REFS0);
    6ede:	a7 e2       	ldi	r26, 0x27	; 39
    6ee0:	b0 e0       	ldi	r27, 0x00	; 0
    6ee2:	e7 e2       	ldi	r30, 0x27	; 39
    6ee4:	f0 e0       	ldi	r31, 0x00	; 0
    6ee6:	80 81       	ld	r24, Z
    6ee8:	8f 7b       	andi	r24, 0xBF	; 191
    6eea:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG, REFS1);
    6eec:	a7 e2       	ldi	r26, 0x27	; 39
    6eee:	b0 e0       	ldi	r27, 0x00	; 0
    6ef0:	e7 e2       	ldi	r30, 0x27	; 39
    6ef2:	f0 e0       	ldi	r31, 0x00	; 0
    6ef4:	80 81       	ld	r24, Z
    6ef6:	8f 77       	andi	r24, 0x7F	; 127
    6ef8:	8c 93       	st	X, r24
    6efa:	0e c0       	rjmp	.+28     	; 0x6f18 <ADC_voidInit+0x8e>
		break;
		
		case ADC_REFERENCE_INTERNAL:
		SET_BIT(ADMUX_REG, REFS0);
    6efc:	a7 e2       	ldi	r26, 0x27	; 39
    6efe:	b0 e0       	ldi	r27, 0x00	; 0
    6f00:	e7 e2       	ldi	r30, 0x27	; 39
    6f02:	f0 e0       	ldi	r31, 0x00	; 0
    6f04:	80 81       	ld	r24, Z
    6f06:	80 64       	ori	r24, 0x40	; 64
    6f08:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG, REFS1);
    6f0a:	a7 e2       	ldi	r26, 0x27	; 39
    6f0c:	b0 e0       	ldi	r27, 0x00	; 0
    6f0e:	e7 e2       	ldi	r30, 0x27	; 39
    6f10:	f0 e0       	ldi	r31, 0x00	; 0
    6f12:	80 81       	ld	r24, Z
    6f14:	80 68       	ori	r24, 0x80	; 128
    6f16:	8c 93       	st	X, r24
		break;
	}
	// Select Right Adjustment
	CLR_BIT(ADMUX_REG, ADLAR);
    6f18:	a7 e2       	ldi	r26, 0x27	; 39
    6f1a:	b0 e0       	ldi	r27, 0x00	; 0
    6f1c:	e7 e2       	ldi	r30, 0x27	; 39
    6f1e:	f0 e0       	ldi	r31, 0x00	; 0
    6f20:	80 81       	ld	r24, Z
    6f22:	8f 7d       	andi	r24, 0xDF	; 223
    6f24:	8c 93       	st	X, r24
	
	// Single Conversion Mode
	CLR_BIT(ADMUX_REG, ADATE);
    6f26:	a7 e2       	ldi	r26, 0x27	; 39
    6f28:	b0 e0       	ldi	r27, 0x00	; 0
    6f2a:	e7 e2       	ldi	r30, 0x27	; 39
    6f2c:	f0 e0       	ldi	r31, 0x00	; 0
    6f2e:	80 81       	ld	r24, Z
    6f30:	8f 7d       	andi	r24, 0xDF	; 223
    6f32:	8c 93       	st	X, r24
	
	//Disable ADC Interrupt
	CLR_BIT(ADMUX_REG, ADIE);
    6f34:	a7 e2       	ldi	r26, 0x27	; 39
    6f36:	b0 e0       	ldi	r27, 0x00	; 0
    6f38:	e7 e2       	ldi	r30, 0x27	; 39
    6f3a:	f0 e0       	ldi	r31, 0x00	; 0
    6f3c:	80 81       	ld	r24, Z
    6f3e:	87 7f       	andi	r24, 0xF7	; 247
    6f40:	8c 93       	st	X, r24
	
	// Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG, ADPS0);
    6f42:	a6 e2       	ldi	r26, 0x26	; 38
    6f44:	b0 e0       	ldi	r27, 0x00	; 0
    6f46:	e6 e2       	ldi	r30, 0x26	; 38
    6f48:	f0 e0       	ldi	r31, 0x00	; 0
    6f4a:	80 81       	ld	r24, Z
    6f4c:	81 60       	ori	r24, 0x01	; 1
    6f4e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, ADPS1);
    6f50:	a6 e2       	ldi	r26, 0x26	; 38
    6f52:	b0 e0       	ldi	r27, 0x00	; 0
    6f54:	e6 e2       	ldi	r30, 0x26	; 38
    6f56:	f0 e0       	ldi	r31, 0x00	; 0
    6f58:	80 81       	ld	r24, Z
    6f5a:	82 60       	ori	r24, 0x02	; 2
    6f5c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, ADPS2);
    6f5e:	a6 e2       	ldi	r26, 0x26	; 38
    6f60:	b0 e0       	ldi	r27, 0x00	; 0
    6f62:	e6 e2       	ldi	r30, 0x26	; 38
    6f64:	f0 e0       	ldi	r31, 0x00	; 0
    6f66:	80 81       	ld	r24, Z
    6f68:	84 60       	ori	r24, 0x04	; 4
    6f6a:	8c 93       	st	X, r24
	//ADC Enable
	SET_BIT(ADCSRA_REG, ADEN);
    6f6c:	a6 e2       	ldi	r26, 0x26	; 38
    6f6e:	b0 e0       	ldi	r27, 0x00	; 0
    6f70:	e6 e2       	ldi	r30, 0x26	; 38
    6f72:	f0 e0       	ldi	r31, 0x00	; 0
    6f74:	80 81       	ld	r24, Z
    6f76:	80 68       	ori	r24, 0x80	; 128
    6f78:	8c 93       	st	X, r24
}
    6f7a:	0f 90       	pop	r0
    6f7c:	0f 90       	pop	r0
    6f7e:	0f 90       	pop	r0
    6f80:	cf 91       	pop	r28
    6f82:	df 91       	pop	r29
    6f84:	08 95       	ret

00006f86 <ADC_voidGetDigiatlValue>:
void ADC_voidGetDigiatlValue (u8 copy_u8ChannelNumber, u16* copy_pu16DigitalValue)
{
    6f86:	df 93       	push	r29
    6f88:	cf 93       	push	r28
    6f8a:	00 d0       	rcall	.+0      	; 0x6f8c <ADC_voidGetDigiatlValue+0x6>
    6f8c:	0f 92       	push	r0
    6f8e:	cd b7       	in	r28, 0x3d	; 61
    6f90:	de b7       	in	r29, 0x3e	; 62
    6f92:	89 83       	std	Y+1, r24	; 0x01
    6f94:	7b 83       	std	Y+3, r23	; 0x03
    6f96:	6a 83       	std	Y+2, r22	; 0x02
	if ( (copy_pu16DigitalValue != NULL) && (copy_u8ChannelNumber<32))
    6f98:	8a 81       	ldd	r24, Y+2	; 0x02
    6f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    6f9c:	00 97       	sbiw	r24, 0x00	; 0
    6f9e:	99 f1       	breq	.+102    	; 0x7006 <ADC_voidGetDigiatlValue+0x80>
    6fa0:	89 81       	ldd	r24, Y+1	; 0x01
    6fa2:	80 32       	cpi	r24, 0x20	; 32
    6fa4:	80 f5       	brcc	.+96     	; 0x7006 <ADC_voidGetDigiatlValue+0x80>
	{
		// Clear ADMUX Channel Bits
		ADMUX_REG &= 0xE0;   //0b11100000;
    6fa6:	a7 e2       	ldi	r26, 0x27	; 39
    6fa8:	b0 e0       	ldi	r27, 0x00	; 0
    6faa:	e7 e2       	ldi	r30, 0x27	; 39
    6fac:	f0 e0       	ldi	r31, 0x00	; 0
    6fae:	80 81       	ld	r24, Z
    6fb0:	80 7e       	andi	r24, 0xE0	; 224
    6fb2:	8c 93       	st	X, r24
		
		// Select Channel Number
		ADMUX_REG |= copy_u8ChannelNumber;
    6fb4:	a7 e2       	ldi	r26, 0x27	; 39
    6fb6:	b0 e0       	ldi	r27, 0x00	; 0
    6fb8:	e7 e2       	ldi	r30, 0x27	; 39
    6fba:	f0 e0       	ldi	r31, 0x00	; 0
    6fbc:	90 81       	ld	r25, Z
    6fbe:	89 81       	ldd	r24, Y+1	; 0x01
    6fc0:	89 2b       	or	r24, r25
    6fc2:	8c 93       	st	X, r24
		
		// Start Conversion
		SET_BIT(ADCSRA_REG, ADSC);
    6fc4:	a6 e2       	ldi	r26, 0x26	; 38
    6fc6:	b0 e0       	ldi	r27, 0x00	; 0
    6fc8:	e6 e2       	ldi	r30, 0x26	; 38
    6fca:	f0 e0       	ldi	r31, 0x00	; 0
    6fcc:	80 81       	ld	r24, Z
    6fce:	80 64       	ori	r24, 0x40	; 64
    6fd0:	8c 93       	st	X, r24
		
		// Busy Wait ADC Flag
		while(0 == GET_BIT(ADCSRA_REG, ADIF));
    6fd2:	e6 e2       	ldi	r30, 0x26	; 38
    6fd4:	f0 e0       	ldi	r31, 0x00	; 0
    6fd6:	80 81       	ld	r24, Z
    6fd8:	82 95       	swap	r24
    6fda:	8f 70       	andi	r24, 0x0F	; 15
    6fdc:	88 2f       	mov	r24, r24
    6fde:	90 e0       	ldi	r25, 0x00	; 0
    6fe0:	81 70       	andi	r24, 0x01	; 1
    6fe2:	90 70       	andi	r25, 0x00	; 0
    6fe4:	00 97       	sbiw	r24, 0x00	; 0
    6fe6:	a9 f3       	breq	.-22     	; 0x6fd2 <ADC_voidGetDigiatlValue+0x4c>
		
		//Clear H.W Flag (Write one To Clear)
		SET_BIT(ADCSRA_REG, ADIF);
    6fe8:	a6 e2       	ldi	r26, 0x26	; 38
    6fea:	b0 e0       	ldi	r27, 0x00	; 0
    6fec:	e6 e2       	ldi	r30, 0x26	; 38
    6fee:	f0 e0       	ldi	r31, 0x00	; 0
    6ff0:	80 81       	ld	r24, Z
    6ff2:	80 61       	ori	r24, 0x10	; 16
    6ff4:	8c 93       	st	X, r24
		*copy_pu16DigitalValue = ADC_u16_REG;
    6ff6:	e4 e2       	ldi	r30, 0x24	; 36
    6ff8:	f0 e0       	ldi	r31, 0x00	; 0
    6ffa:	80 81       	ld	r24, Z
    6ffc:	91 81       	ldd	r25, Z+1	; 0x01
    6ffe:	ea 81       	ldd	r30, Y+2	; 0x02
    7000:	fb 81       	ldd	r31, Y+3	; 0x03
    7002:	91 83       	std	Z+1, r25	; 0x01
    7004:	80 83       	st	Z, r24
	else
	{
		//Return Error State
	}
		
}
    7006:	0f 90       	pop	r0
    7008:	0f 90       	pop	r0
    700a:	0f 90       	pop	r0
    700c:	cf 91       	pop	r28
    700e:	df 91       	pop	r29
    7010:	08 95       	ret

00007012 <LS_voidInit>:
#include "LED_config.h"

/************************************************************************/
/*               Function That Init 5 leds and Keypad and LCD            /
 /************************************************************************/
void LS_voidInit(void) {
    7012:	df 93       	push	r29
    7014:	cf 93       	push	r28
    7016:	cd b7       	in	r28, 0x3d	; 61
    7018:	de b7       	in	r29, 0x3e	; 62
	LED_voidInit(LED1_PORT, LED1_PIN);
    701a:	82 e0       	ldi	r24, 0x02	; 2
    701c:	63 e0       	ldi	r22, 0x03	; 3
    701e:	0e 94 55 46 	call	0x8caa	; 0x8caa <LED_voidInit>
	LED_voidInit(LED2_PORT, LED2_PIN);
    7022:	82 e0       	ldi	r24, 0x02	; 2
    7024:	64 e0       	ldi	r22, 0x04	; 4
    7026:	0e 94 55 46 	call	0x8caa	; 0x8caa <LED_voidInit>
	LED_voidInit(LED3_PORT, LED3_PIN);
    702a:	82 e0       	ldi	r24, 0x02	; 2
    702c:	65 e0       	ldi	r22, 0x05	; 5
    702e:	0e 94 55 46 	call	0x8caa	; 0x8caa <LED_voidInit>
	LED_voidInit(LED4_PORT, LED4_PIN);
    7032:	82 e0       	ldi	r24, 0x02	; 2
    7034:	66 e0       	ldi	r22, 0x06	; 6
    7036:	0e 94 55 46 	call	0x8caa	; 0x8caa <LED_voidInit>
	LED_voidInit(LED5_PORT, LED5_PIN);
    703a:	82 e0       	ldi	r24, 0x02	; 2
    703c:	67 e0       	ldi	r22, 0x07	; 7
    703e:	0e 94 55 46 	call	0x8caa	; 0x8caa <LED_voidInit>



}
    7042:	cf 91       	pop	r28
    7044:	df 91       	pop	r29
    7046:	08 95       	ret

00007048 <LS_voidStartKPD>:
/************************************************************************/
/*         Function That Control Lightening System From Keypad           /
 /************************************************************************/
void LS_voidStartKPD(void) {
    7048:	0f 93       	push	r16
    704a:	1f 93       	push	r17
    704c:	df 93       	push	r29
    704e:	cf 93       	push	r28
    7050:	cd b7       	in	r28, 0x3d	; 61
    7052:	de b7       	in	r29, 0x3e	; 62
    7054:	c2 5e       	subi	r28, 0xE2	; 226
    7056:	d0 40       	sbci	r29, 0x00	; 0
    7058:	0f b6       	in	r0, 0x3f	; 63
    705a:	f8 94       	cli
    705c:	de bf       	out	0x3e, r29	; 62
    705e:	0f be       	out	0x3f, r0	; 63
    7060:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8KPD1; /* Local variable to return  */
	u8 local_u8KPD2; /*      KPD Button state     */

	LCD_voidClear();
    7062:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
	LCD_voidDisplayString((u8*) "Choose From");
    7066:	84 ea       	ldi	r24, 0xA4	; 164
    7068:	92 e0       	ldi	r25, 0x02	; 2
    706a:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    706e:	82 e0       	ldi	r24, 0x02	; 2
    7070:	60 e0       	ldi	r22, 0x00	; 0
    7072:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString((u8*) "LED1 TO LED5");
    7076:	80 eb       	ldi	r24, 0xB0	; 176
    7078:	92 e0       	ldi	r25, 0x02	; 2
    707a:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
	/* Get Keypad Status*/
	do {
		KPD_voidGetValue(&local_u8KPD1);
    707e:	ce 01       	movw	r24, r28
    7080:	8f 51       	subi	r24, 0x1F	; 31
    7082:	9f 4f       	sbci	r25, 0xFF	; 255
    7084:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <KPD_voidGetValue>
	} while (local_u8KPD1 == KPD_NOT_PRESSED);
    7088:	fe 01       	movw	r30, r28
    708a:	ef 51       	subi	r30, 0x1F	; 31
    708c:	ff 4f       	sbci	r31, 0xFF	; 255
    708e:	80 81       	ld	r24, Z
    7090:	8f 3f       	cpi	r24, 0xFF	; 255
    7092:	a9 f3       	breq	.-22     	; 0x707e <LS_voidStartKPD+0x36>

	/* if condition to choose between 5 leds */

	if (local_u8KPD1 == '1') //LED1
    7094:	fe 01       	movw	r30, r28
    7096:	ef 51       	subi	r30, 0x1F	; 31
    7098:	ff 4f       	sbci	r31, 0xFF	; 255
    709a:	80 81       	ld	r24, Z
    709c:	81 33       	cpi	r24, 0x31	; 49
    709e:	09 f0       	breq	.+2      	; 0x70a2 <LS_voidStartKPD+0x5a>
    70a0:	6e c2       	rjmp	.+1244   	; 0x757e <LS_voidStartKPD+0x536>
			{

		LCD_voidClear();
    70a2:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "      LED1");
    70a6:	8d eb       	ldi	r24, 0xBD	; 189
    70a8:	92 e0       	ldi	r25, 0x02	; 2
    70aa:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    70ae:	82 e0       	ldi	r24, 0x02	; 2
    70b0:	60 e0       	ldi	r22, 0x00	; 0
    70b2:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString((u8*) "1-ON       2-OFF");
    70b6:	88 ec       	ldi	r24, 0xC8	; 200
    70b8:	92 e0       	ldi	r25, 0x02	; 2
    70ba:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>

		do {
			KPD_voidGetValue(&local_u8KPD2);
    70be:	ce 01       	movw	r24, r28
    70c0:	8e 51       	subi	r24, 0x1E	; 30
    70c2:	9f 4f       	sbci	r25, 0xFF	; 255
    70c4:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <KPD_voidGetValue>
		} while (local_u8KPD2 == KPD_NOT_PRESSED);
    70c8:	fe 01       	movw	r30, r28
    70ca:	ee 51       	subi	r30, 0x1E	; 30
    70cc:	ff 4f       	sbci	r31, 0xFF	; 255
    70ce:	80 81       	ld	r24, Z
    70d0:	8f 3f       	cpi	r24, 0xFF	; 255
    70d2:	a9 f3       	breq	.-22     	; 0x70be <LS_voidStartKPD+0x76>
		LCD_voidClear();
    70d4:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		if (local_u8KPD2 == '1') {
    70d8:	fe 01       	movw	r30, r28
    70da:	ee 51       	subi	r30, 0x1E	; 30
    70dc:	ff 4f       	sbci	r31, 0xFF	; 255
    70de:	80 81       	ld	r24, Z
    70e0:	81 33       	cpi	r24, 0x31	; 49
    70e2:	09 f0       	breq	.+2      	; 0x70e6 <LS_voidStartKPD+0x9e>
    70e4:	c0 c0       	rjmp	.+384    	; 0x7266 <LS_voidStartKPD+0x21e>
			LED_voidLedOn(LED1_PORT, LED1_PIN, LED_FORWARD_CONNECTION);
    70e6:	82 e0       	ldi	r24, 0x02	; 2
    70e8:	63 e0       	ldi	r22, 0x03	; 3
    70ea:	41 e0       	ldi	r20, 0x01	; 1
    70ec:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <LED_voidLedOn>
			LCD_voidDisplayString((u8*) "LED 1 is ON");
    70f0:	89 ed       	ldi	r24, 0xD9	; 217
    70f2:	92 e0       	ldi	r25, 0x02	; 2
    70f4:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    70f8:	fe 01       	movw	r30, r28
    70fa:	e3 52       	subi	r30, 0x23	; 35
    70fc:	ff 4f       	sbci	r31, 0xFF	; 255
    70fe:	80 e0       	ldi	r24, 0x00	; 0
    7100:	90 e8       	ldi	r25, 0x80	; 128
    7102:	ab e3       	ldi	r26, 0x3B	; 59
    7104:	b5 e4       	ldi	r27, 0x45	; 69
    7106:	80 83       	st	Z, r24
    7108:	91 83       	std	Z+1, r25	; 0x01
    710a:	a2 83       	std	Z+2, r26	; 0x02
    710c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    710e:	8e 01       	movw	r16, r28
    7110:	07 52       	subi	r16, 0x27	; 39
    7112:	1f 4f       	sbci	r17, 0xFF	; 255
    7114:	fe 01       	movw	r30, r28
    7116:	e3 52       	subi	r30, 0x23	; 35
    7118:	ff 4f       	sbci	r31, 0xFF	; 255
    711a:	60 81       	ld	r22, Z
    711c:	71 81       	ldd	r23, Z+1	; 0x01
    711e:	82 81       	ldd	r24, Z+2	; 0x02
    7120:	93 81       	ldd	r25, Z+3	; 0x03
    7122:	20 e0       	ldi	r18, 0x00	; 0
    7124:	30 e0       	ldi	r19, 0x00	; 0
    7126:	4a e7       	ldi	r20, 0x7A	; 122
    7128:	55 e4       	ldi	r21, 0x45	; 69
    712a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    712e:	dc 01       	movw	r26, r24
    7130:	cb 01       	movw	r24, r22
    7132:	f8 01       	movw	r30, r16
    7134:	80 83       	st	Z, r24
    7136:	91 83       	std	Z+1, r25	; 0x01
    7138:	a2 83       	std	Z+2, r26	; 0x02
    713a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    713c:	fe 01       	movw	r30, r28
    713e:	e7 52       	subi	r30, 0x27	; 39
    7140:	ff 4f       	sbci	r31, 0xFF	; 255
    7142:	60 81       	ld	r22, Z
    7144:	71 81       	ldd	r23, Z+1	; 0x01
    7146:	82 81       	ldd	r24, Z+2	; 0x02
    7148:	93 81       	ldd	r25, Z+3	; 0x03
    714a:	20 e0       	ldi	r18, 0x00	; 0
    714c:	30 e0       	ldi	r19, 0x00	; 0
    714e:	40 e8       	ldi	r20, 0x80	; 128
    7150:	5f e3       	ldi	r21, 0x3F	; 63
    7152:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7156:	88 23       	and	r24, r24
    7158:	44 f4       	brge	.+16     	; 0x716a <LS_voidStartKPD+0x122>
		__ticks = 1;
    715a:	fe 01       	movw	r30, r28
    715c:	e9 52       	subi	r30, 0x29	; 41
    715e:	ff 4f       	sbci	r31, 0xFF	; 255
    7160:	81 e0       	ldi	r24, 0x01	; 1
    7162:	90 e0       	ldi	r25, 0x00	; 0
    7164:	91 83       	std	Z+1, r25	; 0x01
    7166:	80 83       	st	Z, r24
    7168:	65 c0       	rjmp	.+202    	; 0x7234 <LS_voidStartKPD+0x1ec>
	else if (__tmp > 65535)
    716a:	fe 01       	movw	r30, r28
    716c:	e7 52       	subi	r30, 0x27	; 39
    716e:	ff 4f       	sbci	r31, 0xFF	; 255
    7170:	60 81       	ld	r22, Z
    7172:	71 81       	ldd	r23, Z+1	; 0x01
    7174:	82 81       	ldd	r24, Z+2	; 0x02
    7176:	93 81       	ldd	r25, Z+3	; 0x03
    7178:	20 e0       	ldi	r18, 0x00	; 0
    717a:	3f ef       	ldi	r19, 0xFF	; 255
    717c:	4f e7       	ldi	r20, 0x7F	; 127
    717e:	57 e4       	ldi	r21, 0x47	; 71
    7180:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7184:	18 16       	cp	r1, r24
    7186:	0c f0       	brlt	.+2      	; 0x718a <LS_voidStartKPD+0x142>
    7188:	44 c0       	rjmp	.+136    	; 0x7212 <LS_voidStartKPD+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    718a:	fe 01       	movw	r30, r28
    718c:	e3 52       	subi	r30, 0x23	; 35
    718e:	ff 4f       	sbci	r31, 0xFF	; 255
    7190:	60 81       	ld	r22, Z
    7192:	71 81       	ldd	r23, Z+1	; 0x01
    7194:	82 81       	ldd	r24, Z+2	; 0x02
    7196:	93 81       	ldd	r25, Z+3	; 0x03
    7198:	20 e0       	ldi	r18, 0x00	; 0
    719a:	30 e0       	ldi	r19, 0x00	; 0
    719c:	40 e2       	ldi	r20, 0x20	; 32
    719e:	51 e4       	ldi	r21, 0x41	; 65
    71a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    71a4:	dc 01       	movw	r26, r24
    71a6:	cb 01       	movw	r24, r22
    71a8:	8e 01       	movw	r16, r28
    71aa:	09 52       	subi	r16, 0x29	; 41
    71ac:	1f 4f       	sbci	r17, 0xFF	; 255
    71ae:	bc 01       	movw	r22, r24
    71b0:	cd 01       	movw	r24, r26
    71b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71b6:	dc 01       	movw	r26, r24
    71b8:	cb 01       	movw	r24, r22
    71ba:	f8 01       	movw	r30, r16
    71bc:	91 83       	std	Z+1, r25	; 0x01
    71be:	80 83       	st	Z, r24
    71c0:	1f c0       	rjmp	.+62     	; 0x7200 <LS_voidStartKPD+0x1b8>
    71c2:	fe 01       	movw	r30, r28
    71c4:	eb 52       	subi	r30, 0x2B	; 43
    71c6:	ff 4f       	sbci	r31, 0xFF	; 255
    71c8:	80 e9       	ldi	r24, 0x90	; 144
    71ca:	91 e0       	ldi	r25, 0x01	; 1
    71cc:	91 83       	std	Z+1, r25	; 0x01
    71ce:	80 83       	st	Z, r24
    71d0:	fe 01       	movw	r30, r28
    71d2:	eb 52       	subi	r30, 0x2B	; 43
    71d4:	ff 4f       	sbci	r31, 0xFF	; 255
    71d6:	80 81       	ld	r24, Z
    71d8:	91 81       	ldd	r25, Z+1	; 0x01
    71da:	01 97       	sbiw	r24, 0x01	; 1
    71dc:	f1 f7       	brne	.-4      	; 0x71da <LS_voidStartKPD+0x192>
    71de:	fe 01       	movw	r30, r28
    71e0:	eb 52       	subi	r30, 0x2B	; 43
    71e2:	ff 4f       	sbci	r31, 0xFF	; 255
    71e4:	91 83       	std	Z+1, r25	; 0x01
    71e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    71e8:	de 01       	movw	r26, r28
    71ea:	a9 52       	subi	r26, 0x29	; 41
    71ec:	bf 4f       	sbci	r27, 0xFF	; 255
    71ee:	fe 01       	movw	r30, r28
    71f0:	e9 52       	subi	r30, 0x29	; 41
    71f2:	ff 4f       	sbci	r31, 0xFF	; 255
    71f4:	80 81       	ld	r24, Z
    71f6:	91 81       	ldd	r25, Z+1	; 0x01
    71f8:	01 97       	sbiw	r24, 0x01	; 1
    71fa:	11 96       	adiw	r26, 0x01	; 1
    71fc:	9c 93       	st	X, r25
    71fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7200:	fe 01       	movw	r30, r28
    7202:	e9 52       	subi	r30, 0x29	; 41
    7204:	ff 4f       	sbci	r31, 0xFF	; 255
    7206:	80 81       	ld	r24, Z
    7208:	91 81       	ldd	r25, Z+1	; 0x01
    720a:	00 97       	sbiw	r24, 0x00	; 0
    720c:	d1 f6       	brne	.-76     	; 0x71c2 <LS_voidStartKPD+0x17a>
    720e:	0c 94 12 44 	jmp	0x8824	; 0x8824 <LS_voidStartKPD+0x17dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7212:	8e 01       	movw	r16, r28
    7214:	09 52       	subi	r16, 0x29	; 41
    7216:	1f 4f       	sbci	r17, 0xFF	; 255
    7218:	fe 01       	movw	r30, r28
    721a:	e7 52       	subi	r30, 0x27	; 39
    721c:	ff 4f       	sbci	r31, 0xFF	; 255
    721e:	60 81       	ld	r22, Z
    7220:	71 81       	ldd	r23, Z+1	; 0x01
    7222:	82 81       	ldd	r24, Z+2	; 0x02
    7224:	93 81       	ldd	r25, Z+3	; 0x03
    7226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    722a:	dc 01       	movw	r26, r24
    722c:	cb 01       	movw	r24, r22
    722e:	f8 01       	movw	r30, r16
    7230:	91 83       	std	Z+1, r25	; 0x01
    7232:	80 83       	st	Z, r24
    7234:	de 01       	movw	r26, r28
    7236:	ad 52       	subi	r26, 0x2D	; 45
    7238:	bf 4f       	sbci	r27, 0xFF	; 255
    723a:	fe 01       	movw	r30, r28
    723c:	e9 52       	subi	r30, 0x29	; 41
    723e:	ff 4f       	sbci	r31, 0xFF	; 255
    7240:	80 81       	ld	r24, Z
    7242:	91 81       	ldd	r25, Z+1	; 0x01
    7244:	11 96       	adiw	r26, 0x01	; 1
    7246:	9c 93       	st	X, r25
    7248:	8e 93       	st	-X, r24
    724a:	fe 01       	movw	r30, r28
    724c:	ed 52       	subi	r30, 0x2D	; 45
    724e:	ff 4f       	sbci	r31, 0xFF	; 255
    7250:	80 81       	ld	r24, Z
    7252:	91 81       	ldd	r25, Z+1	; 0x01
    7254:	01 97       	sbiw	r24, 0x01	; 1
    7256:	f1 f7       	brne	.-4      	; 0x7254 <LS_voidStartKPD+0x20c>
    7258:	fe 01       	movw	r30, r28
    725a:	ed 52       	subi	r30, 0x2D	; 45
    725c:	ff 4f       	sbci	r31, 0xFF	; 255
    725e:	91 83       	std	Z+1, r25	; 0x01
    7260:	80 83       	st	Z, r24
    7262:	0c 94 12 44 	jmp	0x8824	; 0x8824 <LS_voidStartKPD+0x17dc>
			_delay_ms(3000);
		} else if (local_u8KPD2 == '2') {
    7266:	fe 01       	movw	r30, r28
    7268:	ee 51       	subi	r30, 0x1E	; 30
    726a:	ff 4f       	sbci	r31, 0xFF	; 255
    726c:	80 81       	ld	r24, Z
    726e:	82 33       	cpi	r24, 0x32	; 50
    7270:	09 f0       	breq	.+2      	; 0x7274 <LS_voidStartKPD+0x22c>
    7272:	c0 c0       	rjmp	.+384    	; 0x73f4 <LS_voidStartKPD+0x3ac>
			LED_voidLedOff(LED1_PORT, LED1_PIN, LED_FORWARD_CONNECTION);
    7274:	82 e0       	ldi	r24, 0x02	; 2
    7276:	63 e0       	ldi	r22, 0x03	; 3
    7278:	41 e0       	ldi	r20, 0x01	; 1
    727a:	0e 94 93 46 	call	0x8d26	; 0x8d26 <LED_voidLedOff>
			LCD_voidDisplayString((u8*) "LED 1 is OFF");
    727e:	85 ee       	ldi	r24, 0xE5	; 229
    7280:	92 e0       	ldi	r25, 0x02	; 2
    7282:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    7286:	fe 01       	movw	r30, r28
    7288:	e1 53       	subi	r30, 0x31	; 49
    728a:	ff 4f       	sbci	r31, 0xFF	; 255
    728c:	80 e0       	ldi	r24, 0x00	; 0
    728e:	90 e8       	ldi	r25, 0x80	; 128
    7290:	ab e3       	ldi	r26, 0x3B	; 59
    7292:	b5 e4       	ldi	r27, 0x45	; 69
    7294:	80 83       	st	Z, r24
    7296:	91 83       	std	Z+1, r25	; 0x01
    7298:	a2 83       	std	Z+2, r26	; 0x02
    729a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    729c:	8e 01       	movw	r16, r28
    729e:	05 53       	subi	r16, 0x35	; 53
    72a0:	1f 4f       	sbci	r17, 0xFF	; 255
    72a2:	fe 01       	movw	r30, r28
    72a4:	e1 53       	subi	r30, 0x31	; 49
    72a6:	ff 4f       	sbci	r31, 0xFF	; 255
    72a8:	60 81       	ld	r22, Z
    72aa:	71 81       	ldd	r23, Z+1	; 0x01
    72ac:	82 81       	ldd	r24, Z+2	; 0x02
    72ae:	93 81       	ldd	r25, Z+3	; 0x03
    72b0:	20 e0       	ldi	r18, 0x00	; 0
    72b2:	30 e0       	ldi	r19, 0x00	; 0
    72b4:	4a e7       	ldi	r20, 0x7A	; 122
    72b6:	55 e4       	ldi	r21, 0x45	; 69
    72b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    72bc:	dc 01       	movw	r26, r24
    72be:	cb 01       	movw	r24, r22
    72c0:	f8 01       	movw	r30, r16
    72c2:	80 83       	st	Z, r24
    72c4:	91 83       	std	Z+1, r25	; 0x01
    72c6:	a2 83       	std	Z+2, r26	; 0x02
    72c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    72ca:	fe 01       	movw	r30, r28
    72cc:	e5 53       	subi	r30, 0x35	; 53
    72ce:	ff 4f       	sbci	r31, 0xFF	; 255
    72d0:	60 81       	ld	r22, Z
    72d2:	71 81       	ldd	r23, Z+1	; 0x01
    72d4:	82 81       	ldd	r24, Z+2	; 0x02
    72d6:	93 81       	ldd	r25, Z+3	; 0x03
    72d8:	20 e0       	ldi	r18, 0x00	; 0
    72da:	30 e0       	ldi	r19, 0x00	; 0
    72dc:	40 e8       	ldi	r20, 0x80	; 128
    72de:	5f e3       	ldi	r21, 0x3F	; 63
    72e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    72e4:	88 23       	and	r24, r24
    72e6:	44 f4       	brge	.+16     	; 0x72f8 <LS_voidStartKPD+0x2b0>
		__ticks = 1;
    72e8:	fe 01       	movw	r30, r28
    72ea:	e7 53       	subi	r30, 0x37	; 55
    72ec:	ff 4f       	sbci	r31, 0xFF	; 255
    72ee:	81 e0       	ldi	r24, 0x01	; 1
    72f0:	90 e0       	ldi	r25, 0x00	; 0
    72f2:	91 83       	std	Z+1, r25	; 0x01
    72f4:	80 83       	st	Z, r24
    72f6:	65 c0       	rjmp	.+202    	; 0x73c2 <LS_voidStartKPD+0x37a>
	else if (__tmp > 65535)
    72f8:	fe 01       	movw	r30, r28
    72fa:	e5 53       	subi	r30, 0x35	; 53
    72fc:	ff 4f       	sbci	r31, 0xFF	; 255
    72fe:	60 81       	ld	r22, Z
    7300:	71 81       	ldd	r23, Z+1	; 0x01
    7302:	82 81       	ldd	r24, Z+2	; 0x02
    7304:	93 81       	ldd	r25, Z+3	; 0x03
    7306:	20 e0       	ldi	r18, 0x00	; 0
    7308:	3f ef       	ldi	r19, 0xFF	; 255
    730a:	4f e7       	ldi	r20, 0x7F	; 127
    730c:	57 e4       	ldi	r21, 0x47	; 71
    730e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7312:	18 16       	cp	r1, r24
    7314:	0c f0       	brlt	.+2      	; 0x7318 <LS_voidStartKPD+0x2d0>
    7316:	44 c0       	rjmp	.+136    	; 0x73a0 <LS_voidStartKPD+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7318:	fe 01       	movw	r30, r28
    731a:	e1 53       	subi	r30, 0x31	; 49
    731c:	ff 4f       	sbci	r31, 0xFF	; 255
    731e:	60 81       	ld	r22, Z
    7320:	71 81       	ldd	r23, Z+1	; 0x01
    7322:	82 81       	ldd	r24, Z+2	; 0x02
    7324:	93 81       	ldd	r25, Z+3	; 0x03
    7326:	20 e0       	ldi	r18, 0x00	; 0
    7328:	30 e0       	ldi	r19, 0x00	; 0
    732a:	40 e2       	ldi	r20, 0x20	; 32
    732c:	51 e4       	ldi	r21, 0x41	; 65
    732e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7332:	dc 01       	movw	r26, r24
    7334:	cb 01       	movw	r24, r22
    7336:	8e 01       	movw	r16, r28
    7338:	07 53       	subi	r16, 0x37	; 55
    733a:	1f 4f       	sbci	r17, 0xFF	; 255
    733c:	bc 01       	movw	r22, r24
    733e:	cd 01       	movw	r24, r26
    7340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7344:	dc 01       	movw	r26, r24
    7346:	cb 01       	movw	r24, r22
    7348:	f8 01       	movw	r30, r16
    734a:	91 83       	std	Z+1, r25	; 0x01
    734c:	80 83       	st	Z, r24
    734e:	1f c0       	rjmp	.+62     	; 0x738e <LS_voidStartKPD+0x346>
    7350:	fe 01       	movw	r30, r28
    7352:	e9 53       	subi	r30, 0x39	; 57
    7354:	ff 4f       	sbci	r31, 0xFF	; 255
    7356:	80 e9       	ldi	r24, 0x90	; 144
    7358:	91 e0       	ldi	r25, 0x01	; 1
    735a:	91 83       	std	Z+1, r25	; 0x01
    735c:	80 83       	st	Z, r24
    735e:	fe 01       	movw	r30, r28
    7360:	e9 53       	subi	r30, 0x39	; 57
    7362:	ff 4f       	sbci	r31, 0xFF	; 255
    7364:	80 81       	ld	r24, Z
    7366:	91 81       	ldd	r25, Z+1	; 0x01
    7368:	01 97       	sbiw	r24, 0x01	; 1
    736a:	f1 f7       	brne	.-4      	; 0x7368 <LS_voidStartKPD+0x320>
    736c:	fe 01       	movw	r30, r28
    736e:	e9 53       	subi	r30, 0x39	; 57
    7370:	ff 4f       	sbci	r31, 0xFF	; 255
    7372:	91 83       	std	Z+1, r25	; 0x01
    7374:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7376:	de 01       	movw	r26, r28
    7378:	a7 53       	subi	r26, 0x37	; 55
    737a:	bf 4f       	sbci	r27, 0xFF	; 255
    737c:	fe 01       	movw	r30, r28
    737e:	e7 53       	subi	r30, 0x37	; 55
    7380:	ff 4f       	sbci	r31, 0xFF	; 255
    7382:	80 81       	ld	r24, Z
    7384:	91 81       	ldd	r25, Z+1	; 0x01
    7386:	01 97       	sbiw	r24, 0x01	; 1
    7388:	11 96       	adiw	r26, 0x01	; 1
    738a:	9c 93       	st	X, r25
    738c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    738e:	fe 01       	movw	r30, r28
    7390:	e7 53       	subi	r30, 0x37	; 55
    7392:	ff 4f       	sbci	r31, 0xFF	; 255
    7394:	80 81       	ld	r24, Z
    7396:	91 81       	ldd	r25, Z+1	; 0x01
    7398:	00 97       	sbiw	r24, 0x00	; 0
    739a:	d1 f6       	brne	.-76     	; 0x7350 <LS_voidStartKPD+0x308>
    739c:	0c 94 12 44 	jmp	0x8824	; 0x8824 <LS_voidStartKPD+0x17dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    73a0:	8e 01       	movw	r16, r28
    73a2:	07 53       	subi	r16, 0x37	; 55
    73a4:	1f 4f       	sbci	r17, 0xFF	; 255
    73a6:	fe 01       	movw	r30, r28
    73a8:	e5 53       	subi	r30, 0x35	; 53
    73aa:	ff 4f       	sbci	r31, 0xFF	; 255
    73ac:	60 81       	ld	r22, Z
    73ae:	71 81       	ldd	r23, Z+1	; 0x01
    73b0:	82 81       	ldd	r24, Z+2	; 0x02
    73b2:	93 81       	ldd	r25, Z+3	; 0x03
    73b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73b8:	dc 01       	movw	r26, r24
    73ba:	cb 01       	movw	r24, r22
    73bc:	f8 01       	movw	r30, r16
    73be:	91 83       	std	Z+1, r25	; 0x01
    73c0:	80 83       	st	Z, r24
    73c2:	de 01       	movw	r26, r28
    73c4:	ab 53       	subi	r26, 0x3B	; 59
    73c6:	bf 4f       	sbci	r27, 0xFF	; 255
    73c8:	fe 01       	movw	r30, r28
    73ca:	e7 53       	subi	r30, 0x37	; 55
    73cc:	ff 4f       	sbci	r31, 0xFF	; 255
    73ce:	80 81       	ld	r24, Z
    73d0:	91 81       	ldd	r25, Z+1	; 0x01
    73d2:	11 96       	adiw	r26, 0x01	; 1
    73d4:	9c 93       	st	X, r25
    73d6:	8e 93       	st	-X, r24
    73d8:	fe 01       	movw	r30, r28
    73da:	eb 53       	subi	r30, 0x3B	; 59
    73dc:	ff 4f       	sbci	r31, 0xFF	; 255
    73de:	80 81       	ld	r24, Z
    73e0:	91 81       	ldd	r25, Z+1	; 0x01
    73e2:	01 97       	sbiw	r24, 0x01	; 1
    73e4:	f1 f7       	brne	.-4      	; 0x73e2 <LS_voidStartKPD+0x39a>
    73e6:	fe 01       	movw	r30, r28
    73e8:	eb 53       	subi	r30, 0x3B	; 59
    73ea:	ff 4f       	sbci	r31, 0xFF	; 255
    73ec:	91 83       	std	Z+1, r25	; 0x01
    73ee:	80 83       	st	Z, r24
    73f0:	0c 94 12 44 	jmp	0x8824	; 0x8824 <LS_voidStartKPD+0x17dc>
			_delay_ms(3000);
		} else {
			LCD_voidClear();
    73f4:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "Wrong Choice");
    73f8:	82 ef       	ldi	r24, 0xF2	; 242
    73fa:	92 e0       	ldi	r25, 0x02	; 2
    73fc:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    7400:	82 e0       	ldi	r24, 0x02	; 2
    7402:	60 e0       	ldi	r22, 0x00	; 0
    7404:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
			LCD_voidDisplayString((u8*) "Please Try again!!");
    7408:	8f ef       	ldi	r24, 0xFF	; 255
    740a:	92 e0       	ldi	r25, 0x02	; 2
    740c:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    7410:	fe 01       	movw	r30, r28
    7412:	ef 53       	subi	r30, 0x3F	; 63
    7414:	ff 4f       	sbci	r31, 0xFF	; 255
    7416:	80 e0       	ldi	r24, 0x00	; 0
    7418:	90 e8       	ldi	r25, 0x80	; 128
    741a:	ab eb       	ldi	r26, 0xBB	; 187
    741c:	b4 e4       	ldi	r27, 0x44	; 68
    741e:	80 83       	st	Z, r24
    7420:	91 83       	std	Z+1, r25	; 0x01
    7422:	a2 83       	std	Z+2, r26	; 0x02
    7424:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7426:	8e 01       	movw	r16, r28
    7428:	03 54       	subi	r16, 0x43	; 67
    742a:	1f 4f       	sbci	r17, 0xFF	; 255
    742c:	fe 01       	movw	r30, r28
    742e:	ef 53       	subi	r30, 0x3F	; 63
    7430:	ff 4f       	sbci	r31, 0xFF	; 255
    7432:	60 81       	ld	r22, Z
    7434:	71 81       	ldd	r23, Z+1	; 0x01
    7436:	82 81       	ldd	r24, Z+2	; 0x02
    7438:	93 81       	ldd	r25, Z+3	; 0x03
    743a:	20 e0       	ldi	r18, 0x00	; 0
    743c:	30 e0       	ldi	r19, 0x00	; 0
    743e:	4a e7       	ldi	r20, 0x7A	; 122
    7440:	55 e4       	ldi	r21, 0x45	; 69
    7442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7446:	dc 01       	movw	r26, r24
    7448:	cb 01       	movw	r24, r22
    744a:	f8 01       	movw	r30, r16
    744c:	80 83       	st	Z, r24
    744e:	91 83       	std	Z+1, r25	; 0x01
    7450:	a2 83       	std	Z+2, r26	; 0x02
    7452:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7454:	fe 01       	movw	r30, r28
    7456:	e3 54       	subi	r30, 0x43	; 67
    7458:	ff 4f       	sbci	r31, 0xFF	; 255
    745a:	60 81       	ld	r22, Z
    745c:	71 81       	ldd	r23, Z+1	; 0x01
    745e:	82 81       	ldd	r24, Z+2	; 0x02
    7460:	93 81       	ldd	r25, Z+3	; 0x03
    7462:	20 e0       	ldi	r18, 0x00	; 0
    7464:	30 e0       	ldi	r19, 0x00	; 0
    7466:	40 e8       	ldi	r20, 0x80	; 128
    7468:	5f e3       	ldi	r21, 0x3F	; 63
    746a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    746e:	88 23       	and	r24, r24
    7470:	44 f4       	brge	.+16     	; 0x7482 <LS_voidStartKPD+0x43a>
		__ticks = 1;
    7472:	fe 01       	movw	r30, r28
    7474:	e5 54       	subi	r30, 0x45	; 69
    7476:	ff 4f       	sbci	r31, 0xFF	; 255
    7478:	81 e0       	ldi	r24, 0x01	; 1
    747a:	90 e0       	ldi	r25, 0x00	; 0
    747c:	91 83       	std	Z+1, r25	; 0x01
    747e:	80 83       	st	Z, r24
    7480:	64 c0       	rjmp	.+200    	; 0x754a <LS_voidStartKPD+0x502>
	else if (__tmp > 65535)
    7482:	fe 01       	movw	r30, r28
    7484:	e3 54       	subi	r30, 0x43	; 67
    7486:	ff 4f       	sbci	r31, 0xFF	; 255
    7488:	60 81       	ld	r22, Z
    748a:	71 81       	ldd	r23, Z+1	; 0x01
    748c:	82 81       	ldd	r24, Z+2	; 0x02
    748e:	93 81       	ldd	r25, Z+3	; 0x03
    7490:	20 e0       	ldi	r18, 0x00	; 0
    7492:	3f ef       	ldi	r19, 0xFF	; 255
    7494:	4f e7       	ldi	r20, 0x7F	; 127
    7496:	57 e4       	ldi	r21, 0x47	; 71
    7498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    749c:	18 16       	cp	r1, r24
    749e:	0c f0       	brlt	.+2      	; 0x74a2 <LS_voidStartKPD+0x45a>
    74a0:	43 c0       	rjmp	.+134    	; 0x7528 <LS_voidStartKPD+0x4e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    74a2:	fe 01       	movw	r30, r28
    74a4:	ef 53       	subi	r30, 0x3F	; 63
    74a6:	ff 4f       	sbci	r31, 0xFF	; 255
    74a8:	60 81       	ld	r22, Z
    74aa:	71 81       	ldd	r23, Z+1	; 0x01
    74ac:	82 81       	ldd	r24, Z+2	; 0x02
    74ae:	93 81       	ldd	r25, Z+3	; 0x03
    74b0:	20 e0       	ldi	r18, 0x00	; 0
    74b2:	30 e0       	ldi	r19, 0x00	; 0
    74b4:	40 e2       	ldi	r20, 0x20	; 32
    74b6:	51 e4       	ldi	r21, 0x41	; 65
    74b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    74bc:	dc 01       	movw	r26, r24
    74be:	cb 01       	movw	r24, r22
    74c0:	8e 01       	movw	r16, r28
    74c2:	05 54       	subi	r16, 0x45	; 69
    74c4:	1f 4f       	sbci	r17, 0xFF	; 255
    74c6:	bc 01       	movw	r22, r24
    74c8:	cd 01       	movw	r24, r26
    74ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    74ce:	dc 01       	movw	r26, r24
    74d0:	cb 01       	movw	r24, r22
    74d2:	f8 01       	movw	r30, r16
    74d4:	91 83       	std	Z+1, r25	; 0x01
    74d6:	80 83       	st	Z, r24
    74d8:	1f c0       	rjmp	.+62     	; 0x7518 <LS_voidStartKPD+0x4d0>
    74da:	fe 01       	movw	r30, r28
    74dc:	e7 54       	subi	r30, 0x47	; 71
    74de:	ff 4f       	sbci	r31, 0xFF	; 255
    74e0:	80 e9       	ldi	r24, 0x90	; 144
    74e2:	91 e0       	ldi	r25, 0x01	; 1
    74e4:	91 83       	std	Z+1, r25	; 0x01
    74e6:	80 83       	st	Z, r24
    74e8:	fe 01       	movw	r30, r28
    74ea:	e7 54       	subi	r30, 0x47	; 71
    74ec:	ff 4f       	sbci	r31, 0xFF	; 255
    74ee:	80 81       	ld	r24, Z
    74f0:	91 81       	ldd	r25, Z+1	; 0x01
    74f2:	01 97       	sbiw	r24, 0x01	; 1
    74f4:	f1 f7       	brne	.-4      	; 0x74f2 <LS_voidStartKPD+0x4aa>
    74f6:	fe 01       	movw	r30, r28
    74f8:	e7 54       	subi	r30, 0x47	; 71
    74fa:	ff 4f       	sbci	r31, 0xFF	; 255
    74fc:	91 83       	std	Z+1, r25	; 0x01
    74fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7500:	de 01       	movw	r26, r28
    7502:	a5 54       	subi	r26, 0x45	; 69
    7504:	bf 4f       	sbci	r27, 0xFF	; 255
    7506:	fe 01       	movw	r30, r28
    7508:	e5 54       	subi	r30, 0x45	; 69
    750a:	ff 4f       	sbci	r31, 0xFF	; 255
    750c:	80 81       	ld	r24, Z
    750e:	91 81       	ldd	r25, Z+1	; 0x01
    7510:	01 97       	sbiw	r24, 0x01	; 1
    7512:	11 96       	adiw	r26, 0x01	; 1
    7514:	9c 93       	st	X, r25
    7516:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7518:	fe 01       	movw	r30, r28
    751a:	e5 54       	subi	r30, 0x45	; 69
    751c:	ff 4f       	sbci	r31, 0xFF	; 255
    751e:	80 81       	ld	r24, Z
    7520:	91 81       	ldd	r25, Z+1	; 0x01
    7522:	00 97       	sbiw	r24, 0x00	; 0
    7524:	d1 f6       	brne	.-76     	; 0x74da <LS_voidStartKPD+0x492>
    7526:	27 c0       	rjmp	.+78     	; 0x7576 <LS_voidStartKPD+0x52e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7528:	8e 01       	movw	r16, r28
    752a:	05 54       	subi	r16, 0x45	; 69
    752c:	1f 4f       	sbci	r17, 0xFF	; 255
    752e:	fe 01       	movw	r30, r28
    7530:	e3 54       	subi	r30, 0x43	; 67
    7532:	ff 4f       	sbci	r31, 0xFF	; 255
    7534:	60 81       	ld	r22, Z
    7536:	71 81       	ldd	r23, Z+1	; 0x01
    7538:	82 81       	ldd	r24, Z+2	; 0x02
    753a:	93 81       	ldd	r25, Z+3	; 0x03
    753c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7540:	dc 01       	movw	r26, r24
    7542:	cb 01       	movw	r24, r22
    7544:	f8 01       	movw	r30, r16
    7546:	91 83       	std	Z+1, r25	; 0x01
    7548:	80 83       	st	Z, r24
    754a:	de 01       	movw	r26, r28
    754c:	a9 54       	subi	r26, 0x49	; 73
    754e:	bf 4f       	sbci	r27, 0xFF	; 255
    7550:	fe 01       	movw	r30, r28
    7552:	e5 54       	subi	r30, 0x45	; 69
    7554:	ff 4f       	sbci	r31, 0xFF	; 255
    7556:	80 81       	ld	r24, Z
    7558:	91 81       	ldd	r25, Z+1	; 0x01
    755a:	8d 93       	st	X+, r24
    755c:	9c 93       	st	X, r25
    755e:	fe 01       	movw	r30, r28
    7560:	e9 54       	subi	r30, 0x49	; 73
    7562:	ff 4f       	sbci	r31, 0xFF	; 255
    7564:	80 81       	ld	r24, Z
    7566:	91 81       	ldd	r25, Z+1	; 0x01
    7568:	01 97       	sbiw	r24, 0x01	; 1
    756a:	f1 f7       	brne	.-4      	; 0x7568 <LS_voidStartKPD+0x520>
    756c:	fe 01       	movw	r30, r28
    756e:	e9 54       	subi	r30, 0x49	; 73
    7570:	ff 4f       	sbci	r31, 0xFF	; 255
    7572:	91 83       	std	Z+1, r25	; 0x01
    7574:	80 83       	st	Z, r24
			_delay_ms(1500);
			LCD_voidClear();
    7576:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
    757a:	0c 94 12 44 	jmp	0x8824	; 0x8824 <LS_voidStartKPD+0x17dc>
		}
	}

	else if (local_u8KPD1 == '2') //LED2
    757e:	fe 01       	movw	r30, r28
    7580:	ef 51       	subi	r30, 0x1F	; 31
    7582:	ff 4f       	sbci	r31, 0xFF	; 255
    7584:	80 81       	ld	r24, Z
    7586:	82 33       	cpi	r24, 0x32	; 50
    7588:	09 f0       	breq	.+2      	; 0x758c <LS_voidStartKPD+0x544>
    758a:	6d c2       	rjmp	.+1242   	; 0x7a66 <LS_voidStartKPD+0xa1e>
			{
		LCD_voidClear();
    758c:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "      LED2");
    7590:	82 e1       	ldi	r24, 0x12	; 18
    7592:	93 e0       	ldi	r25, 0x03	; 3
    7594:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    7598:	82 e0       	ldi	r24, 0x02	; 2
    759a:	60 e0       	ldi	r22, 0x00	; 0
    759c:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString((u8*) "1-ON       2-OFF");
    75a0:	88 ec       	ldi	r24, 0xC8	; 200
    75a2:	92 e0       	ldi	r25, 0x02	; 2
    75a4:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		do {
			KPD_voidGetValue(&local_u8KPD2);
    75a8:	ce 01       	movw	r24, r28
    75aa:	8e 51       	subi	r24, 0x1E	; 30
    75ac:	9f 4f       	sbci	r25, 0xFF	; 255
    75ae:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <KPD_voidGetValue>
		} while (local_u8KPD2 == KPD_NOT_PRESSED);
    75b2:	fe 01       	movw	r30, r28
    75b4:	ee 51       	subi	r30, 0x1E	; 30
    75b6:	ff 4f       	sbci	r31, 0xFF	; 255
    75b8:	80 81       	ld	r24, Z
    75ba:	8f 3f       	cpi	r24, 0xFF	; 255
    75bc:	a9 f3       	breq	.-22     	; 0x75a8 <LS_voidStartKPD+0x560>
		LCD_voidClear();
    75be:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		if (local_u8KPD2 == '1') {
    75c2:	fe 01       	movw	r30, r28
    75c4:	ee 51       	subi	r30, 0x1E	; 30
    75c6:	ff 4f       	sbci	r31, 0xFF	; 255
    75c8:	80 81       	ld	r24, Z
    75ca:	81 33       	cpi	r24, 0x31	; 49
    75cc:	09 f0       	breq	.+2      	; 0x75d0 <LS_voidStartKPD+0x588>
    75ce:	c0 c0       	rjmp	.+384    	; 0x7750 <LS_voidStartKPD+0x708>
			LED_voidLedOn(LED2_PORT, LED2_PIN, LED_FORWARD_CONNECTION);
    75d0:	82 e0       	ldi	r24, 0x02	; 2
    75d2:	64 e0       	ldi	r22, 0x04	; 4
    75d4:	41 e0       	ldi	r20, 0x01	; 1
    75d6:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <LED_voidLedOn>
			LCD_voidDisplayString((u8*) "LED 2 is ON");
    75da:	8d e1       	ldi	r24, 0x1D	; 29
    75dc:	93 e0       	ldi	r25, 0x03	; 3
    75de:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    75e2:	fe 01       	movw	r30, r28
    75e4:	ed 54       	subi	r30, 0x4D	; 77
    75e6:	ff 4f       	sbci	r31, 0xFF	; 255
    75e8:	80 e0       	ldi	r24, 0x00	; 0
    75ea:	90 e8       	ldi	r25, 0x80	; 128
    75ec:	ab e3       	ldi	r26, 0x3B	; 59
    75ee:	b5 e4       	ldi	r27, 0x45	; 69
    75f0:	80 83       	st	Z, r24
    75f2:	91 83       	std	Z+1, r25	; 0x01
    75f4:	a2 83       	std	Z+2, r26	; 0x02
    75f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    75f8:	8e 01       	movw	r16, r28
    75fa:	01 55       	subi	r16, 0x51	; 81
    75fc:	1f 4f       	sbci	r17, 0xFF	; 255
    75fe:	fe 01       	movw	r30, r28
    7600:	ed 54       	subi	r30, 0x4D	; 77
    7602:	ff 4f       	sbci	r31, 0xFF	; 255
    7604:	60 81       	ld	r22, Z
    7606:	71 81       	ldd	r23, Z+1	; 0x01
    7608:	82 81       	ldd	r24, Z+2	; 0x02
    760a:	93 81       	ldd	r25, Z+3	; 0x03
    760c:	20 e0       	ldi	r18, 0x00	; 0
    760e:	30 e0       	ldi	r19, 0x00	; 0
    7610:	4a e7       	ldi	r20, 0x7A	; 122
    7612:	55 e4       	ldi	r21, 0x45	; 69
    7614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7618:	dc 01       	movw	r26, r24
    761a:	cb 01       	movw	r24, r22
    761c:	f8 01       	movw	r30, r16
    761e:	80 83       	st	Z, r24
    7620:	91 83       	std	Z+1, r25	; 0x01
    7622:	a2 83       	std	Z+2, r26	; 0x02
    7624:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7626:	fe 01       	movw	r30, r28
    7628:	e1 55       	subi	r30, 0x51	; 81
    762a:	ff 4f       	sbci	r31, 0xFF	; 255
    762c:	60 81       	ld	r22, Z
    762e:	71 81       	ldd	r23, Z+1	; 0x01
    7630:	82 81       	ldd	r24, Z+2	; 0x02
    7632:	93 81       	ldd	r25, Z+3	; 0x03
    7634:	20 e0       	ldi	r18, 0x00	; 0
    7636:	30 e0       	ldi	r19, 0x00	; 0
    7638:	40 e8       	ldi	r20, 0x80	; 128
    763a:	5f e3       	ldi	r21, 0x3F	; 63
    763c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7640:	88 23       	and	r24, r24
    7642:	44 f4       	brge	.+16     	; 0x7654 <LS_voidStartKPD+0x60c>
		__ticks = 1;
    7644:	fe 01       	movw	r30, r28
    7646:	e3 55       	subi	r30, 0x53	; 83
    7648:	ff 4f       	sbci	r31, 0xFF	; 255
    764a:	81 e0       	ldi	r24, 0x01	; 1
    764c:	90 e0       	ldi	r25, 0x00	; 0
    764e:	91 83       	std	Z+1, r25	; 0x01
    7650:	80 83       	st	Z, r24
    7652:	65 c0       	rjmp	.+202    	; 0x771e <LS_voidStartKPD+0x6d6>
	else if (__tmp > 65535)
    7654:	fe 01       	movw	r30, r28
    7656:	e1 55       	subi	r30, 0x51	; 81
    7658:	ff 4f       	sbci	r31, 0xFF	; 255
    765a:	60 81       	ld	r22, Z
    765c:	71 81       	ldd	r23, Z+1	; 0x01
    765e:	82 81       	ldd	r24, Z+2	; 0x02
    7660:	93 81       	ldd	r25, Z+3	; 0x03
    7662:	20 e0       	ldi	r18, 0x00	; 0
    7664:	3f ef       	ldi	r19, 0xFF	; 255
    7666:	4f e7       	ldi	r20, 0x7F	; 127
    7668:	57 e4       	ldi	r21, 0x47	; 71
    766a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    766e:	18 16       	cp	r1, r24
    7670:	0c f0       	brlt	.+2      	; 0x7674 <LS_voidStartKPD+0x62c>
    7672:	44 c0       	rjmp	.+136    	; 0x76fc <LS_voidStartKPD+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7674:	fe 01       	movw	r30, r28
    7676:	ed 54       	subi	r30, 0x4D	; 77
    7678:	ff 4f       	sbci	r31, 0xFF	; 255
    767a:	60 81       	ld	r22, Z
    767c:	71 81       	ldd	r23, Z+1	; 0x01
    767e:	82 81       	ldd	r24, Z+2	; 0x02
    7680:	93 81       	ldd	r25, Z+3	; 0x03
    7682:	20 e0       	ldi	r18, 0x00	; 0
    7684:	30 e0       	ldi	r19, 0x00	; 0
    7686:	40 e2       	ldi	r20, 0x20	; 32
    7688:	51 e4       	ldi	r21, 0x41	; 65
    768a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    768e:	dc 01       	movw	r26, r24
    7690:	cb 01       	movw	r24, r22
    7692:	8e 01       	movw	r16, r28
    7694:	03 55       	subi	r16, 0x53	; 83
    7696:	1f 4f       	sbci	r17, 0xFF	; 255
    7698:	bc 01       	movw	r22, r24
    769a:	cd 01       	movw	r24, r26
    769c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    76a0:	dc 01       	movw	r26, r24
    76a2:	cb 01       	movw	r24, r22
    76a4:	f8 01       	movw	r30, r16
    76a6:	91 83       	std	Z+1, r25	; 0x01
    76a8:	80 83       	st	Z, r24
    76aa:	1f c0       	rjmp	.+62     	; 0x76ea <LS_voidStartKPD+0x6a2>
    76ac:	fe 01       	movw	r30, r28
    76ae:	e5 55       	subi	r30, 0x55	; 85
    76b0:	ff 4f       	sbci	r31, 0xFF	; 255
    76b2:	80 e9       	ldi	r24, 0x90	; 144
    76b4:	91 e0       	ldi	r25, 0x01	; 1
    76b6:	91 83       	std	Z+1, r25	; 0x01
    76b8:	80 83       	st	Z, r24
    76ba:	fe 01       	movw	r30, r28
    76bc:	e5 55       	subi	r30, 0x55	; 85
    76be:	ff 4f       	sbci	r31, 0xFF	; 255
    76c0:	80 81       	ld	r24, Z
    76c2:	91 81       	ldd	r25, Z+1	; 0x01
    76c4:	01 97       	sbiw	r24, 0x01	; 1
    76c6:	f1 f7       	brne	.-4      	; 0x76c4 <LS_voidStartKPD+0x67c>
    76c8:	fe 01       	movw	r30, r28
    76ca:	e5 55       	subi	r30, 0x55	; 85
    76cc:	ff 4f       	sbci	r31, 0xFF	; 255
    76ce:	91 83       	std	Z+1, r25	; 0x01
    76d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76d2:	de 01       	movw	r26, r28
    76d4:	a3 55       	subi	r26, 0x53	; 83
    76d6:	bf 4f       	sbci	r27, 0xFF	; 255
    76d8:	fe 01       	movw	r30, r28
    76da:	e3 55       	subi	r30, 0x53	; 83
    76dc:	ff 4f       	sbci	r31, 0xFF	; 255
    76de:	80 81       	ld	r24, Z
    76e0:	91 81       	ldd	r25, Z+1	; 0x01
    76e2:	01 97       	sbiw	r24, 0x01	; 1
    76e4:	11 96       	adiw	r26, 0x01	; 1
    76e6:	9c 93       	st	X, r25
    76e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76ea:	fe 01       	movw	r30, r28
    76ec:	e3 55       	subi	r30, 0x53	; 83
    76ee:	ff 4f       	sbci	r31, 0xFF	; 255
    76f0:	80 81       	ld	r24, Z
    76f2:	91 81       	ldd	r25, Z+1	; 0x01
    76f4:	00 97       	sbiw	r24, 0x00	; 0
    76f6:	d1 f6       	brne	.-76     	; 0x76ac <LS_voidStartKPD+0x664>
    76f8:	0c 94 12 44 	jmp	0x8824	; 0x8824 <LS_voidStartKPD+0x17dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    76fc:	8e 01       	movw	r16, r28
    76fe:	03 55       	subi	r16, 0x53	; 83
    7700:	1f 4f       	sbci	r17, 0xFF	; 255
    7702:	fe 01       	movw	r30, r28
    7704:	e1 55       	subi	r30, 0x51	; 81
    7706:	ff 4f       	sbci	r31, 0xFF	; 255
    7708:	60 81       	ld	r22, Z
    770a:	71 81       	ldd	r23, Z+1	; 0x01
    770c:	82 81       	ldd	r24, Z+2	; 0x02
    770e:	93 81       	ldd	r25, Z+3	; 0x03
    7710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7714:	dc 01       	movw	r26, r24
    7716:	cb 01       	movw	r24, r22
    7718:	f8 01       	movw	r30, r16
    771a:	91 83       	std	Z+1, r25	; 0x01
    771c:	80 83       	st	Z, r24
    771e:	de 01       	movw	r26, r28
    7720:	a7 55       	subi	r26, 0x57	; 87
    7722:	bf 4f       	sbci	r27, 0xFF	; 255
    7724:	fe 01       	movw	r30, r28
    7726:	e3 55       	subi	r30, 0x53	; 83
    7728:	ff 4f       	sbci	r31, 0xFF	; 255
    772a:	80 81       	ld	r24, Z
    772c:	91 81       	ldd	r25, Z+1	; 0x01
    772e:	11 96       	adiw	r26, 0x01	; 1
    7730:	9c 93       	st	X, r25
    7732:	8e 93       	st	-X, r24
    7734:	fe 01       	movw	r30, r28
    7736:	e7 55       	subi	r30, 0x57	; 87
    7738:	ff 4f       	sbci	r31, 0xFF	; 255
    773a:	80 81       	ld	r24, Z
    773c:	91 81       	ldd	r25, Z+1	; 0x01
    773e:	01 97       	sbiw	r24, 0x01	; 1
    7740:	f1 f7       	brne	.-4      	; 0x773e <LS_voidStartKPD+0x6f6>
    7742:	fe 01       	movw	r30, r28
    7744:	e7 55       	subi	r30, 0x57	; 87
    7746:	ff 4f       	sbci	r31, 0xFF	; 255
    7748:	91 83       	std	Z+1, r25	; 0x01
    774a:	80 83       	st	Z, r24
    774c:	0c 94 12 44 	jmp	0x8824	; 0x8824 <LS_voidStartKPD+0x17dc>
					_delay_ms(3000);
		} else if (local_u8KPD2 == '2') {
    7750:	fe 01       	movw	r30, r28
    7752:	ee 51       	subi	r30, 0x1E	; 30
    7754:	ff 4f       	sbci	r31, 0xFF	; 255
    7756:	80 81       	ld	r24, Z
    7758:	82 33       	cpi	r24, 0x32	; 50
    775a:	09 f0       	breq	.+2      	; 0x775e <LS_voidStartKPD+0x716>
    775c:	c0 c0       	rjmp	.+384    	; 0x78de <LS_voidStartKPD+0x896>
			LED_voidLedOff(LED2_PORT, LED2_PIN, LED_FORWARD_CONNECTION);
    775e:	82 e0       	ldi	r24, 0x02	; 2
    7760:	64 e0       	ldi	r22, 0x04	; 4
    7762:	41 e0       	ldi	r20, 0x01	; 1
    7764:	0e 94 93 46 	call	0x8d26	; 0x8d26 <LED_voidLedOff>
			LCD_voidDisplayString((u8*) "LED 2 is OFF");
    7768:	89 e2       	ldi	r24, 0x29	; 41
    776a:	93 e0       	ldi	r25, 0x03	; 3
    776c:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    7770:	fe 01       	movw	r30, r28
    7772:	eb 55       	subi	r30, 0x5B	; 91
    7774:	ff 4f       	sbci	r31, 0xFF	; 255
    7776:	80 e0       	ldi	r24, 0x00	; 0
    7778:	90 e8       	ldi	r25, 0x80	; 128
    777a:	ab e3       	ldi	r26, 0x3B	; 59
    777c:	b5 e4       	ldi	r27, 0x45	; 69
    777e:	80 83       	st	Z, r24
    7780:	91 83       	std	Z+1, r25	; 0x01
    7782:	a2 83       	std	Z+2, r26	; 0x02
    7784:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7786:	8e 01       	movw	r16, r28
    7788:	0f 55       	subi	r16, 0x5F	; 95
    778a:	1f 4f       	sbci	r17, 0xFF	; 255
    778c:	fe 01       	movw	r30, r28
    778e:	eb 55       	subi	r30, 0x5B	; 91
    7790:	ff 4f       	sbci	r31, 0xFF	; 255
    7792:	60 81       	ld	r22, Z
    7794:	71 81       	ldd	r23, Z+1	; 0x01
    7796:	82 81       	ldd	r24, Z+2	; 0x02
    7798:	93 81       	ldd	r25, Z+3	; 0x03
    779a:	20 e0       	ldi	r18, 0x00	; 0
    779c:	30 e0       	ldi	r19, 0x00	; 0
    779e:	4a e7       	ldi	r20, 0x7A	; 122
    77a0:	55 e4       	ldi	r21, 0x45	; 69
    77a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    77a6:	dc 01       	movw	r26, r24
    77a8:	cb 01       	movw	r24, r22
    77aa:	f8 01       	movw	r30, r16
    77ac:	80 83       	st	Z, r24
    77ae:	91 83       	std	Z+1, r25	; 0x01
    77b0:	a2 83       	std	Z+2, r26	; 0x02
    77b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    77b4:	fe 01       	movw	r30, r28
    77b6:	ef 55       	subi	r30, 0x5F	; 95
    77b8:	ff 4f       	sbci	r31, 0xFF	; 255
    77ba:	60 81       	ld	r22, Z
    77bc:	71 81       	ldd	r23, Z+1	; 0x01
    77be:	82 81       	ldd	r24, Z+2	; 0x02
    77c0:	93 81       	ldd	r25, Z+3	; 0x03
    77c2:	20 e0       	ldi	r18, 0x00	; 0
    77c4:	30 e0       	ldi	r19, 0x00	; 0
    77c6:	40 e8       	ldi	r20, 0x80	; 128
    77c8:	5f e3       	ldi	r21, 0x3F	; 63
    77ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    77ce:	88 23       	and	r24, r24
    77d0:	44 f4       	brge	.+16     	; 0x77e2 <LS_voidStartKPD+0x79a>
		__ticks = 1;
    77d2:	fe 01       	movw	r30, r28
    77d4:	e1 56       	subi	r30, 0x61	; 97
    77d6:	ff 4f       	sbci	r31, 0xFF	; 255
    77d8:	81 e0       	ldi	r24, 0x01	; 1
    77da:	90 e0       	ldi	r25, 0x00	; 0
    77dc:	91 83       	std	Z+1, r25	; 0x01
    77de:	80 83       	st	Z, r24
    77e0:	65 c0       	rjmp	.+202    	; 0x78ac <LS_voidStartKPD+0x864>
	else if (__tmp > 65535)
    77e2:	fe 01       	movw	r30, r28
    77e4:	ef 55       	subi	r30, 0x5F	; 95
    77e6:	ff 4f       	sbci	r31, 0xFF	; 255
    77e8:	60 81       	ld	r22, Z
    77ea:	71 81       	ldd	r23, Z+1	; 0x01
    77ec:	82 81       	ldd	r24, Z+2	; 0x02
    77ee:	93 81       	ldd	r25, Z+3	; 0x03
    77f0:	20 e0       	ldi	r18, 0x00	; 0
    77f2:	3f ef       	ldi	r19, 0xFF	; 255
    77f4:	4f e7       	ldi	r20, 0x7F	; 127
    77f6:	57 e4       	ldi	r21, 0x47	; 71
    77f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    77fc:	18 16       	cp	r1, r24
    77fe:	0c f0       	brlt	.+2      	; 0x7802 <LS_voidStartKPD+0x7ba>
    7800:	44 c0       	rjmp	.+136    	; 0x788a <LS_voidStartKPD+0x842>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7802:	fe 01       	movw	r30, r28
    7804:	eb 55       	subi	r30, 0x5B	; 91
    7806:	ff 4f       	sbci	r31, 0xFF	; 255
    7808:	60 81       	ld	r22, Z
    780a:	71 81       	ldd	r23, Z+1	; 0x01
    780c:	82 81       	ldd	r24, Z+2	; 0x02
    780e:	93 81       	ldd	r25, Z+3	; 0x03
    7810:	20 e0       	ldi	r18, 0x00	; 0
    7812:	30 e0       	ldi	r19, 0x00	; 0
    7814:	40 e2       	ldi	r20, 0x20	; 32
    7816:	51 e4       	ldi	r21, 0x41	; 65
    7818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    781c:	dc 01       	movw	r26, r24
    781e:	cb 01       	movw	r24, r22
    7820:	8e 01       	movw	r16, r28
    7822:	01 56       	subi	r16, 0x61	; 97
    7824:	1f 4f       	sbci	r17, 0xFF	; 255
    7826:	bc 01       	movw	r22, r24
    7828:	cd 01       	movw	r24, r26
    782a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    782e:	dc 01       	movw	r26, r24
    7830:	cb 01       	movw	r24, r22
    7832:	f8 01       	movw	r30, r16
    7834:	91 83       	std	Z+1, r25	; 0x01
    7836:	80 83       	st	Z, r24
    7838:	1f c0       	rjmp	.+62     	; 0x7878 <LS_voidStartKPD+0x830>
    783a:	fe 01       	movw	r30, r28
    783c:	e3 56       	subi	r30, 0x63	; 99
    783e:	ff 4f       	sbci	r31, 0xFF	; 255
    7840:	80 e9       	ldi	r24, 0x90	; 144
    7842:	91 e0       	ldi	r25, 0x01	; 1
    7844:	91 83       	std	Z+1, r25	; 0x01
    7846:	80 83       	st	Z, r24
    7848:	fe 01       	movw	r30, r28
    784a:	e3 56       	subi	r30, 0x63	; 99
    784c:	ff 4f       	sbci	r31, 0xFF	; 255
    784e:	80 81       	ld	r24, Z
    7850:	91 81       	ldd	r25, Z+1	; 0x01
    7852:	01 97       	sbiw	r24, 0x01	; 1
    7854:	f1 f7       	brne	.-4      	; 0x7852 <LS_voidStartKPD+0x80a>
    7856:	fe 01       	movw	r30, r28
    7858:	e3 56       	subi	r30, 0x63	; 99
    785a:	ff 4f       	sbci	r31, 0xFF	; 255
    785c:	91 83       	std	Z+1, r25	; 0x01
    785e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7860:	de 01       	movw	r26, r28
    7862:	a1 56       	subi	r26, 0x61	; 97
    7864:	bf 4f       	sbci	r27, 0xFF	; 255
    7866:	fe 01       	movw	r30, r28
    7868:	e1 56       	subi	r30, 0x61	; 97
    786a:	ff 4f       	sbci	r31, 0xFF	; 255
    786c:	80 81       	ld	r24, Z
    786e:	91 81       	ldd	r25, Z+1	; 0x01
    7870:	01 97       	sbiw	r24, 0x01	; 1
    7872:	11 96       	adiw	r26, 0x01	; 1
    7874:	9c 93       	st	X, r25
    7876:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7878:	fe 01       	movw	r30, r28
    787a:	e1 56       	subi	r30, 0x61	; 97
    787c:	ff 4f       	sbci	r31, 0xFF	; 255
    787e:	80 81       	ld	r24, Z
    7880:	91 81       	ldd	r25, Z+1	; 0x01
    7882:	00 97       	sbiw	r24, 0x00	; 0
    7884:	d1 f6       	brne	.-76     	; 0x783a <LS_voidStartKPD+0x7f2>
    7886:	0c 94 12 44 	jmp	0x8824	; 0x8824 <LS_voidStartKPD+0x17dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    788a:	8e 01       	movw	r16, r28
    788c:	01 56       	subi	r16, 0x61	; 97
    788e:	1f 4f       	sbci	r17, 0xFF	; 255
    7890:	fe 01       	movw	r30, r28
    7892:	ef 55       	subi	r30, 0x5F	; 95
    7894:	ff 4f       	sbci	r31, 0xFF	; 255
    7896:	60 81       	ld	r22, Z
    7898:	71 81       	ldd	r23, Z+1	; 0x01
    789a:	82 81       	ldd	r24, Z+2	; 0x02
    789c:	93 81       	ldd	r25, Z+3	; 0x03
    789e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    78a2:	dc 01       	movw	r26, r24
    78a4:	cb 01       	movw	r24, r22
    78a6:	f8 01       	movw	r30, r16
    78a8:	91 83       	std	Z+1, r25	; 0x01
    78aa:	80 83       	st	Z, r24
    78ac:	de 01       	movw	r26, r28
    78ae:	a5 56       	subi	r26, 0x65	; 101
    78b0:	bf 4f       	sbci	r27, 0xFF	; 255
    78b2:	fe 01       	movw	r30, r28
    78b4:	e1 56       	subi	r30, 0x61	; 97
    78b6:	ff 4f       	sbci	r31, 0xFF	; 255
    78b8:	80 81       	ld	r24, Z
    78ba:	91 81       	ldd	r25, Z+1	; 0x01
    78bc:	11 96       	adiw	r26, 0x01	; 1
    78be:	9c 93       	st	X, r25
    78c0:	8e 93       	st	-X, r24
    78c2:	fe 01       	movw	r30, r28
    78c4:	e5 56       	subi	r30, 0x65	; 101
    78c6:	ff 4f       	sbci	r31, 0xFF	; 255
    78c8:	80 81       	ld	r24, Z
    78ca:	91 81       	ldd	r25, Z+1	; 0x01
    78cc:	01 97       	sbiw	r24, 0x01	; 1
    78ce:	f1 f7       	brne	.-4      	; 0x78cc <LS_voidStartKPD+0x884>
    78d0:	fe 01       	movw	r30, r28
    78d2:	e5 56       	subi	r30, 0x65	; 101
    78d4:	ff 4f       	sbci	r31, 0xFF	; 255
    78d6:	91 83       	std	Z+1, r25	; 0x01
    78d8:	80 83       	st	Z, r24
    78da:	0c 94 12 44 	jmp	0x8824	; 0x8824 <LS_voidStartKPD+0x17dc>
						_delay_ms(3000);
		} else {
			LCD_voidClear();
    78de:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "Wrong Choice");
    78e2:	82 ef       	ldi	r24, 0xF2	; 242
    78e4:	92 e0       	ldi	r25, 0x02	; 2
    78e6:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    78ea:	82 e0       	ldi	r24, 0x02	; 2
    78ec:	60 e0       	ldi	r22, 0x00	; 0
    78ee:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
			LCD_voidDisplayString((u8*) "Please Try again!!");
    78f2:	8f ef       	ldi	r24, 0xFF	; 255
    78f4:	92 e0       	ldi	r25, 0x02	; 2
    78f6:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    78fa:	fe 01       	movw	r30, r28
    78fc:	e9 56       	subi	r30, 0x69	; 105
    78fe:	ff 4f       	sbci	r31, 0xFF	; 255
    7900:	80 e0       	ldi	r24, 0x00	; 0
    7902:	90 e8       	ldi	r25, 0x80	; 128
    7904:	ab eb       	ldi	r26, 0xBB	; 187
    7906:	b4 e4       	ldi	r27, 0x44	; 68
    7908:	80 83       	st	Z, r24
    790a:	91 83       	std	Z+1, r25	; 0x01
    790c:	a2 83       	std	Z+2, r26	; 0x02
    790e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7910:	8e 01       	movw	r16, r28
    7912:	0d 56       	subi	r16, 0x6D	; 109
    7914:	1f 4f       	sbci	r17, 0xFF	; 255
    7916:	fe 01       	movw	r30, r28
    7918:	e9 56       	subi	r30, 0x69	; 105
    791a:	ff 4f       	sbci	r31, 0xFF	; 255
    791c:	60 81       	ld	r22, Z
    791e:	71 81       	ldd	r23, Z+1	; 0x01
    7920:	82 81       	ldd	r24, Z+2	; 0x02
    7922:	93 81       	ldd	r25, Z+3	; 0x03
    7924:	20 e0       	ldi	r18, 0x00	; 0
    7926:	30 e0       	ldi	r19, 0x00	; 0
    7928:	4a e7       	ldi	r20, 0x7A	; 122
    792a:	55 e4       	ldi	r21, 0x45	; 69
    792c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7930:	dc 01       	movw	r26, r24
    7932:	cb 01       	movw	r24, r22
    7934:	f8 01       	movw	r30, r16
    7936:	80 83       	st	Z, r24
    7938:	91 83       	std	Z+1, r25	; 0x01
    793a:	a2 83       	std	Z+2, r26	; 0x02
    793c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    793e:	fe 01       	movw	r30, r28
    7940:	ed 56       	subi	r30, 0x6D	; 109
    7942:	ff 4f       	sbci	r31, 0xFF	; 255
    7944:	60 81       	ld	r22, Z
    7946:	71 81       	ldd	r23, Z+1	; 0x01
    7948:	82 81       	ldd	r24, Z+2	; 0x02
    794a:	93 81       	ldd	r25, Z+3	; 0x03
    794c:	20 e0       	ldi	r18, 0x00	; 0
    794e:	30 e0       	ldi	r19, 0x00	; 0
    7950:	40 e8       	ldi	r20, 0x80	; 128
    7952:	5f e3       	ldi	r21, 0x3F	; 63
    7954:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7958:	88 23       	and	r24, r24
    795a:	44 f4       	brge	.+16     	; 0x796c <LS_voidStartKPD+0x924>
		__ticks = 1;
    795c:	fe 01       	movw	r30, r28
    795e:	ef 56       	subi	r30, 0x6F	; 111
    7960:	ff 4f       	sbci	r31, 0xFF	; 255
    7962:	81 e0       	ldi	r24, 0x01	; 1
    7964:	90 e0       	ldi	r25, 0x00	; 0
    7966:	91 83       	std	Z+1, r25	; 0x01
    7968:	80 83       	st	Z, r24
    796a:	64 c0       	rjmp	.+200    	; 0x7a34 <LS_voidStartKPD+0x9ec>
	else if (__tmp > 65535)
    796c:	fe 01       	movw	r30, r28
    796e:	ed 56       	subi	r30, 0x6D	; 109
    7970:	ff 4f       	sbci	r31, 0xFF	; 255
    7972:	60 81       	ld	r22, Z
    7974:	71 81       	ldd	r23, Z+1	; 0x01
    7976:	82 81       	ldd	r24, Z+2	; 0x02
    7978:	93 81       	ldd	r25, Z+3	; 0x03
    797a:	20 e0       	ldi	r18, 0x00	; 0
    797c:	3f ef       	ldi	r19, 0xFF	; 255
    797e:	4f e7       	ldi	r20, 0x7F	; 127
    7980:	57 e4       	ldi	r21, 0x47	; 71
    7982:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7986:	18 16       	cp	r1, r24
    7988:	0c f0       	brlt	.+2      	; 0x798c <LS_voidStartKPD+0x944>
    798a:	43 c0       	rjmp	.+134    	; 0x7a12 <LS_voidStartKPD+0x9ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    798c:	fe 01       	movw	r30, r28
    798e:	e9 56       	subi	r30, 0x69	; 105
    7990:	ff 4f       	sbci	r31, 0xFF	; 255
    7992:	60 81       	ld	r22, Z
    7994:	71 81       	ldd	r23, Z+1	; 0x01
    7996:	82 81       	ldd	r24, Z+2	; 0x02
    7998:	93 81       	ldd	r25, Z+3	; 0x03
    799a:	20 e0       	ldi	r18, 0x00	; 0
    799c:	30 e0       	ldi	r19, 0x00	; 0
    799e:	40 e2       	ldi	r20, 0x20	; 32
    79a0:	51 e4       	ldi	r21, 0x41	; 65
    79a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    79a6:	dc 01       	movw	r26, r24
    79a8:	cb 01       	movw	r24, r22
    79aa:	8e 01       	movw	r16, r28
    79ac:	0f 56       	subi	r16, 0x6F	; 111
    79ae:	1f 4f       	sbci	r17, 0xFF	; 255
    79b0:	bc 01       	movw	r22, r24
    79b2:	cd 01       	movw	r24, r26
    79b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    79b8:	dc 01       	movw	r26, r24
    79ba:	cb 01       	movw	r24, r22
    79bc:	f8 01       	movw	r30, r16
    79be:	91 83       	std	Z+1, r25	; 0x01
    79c0:	80 83       	st	Z, r24
    79c2:	1f c0       	rjmp	.+62     	; 0x7a02 <LS_voidStartKPD+0x9ba>
    79c4:	fe 01       	movw	r30, r28
    79c6:	e1 57       	subi	r30, 0x71	; 113
    79c8:	ff 4f       	sbci	r31, 0xFF	; 255
    79ca:	80 e9       	ldi	r24, 0x90	; 144
    79cc:	91 e0       	ldi	r25, 0x01	; 1
    79ce:	91 83       	std	Z+1, r25	; 0x01
    79d0:	80 83       	st	Z, r24
    79d2:	fe 01       	movw	r30, r28
    79d4:	e1 57       	subi	r30, 0x71	; 113
    79d6:	ff 4f       	sbci	r31, 0xFF	; 255
    79d8:	80 81       	ld	r24, Z
    79da:	91 81       	ldd	r25, Z+1	; 0x01
    79dc:	01 97       	sbiw	r24, 0x01	; 1
    79de:	f1 f7       	brne	.-4      	; 0x79dc <LS_voidStartKPD+0x994>
    79e0:	fe 01       	movw	r30, r28
    79e2:	e1 57       	subi	r30, 0x71	; 113
    79e4:	ff 4f       	sbci	r31, 0xFF	; 255
    79e6:	91 83       	std	Z+1, r25	; 0x01
    79e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    79ea:	de 01       	movw	r26, r28
    79ec:	af 56       	subi	r26, 0x6F	; 111
    79ee:	bf 4f       	sbci	r27, 0xFF	; 255
    79f0:	fe 01       	movw	r30, r28
    79f2:	ef 56       	subi	r30, 0x6F	; 111
    79f4:	ff 4f       	sbci	r31, 0xFF	; 255
    79f6:	80 81       	ld	r24, Z
    79f8:	91 81       	ldd	r25, Z+1	; 0x01
    79fa:	01 97       	sbiw	r24, 0x01	; 1
    79fc:	11 96       	adiw	r26, 0x01	; 1
    79fe:	9c 93       	st	X, r25
    7a00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7a02:	fe 01       	movw	r30, r28
    7a04:	ef 56       	subi	r30, 0x6F	; 111
    7a06:	ff 4f       	sbci	r31, 0xFF	; 255
    7a08:	80 81       	ld	r24, Z
    7a0a:	91 81       	ldd	r25, Z+1	; 0x01
    7a0c:	00 97       	sbiw	r24, 0x00	; 0
    7a0e:	d1 f6       	brne	.-76     	; 0x79c4 <LS_voidStartKPD+0x97c>
    7a10:	27 c0       	rjmp	.+78     	; 0x7a60 <LS_voidStartKPD+0xa18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7a12:	8e 01       	movw	r16, r28
    7a14:	0f 56       	subi	r16, 0x6F	; 111
    7a16:	1f 4f       	sbci	r17, 0xFF	; 255
    7a18:	fe 01       	movw	r30, r28
    7a1a:	ed 56       	subi	r30, 0x6D	; 109
    7a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    7a1e:	60 81       	ld	r22, Z
    7a20:	71 81       	ldd	r23, Z+1	; 0x01
    7a22:	82 81       	ldd	r24, Z+2	; 0x02
    7a24:	93 81       	ldd	r25, Z+3	; 0x03
    7a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7a2a:	dc 01       	movw	r26, r24
    7a2c:	cb 01       	movw	r24, r22
    7a2e:	f8 01       	movw	r30, r16
    7a30:	91 83       	std	Z+1, r25	; 0x01
    7a32:	80 83       	st	Z, r24
    7a34:	de 01       	movw	r26, r28
    7a36:	a3 57       	subi	r26, 0x73	; 115
    7a38:	bf 4f       	sbci	r27, 0xFF	; 255
    7a3a:	fe 01       	movw	r30, r28
    7a3c:	ef 56       	subi	r30, 0x6F	; 111
    7a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    7a40:	80 81       	ld	r24, Z
    7a42:	91 81       	ldd	r25, Z+1	; 0x01
    7a44:	8d 93       	st	X+, r24
    7a46:	9c 93       	st	X, r25
    7a48:	fe 01       	movw	r30, r28
    7a4a:	e3 57       	subi	r30, 0x73	; 115
    7a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    7a4e:	80 81       	ld	r24, Z
    7a50:	91 81       	ldd	r25, Z+1	; 0x01
    7a52:	01 97       	sbiw	r24, 0x01	; 1
    7a54:	f1 f7       	brne	.-4      	; 0x7a52 <LS_voidStartKPD+0xa0a>
    7a56:	fe 01       	movw	r30, r28
    7a58:	e3 57       	subi	r30, 0x73	; 115
    7a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    7a5c:	91 83       	std	Z+1, r25	; 0x01
    7a5e:	80 83       	st	Z, r24
			_delay_ms(1500);
			LCD_voidClear();
    7a60:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
    7a64:	df c6       	rjmp	.+3518   	; 0x8824 <LS_voidStartKPD+0x17dc>
		}
	}

	else if (local_u8KPD1 == '3') //LED3
    7a66:	fe 01       	movw	r30, r28
    7a68:	ef 51       	subi	r30, 0x1F	; 31
    7a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    7a6c:	80 81       	ld	r24, Z
    7a6e:	83 33       	cpi	r24, 0x33	; 51
    7a70:	09 f0       	breq	.+2      	; 0x7a74 <LS_voidStartKPD+0xa2c>
    7a72:	69 c2       	rjmp	.+1234   	; 0x7f46 <LS_voidStartKPD+0xefe>
			{
		LCD_voidClear();
    7a74:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "      LED3");
    7a78:	86 e3       	ldi	r24, 0x36	; 54
    7a7a:	93 e0       	ldi	r25, 0x03	; 3
    7a7c:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    7a80:	82 e0       	ldi	r24, 0x02	; 2
    7a82:	60 e0       	ldi	r22, 0x00	; 0
    7a84:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString((u8*) "1-ON       2-OFF");
    7a88:	88 ec       	ldi	r24, 0xC8	; 200
    7a8a:	92 e0       	ldi	r25, 0x02	; 2
    7a8c:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		do {
			KPD_voidGetValue(&local_u8KPD2);
    7a90:	ce 01       	movw	r24, r28
    7a92:	8e 51       	subi	r24, 0x1E	; 30
    7a94:	9f 4f       	sbci	r25, 0xFF	; 255
    7a96:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <KPD_voidGetValue>
		} while (local_u8KPD2 == KPD_NOT_PRESSED);
    7a9a:	fe 01       	movw	r30, r28
    7a9c:	ee 51       	subi	r30, 0x1E	; 30
    7a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    7aa0:	80 81       	ld	r24, Z
    7aa2:	8f 3f       	cpi	r24, 0xFF	; 255
    7aa4:	a9 f3       	breq	.-22     	; 0x7a90 <LS_voidStartKPD+0xa48>
		LCD_voidClear();
    7aa6:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		if (local_u8KPD2 == '1') {
    7aaa:	fe 01       	movw	r30, r28
    7aac:	ee 51       	subi	r30, 0x1E	; 30
    7aae:	ff 4f       	sbci	r31, 0xFF	; 255
    7ab0:	80 81       	ld	r24, Z
    7ab2:	81 33       	cpi	r24, 0x31	; 49
    7ab4:	09 f0       	breq	.+2      	; 0x7ab8 <LS_voidStartKPD+0xa70>
    7ab6:	be c0       	rjmp	.+380    	; 0x7c34 <LS_voidStartKPD+0xbec>
			LED_voidLedOn(LED3_PORT, LED3_PIN, LED_FORWARD_CONNECTION);
    7ab8:	82 e0       	ldi	r24, 0x02	; 2
    7aba:	65 e0       	ldi	r22, 0x05	; 5
    7abc:	41 e0       	ldi	r20, 0x01	; 1
    7abe:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <LED_voidLedOn>
			LCD_voidDisplayString((u8*) "LED 3 is ON");
    7ac2:	81 e4       	ldi	r24, 0x41	; 65
    7ac4:	93 e0       	ldi	r25, 0x03	; 3
    7ac6:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    7aca:	fe 01       	movw	r30, r28
    7acc:	e7 57       	subi	r30, 0x77	; 119
    7ace:	ff 4f       	sbci	r31, 0xFF	; 255
    7ad0:	80 e0       	ldi	r24, 0x00	; 0
    7ad2:	90 e8       	ldi	r25, 0x80	; 128
    7ad4:	ab e3       	ldi	r26, 0x3B	; 59
    7ad6:	b5 e4       	ldi	r27, 0x45	; 69
    7ad8:	80 83       	st	Z, r24
    7ada:	91 83       	std	Z+1, r25	; 0x01
    7adc:	a2 83       	std	Z+2, r26	; 0x02
    7ade:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7ae0:	8e 01       	movw	r16, r28
    7ae2:	0b 57       	subi	r16, 0x7B	; 123
    7ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    7ae6:	fe 01       	movw	r30, r28
    7ae8:	e7 57       	subi	r30, 0x77	; 119
    7aea:	ff 4f       	sbci	r31, 0xFF	; 255
    7aec:	60 81       	ld	r22, Z
    7aee:	71 81       	ldd	r23, Z+1	; 0x01
    7af0:	82 81       	ldd	r24, Z+2	; 0x02
    7af2:	93 81       	ldd	r25, Z+3	; 0x03
    7af4:	20 e0       	ldi	r18, 0x00	; 0
    7af6:	30 e0       	ldi	r19, 0x00	; 0
    7af8:	4a e7       	ldi	r20, 0x7A	; 122
    7afa:	55 e4       	ldi	r21, 0x45	; 69
    7afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7b00:	dc 01       	movw	r26, r24
    7b02:	cb 01       	movw	r24, r22
    7b04:	f8 01       	movw	r30, r16
    7b06:	80 83       	st	Z, r24
    7b08:	91 83       	std	Z+1, r25	; 0x01
    7b0a:	a2 83       	std	Z+2, r26	; 0x02
    7b0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7b0e:	fe 01       	movw	r30, r28
    7b10:	eb 57       	subi	r30, 0x7B	; 123
    7b12:	ff 4f       	sbci	r31, 0xFF	; 255
    7b14:	60 81       	ld	r22, Z
    7b16:	71 81       	ldd	r23, Z+1	; 0x01
    7b18:	82 81       	ldd	r24, Z+2	; 0x02
    7b1a:	93 81       	ldd	r25, Z+3	; 0x03
    7b1c:	20 e0       	ldi	r18, 0x00	; 0
    7b1e:	30 e0       	ldi	r19, 0x00	; 0
    7b20:	40 e8       	ldi	r20, 0x80	; 128
    7b22:	5f e3       	ldi	r21, 0x3F	; 63
    7b24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7b28:	88 23       	and	r24, r24
    7b2a:	44 f4       	brge	.+16     	; 0x7b3c <LS_voidStartKPD+0xaf4>
		__ticks = 1;
    7b2c:	fe 01       	movw	r30, r28
    7b2e:	ed 57       	subi	r30, 0x7D	; 125
    7b30:	ff 4f       	sbci	r31, 0xFF	; 255
    7b32:	81 e0       	ldi	r24, 0x01	; 1
    7b34:	90 e0       	ldi	r25, 0x00	; 0
    7b36:	91 83       	std	Z+1, r25	; 0x01
    7b38:	80 83       	st	Z, r24
    7b3a:	64 c0       	rjmp	.+200    	; 0x7c04 <LS_voidStartKPD+0xbbc>
	else if (__tmp > 65535)
    7b3c:	fe 01       	movw	r30, r28
    7b3e:	eb 57       	subi	r30, 0x7B	; 123
    7b40:	ff 4f       	sbci	r31, 0xFF	; 255
    7b42:	60 81       	ld	r22, Z
    7b44:	71 81       	ldd	r23, Z+1	; 0x01
    7b46:	82 81       	ldd	r24, Z+2	; 0x02
    7b48:	93 81       	ldd	r25, Z+3	; 0x03
    7b4a:	20 e0       	ldi	r18, 0x00	; 0
    7b4c:	3f ef       	ldi	r19, 0xFF	; 255
    7b4e:	4f e7       	ldi	r20, 0x7F	; 127
    7b50:	57 e4       	ldi	r21, 0x47	; 71
    7b52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7b56:	18 16       	cp	r1, r24
    7b58:	0c f0       	brlt	.+2      	; 0x7b5c <LS_voidStartKPD+0xb14>
    7b5a:	43 c0       	rjmp	.+134    	; 0x7be2 <LS_voidStartKPD+0xb9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7b5c:	fe 01       	movw	r30, r28
    7b5e:	e7 57       	subi	r30, 0x77	; 119
    7b60:	ff 4f       	sbci	r31, 0xFF	; 255
    7b62:	60 81       	ld	r22, Z
    7b64:	71 81       	ldd	r23, Z+1	; 0x01
    7b66:	82 81       	ldd	r24, Z+2	; 0x02
    7b68:	93 81       	ldd	r25, Z+3	; 0x03
    7b6a:	20 e0       	ldi	r18, 0x00	; 0
    7b6c:	30 e0       	ldi	r19, 0x00	; 0
    7b6e:	40 e2       	ldi	r20, 0x20	; 32
    7b70:	51 e4       	ldi	r21, 0x41	; 65
    7b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7b76:	dc 01       	movw	r26, r24
    7b78:	cb 01       	movw	r24, r22
    7b7a:	8e 01       	movw	r16, r28
    7b7c:	0d 57       	subi	r16, 0x7D	; 125
    7b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    7b80:	bc 01       	movw	r22, r24
    7b82:	cd 01       	movw	r24, r26
    7b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7b88:	dc 01       	movw	r26, r24
    7b8a:	cb 01       	movw	r24, r22
    7b8c:	f8 01       	movw	r30, r16
    7b8e:	91 83       	std	Z+1, r25	; 0x01
    7b90:	80 83       	st	Z, r24
    7b92:	1f c0       	rjmp	.+62     	; 0x7bd2 <LS_voidStartKPD+0xb8a>
    7b94:	fe 01       	movw	r30, r28
    7b96:	ef 57       	subi	r30, 0x7F	; 127
    7b98:	ff 4f       	sbci	r31, 0xFF	; 255
    7b9a:	80 e9       	ldi	r24, 0x90	; 144
    7b9c:	91 e0       	ldi	r25, 0x01	; 1
    7b9e:	91 83       	std	Z+1, r25	; 0x01
    7ba0:	80 83       	st	Z, r24
    7ba2:	fe 01       	movw	r30, r28
    7ba4:	ef 57       	subi	r30, 0x7F	; 127
    7ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    7ba8:	80 81       	ld	r24, Z
    7baa:	91 81       	ldd	r25, Z+1	; 0x01
    7bac:	01 97       	sbiw	r24, 0x01	; 1
    7bae:	f1 f7       	brne	.-4      	; 0x7bac <LS_voidStartKPD+0xb64>
    7bb0:	fe 01       	movw	r30, r28
    7bb2:	ef 57       	subi	r30, 0x7F	; 127
    7bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    7bb6:	91 83       	std	Z+1, r25	; 0x01
    7bb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7bba:	de 01       	movw	r26, r28
    7bbc:	ad 57       	subi	r26, 0x7D	; 125
    7bbe:	bf 4f       	sbci	r27, 0xFF	; 255
    7bc0:	fe 01       	movw	r30, r28
    7bc2:	ed 57       	subi	r30, 0x7D	; 125
    7bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    7bc6:	80 81       	ld	r24, Z
    7bc8:	91 81       	ldd	r25, Z+1	; 0x01
    7bca:	01 97       	sbiw	r24, 0x01	; 1
    7bcc:	11 96       	adiw	r26, 0x01	; 1
    7bce:	9c 93       	st	X, r25
    7bd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7bd2:	fe 01       	movw	r30, r28
    7bd4:	ed 57       	subi	r30, 0x7D	; 125
    7bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    7bd8:	80 81       	ld	r24, Z
    7bda:	91 81       	ldd	r25, Z+1	; 0x01
    7bdc:	00 97       	sbiw	r24, 0x00	; 0
    7bde:	d1 f6       	brne	.-76     	; 0x7b94 <LS_voidStartKPD+0xb4c>
    7be0:	21 c6       	rjmp	.+3138   	; 0x8824 <LS_voidStartKPD+0x17dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7be2:	8e 01       	movw	r16, r28
    7be4:	0d 57       	subi	r16, 0x7D	; 125
    7be6:	1f 4f       	sbci	r17, 0xFF	; 255
    7be8:	fe 01       	movw	r30, r28
    7bea:	eb 57       	subi	r30, 0x7B	; 123
    7bec:	ff 4f       	sbci	r31, 0xFF	; 255
    7bee:	60 81       	ld	r22, Z
    7bf0:	71 81       	ldd	r23, Z+1	; 0x01
    7bf2:	82 81       	ldd	r24, Z+2	; 0x02
    7bf4:	93 81       	ldd	r25, Z+3	; 0x03
    7bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7bfa:	dc 01       	movw	r26, r24
    7bfc:	cb 01       	movw	r24, r22
    7bfe:	f8 01       	movw	r30, r16
    7c00:	91 83       	std	Z+1, r25	; 0x01
    7c02:	80 83       	st	Z, r24
    7c04:	de 01       	movw	r26, r28
    7c06:	a1 58       	subi	r26, 0x81	; 129
    7c08:	bf 4f       	sbci	r27, 0xFF	; 255
    7c0a:	fe 01       	movw	r30, r28
    7c0c:	ed 57       	subi	r30, 0x7D	; 125
    7c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    7c10:	80 81       	ld	r24, Z
    7c12:	91 81       	ldd	r25, Z+1	; 0x01
    7c14:	11 96       	adiw	r26, 0x01	; 1
    7c16:	9c 93       	st	X, r25
    7c18:	8e 93       	st	-X, r24
    7c1a:	fe 01       	movw	r30, r28
    7c1c:	e1 58       	subi	r30, 0x81	; 129
    7c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    7c20:	80 81       	ld	r24, Z
    7c22:	91 81       	ldd	r25, Z+1	; 0x01
    7c24:	01 97       	sbiw	r24, 0x01	; 1
    7c26:	f1 f7       	brne	.-4      	; 0x7c24 <LS_voidStartKPD+0xbdc>
    7c28:	fe 01       	movw	r30, r28
    7c2a:	e1 58       	subi	r30, 0x81	; 129
    7c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    7c2e:	91 83       	std	Z+1, r25	; 0x01
    7c30:	80 83       	st	Z, r24
    7c32:	f8 c5       	rjmp	.+3056   	; 0x8824 <LS_voidStartKPD+0x17dc>
					_delay_ms(3000);
		} else if (local_u8KPD2 == '2') {
    7c34:	fe 01       	movw	r30, r28
    7c36:	ee 51       	subi	r30, 0x1E	; 30
    7c38:	ff 4f       	sbci	r31, 0xFF	; 255
    7c3a:	80 81       	ld	r24, Z
    7c3c:	82 33       	cpi	r24, 0x32	; 50
    7c3e:	09 f0       	breq	.+2      	; 0x7c42 <LS_voidStartKPD+0xbfa>
    7c40:	be c0       	rjmp	.+380    	; 0x7dbe <LS_voidStartKPD+0xd76>
			LED_voidLedOff(LED3_PORT, LED3_PIN, LED_FORWARD_CONNECTION);
    7c42:	82 e0       	ldi	r24, 0x02	; 2
    7c44:	65 e0       	ldi	r22, 0x05	; 5
    7c46:	41 e0       	ldi	r20, 0x01	; 1
    7c48:	0e 94 93 46 	call	0x8d26	; 0x8d26 <LED_voidLedOff>
			LCD_voidDisplayString((u8*) "LED 3 is OFF");
    7c4c:	8d e4       	ldi	r24, 0x4D	; 77
    7c4e:	93 e0       	ldi	r25, 0x03	; 3
    7c50:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    7c54:	fe 01       	movw	r30, r28
    7c56:	e5 58       	subi	r30, 0x85	; 133
    7c58:	ff 4f       	sbci	r31, 0xFF	; 255
    7c5a:	80 e0       	ldi	r24, 0x00	; 0
    7c5c:	90 e8       	ldi	r25, 0x80	; 128
    7c5e:	ab e3       	ldi	r26, 0x3B	; 59
    7c60:	b5 e4       	ldi	r27, 0x45	; 69
    7c62:	80 83       	st	Z, r24
    7c64:	91 83       	std	Z+1, r25	; 0x01
    7c66:	a2 83       	std	Z+2, r26	; 0x02
    7c68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7c6a:	8e 01       	movw	r16, r28
    7c6c:	09 58       	subi	r16, 0x89	; 137
    7c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    7c70:	fe 01       	movw	r30, r28
    7c72:	e5 58       	subi	r30, 0x85	; 133
    7c74:	ff 4f       	sbci	r31, 0xFF	; 255
    7c76:	60 81       	ld	r22, Z
    7c78:	71 81       	ldd	r23, Z+1	; 0x01
    7c7a:	82 81       	ldd	r24, Z+2	; 0x02
    7c7c:	93 81       	ldd	r25, Z+3	; 0x03
    7c7e:	20 e0       	ldi	r18, 0x00	; 0
    7c80:	30 e0       	ldi	r19, 0x00	; 0
    7c82:	4a e7       	ldi	r20, 0x7A	; 122
    7c84:	55 e4       	ldi	r21, 0x45	; 69
    7c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7c8a:	dc 01       	movw	r26, r24
    7c8c:	cb 01       	movw	r24, r22
    7c8e:	f8 01       	movw	r30, r16
    7c90:	80 83       	st	Z, r24
    7c92:	91 83       	std	Z+1, r25	; 0x01
    7c94:	a2 83       	std	Z+2, r26	; 0x02
    7c96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7c98:	fe 01       	movw	r30, r28
    7c9a:	e9 58       	subi	r30, 0x89	; 137
    7c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    7c9e:	60 81       	ld	r22, Z
    7ca0:	71 81       	ldd	r23, Z+1	; 0x01
    7ca2:	82 81       	ldd	r24, Z+2	; 0x02
    7ca4:	93 81       	ldd	r25, Z+3	; 0x03
    7ca6:	20 e0       	ldi	r18, 0x00	; 0
    7ca8:	30 e0       	ldi	r19, 0x00	; 0
    7caa:	40 e8       	ldi	r20, 0x80	; 128
    7cac:	5f e3       	ldi	r21, 0x3F	; 63
    7cae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7cb2:	88 23       	and	r24, r24
    7cb4:	44 f4       	brge	.+16     	; 0x7cc6 <LS_voidStartKPD+0xc7e>
		__ticks = 1;
    7cb6:	fe 01       	movw	r30, r28
    7cb8:	eb 58       	subi	r30, 0x8B	; 139
    7cba:	ff 4f       	sbci	r31, 0xFF	; 255
    7cbc:	81 e0       	ldi	r24, 0x01	; 1
    7cbe:	90 e0       	ldi	r25, 0x00	; 0
    7cc0:	91 83       	std	Z+1, r25	; 0x01
    7cc2:	80 83       	st	Z, r24
    7cc4:	64 c0       	rjmp	.+200    	; 0x7d8e <LS_voidStartKPD+0xd46>
	else if (__tmp > 65535)
    7cc6:	fe 01       	movw	r30, r28
    7cc8:	e9 58       	subi	r30, 0x89	; 137
    7cca:	ff 4f       	sbci	r31, 0xFF	; 255
    7ccc:	60 81       	ld	r22, Z
    7cce:	71 81       	ldd	r23, Z+1	; 0x01
    7cd0:	82 81       	ldd	r24, Z+2	; 0x02
    7cd2:	93 81       	ldd	r25, Z+3	; 0x03
    7cd4:	20 e0       	ldi	r18, 0x00	; 0
    7cd6:	3f ef       	ldi	r19, 0xFF	; 255
    7cd8:	4f e7       	ldi	r20, 0x7F	; 127
    7cda:	57 e4       	ldi	r21, 0x47	; 71
    7cdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7ce0:	18 16       	cp	r1, r24
    7ce2:	0c f0       	brlt	.+2      	; 0x7ce6 <LS_voidStartKPD+0xc9e>
    7ce4:	43 c0       	rjmp	.+134    	; 0x7d6c <LS_voidStartKPD+0xd24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7ce6:	fe 01       	movw	r30, r28
    7ce8:	e5 58       	subi	r30, 0x85	; 133
    7cea:	ff 4f       	sbci	r31, 0xFF	; 255
    7cec:	60 81       	ld	r22, Z
    7cee:	71 81       	ldd	r23, Z+1	; 0x01
    7cf0:	82 81       	ldd	r24, Z+2	; 0x02
    7cf2:	93 81       	ldd	r25, Z+3	; 0x03
    7cf4:	20 e0       	ldi	r18, 0x00	; 0
    7cf6:	30 e0       	ldi	r19, 0x00	; 0
    7cf8:	40 e2       	ldi	r20, 0x20	; 32
    7cfa:	51 e4       	ldi	r21, 0x41	; 65
    7cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7d00:	dc 01       	movw	r26, r24
    7d02:	cb 01       	movw	r24, r22
    7d04:	8e 01       	movw	r16, r28
    7d06:	0b 58       	subi	r16, 0x8B	; 139
    7d08:	1f 4f       	sbci	r17, 0xFF	; 255
    7d0a:	bc 01       	movw	r22, r24
    7d0c:	cd 01       	movw	r24, r26
    7d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7d12:	dc 01       	movw	r26, r24
    7d14:	cb 01       	movw	r24, r22
    7d16:	f8 01       	movw	r30, r16
    7d18:	91 83       	std	Z+1, r25	; 0x01
    7d1a:	80 83       	st	Z, r24
    7d1c:	1f c0       	rjmp	.+62     	; 0x7d5c <LS_voidStartKPD+0xd14>
    7d1e:	fe 01       	movw	r30, r28
    7d20:	ed 58       	subi	r30, 0x8D	; 141
    7d22:	ff 4f       	sbci	r31, 0xFF	; 255
    7d24:	80 e9       	ldi	r24, 0x90	; 144
    7d26:	91 e0       	ldi	r25, 0x01	; 1
    7d28:	91 83       	std	Z+1, r25	; 0x01
    7d2a:	80 83       	st	Z, r24
    7d2c:	fe 01       	movw	r30, r28
    7d2e:	ed 58       	subi	r30, 0x8D	; 141
    7d30:	ff 4f       	sbci	r31, 0xFF	; 255
    7d32:	80 81       	ld	r24, Z
    7d34:	91 81       	ldd	r25, Z+1	; 0x01
    7d36:	01 97       	sbiw	r24, 0x01	; 1
    7d38:	f1 f7       	brne	.-4      	; 0x7d36 <LS_voidStartKPD+0xcee>
    7d3a:	fe 01       	movw	r30, r28
    7d3c:	ed 58       	subi	r30, 0x8D	; 141
    7d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    7d40:	91 83       	std	Z+1, r25	; 0x01
    7d42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7d44:	de 01       	movw	r26, r28
    7d46:	ab 58       	subi	r26, 0x8B	; 139
    7d48:	bf 4f       	sbci	r27, 0xFF	; 255
    7d4a:	fe 01       	movw	r30, r28
    7d4c:	eb 58       	subi	r30, 0x8B	; 139
    7d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    7d50:	80 81       	ld	r24, Z
    7d52:	91 81       	ldd	r25, Z+1	; 0x01
    7d54:	01 97       	sbiw	r24, 0x01	; 1
    7d56:	11 96       	adiw	r26, 0x01	; 1
    7d58:	9c 93       	st	X, r25
    7d5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7d5c:	fe 01       	movw	r30, r28
    7d5e:	eb 58       	subi	r30, 0x8B	; 139
    7d60:	ff 4f       	sbci	r31, 0xFF	; 255
    7d62:	80 81       	ld	r24, Z
    7d64:	91 81       	ldd	r25, Z+1	; 0x01
    7d66:	00 97       	sbiw	r24, 0x00	; 0
    7d68:	d1 f6       	brne	.-76     	; 0x7d1e <LS_voidStartKPD+0xcd6>
    7d6a:	5c c5       	rjmp	.+2744   	; 0x8824 <LS_voidStartKPD+0x17dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7d6c:	8e 01       	movw	r16, r28
    7d6e:	0b 58       	subi	r16, 0x8B	; 139
    7d70:	1f 4f       	sbci	r17, 0xFF	; 255
    7d72:	fe 01       	movw	r30, r28
    7d74:	e9 58       	subi	r30, 0x89	; 137
    7d76:	ff 4f       	sbci	r31, 0xFF	; 255
    7d78:	60 81       	ld	r22, Z
    7d7a:	71 81       	ldd	r23, Z+1	; 0x01
    7d7c:	82 81       	ldd	r24, Z+2	; 0x02
    7d7e:	93 81       	ldd	r25, Z+3	; 0x03
    7d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7d84:	dc 01       	movw	r26, r24
    7d86:	cb 01       	movw	r24, r22
    7d88:	f8 01       	movw	r30, r16
    7d8a:	91 83       	std	Z+1, r25	; 0x01
    7d8c:	80 83       	st	Z, r24
    7d8e:	de 01       	movw	r26, r28
    7d90:	af 58       	subi	r26, 0x8F	; 143
    7d92:	bf 4f       	sbci	r27, 0xFF	; 255
    7d94:	fe 01       	movw	r30, r28
    7d96:	eb 58       	subi	r30, 0x8B	; 139
    7d98:	ff 4f       	sbci	r31, 0xFF	; 255
    7d9a:	80 81       	ld	r24, Z
    7d9c:	91 81       	ldd	r25, Z+1	; 0x01
    7d9e:	11 96       	adiw	r26, 0x01	; 1
    7da0:	9c 93       	st	X, r25
    7da2:	8e 93       	st	-X, r24
    7da4:	fe 01       	movw	r30, r28
    7da6:	ef 58       	subi	r30, 0x8F	; 143
    7da8:	ff 4f       	sbci	r31, 0xFF	; 255
    7daa:	80 81       	ld	r24, Z
    7dac:	91 81       	ldd	r25, Z+1	; 0x01
    7dae:	01 97       	sbiw	r24, 0x01	; 1
    7db0:	f1 f7       	brne	.-4      	; 0x7dae <LS_voidStartKPD+0xd66>
    7db2:	fe 01       	movw	r30, r28
    7db4:	ef 58       	subi	r30, 0x8F	; 143
    7db6:	ff 4f       	sbci	r31, 0xFF	; 255
    7db8:	91 83       	std	Z+1, r25	; 0x01
    7dba:	80 83       	st	Z, r24
    7dbc:	33 c5       	rjmp	.+2662   	; 0x8824 <LS_voidStartKPD+0x17dc>
								_delay_ms(3000);
		} else {
			LCD_voidClear();
    7dbe:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "Wrong Choice");
    7dc2:	82 ef       	ldi	r24, 0xF2	; 242
    7dc4:	92 e0       	ldi	r25, 0x02	; 2
    7dc6:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    7dca:	82 e0       	ldi	r24, 0x02	; 2
    7dcc:	60 e0       	ldi	r22, 0x00	; 0
    7dce:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
			LCD_voidDisplayString((u8*) "Please Try again!!");
    7dd2:	8f ef       	ldi	r24, 0xFF	; 255
    7dd4:	92 e0       	ldi	r25, 0x02	; 2
    7dd6:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    7dda:	fe 01       	movw	r30, r28
    7ddc:	e3 59       	subi	r30, 0x93	; 147
    7dde:	ff 4f       	sbci	r31, 0xFF	; 255
    7de0:	80 e0       	ldi	r24, 0x00	; 0
    7de2:	90 e8       	ldi	r25, 0x80	; 128
    7de4:	ab eb       	ldi	r26, 0xBB	; 187
    7de6:	b4 e4       	ldi	r27, 0x44	; 68
    7de8:	80 83       	st	Z, r24
    7dea:	91 83       	std	Z+1, r25	; 0x01
    7dec:	a2 83       	std	Z+2, r26	; 0x02
    7dee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7df0:	8e 01       	movw	r16, r28
    7df2:	07 59       	subi	r16, 0x97	; 151
    7df4:	1f 4f       	sbci	r17, 0xFF	; 255
    7df6:	fe 01       	movw	r30, r28
    7df8:	e3 59       	subi	r30, 0x93	; 147
    7dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    7dfc:	60 81       	ld	r22, Z
    7dfe:	71 81       	ldd	r23, Z+1	; 0x01
    7e00:	82 81       	ldd	r24, Z+2	; 0x02
    7e02:	93 81       	ldd	r25, Z+3	; 0x03
    7e04:	20 e0       	ldi	r18, 0x00	; 0
    7e06:	30 e0       	ldi	r19, 0x00	; 0
    7e08:	4a e7       	ldi	r20, 0x7A	; 122
    7e0a:	55 e4       	ldi	r21, 0x45	; 69
    7e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7e10:	dc 01       	movw	r26, r24
    7e12:	cb 01       	movw	r24, r22
    7e14:	f8 01       	movw	r30, r16
    7e16:	80 83       	st	Z, r24
    7e18:	91 83       	std	Z+1, r25	; 0x01
    7e1a:	a2 83       	std	Z+2, r26	; 0x02
    7e1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7e1e:	fe 01       	movw	r30, r28
    7e20:	e7 59       	subi	r30, 0x97	; 151
    7e22:	ff 4f       	sbci	r31, 0xFF	; 255
    7e24:	60 81       	ld	r22, Z
    7e26:	71 81       	ldd	r23, Z+1	; 0x01
    7e28:	82 81       	ldd	r24, Z+2	; 0x02
    7e2a:	93 81       	ldd	r25, Z+3	; 0x03
    7e2c:	20 e0       	ldi	r18, 0x00	; 0
    7e2e:	30 e0       	ldi	r19, 0x00	; 0
    7e30:	40 e8       	ldi	r20, 0x80	; 128
    7e32:	5f e3       	ldi	r21, 0x3F	; 63
    7e34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7e38:	88 23       	and	r24, r24
    7e3a:	44 f4       	brge	.+16     	; 0x7e4c <LS_voidStartKPD+0xe04>
		__ticks = 1;
    7e3c:	fe 01       	movw	r30, r28
    7e3e:	e9 59       	subi	r30, 0x99	; 153
    7e40:	ff 4f       	sbci	r31, 0xFF	; 255
    7e42:	81 e0       	ldi	r24, 0x01	; 1
    7e44:	90 e0       	ldi	r25, 0x00	; 0
    7e46:	91 83       	std	Z+1, r25	; 0x01
    7e48:	80 83       	st	Z, r24
    7e4a:	64 c0       	rjmp	.+200    	; 0x7f14 <LS_voidStartKPD+0xecc>
	else if (__tmp > 65535)
    7e4c:	fe 01       	movw	r30, r28
    7e4e:	e7 59       	subi	r30, 0x97	; 151
    7e50:	ff 4f       	sbci	r31, 0xFF	; 255
    7e52:	60 81       	ld	r22, Z
    7e54:	71 81       	ldd	r23, Z+1	; 0x01
    7e56:	82 81       	ldd	r24, Z+2	; 0x02
    7e58:	93 81       	ldd	r25, Z+3	; 0x03
    7e5a:	20 e0       	ldi	r18, 0x00	; 0
    7e5c:	3f ef       	ldi	r19, 0xFF	; 255
    7e5e:	4f e7       	ldi	r20, 0x7F	; 127
    7e60:	57 e4       	ldi	r21, 0x47	; 71
    7e62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7e66:	18 16       	cp	r1, r24
    7e68:	0c f0       	brlt	.+2      	; 0x7e6c <LS_voidStartKPD+0xe24>
    7e6a:	43 c0       	rjmp	.+134    	; 0x7ef2 <LS_voidStartKPD+0xeaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7e6c:	fe 01       	movw	r30, r28
    7e6e:	e3 59       	subi	r30, 0x93	; 147
    7e70:	ff 4f       	sbci	r31, 0xFF	; 255
    7e72:	60 81       	ld	r22, Z
    7e74:	71 81       	ldd	r23, Z+1	; 0x01
    7e76:	82 81       	ldd	r24, Z+2	; 0x02
    7e78:	93 81       	ldd	r25, Z+3	; 0x03
    7e7a:	20 e0       	ldi	r18, 0x00	; 0
    7e7c:	30 e0       	ldi	r19, 0x00	; 0
    7e7e:	40 e2       	ldi	r20, 0x20	; 32
    7e80:	51 e4       	ldi	r21, 0x41	; 65
    7e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7e86:	dc 01       	movw	r26, r24
    7e88:	cb 01       	movw	r24, r22
    7e8a:	8e 01       	movw	r16, r28
    7e8c:	09 59       	subi	r16, 0x99	; 153
    7e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    7e90:	bc 01       	movw	r22, r24
    7e92:	cd 01       	movw	r24, r26
    7e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7e98:	dc 01       	movw	r26, r24
    7e9a:	cb 01       	movw	r24, r22
    7e9c:	f8 01       	movw	r30, r16
    7e9e:	91 83       	std	Z+1, r25	; 0x01
    7ea0:	80 83       	st	Z, r24
    7ea2:	1f c0       	rjmp	.+62     	; 0x7ee2 <LS_voidStartKPD+0xe9a>
    7ea4:	fe 01       	movw	r30, r28
    7ea6:	eb 59       	subi	r30, 0x9B	; 155
    7ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    7eaa:	80 e9       	ldi	r24, 0x90	; 144
    7eac:	91 e0       	ldi	r25, 0x01	; 1
    7eae:	91 83       	std	Z+1, r25	; 0x01
    7eb0:	80 83       	st	Z, r24
    7eb2:	fe 01       	movw	r30, r28
    7eb4:	eb 59       	subi	r30, 0x9B	; 155
    7eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    7eb8:	80 81       	ld	r24, Z
    7eba:	91 81       	ldd	r25, Z+1	; 0x01
    7ebc:	01 97       	sbiw	r24, 0x01	; 1
    7ebe:	f1 f7       	brne	.-4      	; 0x7ebc <LS_voidStartKPD+0xe74>
    7ec0:	fe 01       	movw	r30, r28
    7ec2:	eb 59       	subi	r30, 0x9B	; 155
    7ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    7ec6:	91 83       	std	Z+1, r25	; 0x01
    7ec8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7eca:	de 01       	movw	r26, r28
    7ecc:	a9 59       	subi	r26, 0x99	; 153
    7ece:	bf 4f       	sbci	r27, 0xFF	; 255
    7ed0:	fe 01       	movw	r30, r28
    7ed2:	e9 59       	subi	r30, 0x99	; 153
    7ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    7ed6:	80 81       	ld	r24, Z
    7ed8:	91 81       	ldd	r25, Z+1	; 0x01
    7eda:	01 97       	sbiw	r24, 0x01	; 1
    7edc:	11 96       	adiw	r26, 0x01	; 1
    7ede:	9c 93       	st	X, r25
    7ee0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7ee2:	fe 01       	movw	r30, r28
    7ee4:	e9 59       	subi	r30, 0x99	; 153
    7ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    7ee8:	80 81       	ld	r24, Z
    7eea:	91 81       	ldd	r25, Z+1	; 0x01
    7eec:	00 97       	sbiw	r24, 0x00	; 0
    7eee:	d1 f6       	brne	.-76     	; 0x7ea4 <LS_voidStartKPD+0xe5c>
    7ef0:	27 c0       	rjmp	.+78     	; 0x7f40 <LS_voidStartKPD+0xef8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7ef2:	8e 01       	movw	r16, r28
    7ef4:	09 59       	subi	r16, 0x99	; 153
    7ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    7ef8:	fe 01       	movw	r30, r28
    7efa:	e7 59       	subi	r30, 0x97	; 151
    7efc:	ff 4f       	sbci	r31, 0xFF	; 255
    7efe:	60 81       	ld	r22, Z
    7f00:	71 81       	ldd	r23, Z+1	; 0x01
    7f02:	82 81       	ldd	r24, Z+2	; 0x02
    7f04:	93 81       	ldd	r25, Z+3	; 0x03
    7f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7f0a:	dc 01       	movw	r26, r24
    7f0c:	cb 01       	movw	r24, r22
    7f0e:	f8 01       	movw	r30, r16
    7f10:	91 83       	std	Z+1, r25	; 0x01
    7f12:	80 83       	st	Z, r24
    7f14:	de 01       	movw	r26, r28
    7f16:	ad 59       	subi	r26, 0x9D	; 157
    7f18:	bf 4f       	sbci	r27, 0xFF	; 255
    7f1a:	fe 01       	movw	r30, r28
    7f1c:	e9 59       	subi	r30, 0x99	; 153
    7f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    7f20:	80 81       	ld	r24, Z
    7f22:	91 81       	ldd	r25, Z+1	; 0x01
    7f24:	8d 93       	st	X+, r24
    7f26:	9c 93       	st	X, r25
    7f28:	fe 01       	movw	r30, r28
    7f2a:	ed 59       	subi	r30, 0x9D	; 157
    7f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    7f2e:	80 81       	ld	r24, Z
    7f30:	91 81       	ldd	r25, Z+1	; 0x01
    7f32:	01 97       	sbiw	r24, 0x01	; 1
    7f34:	f1 f7       	brne	.-4      	; 0x7f32 <LS_voidStartKPD+0xeea>
    7f36:	fe 01       	movw	r30, r28
    7f38:	ed 59       	subi	r30, 0x9D	; 157
    7f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    7f3c:	91 83       	std	Z+1, r25	; 0x01
    7f3e:	80 83       	st	Z, r24
			_delay_ms(1500);
			LCD_voidClear();
    7f40:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
    7f44:	6f c4       	rjmp	.+2270   	; 0x8824 <LS_voidStartKPD+0x17dc>
		}
	} else if (local_u8KPD1 == '4') //LED4
    7f46:	fe 01       	movw	r30, r28
    7f48:	ef 51       	subi	r30, 0x1F	; 31
    7f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    7f4c:	80 81       	ld	r24, Z
    7f4e:	84 33       	cpi	r24, 0x34	; 52
    7f50:	09 f0       	breq	.+2      	; 0x7f54 <LS_voidStartKPD+0xf0c>
    7f52:	3b c2       	rjmp	.+1142   	; 0x83ca <LS_voidStartKPD+0x1382>
			{
		LCD_voidClear();
    7f54:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "      LED4");
    7f58:	8a e5       	ldi	r24, 0x5A	; 90
    7f5a:	93 e0       	ldi	r25, 0x03	; 3
    7f5c:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    7f60:	82 e0       	ldi	r24, 0x02	; 2
    7f62:	60 e0       	ldi	r22, 0x00	; 0
    7f64:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString((u8*) "1-ON       2-OFF");
    7f68:	88 ec       	ldi	r24, 0xC8	; 200
    7f6a:	92 e0       	ldi	r25, 0x02	; 2
    7f6c:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		do {
			KPD_voidGetValue(&local_u8KPD2);
    7f70:	ce 01       	movw	r24, r28
    7f72:	8e 51       	subi	r24, 0x1E	; 30
    7f74:	9f 4f       	sbci	r25, 0xFF	; 255
    7f76:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <KPD_voidGetValue>
		} while (local_u8KPD2 == KPD_NOT_PRESSED);
    7f7a:	fe 01       	movw	r30, r28
    7f7c:	ee 51       	subi	r30, 0x1E	; 30
    7f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    7f80:	80 81       	ld	r24, Z
    7f82:	8f 3f       	cpi	r24, 0xFF	; 255
    7f84:	a9 f3       	breq	.-22     	; 0x7f70 <LS_voidStartKPD+0xf28>
		LCD_voidClear();
    7f86:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		if (local_u8KPD2 == '1') {
    7f8a:	fe 01       	movw	r30, r28
    7f8c:	ee 51       	subi	r30, 0x1E	; 30
    7f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    7f90:	80 81       	ld	r24, Z
    7f92:	81 33       	cpi	r24, 0x31	; 49
    7f94:	09 f0       	breq	.+2      	; 0x7f98 <LS_voidStartKPD+0xf50>
    7f96:	be c0       	rjmp	.+380    	; 0x8114 <LS_voidStartKPD+0x10cc>
			LED_voidLedOn(LED4_PORT, LED4_PIN, LED_FORWARD_CONNECTION);
    7f98:	82 e0       	ldi	r24, 0x02	; 2
    7f9a:	66 e0       	ldi	r22, 0x06	; 6
    7f9c:	41 e0       	ldi	r20, 0x01	; 1
    7f9e:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <LED_voidLedOn>
			LCD_voidDisplayString((u8*) "LED 4 is ON");
    7fa2:	85 e6       	ldi	r24, 0x65	; 101
    7fa4:	93 e0       	ldi	r25, 0x03	; 3
    7fa6:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    7faa:	fe 01       	movw	r30, r28
    7fac:	e1 5a       	subi	r30, 0xA1	; 161
    7fae:	ff 4f       	sbci	r31, 0xFF	; 255
    7fb0:	80 e0       	ldi	r24, 0x00	; 0
    7fb2:	90 e8       	ldi	r25, 0x80	; 128
    7fb4:	ab e3       	ldi	r26, 0x3B	; 59
    7fb6:	b5 e4       	ldi	r27, 0x45	; 69
    7fb8:	80 83       	st	Z, r24
    7fba:	91 83       	std	Z+1, r25	; 0x01
    7fbc:	a2 83       	std	Z+2, r26	; 0x02
    7fbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7fc0:	8e 01       	movw	r16, r28
    7fc2:	05 5a       	subi	r16, 0xA5	; 165
    7fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    7fc6:	fe 01       	movw	r30, r28
    7fc8:	e1 5a       	subi	r30, 0xA1	; 161
    7fca:	ff 4f       	sbci	r31, 0xFF	; 255
    7fcc:	60 81       	ld	r22, Z
    7fce:	71 81       	ldd	r23, Z+1	; 0x01
    7fd0:	82 81       	ldd	r24, Z+2	; 0x02
    7fd2:	93 81       	ldd	r25, Z+3	; 0x03
    7fd4:	20 e0       	ldi	r18, 0x00	; 0
    7fd6:	30 e0       	ldi	r19, 0x00	; 0
    7fd8:	4a e7       	ldi	r20, 0x7A	; 122
    7fda:	55 e4       	ldi	r21, 0x45	; 69
    7fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7fe0:	dc 01       	movw	r26, r24
    7fe2:	cb 01       	movw	r24, r22
    7fe4:	f8 01       	movw	r30, r16
    7fe6:	80 83       	st	Z, r24
    7fe8:	91 83       	std	Z+1, r25	; 0x01
    7fea:	a2 83       	std	Z+2, r26	; 0x02
    7fec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7fee:	fe 01       	movw	r30, r28
    7ff0:	e5 5a       	subi	r30, 0xA5	; 165
    7ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    7ff4:	60 81       	ld	r22, Z
    7ff6:	71 81       	ldd	r23, Z+1	; 0x01
    7ff8:	82 81       	ldd	r24, Z+2	; 0x02
    7ffa:	93 81       	ldd	r25, Z+3	; 0x03
    7ffc:	20 e0       	ldi	r18, 0x00	; 0
    7ffe:	30 e0       	ldi	r19, 0x00	; 0
    8000:	40 e8       	ldi	r20, 0x80	; 128
    8002:	5f e3       	ldi	r21, 0x3F	; 63
    8004:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8008:	88 23       	and	r24, r24
    800a:	44 f4       	brge	.+16     	; 0x801c <LS_voidStartKPD+0xfd4>
		__ticks = 1;
    800c:	fe 01       	movw	r30, r28
    800e:	e7 5a       	subi	r30, 0xA7	; 167
    8010:	ff 4f       	sbci	r31, 0xFF	; 255
    8012:	81 e0       	ldi	r24, 0x01	; 1
    8014:	90 e0       	ldi	r25, 0x00	; 0
    8016:	91 83       	std	Z+1, r25	; 0x01
    8018:	80 83       	st	Z, r24
    801a:	64 c0       	rjmp	.+200    	; 0x80e4 <LS_voidStartKPD+0x109c>
	else if (__tmp > 65535)
    801c:	fe 01       	movw	r30, r28
    801e:	e5 5a       	subi	r30, 0xA5	; 165
    8020:	ff 4f       	sbci	r31, 0xFF	; 255
    8022:	60 81       	ld	r22, Z
    8024:	71 81       	ldd	r23, Z+1	; 0x01
    8026:	82 81       	ldd	r24, Z+2	; 0x02
    8028:	93 81       	ldd	r25, Z+3	; 0x03
    802a:	20 e0       	ldi	r18, 0x00	; 0
    802c:	3f ef       	ldi	r19, 0xFF	; 255
    802e:	4f e7       	ldi	r20, 0x7F	; 127
    8030:	57 e4       	ldi	r21, 0x47	; 71
    8032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    8036:	18 16       	cp	r1, r24
    8038:	0c f0       	brlt	.+2      	; 0x803c <LS_voidStartKPD+0xff4>
    803a:	43 c0       	rjmp	.+134    	; 0x80c2 <LS_voidStartKPD+0x107a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    803c:	fe 01       	movw	r30, r28
    803e:	e1 5a       	subi	r30, 0xA1	; 161
    8040:	ff 4f       	sbci	r31, 0xFF	; 255
    8042:	60 81       	ld	r22, Z
    8044:	71 81       	ldd	r23, Z+1	; 0x01
    8046:	82 81       	ldd	r24, Z+2	; 0x02
    8048:	93 81       	ldd	r25, Z+3	; 0x03
    804a:	20 e0       	ldi	r18, 0x00	; 0
    804c:	30 e0       	ldi	r19, 0x00	; 0
    804e:	40 e2       	ldi	r20, 0x20	; 32
    8050:	51 e4       	ldi	r21, 0x41	; 65
    8052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8056:	dc 01       	movw	r26, r24
    8058:	cb 01       	movw	r24, r22
    805a:	8e 01       	movw	r16, r28
    805c:	07 5a       	subi	r16, 0xA7	; 167
    805e:	1f 4f       	sbci	r17, 0xFF	; 255
    8060:	bc 01       	movw	r22, r24
    8062:	cd 01       	movw	r24, r26
    8064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8068:	dc 01       	movw	r26, r24
    806a:	cb 01       	movw	r24, r22
    806c:	f8 01       	movw	r30, r16
    806e:	91 83       	std	Z+1, r25	; 0x01
    8070:	80 83       	st	Z, r24
    8072:	1f c0       	rjmp	.+62     	; 0x80b2 <LS_voidStartKPD+0x106a>
    8074:	fe 01       	movw	r30, r28
    8076:	e9 5a       	subi	r30, 0xA9	; 169
    8078:	ff 4f       	sbci	r31, 0xFF	; 255
    807a:	80 e9       	ldi	r24, 0x90	; 144
    807c:	91 e0       	ldi	r25, 0x01	; 1
    807e:	91 83       	std	Z+1, r25	; 0x01
    8080:	80 83       	st	Z, r24
    8082:	fe 01       	movw	r30, r28
    8084:	e9 5a       	subi	r30, 0xA9	; 169
    8086:	ff 4f       	sbci	r31, 0xFF	; 255
    8088:	80 81       	ld	r24, Z
    808a:	91 81       	ldd	r25, Z+1	; 0x01
    808c:	01 97       	sbiw	r24, 0x01	; 1
    808e:	f1 f7       	brne	.-4      	; 0x808c <LS_voidStartKPD+0x1044>
    8090:	fe 01       	movw	r30, r28
    8092:	e9 5a       	subi	r30, 0xA9	; 169
    8094:	ff 4f       	sbci	r31, 0xFF	; 255
    8096:	91 83       	std	Z+1, r25	; 0x01
    8098:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    809a:	de 01       	movw	r26, r28
    809c:	a7 5a       	subi	r26, 0xA7	; 167
    809e:	bf 4f       	sbci	r27, 0xFF	; 255
    80a0:	fe 01       	movw	r30, r28
    80a2:	e7 5a       	subi	r30, 0xA7	; 167
    80a4:	ff 4f       	sbci	r31, 0xFF	; 255
    80a6:	80 81       	ld	r24, Z
    80a8:	91 81       	ldd	r25, Z+1	; 0x01
    80aa:	01 97       	sbiw	r24, 0x01	; 1
    80ac:	11 96       	adiw	r26, 0x01	; 1
    80ae:	9c 93       	st	X, r25
    80b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    80b2:	fe 01       	movw	r30, r28
    80b4:	e7 5a       	subi	r30, 0xA7	; 167
    80b6:	ff 4f       	sbci	r31, 0xFF	; 255
    80b8:	80 81       	ld	r24, Z
    80ba:	91 81       	ldd	r25, Z+1	; 0x01
    80bc:	00 97       	sbiw	r24, 0x00	; 0
    80be:	d1 f6       	brne	.-76     	; 0x8074 <LS_voidStartKPD+0x102c>
    80c0:	b1 c3       	rjmp	.+1890   	; 0x8824 <LS_voidStartKPD+0x17dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    80c2:	8e 01       	movw	r16, r28
    80c4:	07 5a       	subi	r16, 0xA7	; 167
    80c6:	1f 4f       	sbci	r17, 0xFF	; 255
    80c8:	fe 01       	movw	r30, r28
    80ca:	e5 5a       	subi	r30, 0xA5	; 165
    80cc:	ff 4f       	sbci	r31, 0xFF	; 255
    80ce:	60 81       	ld	r22, Z
    80d0:	71 81       	ldd	r23, Z+1	; 0x01
    80d2:	82 81       	ldd	r24, Z+2	; 0x02
    80d4:	93 81       	ldd	r25, Z+3	; 0x03
    80d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    80da:	dc 01       	movw	r26, r24
    80dc:	cb 01       	movw	r24, r22
    80de:	f8 01       	movw	r30, r16
    80e0:	91 83       	std	Z+1, r25	; 0x01
    80e2:	80 83       	st	Z, r24
    80e4:	de 01       	movw	r26, r28
    80e6:	ab 5a       	subi	r26, 0xAB	; 171
    80e8:	bf 4f       	sbci	r27, 0xFF	; 255
    80ea:	fe 01       	movw	r30, r28
    80ec:	e7 5a       	subi	r30, 0xA7	; 167
    80ee:	ff 4f       	sbci	r31, 0xFF	; 255
    80f0:	80 81       	ld	r24, Z
    80f2:	91 81       	ldd	r25, Z+1	; 0x01
    80f4:	11 96       	adiw	r26, 0x01	; 1
    80f6:	9c 93       	st	X, r25
    80f8:	8e 93       	st	-X, r24
    80fa:	fe 01       	movw	r30, r28
    80fc:	eb 5a       	subi	r30, 0xAB	; 171
    80fe:	ff 4f       	sbci	r31, 0xFF	; 255
    8100:	80 81       	ld	r24, Z
    8102:	91 81       	ldd	r25, Z+1	; 0x01
    8104:	01 97       	sbiw	r24, 0x01	; 1
    8106:	f1 f7       	brne	.-4      	; 0x8104 <LS_voidStartKPD+0x10bc>
    8108:	fe 01       	movw	r30, r28
    810a:	eb 5a       	subi	r30, 0xAB	; 171
    810c:	ff 4f       	sbci	r31, 0xFF	; 255
    810e:	91 83       	std	Z+1, r25	; 0x01
    8110:	80 83       	st	Z, r24
    8112:	88 c3       	rjmp	.+1808   	; 0x8824 <LS_voidStartKPD+0x17dc>
					_delay_ms(3000);
		} else if (local_u8KPD2 == '2') {
    8114:	fe 01       	movw	r30, r28
    8116:	ee 51       	subi	r30, 0x1E	; 30
    8118:	ff 4f       	sbci	r31, 0xFF	; 255
    811a:	80 81       	ld	r24, Z
    811c:	82 33       	cpi	r24, 0x32	; 50
    811e:	09 f0       	breq	.+2      	; 0x8122 <LS_voidStartKPD+0x10da>
    8120:	be c0       	rjmp	.+380    	; 0x829e <LS_voidStartKPD+0x1256>
			LED_voidLedOff(LED4_PORT, LED4_PIN, LED_FORWARD_CONNECTION);
    8122:	82 e0       	ldi	r24, 0x02	; 2
    8124:	66 e0       	ldi	r22, 0x06	; 6
    8126:	41 e0       	ldi	r20, 0x01	; 1
    8128:	0e 94 93 46 	call	0x8d26	; 0x8d26 <LED_voidLedOff>
			LCD_voidDisplayString((u8*) "LED 4 is OFF");
    812c:	81 e7       	ldi	r24, 0x71	; 113
    812e:	93 e0       	ldi	r25, 0x03	; 3
    8130:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    8134:	fe 01       	movw	r30, r28
    8136:	ef 5a       	subi	r30, 0xAF	; 175
    8138:	ff 4f       	sbci	r31, 0xFF	; 255
    813a:	80 e0       	ldi	r24, 0x00	; 0
    813c:	90 e8       	ldi	r25, 0x80	; 128
    813e:	ab e3       	ldi	r26, 0x3B	; 59
    8140:	b5 e4       	ldi	r27, 0x45	; 69
    8142:	80 83       	st	Z, r24
    8144:	91 83       	std	Z+1, r25	; 0x01
    8146:	a2 83       	std	Z+2, r26	; 0x02
    8148:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    814a:	8e 01       	movw	r16, r28
    814c:	03 5b       	subi	r16, 0xB3	; 179
    814e:	1f 4f       	sbci	r17, 0xFF	; 255
    8150:	fe 01       	movw	r30, r28
    8152:	ef 5a       	subi	r30, 0xAF	; 175
    8154:	ff 4f       	sbci	r31, 0xFF	; 255
    8156:	60 81       	ld	r22, Z
    8158:	71 81       	ldd	r23, Z+1	; 0x01
    815a:	82 81       	ldd	r24, Z+2	; 0x02
    815c:	93 81       	ldd	r25, Z+3	; 0x03
    815e:	20 e0       	ldi	r18, 0x00	; 0
    8160:	30 e0       	ldi	r19, 0x00	; 0
    8162:	4a e7       	ldi	r20, 0x7A	; 122
    8164:	55 e4       	ldi	r21, 0x45	; 69
    8166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    816a:	dc 01       	movw	r26, r24
    816c:	cb 01       	movw	r24, r22
    816e:	f8 01       	movw	r30, r16
    8170:	80 83       	st	Z, r24
    8172:	91 83       	std	Z+1, r25	; 0x01
    8174:	a2 83       	std	Z+2, r26	; 0x02
    8176:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8178:	fe 01       	movw	r30, r28
    817a:	e3 5b       	subi	r30, 0xB3	; 179
    817c:	ff 4f       	sbci	r31, 0xFF	; 255
    817e:	60 81       	ld	r22, Z
    8180:	71 81       	ldd	r23, Z+1	; 0x01
    8182:	82 81       	ldd	r24, Z+2	; 0x02
    8184:	93 81       	ldd	r25, Z+3	; 0x03
    8186:	20 e0       	ldi	r18, 0x00	; 0
    8188:	30 e0       	ldi	r19, 0x00	; 0
    818a:	40 e8       	ldi	r20, 0x80	; 128
    818c:	5f e3       	ldi	r21, 0x3F	; 63
    818e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8192:	88 23       	and	r24, r24
    8194:	44 f4       	brge	.+16     	; 0x81a6 <LS_voidStartKPD+0x115e>
		__ticks = 1;
    8196:	fe 01       	movw	r30, r28
    8198:	e5 5b       	subi	r30, 0xB5	; 181
    819a:	ff 4f       	sbci	r31, 0xFF	; 255
    819c:	81 e0       	ldi	r24, 0x01	; 1
    819e:	90 e0       	ldi	r25, 0x00	; 0
    81a0:	91 83       	std	Z+1, r25	; 0x01
    81a2:	80 83       	st	Z, r24
    81a4:	64 c0       	rjmp	.+200    	; 0x826e <LS_voidStartKPD+0x1226>
	else if (__tmp > 65535)
    81a6:	fe 01       	movw	r30, r28
    81a8:	e3 5b       	subi	r30, 0xB3	; 179
    81aa:	ff 4f       	sbci	r31, 0xFF	; 255
    81ac:	60 81       	ld	r22, Z
    81ae:	71 81       	ldd	r23, Z+1	; 0x01
    81b0:	82 81       	ldd	r24, Z+2	; 0x02
    81b2:	93 81       	ldd	r25, Z+3	; 0x03
    81b4:	20 e0       	ldi	r18, 0x00	; 0
    81b6:	3f ef       	ldi	r19, 0xFF	; 255
    81b8:	4f e7       	ldi	r20, 0x7F	; 127
    81ba:	57 e4       	ldi	r21, 0x47	; 71
    81bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    81c0:	18 16       	cp	r1, r24
    81c2:	0c f0       	brlt	.+2      	; 0x81c6 <LS_voidStartKPD+0x117e>
    81c4:	43 c0       	rjmp	.+134    	; 0x824c <LS_voidStartKPD+0x1204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    81c6:	fe 01       	movw	r30, r28
    81c8:	ef 5a       	subi	r30, 0xAF	; 175
    81ca:	ff 4f       	sbci	r31, 0xFF	; 255
    81cc:	60 81       	ld	r22, Z
    81ce:	71 81       	ldd	r23, Z+1	; 0x01
    81d0:	82 81       	ldd	r24, Z+2	; 0x02
    81d2:	93 81       	ldd	r25, Z+3	; 0x03
    81d4:	20 e0       	ldi	r18, 0x00	; 0
    81d6:	30 e0       	ldi	r19, 0x00	; 0
    81d8:	40 e2       	ldi	r20, 0x20	; 32
    81da:	51 e4       	ldi	r21, 0x41	; 65
    81dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    81e0:	dc 01       	movw	r26, r24
    81e2:	cb 01       	movw	r24, r22
    81e4:	8e 01       	movw	r16, r28
    81e6:	05 5b       	subi	r16, 0xB5	; 181
    81e8:	1f 4f       	sbci	r17, 0xFF	; 255
    81ea:	bc 01       	movw	r22, r24
    81ec:	cd 01       	movw	r24, r26
    81ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    81f2:	dc 01       	movw	r26, r24
    81f4:	cb 01       	movw	r24, r22
    81f6:	f8 01       	movw	r30, r16
    81f8:	91 83       	std	Z+1, r25	; 0x01
    81fa:	80 83       	st	Z, r24
    81fc:	1f c0       	rjmp	.+62     	; 0x823c <LS_voidStartKPD+0x11f4>
    81fe:	fe 01       	movw	r30, r28
    8200:	e7 5b       	subi	r30, 0xB7	; 183
    8202:	ff 4f       	sbci	r31, 0xFF	; 255
    8204:	80 e9       	ldi	r24, 0x90	; 144
    8206:	91 e0       	ldi	r25, 0x01	; 1
    8208:	91 83       	std	Z+1, r25	; 0x01
    820a:	80 83       	st	Z, r24
    820c:	fe 01       	movw	r30, r28
    820e:	e7 5b       	subi	r30, 0xB7	; 183
    8210:	ff 4f       	sbci	r31, 0xFF	; 255
    8212:	80 81       	ld	r24, Z
    8214:	91 81       	ldd	r25, Z+1	; 0x01
    8216:	01 97       	sbiw	r24, 0x01	; 1
    8218:	f1 f7       	brne	.-4      	; 0x8216 <LS_voidStartKPD+0x11ce>
    821a:	fe 01       	movw	r30, r28
    821c:	e7 5b       	subi	r30, 0xB7	; 183
    821e:	ff 4f       	sbci	r31, 0xFF	; 255
    8220:	91 83       	std	Z+1, r25	; 0x01
    8222:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8224:	de 01       	movw	r26, r28
    8226:	a5 5b       	subi	r26, 0xB5	; 181
    8228:	bf 4f       	sbci	r27, 0xFF	; 255
    822a:	fe 01       	movw	r30, r28
    822c:	e5 5b       	subi	r30, 0xB5	; 181
    822e:	ff 4f       	sbci	r31, 0xFF	; 255
    8230:	80 81       	ld	r24, Z
    8232:	91 81       	ldd	r25, Z+1	; 0x01
    8234:	01 97       	sbiw	r24, 0x01	; 1
    8236:	11 96       	adiw	r26, 0x01	; 1
    8238:	9c 93       	st	X, r25
    823a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    823c:	fe 01       	movw	r30, r28
    823e:	e5 5b       	subi	r30, 0xB5	; 181
    8240:	ff 4f       	sbci	r31, 0xFF	; 255
    8242:	80 81       	ld	r24, Z
    8244:	91 81       	ldd	r25, Z+1	; 0x01
    8246:	00 97       	sbiw	r24, 0x00	; 0
    8248:	d1 f6       	brne	.-76     	; 0x81fe <LS_voidStartKPD+0x11b6>
    824a:	ec c2       	rjmp	.+1496   	; 0x8824 <LS_voidStartKPD+0x17dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    824c:	8e 01       	movw	r16, r28
    824e:	05 5b       	subi	r16, 0xB5	; 181
    8250:	1f 4f       	sbci	r17, 0xFF	; 255
    8252:	fe 01       	movw	r30, r28
    8254:	e3 5b       	subi	r30, 0xB3	; 179
    8256:	ff 4f       	sbci	r31, 0xFF	; 255
    8258:	60 81       	ld	r22, Z
    825a:	71 81       	ldd	r23, Z+1	; 0x01
    825c:	82 81       	ldd	r24, Z+2	; 0x02
    825e:	93 81       	ldd	r25, Z+3	; 0x03
    8260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8264:	dc 01       	movw	r26, r24
    8266:	cb 01       	movw	r24, r22
    8268:	f8 01       	movw	r30, r16
    826a:	91 83       	std	Z+1, r25	; 0x01
    826c:	80 83       	st	Z, r24
    826e:	de 01       	movw	r26, r28
    8270:	a9 5b       	subi	r26, 0xB9	; 185
    8272:	bf 4f       	sbci	r27, 0xFF	; 255
    8274:	fe 01       	movw	r30, r28
    8276:	e5 5b       	subi	r30, 0xB5	; 181
    8278:	ff 4f       	sbci	r31, 0xFF	; 255
    827a:	80 81       	ld	r24, Z
    827c:	91 81       	ldd	r25, Z+1	; 0x01
    827e:	11 96       	adiw	r26, 0x01	; 1
    8280:	9c 93       	st	X, r25
    8282:	8e 93       	st	-X, r24
    8284:	fe 01       	movw	r30, r28
    8286:	e9 5b       	subi	r30, 0xB9	; 185
    8288:	ff 4f       	sbci	r31, 0xFF	; 255
    828a:	80 81       	ld	r24, Z
    828c:	91 81       	ldd	r25, Z+1	; 0x01
    828e:	01 97       	sbiw	r24, 0x01	; 1
    8290:	f1 f7       	brne	.-4      	; 0x828e <LS_voidStartKPD+0x1246>
    8292:	fe 01       	movw	r30, r28
    8294:	e9 5b       	subi	r30, 0xB9	; 185
    8296:	ff 4f       	sbci	r31, 0xFF	; 255
    8298:	91 83       	std	Z+1, r25	; 0x01
    829a:	80 83       	st	Z, r24
    829c:	c3 c2       	rjmp	.+1414   	; 0x8824 <LS_voidStartKPD+0x17dc>
											_delay_ms(3000);
		} else {
			LCD_voidClear();
    829e:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "Wrong Choice");
    82a2:	82 ef       	ldi	r24, 0xF2	; 242
    82a4:	92 e0       	ldi	r25, 0x02	; 2
    82a6:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    82aa:	82 e0       	ldi	r24, 0x02	; 2
    82ac:	60 e0       	ldi	r22, 0x00	; 0
    82ae:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
			LCD_voidDisplayString((u8*) "Please Try again!!");
    82b2:	8f ef       	ldi	r24, 0xFF	; 255
    82b4:	92 e0       	ldi	r25, 0x02	; 2
    82b6:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    82ba:	fe 01       	movw	r30, r28
    82bc:	ed 5b       	subi	r30, 0xBD	; 189
    82be:	ff 4f       	sbci	r31, 0xFF	; 255
    82c0:	80 e0       	ldi	r24, 0x00	; 0
    82c2:	90 e8       	ldi	r25, 0x80	; 128
    82c4:	ab eb       	ldi	r26, 0xBB	; 187
    82c6:	b4 e4       	ldi	r27, 0x44	; 68
    82c8:	80 83       	st	Z, r24
    82ca:	91 83       	std	Z+1, r25	; 0x01
    82cc:	a2 83       	std	Z+2, r26	; 0x02
    82ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    82d0:	8e 01       	movw	r16, r28
    82d2:	01 5c       	subi	r16, 0xC1	; 193
    82d4:	1f 4f       	sbci	r17, 0xFF	; 255
    82d6:	fe 01       	movw	r30, r28
    82d8:	ed 5b       	subi	r30, 0xBD	; 189
    82da:	ff 4f       	sbci	r31, 0xFF	; 255
    82dc:	60 81       	ld	r22, Z
    82de:	71 81       	ldd	r23, Z+1	; 0x01
    82e0:	82 81       	ldd	r24, Z+2	; 0x02
    82e2:	93 81       	ldd	r25, Z+3	; 0x03
    82e4:	20 e0       	ldi	r18, 0x00	; 0
    82e6:	30 e0       	ldi	r19, 0x00	; 0
    82e8:	4a e7       	ldi	r20, 0x7A	; 122
    82ea:	55 e4       	ldi	r21, 0x45	; 69
    82ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    82f0:	dc 01       	movw	r26, r24
    82f2:	cb 01       	movw	r24, r22
    82f4:	f8 01       	movw	r30, r16
    82f6:	80 83       	st	Z, r24
    82f8:	91 83       	std	Z+1, r25	; 0x01
    82fa:	a2 83       	std	Z+2, r26	; 0x02
    82fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    82fe:	fe 01       	movw	r30, r28
    8300:	ff 96       	adiw	r30, 0x3f	; 63
    8302:	60 81       	ld	r22, Z
    8304:	71 81       	ldd	r23, Z+1	; 0x01
    8306:	82 81       	ldd	r24, Z+2	; 0x02
    8308:	93 81       	ldd	r25, Z+3	; 0x03
    830a:	20 e0       	ldi	r18, 0x00	; 0
    830c:	30 e0       	ldi	r19, 0x00	; 0
    830e:	40 e8       	ldi	r20, 0x80	; 128
    8310:	5f e3       	ldi	r21, 0x3F	; 63
    8312:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8316:	88 23       	and	r24, r24
    8318:	2c f4       	brge	.+10     	; 0x8324 <LS_voidStartKPD+0x12dc>
		__ticks = 1;
    831a:	81 e0       	ldi	r24, 0x01	; 1
    831c:	90 e0       	ldi	r25, 0x00	; 0
    831e:	9e af       	std	Y+62, r25	; 0x3e
    8320:	8d af       	std	Y+61, r24	; 0x3d
    8322:	46 c0       	rjmp	.+140    	; 0x83b0 <LS_voidStartKPD+0x1368>
	else if (__tmp > 65535)
    8324:	fe 01       	movw	r30, r28
    8326:	ff 96       	adiw	r30, 0x3f	; 63
    8328:	60 81       	ld	r22, Z
    832a:	71 81       	ldd	r23, Z+1	; 0x01
    832c:	82 81       	ldd	r24, Z+2	; 0x02
    832e:	93 81       	ldd	r25, Z+3	; 0x03
    8330:	20 e0       	ldi	r18, 0x00	; 0
    8332:	3f ef       	ldi	r19, 0xFF	; 255
    8334:	4f e7       	ldi	r20, 0x7F	; 127
    8336:	57 e4       	ldi	r21, 0x47	; 71
    8338:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    833c:	18 16       	cp	r1, r24
    833e:	64 f5       	brge	.+88     	; 0x8398 <LS_voidStartKPD+0x1350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8340:	fe 01       	movw	r30, r28
    8342:	ed 5b       	subi	r30, 0xBD	; 189
    8344:	ff 4f       	sbci	r31, 0xFF	; 255
    8346:	60 81       	ld	r22, Z
    8348:	71 81       	ldd	r23, Z+1	; 0x01
    834a:	82 81       	ldd	r24, Z+2	; 0x02
    834c:	93 81       	ldd	r25, Z+3	; 0x03
    834e:	20 e0       	ldi	r18, 0x00	; 0
    8350:	30 e0       	ldi	r19, 0x00	; 0
    8352:	40 e2       	ldi	r20, 0x20	; 32
    8354:	51 e4       	ldi	r21, 0x41	; 65
    8356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    835a:	dc 01       	movw	r26, r24
    835c:	cb 01       	movw	r24, r22
    835e:	bc 01       	movw	r22, r24
    8360:	cd 01       	movw	r24, r26
    8362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8366:	dc 01       	movw	r26, r24
    8368:	cb 01       	movw	r24, r22
    836a:	9e af       	std	Y+62, r25	; 0x3e
    836c:	8d af       	std	Y+61, r24	; 0x3d
    836e:	0f c0       	rjmp	.+30     	; 0x838e <LS_voidStartKPD+0x1346>
    8370:	80 e9       	ldi	r24, 0x90	; 144
    8372:	91 e0       	ldi	r25, 0x01	; 1
    8374:	9c af       	std	Y+60, r25	; 0x3c
    8376:	8b af       	std	Y+59, r24	; 0x3b
    8378:	8b ad       	ldd	r24, Y+59	; 0x3b
    837a:	9c ad       	ldd	r25, Y+60	; 0x3c
    837c:	01 97       	sbiw	r24, 0x01	; 1
    837e:	f1 f7       	brne	.-4      	; 0x837c <LS_voidStartKPD+0x1334>
    8380:	9c af       	std	Y+60, r25	; 0x3c
    8382:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8384:	8d ad       	ldd	r24, Y+61	; 0x3d
    8386:	9e ad       	ldd	r25, Y+62	; 0x3e
    8388:	01 97       	sbiw	r24, 0x01	; 1
    838a:	9e af       	std	Y+62, r25	; 0x3e
    838c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    838e:	8d ad       	ldd	r24, Y+61	; 0x3d
    8390:	9e ad       	ldd	r25, Y+62	; 0x3e
    8392:	00 97       	sbiw	r24, 0x00	; 0
    8394:	69 f7       	brne	.-38     	; 0x8370 <LS_voidStartKPD+0x1328>
    8396:	16 c0       	rjmp	.+44     	; 0x83c4 <LS_voidStartKPD+0x137c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8398:	fe 01       	movw	r30, r28
    839a:	ff 96       	adiw	r30, 0x3f	; 63
    839c:	60 81       	ld	r22, Z
    839e:	71 81       	ldd	r23, Z+1	; 0x01
    83a0:	82 81       	ldd	r24, Z+2	; 0x02
    83a2:	93 81       	ldd	r25, Z+3	; 0x03
    83a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    83a8:	dc 01       	movw	r26, r24
    83aa:	cb 01       	movw	r24, r22
    83ac:	9e af       	std	Y+62, r25	; 0x3e
    83ae:	8d af       	std	Y+61, r24	; 0x3d
    83b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    83b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    83b4:	9a af       	std	Y+58, r25	; 0x3a
    83b6:	89 af       	std	Y+57, r24	; 0x39
    83b8:	89 ad       	ldd	r24, Y+57	; 0x39
    83ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    83bc:	01 97       	sbiw	r24, 0x01	; 1
    83be:	f1 f7       	brne	.-4      	; 0x83bc <LS_voidStartKPD+0x1374>
    83c0:	9a af       	std	Y+58, r25	; 0x3a
    83c2:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1500);
			LCD_voidClear();
    83c4:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
    83c8:	2d c2       	rjmp	.+1114   	; 0x8824 <LS_voidStartKPD+0x17dc>
		}
	}

	else if (local_u8KPD1 == '5') //LED5
    83ca:	fe 01       	movw	r30, r28
    83cc:	ef 51       	subi	r30, 0x1F	; 31
    83ce:	ff 4f       	sbci	r31, 0xFF	; 255
    83d0:	80 81       	ld	r24, Z
    83d2:	85 33       	cpi	r24, 0x35	; 53
    83d4:	09 f0       	breq	.+2      	; 0x83d8 <LS_voidStartKPD+0x1390>
    83d6:	a4 c1       	rjmp	.+840    	; 0x8720 <LS_voidStartKPD+0x16d8>
			{
		LCD_voidClear();
    83d8:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "      LED5");
    83dc:	8e e7       	ldi	r24, 0x7E	; 126
    83de:	93 e0       	ldi	r25, 0x03	; 3
    83e0:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    83e4:	82 e0       	ldi	r24, 0x02	; 2
    83e6:	60 e0       	ldi	r22, 0x00	; 0
    83e8:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString((u8*) "1-ON       2-OFF");
    83ec:	88 ec       	ldi	r24, 0xC8	; 200
    83ee:	92 e0       	ldi	r25, 0x02	; 2
    83f0:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		do {
			KPD_voidGetValue(&local_u8KPD2);
    83f4:	ce 01       	movw	r24, r28
    83f6:	8e 51       	subi	r24, 0x1E	; 30
    83f8:	9f 4f       	sbci	r25, 0xFF	; 255
    83fa:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <KPD_voidGetValue>
		} while (local_u8KPD2 == KPD_NOT_PRESSED);
    83fe:	fe 01       	movw	r30, r28
    8400:	ee 51       	subi	r30, 0x1E	; 30
    8402:	ff 4f       	sbci	r31, 0xFF	; 255
    8404:	80 81       	ld	r24, Z
    8406:	8f 3f       	cpi	r24, 0xFF	; 255
    8408:	a9 f3       	breq	.-22     	; 0x83f4 <LS_voidStartKPD+0x13ac>
		LCD_voidClear();
    840a:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		if (local_u8KPD2 == '1') {
    840e:	fe 01       	movw	r30, r28
    8410:	ee 51       	subi	r30, 0x1E	; 30
    8412:	ff 4f       	sbci	r31, 0xFF	; 255
    8414:	80 81       	ld	r24, Z
    8416:	81 33       	cpi	r24, 0x31	; 49
    8418:	09 f0       	breq	.+2      	; 0x841c <LS_voidStartKPD+0x13d4>
    841a:	7c c0       	rjmp	.+248    	; 0x8514 <LS_voidStartKPD+0x14cc>
			LED_voidLedOn(LED5_PORT, LED5_PIN, LED_FORWARD_CONNECTION);
    841c:	82 e0       	ldi	r24, 0x02	; 2
    841e:	67 e0       	ldi	r22, 0x07	; 7
    8420:	41 e0       	ldi	r20, 0x01	; 1
    8422:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <LED_voidLedOn>
			LCD_voidDisplayString((u8*) "LED 5 is ON");
    8426:	89 e8       	ldi	r24, 0x89	; 137
    8428:	93 e0       	ldi	r25, 0x03	; 3
    842a:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    842e:	80 e0       	ldi	r24, 0x00	; 0
    8430:	90 e8       	ldi	r25, 0x80	; 128
    8432:	ab e3       	ldi	r26, 0x3B	; 59
    8434:	b5 e4       	ldi	r27, 0x45	; 69
    8436:	8d ab       	std	Y+53, r24	; 0x35
    8438:	9e ab       	std	Y+54, r25	; 0x36
    843a:	af ab       	std	Y+55, r26	; 0x37
    843c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    843e:	6d a9       	ldd	r22, Y+53	; 0x35
    8440:	7e a9       	ldd	r23, Y+54	; 0x36
    8442:	8f a9       	ldd	r24, Y+55	; 0x37
    8444:	98 ad       	ldd	r25, Y+56	; 0x38
    8446:	20 e0       	ldi	r18, 0x00	; 0
    8448:	30 e0       	ldi	r19, 0x00	; 0
    844a:	4a e7       	ldi	r20, 0x7A	; 122
    844c:	55 e4       	ldi	r21, 0x45	; 69
    844e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8452:	dc 01       	movw	r26, r24
    8454:	cb 01       	movw	r24, r22
    8456:	89 ab       	std	Y+49, r24	; 0x31
    8458:	9a ab       	std	Y+50, r25	; 0x32
    845a:	ab ab       	std	Y+51, r26	; 0x33
    845c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    845e:	69 a9       	ldd	r22, Y+49	; 0x31
    8460:	7a a9       	ldd	r23, Y+50	; 0x32
    8462:	8b a9       	ldd	r24, Y+51	; 0x33
    8464:	9c a9       	ldd	r25, Y+52	; 0x34
    8466:	20 e0       	ldi	r18, 0x00	; 0
    8468:	30 e0       	ldi	r19, 0x00	; 0
    846a:	40 e8       	ldi	r20, 0x80	; 128
    846c:	5f e3       	ldi	r21, 0x3F	; 63
    846e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8472:	88 23       	and	r24, r24
    8474:	2c f4       	brge	.+10     	; 0x8480 <LS_voidStartKPD+0x1438>
		__ticks = 1;
    8476:	81 e0       	ldi	r24, 0x01	; 1
    8478:	90 e0       	ldi	r25, 0x00	; 0
    847a:	98 ab       	std	Y+48, r25	; 0x30
    847c:	8f a7       	std	Y+47, r24	; 0x2f
    847e:	3f c0       	rjmp	.+126    	; 0x84fe <LS_voidStartKPD+0x14b6>
	else if (__tmp > 65535)
    8480:	69 a9       	ldd	r22, Y+49	; 0x31
    8482:	7a a9       	ldd	r23, Y+50	; 0x32
    8484:	8b a9       	ldd	r24, Y+51	; 0x33
    8486:	9c a9       	ldd	r25, Y+52	; 0x34
    8488:	20 e0       	ldi	r18, 0x00	; 0
    848a:	3f ef       	ldi	r19, 0xFF	; 255
    848c:	4f e7       	ldi	r20, 0x7F	; 127
    848e:	57 e4       	ldi	r21, 0x47	; 71
    8490:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    8494:	18 16       	cp	r1, r24
    8496:	4c f5       	brge	.+82     	; 0x84ea <LS_voidStartKPD+0x14a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8498:	6d a9       	ldd	r22, Y+53	; 0x35
    849a:	7e a9       	ldd	r23, Y+54	; 0x36
    849c:	8f a9       	ldd	r24, Y+55	; 0x37
    849e:	98 ad       	ldd	r25, Y+56	; 0x38
    84a0:	20 e0       	ldi	r18, 0x00	; 0
    84a2:	30 e0       	ldi	r19, 0x00	; 0
    84a4:	40 e2       	ldi	r20, 0x20	; 32
    84a6:	51 e4       	ldi	r21, 0x41	; 65
    84a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    84ac:	dc 01       	movw	r26, r24
    84ae:	cb 01       	movw	r24, r22
    84b0:	bc 01       	movw	r22, r24
    84b2:	cd 01       	movw	r24, r26
    84b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    84b8:	dc 01       	movw	r26, r24
    84ba:	cb 01       	movw	r24, r22
    84bc:	98 ab       	std	Y+48, r25	; 0x30
    84be:	8f a7       	std	Y+47, r24	; 0x2f
    84c0:	0f c0       	rjmp	.+30     	; 0x84e0 <LS_voidStartKPD+0x1498>
    84c2:	80 e9       	ldi	r24, 0x90	; 144
    84c4:	91 e0       	ldi	r25, 0x01	; 1
    84c6:	9e a7       	std	Y+46, r25	; 0x2e
    84c8:	8d a7       	std	Y+45, r24	; 0x2d
    84ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    84cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    84ce:	01 97       	sbiw	r24, 0x01	; 1
    84d0:	f1 f7       	brne	.-4      	; 0x84ce <LS_voidStartKPD+0x1486>
    84d2:	9e a7       	std	Y+46, r25	; 0x2e
    84d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    84d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    84d8:	98 a9       	ldd	r25, Y+48	; 0x30
    84da:	01 97       	sbiw	r24, 0x01	; 1
    84dc:	98 ab       	std	Y+48, r25	; 0x30
    84de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    84e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    84e2:	98 a9       	ldd	r25, Y+48	; 0x30
    84e4:	00 97       	sbiw	r24, 0x00	; 0
    84e6:	69 f7       	brne	.-38     	; 0x84c2 <LS_voidStartKPD+0x147a>
    84e8:	9d c1       	rjmp	.+826    	; 0x8824 <LS_voidStartKPD+0x17dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    84ea:	69 a9       	ldd	r22, Y+49	; 0x31
    84ec:	7a a9       	ldd	r23, Y+50	; 0x32
    84ee:	8b a9       	ldd	r24, Y+51	; 0x33
    84f0:	9c a9       	ldd	r25, Y+52	; 0x34
    84f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    84f6:	dc 01       	movw	r26, r24
    84f8:	cb 01       	movw	r24, r22
    84fa:	98 ab       	std	Y+48, r25	; 0x30
    84fc:	8f a7       	std	Y+47, r24	; 0x2f
    84fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    8500:	98 a9       	ldd	r25, Y+48	; 0x30
    8502:	9c a7       	std	Y+44, r25	; 0x2c
    8504:	8b a7       	std	Y+43, r24	; 0x2b
    8506:	8b a5       	ldd	r24, Y+43	; 0x2b
    8508:	9c a5       	ldd	r25, Y+44	; 0x2c
    850a:	01 97       	sbiw	r24, 0x01	; 1
    850c:	f1 f7       	brne	.-4      	; 0x850a <LS_voidStartKPD+0x14c2>
    850e:	9c a7       	std	Y+44, r25	; 0x2c
    8510:	8b a7       	std	Y+43, r24	; 0x2b
    8512:	88 c1       	rjmp	.+784    	; 0x8824 <LS_voidStartKPD+0x17dc>
					_delay_ms(3000);
		} else if (local_u8KPD2 == '2') {
    8514:	fe 01       	movw	r30, r28
    8516:	ee 51       	subi	r30, 0x1E	; 30
    8518:	ff 4f       	sbci	r31, 0xFF	; 255
    851a:	80 81       	ld	r24, Z
    851c:	82 33       	cpi	r24, 0x32	; 50
    851e:	09 f0       	breq	.+2      	; 0x8522 <LS_voidStartKPD+0x14da>
    8520:	7c c0       	rjmp	.+248    	; 0x861a <LS_voidStartKPD+0x15d2>
			LED_voidLedOff(LED5_PORT, LED5_PIN, LED_FORWARD_CONNECTION);
    8522:	82 e0       	ldi	r24, 0x02	; 2
    8524:	67 e0       	ldi	r22, 0x07	; 7
    8526:	41 e0       	ldi	r20, 0x01	; 1
    8528:	0e 94 93 46 	call	0x8d26	; 0x8d26 <LED_voidLedOff>
			LCD_voidDisplayString((u8*) "LED 5 is OFF");
    852c:	85 e9       	ldi	r24, 0x95	; 149
    852e:	93 e0       	ldi	r25, 0x03	; 3
    8530:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    8534:	80 e0       	ldi	r24, 0x00	; 0
    8536:	90 e8       	ldi	r25, 0x80	; 128
    8538:	ab e3       	ldi	r26, 0x3B	; 59
    853a:	b5 e4       	ldi	r27, 0x45	; 69
    853c:	8f a3       	std	Y+39, r24	; 0x27
    853e:	98 a7       	std	Y+40, r25	; 0x28
    8540:	a9 a7       	std	Y+41, r26	; 0x29
    8542:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8544:	6f a1       	ldd	r22, Y+39	; 0x27
    8546:	78 a5       	ldd	r23, Y+40	; 0x28
    8548:	89 a5       	ldd	r24, Y+41	; 0x29
    854a:	9a a5       	ldd	r25, Y+42	; 0x2a
    854c:	20 e0       	ldi	r18, 0x00	; 0
    854e:	30 e0       	ldi	r19, 0x00	; 0
    8550:	4a e7       	ldi	r20, 0x7A	; 122
    8552:	55 e4       	ldi	r21, 0x45	; 69
    8554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8558:	dc 01       	movw	r26, r24
    855a:	cb 01       	movw	r24, r22
    855c:	8b a3       	std	Y+35, r24	; 0x23
    855e:	9c a3       	std	Y+36, r25	; 0x24
    8560:	ad a3       	std	Y+37, r26	; 0x25
    8562:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    8564:	6b a1       	ldd	r22, Y+35	; 0x23
    8566:	7c a1       	ldd	r23, Y+36	; 0x24
    8568:	8d a1       	ldd	r24, Y+37	; 0x25
    856a:	9e a1       	ldd	r25, Y+38	; 0x26
    856c:	20 e0       	ldi	r18, 0x00	; 0
    856e:	30 e0       	ldi	r19, 0x00	; 0
    8570:	40 e8       	ldi	r20, 0x80	; 128
    8572:	5f e3       	ldi	r21, 0x3F	; 63
    8574:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8578:	88 23       	and	r24, r24
    857a:	2c f4       	brge	.+10     	; 0x8586 <LS_voidStartKPD+0x153e>
		__ticks = 1;
    857c:	81 e0       	ldi	r24, 0x01	; 1
    857e:	90 e0       	ldi	r25, 0x00	; 0
    8580:	9a a3       	std	Y+34, r25	; 0x22
    8582:	89 a3       	std	Y+33, r24	; 0x21
    8584:	3f c0       	rjmp	.+126    	; 0x8604 <LS_voidStartKPD+0x15bc>
	else if (__tmp > 65535)
    8586:	6b a1       	ldd	r22, Y+35	; 0x23
    8588:	7c a1       	ldd	r23, Y+36	; 0x24
    858a:	8d a1       	ldd	r24, Y+37	; 0x25
    858c:	9e a1       	ldd	r25, Y+38	; 0x26
    858e:	20 e0       	ldi	r18, 0x00	; 0
    8590:	3f ef       	ldi	r19, 0xFF	; 255
    8592:	4f e7       	ldi	r20, 0x7F	; 127
    8594:	57 e4       	ldi	r21, 0x47	; 71
    8596:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    859a:	18 16       	cp	r1, r24
    859c:	4c f5       	brge	.+82     	; 0x85f0 <LS_voidStartKPD+0x15a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    859e:	6f a1       	ldd	r22, Y+39	; 0x27
    85a0:	78 a5       	ldd	r23, Y+40	; 0x28
    85a2:	89 a5       	ldd	r24, Y+41	; 0x29
    85a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    85a6:	20 e0       	ldi	r18, 0x00	; 0
    85a8:	30 e0       	ldi	r19, 0x00	; 0
    85aa:	40 e2       	ldi	r20, 0x20	; 32
    85ac:	51 e4       	ldi	r21, 0x41	; 65
    85ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    85b2:	dc 01       	movw	r26, r24
    85b4:	cb 01       	movw	r24, r22
    85b6:	bc 01       	movw	r22, r24
    85b8:	cd 01       	movw	r24, r26
    85ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    85be:	dc 01       	movw	r26, r24
    85c0:	cb 01       	movw	r24, r22
    85c2:	9a a3       	std	Y+34, r25	; 0x22
    85c4:	89 a3       	std	Y+33, r24	; 0x21
    85c6:	0f c0       	rjmp	.+30     	; 0x85e6 <LS_voidStartKPD+0x159e>
    85c8:	80 e9       	ldi	r24, 0x90	; 144
    85ca:	91 e0       	ldi	r25, 0x01	; 1
    85cc:	98 a3       	std	Y+32, r25	; 0x20
    85ce:	8f 8f       	std	Y+31, r24	; 0x1f
    85d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    85d2:	98 a1       	ldd	r25, Y+32	; 0x20
    85d4:	01 97       	sbiw	r24, 0x01	; 1
    85d6:	f1 f7       	brne	.-4      	; 0x85d4 <LS_voidStartKPD+0x158c>
    85d8:	98 a3       	std	Y+32, r25	; 0x20
    85da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    85dc:	89 a1       	ldd	r24, Y+33	; 0x21
    85de:	9a a1       	ldd	r25, Y+34	; 0x22
    85e0:	01 97       	sbiw	r24, 0x01	; 1
    85e2:	9a a3       	std	Y+34, r25	; 0x22
    85e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    85e6:	89 a1       	ldd	r24, Y+33	; 0x21
    85e8:	9a a1       	ldd	r25, Y+34	; 0x22
    85ea:	00 97       	sbiw	r24, 0x00	; 0
    85ec:	69 f7       	brne	.-38     	; 0x85c8 <LS_voidStartKPD+0x1580>
    85ee:	1a c1       	rjmp	.+564    	; 0x8824 <LS_voidStartKPD+0x17dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    85f0:	6b a1       	ldd	r22, Y+35	; 0x23
    85f2:	7c a1       	ldd	r23, Y+36	; 0x24
    85f4:	8d a1       	ldd	r24, Y+37	; 0x25
    85f6:	9e a1       	ldd	r25, Y+38	; 0x26
    85f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    85fc:	dc 01       	movw	r26, r24
    85fe:	cb 01       	movw	r24, r22
    8600:	9a a3       	std	Y+34, r25	; 0x22
    8602:	89 a3       	std	Y+33, r24	; 0x21
    8604:	89 a1       	ldd	r24, Y+33	; 0x21
    8606:	9a a1       	ldd	r25, Y+34	; 0x22
    8608:	9e 8f       	std	Y+30, r25	; 0x1e
    860a:	8d 8f       	std	Y+29, r24	; 0x1d
    860c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    860e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8610:	01 97       	sbiw	r24, 0x01	; 1
    8612:	f1 f7       	brne	.-4      	; 0x8610 <LS_voidStartKPD+0x15c8>
    8614:	9e 8f       	std	Y+30, r25	; 0x1e
    8616:	8d 8f       	std	Y+29, r24	; 0x1d
    8618:	05 c1       	rjmp	.+522    	; 0x8824 <LS_voidStartKPD+0x17dc>
											_delay_ms(3000);
		} else {
			LCD_voidClear();
    861a:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "Wrong Choice");
    861e:	82 ef       	ldi	r24, 0xF2	; 242
    8620:	92 e0       	ldi	r25, 0x02	; 2
    8622:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    8626:	82 e0       	ldi	r24, 0x02	; 2
    8628:	60 e0       	ldi	r22, 0x00	; 0
    862a:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
			LCD_voidDisplayString((u8*) "Please Try again!!");
    862e:	8f ef       	ldi	r24, 0xFF	; 255
    8630:	92 e0       	ldi	r25, 0x02	; 2
    8632:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    8636:	80 e0       	ldi	r24, 0x00	; 0
    8638:	90 e8       	ldi	r25, 0x80	; 128
    863a:	ab eb       	ldi	r26, 0xBB	; 187
    863c:	b4 e4       	ldi	r27, 0x44	; 68
    863e:	89 8f       	std	Y+25, r24	; 0x19
    8640:	9a 8f       	std	Y+26, r25	; 0x1a
    8642:	ab 8f       	std	Y+27, r26	; 0x1b
    8644:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8646:	69 8d       	ldd	r22, Y+25	; 0x19
    8648:	7a 8d       	ldd	r23, Y+26	; 0x1a
    864a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    864c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    864e:	20 e0       	ldi	r18, 0x00	; 0
    8650:	30 e0       	ldi	r19, 0x00	; 0
    8652:	4a e7       	ldi	r20, 0x7A	; 122
    8654:	55 e4       	ldi	r21, 0x45	; 69
    8656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    865a:	dc 01       	movw	r26, r24
    865c:	cb 01       	movw	r24, r22
    865e:	8d 8b       	std	Y+21, r24	; 0x15
    8660:	9e 8b       	std	Y+22, r25	; 0x16
    8662:	af 8b       	std	Y+23, r26	; 0x17
    8664:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    8666:	6d 89       	ldd	r22, Y+21	; 0x15
    8668:	7e 89       	ldd	r23, Y+22	; 0x16
    866a:	8f 89       	ldd	r24, Y+23	; 0x17
    866c:	98 8d       	ldd	r25, Y+24	; 0x18
    866e:	20 e0       	ldi	r18, 0x00	; 0
    8670:	30 e0       	ldi	r19, 0x00	; 0
    8672:	40 e8       	ldi	r20, 0x80	; 128
    8674:	5f e3       	ldi	r21, 0x3F	; 63
    8676:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    867a:	88 23       	and	r24, r24
    867c:	2c f4       	brge	.+10     	; 0x8688 <LS_voidStartKPD+0x1640>
		__ticks = 1;
    867e:	81 e0       	ldi	r24, 0x01	; 1
    8680:	90 e0       	ldi	r25, 0x00	; 0
    8682:	9c 8b       	std	Y+20, r25	; 0x14
    8684:	8b 8b       	std	Y+19, r24	; 0x13
    8686:	3f c0       	rjmp	.+126    	; 0x8706 <LS_voidStartKPD+0x16be>
	else if (__tmp > 65535)
    8688:	6d 89       	ldd	r22, Y+21	; 0x15
    868a:	7e 89       	ldd	r23, Y+22	; 0x16
    868c:	8f 89       	ldd	r24, Y+23	; 0x17
    868e:	98 8d       	ldd	r25, Y+24	; 0x18
    8690:	20 e0       	ldi	r18, 0x00	; 0
    8692:	3f ef       	ldi	r19, 0xFF	; 255
    8694:	4f e7       	ldi	r20, 0x7F	; 127
    8696:	57 e4       	ldi	r21, 0x47	; 71
    8698:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    869c:	18 16       	cp	r1, r24
    869e:	4c f5       	brge	.+82     	; 0x86f2 <LS_voidStartKPD+0x16aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    86a0:	69 8d       	ldd	r22, Y+25	; 0x19
    86a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    86a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    86a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    86a8:	20 e0       	ldi	r18, 0x00	; 0
    86aa:	30 e0       	ldi	r19, 0x00	; 0
    86ac:	40 e2       	ldi	r20, 0x20	; 32
    86ae:	51 e4       	ldi	r21, 0x41	; 65
    86b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    86b4:	dc 01       	movw	r26, r24
    86b6:	cb 01       	movw	r24, r22
    86b8:	bc 01       	movw	r22, r24
    86ba:	cd 01       	movw	r24, r26
    86bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    86c0:	dc 01       	movw	r26, r24
    86c2:	cb 01       	movw	r24, r22
    86c4:	9c 8b       	std	Y+20, r25	; 0x14
    86c6:	8b 8b       	std	Y+19, r24	; 0x13
    86c8:	0f c0       	rjmp	.+30     	; 0x86e8 <LS_voidStartKPD+0x16a0>
    86ca:	80 e9       	ldi	r24, 0x90	; 144
    86cc:	91 e0       	ldi	r25, 0x01	; 1
    86ce:	9a 8b       	std	Y+18, r25	; 0x12
    86d0:	89 8b       	std	Y+17, r24	; 0x11
    86d2:	89 89       	ldd	r24, Y+17	; 0x11
    86d4:	9a 89       	ldd	r25, Y+18	; 0x12
    86d6:	01 97       	sbiw	r24, 0x01	; 1
    86d8:	f1 f7       	brne	.-4      	; 0x86d6 <LS_voidStartKPD+0x168e>
    86da:	9a 8b       	std	Y+18, r25	; 0x12
    86dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    86de:	8b 89       	ldd	r24, Y+19	; 0x13
    86e0:	9c 89       	ldd	r25, Y+20	; 0x14
    86e2:	01 97       	sbiw	r24, 0x01	; 1
    86e4:	9c 8b       	std	Y+20, r25	; 0x14
    86e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    86e8:	8b 89       	ldd	r24, Y+19	; 0x13
    86ea:	9c 89       	ldd	r25, Y+20	; 0x14
    86ec:	00 97       	sbiw	r24, 0x00	; 0
    86ee:	69 f7       	brne	.-38     	; 0x86ca <LS_voidStartKPD+0x1682>
    86f0:	14 c0       	rjmp	.+40     	; 0x871a <LS_voidStartKPD+0x16d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    86f2:	6d 89       	ldd	r22, Y+21	; 0x15
    86f4:	7e 89       	ldd	r23, Y+22	; 0x16
    86f6:	8f 89       	ldd	r24, Y+23	; 0x17
    86f8:	98 8d       	ldd	r25, Y+24	; 0x18
    86fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    86fe:	dc 01       	movw	r26, r24
    8700:	cb 01       	movw	r24, r22
    8702:	9c 8b       	std	Y+20, r25	; 0x14
    8704:	8b 8b       	std	Y+19, r24	; 0x13
    8706:	8b 89       	ldd	r24, Y+19	; 0x13
    8708:	9c 89       	ldd	r25, Y+20	; 0x14
    870a:	98 8b       	std	Y+16, r25	; 0x10
    870c:	8f 87       	std	Y+15, r24	; 0x0f
    870e:	8f 85       	ldd	r24, Y+15	; 0x0f
    8710:	98 89       	ldd	r25, Y+16	; 0x10
    8712:	01 97       	sbiw	r24, 0x01	; 1
    8714:	f1 f7       	brne	.-4      	; 0x8712 <LS_voidStartKPD+0x16ca>
    8716:	98 8b       	std	Y+16, r25	; 0x10
    8718:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1500);
			LCD_voidClear();
    871a:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
    871e:	82 c0       	rjmp	.+260    	; 0x8824 <LS_voidStartKPD+0x17dc>
		}
	} else {
		LCD_voidClear();
    8720:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "Wrong Choice");
    8724:	82 ef       	ldi	r24, 0xF2	; 242
    8726:	92 e0       	ldi	r25, 0x02	; 2
    8728:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    872c:	82 e0       	ldi	r24, 0x02	; 2
    872e:	60 e0       	ldi	r22, 0x00	; 0
    8730:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString((u8*) "Please Try again!!");
    8734:	8f ef       	ldi	r24, 0xFF	; 255
    8736:	92 e0       	ldi	r25, 0x02	; 2
    8738:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    873c:	80 e0       	ldi	r24, 0x00	; 0
    873e:	90 e8       	ldi	r25, 0x80	; 128
    8740:	ab eb       	ldi	r26, 0xBB	; 187
    8742:	b4 e4       	ldi	r27, 0x44	; 68
    8744:	8b 87       	std	Y+11, r24	; 0x0b
    8746:	9c 87       	std	Y+12, r25	; 0x0c
    8748:	ad 87       	std	Y+13, r26	; 0x0d
    874a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    874c:	6b 85       	ldd	r22, Y+11	; 0x0b
    874e:	7c 85       	ldd	r23, Y+12	; 0x0c
    8750:	8d 85       	ldd	r24, Y+13	; 0x0d
    8752:	9e 85       	ldd	r25, Y+14	; 0x0e
    8754:	20 e0       	ldi	r18, 0x00	; 0
    8756:	30 e0       	ldi	r19, 0x00	; 0
    8758:	4a e7       	ldi	r20, 0x7A	; 122
    875a:	55 e4       	ldi	r21, 0x45	; 69
    875c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8760:	dc 01       	movw	r26, r24
    8762:	cb 01       	movw	r24, r22
    8764:	8f 83       	std	Y+7, r24	; 0x07
    8766:	98 87       	std	Y+8, r25	; 0x08
    8768:	a9 87       	std	Y+9, r26	; 0x09
    876a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    876c:	6f 81       	ldd	r22, Y+7	; 0x07
    876e:	78 85       	ldd	r23, Y+8	; 0x08
    8770:	89 85       	ldd	r24, Y+9	; 0x09
    8772:	9a 85       	ldd	r25, Y+10	; 0x0a
    8774:	20 e0       	ldi	r18, 0x00	; 0
    8776:	30 e0       	ldi	r19, 0x00	; 0
    8778:	40 e8       	ldi	r20, 0x80	; 128
    877a:	5f e3       	ldi	r21, 0x3F	; 63
    877c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8780:	88 23       	and	r24, r24
    8782:	2c f4       	brge	.+10     	; 0x878e <LS_voidStartKPD+0x1746>
		__ticks = 1;
    8784:	81 e0       	ldi	r24, 0x01	; 1
    8786:	90 e0       	ldi	r25, 0x00	; 0
    8788:	9e 83       	std	Y+6, r25	; 0x06
    878a:	8d 83       	std	Y+5, r24	; 0x05
    878c:	3f c0       	rjmp	.+126    	; 0x880c <LS_voidStartKPD+0x17c4>
	else if (__tmp > 65535)
    878e:	6f 81       	ldd	r22, Y+7	; 0x07
    8790:	78 85       	ldd	r23, Y+8	; 0x08
    8792:	89 85       	ldd	r24, Y+9	; 0x09
    8794:	9a 85       	ldd	r25, Y+10	; 0x0a
    8796:	20 e0       	ldi	r18, 0x00	; 0
    8798:	3f ef       	ldi	r19, 0xFF	; 255
    879a:	4f e7       	ldi	r20, 0x7F	; 127
    879c:	57 e4       	ldi	r21, 0x47	; 71
    879e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    87a2:	18 16       	cp	r1, r24
    87a4:	4c f5       	brge	.+82     	; 0x87f8 <LS_voidStartKPD+0x17b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    87a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    87a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    87aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    87ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    87ae:	20 e0       	ldi	r18, 0x00	; 0
    87b0:	30 e0       	ldi	r19, 0x00	; 0
    87b2:	40 e2       	ldi	r20, 0x20	; 32
    87b4:	51 e4       	ldi	r21, 0x41	; 65
    87b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    87ba:	dc 01       	movw	r26, r24
    87bc:	cb 01       	movw	r24, r22
    87be:	bc 01       	movw	r22, r24
    87c0:	cd 01       	movw	r24, r26
    87c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    87c6:	dc 01       	movw	r26, r24
    87c8:	cb 01       	movw	r24, r22
    87ca:	9e 83       	std	Y+6, r25	; 0x06
    87cc:	8d 83       	std	Y+5, r24	; 0x05
    87ce:	0f c0       	rjmp	.+30     	; 0x87ee <LS_voidStartKPD+0x17a6>
    87d0:	80 e9       	ldi	r24, 0x90	; 144
    87d2:	91 e0       	ldi	r25, 0x01	; 1
    87d4:	9c 83       	std	Y+4, r25	; 0x04
    87d6:	8b 83       	std	Y+3, r24	; 0x03
    87d8:	8b 81       	ldd	r24, Y+3	; 0x03
    87da:	9c 81       	ldd	r25, Y+4	; 0x04
    87dc:	01 97       	sbiw	r24, 0x01	; 1
    87de:	f1 f7       	brne	.-4      	; 0x87dc <LS_voidStartKPD+0x1794>
    87e0:	9c 83       	std	Y+4, r25	; 0x04
    87e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    87e4:	8d 81       	ldd	r24, Y+5	; 0x05
    87e6:	9e 81       	ldd	r25, Y+6	; 0x06
    87e8:	01 97       	sbiw	r24, 0x01	; 1
    87ea:	9e 83       	std	Y+6, r25	; 0x06
    87ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    87ee:	8d 81       	ldd	r24, Y+5	; 0x05
    87f0:	9e 81       	ldd	r25, Y+6	; 0x06
    87f2:	00 97       	sbiw	r24, 0x00	; 0
    87f4:	69 f7       	brne	.-38     	; 0x87d0 <LS_voidStartKPD+0x1788>
    87f6:	14 c0       	rjmp	.+40     	; 0x8820 <LS_voidStartKPD+0x17d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    87f8:	6f 81       	ldd	r22, Y+7	; 0x07
    87fa:	78 85       	ldd	r23, Y+8	; 0x08
    87fc:	89 85       	ldd	r24, Y+9	; 0x09
    87fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    8800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8804:	dc 01       	movw	r26, r24
    8806:	cb 01       	movw	r24, r22
    8808:	9e 83       	std	Y+6, r25	; 0x06
    880a:	8d 83       	std	Y+5, r24	; 0x05
    880c:	8d 81       	ldd	r24, Y+5	; 0x05
    880e:	9e 81       	ldd	r25, Y+6	; 0x06
    8810:	9a 83       	std	Y+2, r25	; 0x02
    8812:	89 83       	std	Y+1, r24	; 0x01
    8814:	89 81       	ldd	r24, Y+1	; 0x01
    8816:	9a 81       	ldd	r25, Y+2	; 0x02
    8818:	01 97       	sbiw	r24, 0x01	; 1
    881a:	f1 f7       	brne	.-4      	; 0x8818 <LS_voidStartKPD+0x17d0>
    881c:	9a 83       	std	Y+2, r25	; 0x02
    881e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);
		LCD_voidClear();
    8820:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
	}
}
    8824:	ce 51       	subi	r28, 0x1E	; 30
    8826:	df 4f       	sbci	r29, 0xFF	; 255
    8828:	0f b6       	in	r0, 0x3f	; 63
    882a:	f8 94       	cli
    882c:	de bf       	out	0x3e, r29	; 62
    882e:	0f be       	out	0x3f, r0	; 63
    8830:	cd bf       	out	0x3d, r28	; 61
    8832:	cf 91       	pop	r28
    8834:	df 91       	pop	r29
    8836:	1f 91       	pop	r17
    8838:	0f 91       	pop	r16
    883a:	08 95       	ret

0000883c <LS_voidStartBluetooth>:

/************************************************************************/
/*    Function That Control Lightening System From Virtual Screen        /
 /************************************************************************/
void LS_voidStartBluetooth(void) {
    883c:	df 93       	push	r29
    883e:	cf 93       	push	r28
    8840:	00 d0       	rcall	.+0      	; 0x8842 <LS_voidStartBluetooth+0x6>
    8842:	cd b7       	in	r28, 0x3d	; 61
    8844:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8RXData1; /* Local variable to return  */
	u8 local_u8RXData2; /*Received data from Virtual screen*/

//Writing Some MSG On LCD
	UART_voidTxString((u8*) "Choose From");
    8846:	84 ea       	ldi	r24, 0xA4	; 164
    8848:	92 e0       	ldi	r25, 0x02	; 2
    884a:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	UART_voidTxString((u8*) "LED1 TO LED5");
    884e:	80 eb       	ldi	r24, 0xB0	; 176
    8850:	92 e0       	ldi	r25, 0x02	; 2
    8852:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

	/* Get UART STATUS*/
	do {
		UART_voidRxChar(&local_u8RXData1);
    8856:	ce 01       	movw	r24, r28
    8858:	01 96       	adiw	r24, 0x01	; 1
    885a:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
	} while (local_u8RXData1 == NULL );
    885e:	89 81       	ldd	r24, Y+1	; 0x01
    8860:	88 2f       	mov	r24, r24
    8862:	90 e0       	ldi	r25, 0x00	; 0
    8864:	00 97       	sbiw	r24, 0x00	; 0
    8866:	b9 f3       	breq	.-18     	; 0x8856 <LS_voidStartBluetooth+0x1a>

	/* if condition to choose between 5 leds */

	if (local_u8RXData1 == '1') //LED1
    8868:	89 81       	ldd	r24, Y+1	; 0x01
    886a:	81 33       	cpi	r24, 0x31	; 49
    886c:	09 f0       	breq	.+2      	; 0x8870 <LS_voidStartBluetooth+0x34>
    886e:	42 c0       	rjmp	.+132    	; 0x88f4 <LS_voidStartBluetooth+0xb8>
			{

		LCD_voidClear();
    8870:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		UART_voidTxString((u8*) "      LED1");
    8874:	8d eb       	ldi	r24, 0xBD	; 189
    8876:	92 e0       	ldi	r25, 0x02	; 2
    8878:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

		UART_voidTxString((u8*) "1-ON       2-OFF");
    887c:	88 ec       	ldi	r24, 0xC8	; 200
    887e:	92 e0       	ldi	r25, 0x02	; 2
    8880:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
		do {
			UART_voidRxChar(&local_u8RXData2);
    8884:	ce 01       	movw	r24, r28
    8886:	02 96       	adiw	r24, 0x02	; 2
    8888:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
		} while (local_u8RXData2 == NULL );
    888c:	8a 81       	ldd	r24, Y+2	; 0x02
    888e:	88 2f       	mov	r24, r24
    8890:	90 e0       	ldi	r25, 0x00	; 0
    8892:	00 97       	sbiw	r24, 0x00	; 0
    8894:	b9 f3       	breq	.-18     	; 0x8884 <LS_voidStartBluetooth+0x48>

		if (local_u8RXData2 == '1') {
    8896:	8a 81       	ldd	r24, Y+2	; 0x02
    8898:	81 33       	cpi	r24, 0x31	; 49
    889a:	81 f4       	brne	.+32     	; 0x88bc <LS_voidStartBluetooth+0x80>
			LED_voidLedOn(LED1_PORT, LED1_PIN, LED_FORWARD_CONNECTION);
    889c:	82 e0       	ldi	r24, 0x02	; 2
    889e:	63 e0       	ldi	r22, 0x03	; 3
    88a0:	41 e0       	ldi	r20, 0x01	; 1
    88a2:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <LED_voidLedOn>

			LCD_voidClear();
    88a6:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "LED 1 is ON");
    88aa:	89 ed       	ldi	r24, 0xD9	; 217
    88ac:	92 e0       	ldi	r25, 0x02	; 2
    88ae:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			UART_voidTxString((u8*) "LED 1 is ON");
    88b2:	89 ed       	ldi	r24, 0xD9	; 217
    88b4:	92 e0       	ldi	r25, 0x02	; 2
    88b6:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    88ba:	3a c1       	rjmp	.+628    	; 0x8b30 <LS_voidStartBluetooth+0x2f4>
		} else if (local_u8RXData2 == '2') {
    88bc:	8a 81       	ldd	r24, Y+2	; 0x02
    88be:	82 33       	cpi	r24, 0x32	; 50
    88c0:	81 f4       	brne	.+32     	; 0x88e2 <LS_voidStartBluetooth+0xa6>
			LED_voidLedOff(LED1_PORT, LED1_PIN, LED_FORWARD_CONNECTION);
    88c2:	82 e0       	ldi	r24, 0x02	; 2
    88c4:	63 e0       	ldi	r22, 0x03	; 3
    88c6:	41 e0       	ldi	r20, 0x01	; 1
    88c8:	0e 94 93 46 	call	0x8d26	; 0x8d26 <LED_voidLedOff>

			LCD_voidClear();
    88cc:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "LED 1 is OFF");
    88d0:	85 ee       	ldi	r24, 0xE5	; 229
    88d2:	92 e0       	ldi	r25, 0x02	; 2
    88d4:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			UART_voidTxString((u8*) "LED 1 is OFF");
    88d8:	85 ee       	ldi	r24, 0xE5	; 229
    88da:	92 e0       	ldi	r25, 0x02	; 2
    88dc:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    88e0:	27 c1       	rjmp	.+590    	; 0x8b30 <LS_voidStartBluetooth+0x2f4>
		} else {

			UART_voidTxString((u8*) "Wrong Choice");
    88e2:	82 ef       	ldi	r24, 0xF2	; 242
    88e4:	92 e0       	ldi	r25, 0x02	; 2
    88e6:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
			UART_voidTxString((u8*) "Please Try again!!");
    88ea:	8f ef       	ldi	r24, 0xFF	; 255
    88ec:	92 e0       	ldi	r25, 0x02	; 2
    88ee:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    88f2:	1e c1       	rjmp	.+572    	; 0x8b30 <LS_voidStartBluetooth+0x2f4>

		}
	}

	else if (local_u8RXData1 == '2') //LED2
    88f4:	89 81       	ldd	r24, Y+1	; 0x01
    88f6:	82 33       	cpi	r24, 0x32	; 50
    88f8:	09 f0       	breq	.+2      	; 0x88fc <LS_voidStartBluetooth+0xc0>
    88fa:	40 c0       	rjmp	.+128    	; 0x897c <LS_voidStartBluetooth+0x140>
			{

		UART_voidTxString((u8*) "      LED2");
    88fc:	82 e1       	ldi	r24, 0x12	; 18
    88fe:	93 e0       	ldi	r25, 0x03	; 3
    8900:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

		UART_voidTxString((u8*) "1-ON       2-OFF");
    8904:	88 ec       	ldi	r24, 0xC8	; 200
    8906:	92 e0       	ldi	r25, 0x02	; 2
    8908:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
		do {
			UART_voidRxChar(&local_u8RXData2);
    890c:	ce 01       	movw	r24, r28
    890e:	02 96       	adiw	r24, 0x02	; 2
    8910:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
		} while (local_u8RXData2 == NULL );
    8914:	8a 81       	ldd	r24, Y+2	; 0x02
    8916:	88 2f       	mov	r24, r24
    8918:	90 e0       	ldi	r25, 0x00	; 0
    891a:	00 97       	sbiw	r24, 0x00	; 0
    891c:	b9 f3       	breq	.-18     	; 0x890c <LS_voidStartBluetooth+0xd0>
		if (local_u8RXData2 == '1') {
    891e:	8a 81       	ldd	r24, Y+2	; 0x02
    8920:	81 33       	cpi	r24, 0x31	; 49
    8922:	81 f4       	brne	.+32     	; 0x8944 <LS_voidStartBluetooth+0x108>
			LED_voidLedOn(LED2_PORT, LED2_PIN, LED_FORWARD_CONNECTION);
    8924:	82 e0       	ldi	r24, 0x02	; 2
    8926:	64 e0       	ldi	r22, 0x04	; 4
    8928:	41 e0       	ldi	r20, 0x01	; 1
    892a:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <LED_voidLedOn>
			LCD_voidClear();
    892e:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "LED 2 is ON");
    8932:	8d e1       	ldi	r24, 0x1D	; 29
    8934:	93 e0       	ldi	r25, 0x03	; 3
    8936:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			UART_voidTxString((u8*) "LED 2 is ON");
    893a:	8d e1       	ldi	r24, 0x1D	; 29
    893c:	93 e0       	ldi	r25, 0x03	; 3
    893e:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    8942:	f6 c0       	rjmp	.+492    	; 0x8b30 <LS_voidStartBluetooth+0x2f4>
		} else if (local_u8RXData2 == '2') {
    8944:	8a 81       	ldd	r24, Y+2	; 0x02
    8946:	82 33       	cpi	r24, 0x32	; 50
    8948:	81 f4       	brne	.+32     	; 0x896a <LS_voidStartBluetooth+0x12e>
			LED_voidLedOff(LED2_PORT, LED2_PIN, LED_FORWARD_CONNECTION);
    894a:	82 e0       	ldi	r24, 0x02	; 2
    894c:	64 e0       	ldi	r22, 0x04	; 4
    894e:	41 e0       	ldi	r20, 0x01	; 1
    8950:	0e 94 93 46 	call	0x8d26	; 0x8d26 <LED_voidLedOff>
			LCD_voidClear();
    8954:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "LED 2 is OFF");
    8958:	89 e2       	ldi	r24, 0x29	; 41
    895a:	93 e0       	ldi	r25, 0x03	; 3
    895c:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			UART_voidTxString((u8*) "LED 2 is OFF");
    8960:	89 e2       	ldi	r24, 0x29	; 41
    8962:	93 e0       	ldi	r25, 0x03	; 3
    8964:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    8968:	e3 c0       	rjmp	.+454    	; 0x8b30 <LS_voidStartBluetooth+0x2f4>
		} else {
			UART_voidTxString((u8*) "Wrong Choice");
    896a:	82 ef       	ldi	r24, 0xF2	; 242
    896c:	92 e0       	ldi	r25, 0x02	; 2
    896e:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
			UART_voidTxString((u8*) "Please Try again!!");
    8972:	8f ef       	ldi	r24, 0xFF	; 255
    8974:	92 e0       	ldi	r25, 0x02	; 2
    8976:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    897a:	da c0       	rjmp	.+436    	; 0x8b30 <LS_voidStartBluetooth+0x2f4>
		}
	}

	else if (local_u8RXData1 == '3') //LED3
    897c:	89 81       	ldd	r24, Y+1	; 0x01
    897e:	83 33       	cpi	r24, 0x33	; 51
    8980:	09 f0       	breq	.+2      	; 0x8984 <LS_voidStartBluetooth+0x148>
    8982:	42 c0       	rjmp	.+132    	; 0x8a08 <LS_voidStartBluetooth+0x1cc>
			{
		LCD_voidClear();
    8984:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		UART_voidTxString((u8*) "      LED3");
    8988:	86 e3       	ldi	r24, 0x36	; 54
    898a:	93 e0       	ldi	r25, 0x03	; 3
    898c:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
		UART_voidTxString((u8*) "1-ON       2-OFF");
    8990:	88 ec       	ldi	r24, 0xC8	; 200
    8992:	92 e0       	ldi	r25, 0x02	; 2
    8994:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
		do {
			UART_voidRxChar(&local_u8RXData2);
    8998:	ce 01       	movw	r24, r28
    899a:	02 96       	adiw	r24, 0x02	; 2
    899c:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
		} while (local_u8RXData2 == NULL );
    89a0:	8a 81       	ldd	r24, Y+2	; 0x02
    89a2:	88 2f       	mov	r24, r24
    89a4:	90 e0       	ldi	r25, 0x00	; 0
    89a6:	00 97       	sbiw	r24, 0x00	; 0
    89a8:	b9 f3       	breq	.-18     	; 0x8998 <LS_voidStartBluetooth+0x15c>

		if (local_u8RXData2 == '1') {
    89aa:	8a 81       	ldd	r24, Y+2	; 0x02
    89ac:	81 33       	cpi	r24, 0x31	; 49
    89ae:	81 f4       	brne	.+32     	; 0x89d0 <LS_voidStartBluetooth+0x194>
			LED_voidLedOn(LED3_PORT, LED3_PIN, LED_FORWARD_CONNECTION);
    89b0:	82 e0       	ldi	r24, 0x02	; 2
    89b2:	65 e0       	ldi	r22, 0x05	; 5
    89b4:	41 e0       	ldi	r20, 0x01	; 1
    89b6:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <LED_voidLedOn>
			LCD_voidClear();
    89ba:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "LED 3 is ON");
    89be:	81 e4       	ldi	r24, 0x41	; 65
    89c0:	93 e0       	ldi	r25, 0x03	; 3
    89c2:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			UART_voidTxString((u8*) "LED 3 is ON");
    89c6:	81 e4       	ldi	r24, 0x41	; 65
    89c8:	93 e0       	ldi	r25, 0x03	; 3
    89ca:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    89ce:	b0 c0       	rjmp	.+352    	; 0x8b30 <LS_voidStartBluetooth+0x2f4>
		} else if (local_u8RXData2 == '2') {
    89d0:	8a 81       	ldd	r24, Y+2	; 0x02
    89d2:	82 33       	cpi	r24, 0x32	; 50
    89d4:	81 f4       	brne	.+32     	; 0x89f6 <LS_voidStartBluetooth+0x1ba>
			LED_voidLedOff(LED3_PORT, LED3_PIN, LED_FORWARD_CONNECTION);
    89d6:	82 e0       	ldi	r24, 0x02	; 2
    89d8:	65 e0       	ldi	r22, 0x05	; 5
    89da:	41 e0       	ldi	r20, 0x01	; 1
    89dc:	0e 94 93 46 	call	0x8d26	; 0x8d26 <LED_voidLedOff>
			LCD_voidClear();
    89e0:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "LED 3 is OFF");
    89e4:	8d e4       	ldi	r24, 0x4D	; 77
    89e6:	93 e0       	ldi	r25, 0x03	; 3
    89e8:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			UART_voidTxString((u8*) "LED 3 is OFF");
    89ec:	8d e4       	ldi	r24, 0x4D	; 77
    89ee:	93 e0       	ldi	r25, 0x03	; 3
    89f0:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    89f4:	9d c0       	rjmp	.+314    	; 0x8b30 <LS_voidStartBluetooth+0x2f4>
		} else {
			UART_voidTxString((u8*) "Wrong Choice");
    89f6:	82 ef       	ldi	r24, 0xF2	; 242
    89f8:	92 e0       	ldi	r25, 0x02	; 2
    89fa:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
			UART_voidTxString((u8*) "Please Try again!!");
    89fe:	8f ef       	ldi	r24, 0xFF	; 255
    8a00:	92 e0       	ldi	r25, 0x02	; 2
    8a02:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    8a06:	94 c0       	rjmp	.+296    	; 0x8b30 <LS_voidStartBluetooth+0x2f4>
		}
	} else if (local_u8RXData1 == '4') //LED4
    8a08:	89 81       	ldd	r24, Y+1	; 0x01
    8a0a:	84 33       	cpi	r24, 0x34	; 52
    8a0c:	09 f0       	breq	.+2      	; 0x8a10 <LS_voidStartBluetooth+0x1d4>
    8a0e:	42 c0       	rjmp	.+132    	; 0x8a94 <LS_voidStartBluetooth+0x258>
			{
		LCD_voidClear();
    8a10:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		UART_voidTxString((u8*) "      LED4");
    8a14:	8a e5       	ldi	r24, 0x5A	; 90
    8a16:	93 e0       	ldi	r25, 0x03	; 3
    8a18:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

		UART_voidTxString((u8*) "1-ON       2-OFF");
    8a1c:	88 ec       	ldi	r24, 0xC8	; 200
    8a1e:	92 e0       	ldi	r25, 0x02	; 2
    8a20:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
		do {
			UART_voidRxChar(&local_u8RXData2);
    8a24:	ce 01       	movw	r24, r28
    8a26:	02 96       	adiw	r24, 0x02	; 2
    8a28:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
		} while (local_u8RXData2 == NULL );
    8a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    8a2e:	88 2f       	mov	r24, r24
    8a30:	90 e0       	ldi	r25, 0x00	; 0
    8a32:	00 97       	sbiw	r24, 0x00	; 0
    8a34:	b9 f3       	breq	.-18     	; 0x8a24 <LS_voidStartBluetooth+0x1e8>
		if (local_u8RXData2 == '1') {
    8a36:	8a 81       	ldd	r24, Y+2	; 0x02
    8a38:	81 33       	cpi	r24, 0x31	; 49
    8a3a:	81 f4       	brne	.+32     	; 0x8a5c <LS_voidStartBluetooth+0x220>
			LED_voidLedOn(LED4_PORT, LED4_PIN, LED_FORWARD_CONNECTION);
    8a3c:	82 e0       	ldi	r24, 0x02	; 2
    8a3e:	66 e0       	ldi	r22, 0x06	; 6
    8a40:	41 e0       	ldi	r20, 0x01	; 1
    8a42:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <LED_voidLedOn>
			LCD_voidClear();
    8a46:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "LED 4 is ON");
    8a4a:	85 e6       	ldi	r24, 0x65	; 101
    8a4c:	93 e0       	ldi	r25, 0x03	; 3
    8a4e:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			UART_voidTxString((u8*) "LED 4 is ON");
    8a52:	85 e6       	ldi	r24, 0x65	; 101
    8a54:	93 e0       	ldi	r25, 0x03	; 3
    8a56:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    8a5a:	6a c0       	rjmp	.+212    	; 0x8b30 <LS_voidStartBluetooth+0x2f4>
		} else if (local_u8RXData2 == '2') {
    8a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    8a5e:	82 33       	cpi	r24, 0x32	; 50
    8a60:	81 f4       	brne	.+32     	; 0x8a82 <LS_voidStartBluetooth+0x246>
			LED_voidLedOff(LED4_PORT, LED4_PIN, LED_FORWARD_CONNECTION);
    8a62:	82 e0       	ldi	r24, 0x02	; 2
    8a64:	66 e0       	ldi	r22, 0x06	; 6
    8a66:	41 e0       	ldi	r20, 0x01	; 1
    8a68:	0e 94 93 46 	call	0x8d26	; 0x8d26 <LED_voidLedOff>
			LCD_voidClear();
    8a6c:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "LED 4 is OFF");
    8a70:	81 e7       	ldi	r24, 0x71	; 113
    8a72:	93 e0       	ldi	r25, 0x03	; 3
    8a74:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			UART_voidTxString((u8*) "LED 4 is OFF");
    8a78:	81 e7       	ldi	r24, 0x71	; 113
    8a7a:	93 e0       	ldi	r25, 0x03	; 3
    8a7c:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    8a80:	57 c0       	rjmp	.+174    	; 0x8b30 <LS_voidStartBluetooth+0x2f4>
		} else {
			UART_voidTxString((u8*) "Wrong Choice");
    8a82:	82 ef       	ldi	r24, 0xF2	; 242
    8a84:	92 e0       	ldi	r25, 0x02	; 2
    8a86:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
			UART_voidTxString((u8*) "Please Try again!!");
    8a8a:	8f ef       	ldi	r24, 0xFF	; 255
    8a8c:	92 e0       	ldi	r25, 0x02	; 2
    8a8e:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    8a92:	4e c0       	rjmp	.+156    	; 0x8b30 <LS_voidStartBluetooth+0x2f4>
		}
	}

	else if (local_u8RXData1 == '5') //LED5
    8a94:	89 81       	ldd	r24, Y+1	; 0x01
    8a96:	85 33       	cpi	r24, 0x35	; 53
    8a98:	09 f0       	breq	.+2      	; 0x8a9c <LS_voidStartBluetooth+0x260>
    8a9a:	42 c0       	rjmp	.+132    	; 0x8b20 <LS_voidStartBluetooth+0x2e4>
			{
		LCD_voidClear();
    8a9c:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		UART_voidTxString((u8*) "      LED5");
    8aa0:	8e e7       	ldi	r24, 0x7E	; 126
    8aa2:	93 e0       	ldi	r25, 0x03	; 3
    8aa4:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

		UART_voidTxString((u8*) "1-ON       2-OFF");
    8aa8:	88 ec       	ldi	r24, 0xC8	; 200
    8aaa:	92 e0       	ldi	r25, 0x02	; 2
    8aac:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
		do {
			UART_voidRxChar(&local_u8RXData2);
    8ab0:	ce 01       	movw	r24, r28
    8ab2:	02 96       	adiw	r24, 0x02	; 2
    8ab4:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
		} while (local_u8RXData2 == NULL );
    8ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    8aba:	88 2f       	mov	r24, r24
    8abc:	90 e0       	ldi	r25, 0x00	; 0
    8abe:	00 97       	sbiw	r24, 0x00	; 0
    8ac0:	b9 f3       	breq	.-18     	; 0x8ab0 <LS_voidStartBluetooth+0x274>
		if (local_u8RXData2 == '1') {
    8ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    8ac4:	81 33       	cpi	r24, 0x31	; 49
    8ac6:	81 f4       	brne	.+32     	; 0x8ae8 <LS_voidStartBluetooth+0x2ac>
			LED_voidLedOn(LED5_PORT, LED5_PIN, LED_FORWARD_CONNECTION);
    8ac8:	82 e0       	ldi	r24, 0x02	; 2
    8aca:	67 e0       	ldi	r22, 0x07	; 7
    8acc:	41 e0       	ldi	r20, 0x01	; 1
    8ace:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <LED_voidLedOn>
			LCD_voidClear();
    8ad2:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "LED 5 is ON");
    8ad6:	89 e8       	ldi	r24, 0x89	; 137
    8ad8:	93 e0       	ldi	r25, 0x03	; 3
    8ada:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			UART_voidTxString((u8*) "LED 5 is ON");
    8ade:	89 e8       	ldi	r24, 0x89	; 137
    8ae0:	93 e0       	ldi	r25, 0x03	; 3
    8ae2:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    8ae6:	24 c0       	rjmp	.+72     	; 0x8b30 <LS_voidStartBluetooth+0x2f4>
		} else if (local_u8RXData2 == '2') {
    8ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    8aea:	82 33       	cpi	r24, 0x32	; 50
    8aec:	81 f4       	brne	.+32     	; 0x8b0e <LS_voidStartBluetooth+0x2d2>
			LED_voidLedOff(LED5_PORT, LED5_PIN, LED_FORWARD_CONNECTION);
    8aee:	82 e0       	ldi	r24, 0x02	; 2
    8af0:	67 e0       	ldi	r22, 0x07	; 7
    8af2:	41 e0       	ldi	r20, 0x01	; 1
    8af4:	0e 94 93 46 	call	0x8d26	; 0x8d26 <LED_voidLedOff>
			LCD_voidClear();
    8af8:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
			LCD_voidDisplayString((u8*) "LED 5 is OFF");
    8afc:	85 e9       	ldi	r24, 0x95	; 149
    8afe:	93 e0       	ldi	r25, 0x03	; 3
    8b00:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
			UART_voidTxString((u8*) "LED 5 is OFF");
    8b04:	85 e9       	ldi	r24, 0x95	; 149
    8b06:	93 e0       	ldi	r25, 0x03	; 3
    8b08:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    8b0c:	11 c0       	rjmp	.+34     	; 0x8b30 <LS_voidStartBluetooth+0x2f4>
		} else {
			UART_voidTxString((u8*) "Wrong Choice");
    8b0e:	82 ef       	ldi	r24, 0xF2	; 242
    8b10:	92 e0       	ldi	r25, 0x02	; 2
    8b12:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
			UART_voidTxString((u8*) "Please Try again!!");
    8b16:	8f ef       	ldi	r24, 0xFF	; 255
    8b18:	92 e0       	ldi	r25, 0x02	; 2
    8b1a:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    8b1e:	08 c0       	rjmp	.+16     	; 0x8b30 <LS_voidStartBluetooth+0x2f4>
		}
	} else {
		UART_voidTxString((u8*) "Wrong Choice");
    8b20:	82 ef       	ldi	r24, 0xF2	; 242
    8b22:	92 e0       	ldi	r25, 0x02	; 2
    8b24:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
		UART_voidTxString((u8*) "Please Try again!!");
    8b28:	8f ef       	ldi	r24, 0xFF	; 255
    8b2a:	92 e0       	ldi	r25, 0x02	; 2
    8b2c:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	}
}
    8b30:	0f 90       	pop	r0
    8b32:	0f 90       	pop	r0
    8b34:	cf 91       	pop	r28
    8b36:	df 91       	pop	r29
    8b38:	08 95       	ret

00008b3a <SERVO_voidInit>:
#include "SERVO_interface.h"
#include "SERVO_config.h"


void SERVO_voidInit()
{
    8b3a:	df 93       	push	r29
    8b3c:	cf 93       	push	r28
    8b3e:	cd b7       	in	r28, 0x3d	; 61
    8b40:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(SERVO_PORT, SERVO_PIN, DIO_PIN_OUTPUT);
    8b42:	83 e0       	ldi	r24, 0x03	; 3
    8b44:	65 e0       	ldi	r22, 0x05	; 5
    8b46:	41 e0       	ldi	r20, 0x01	; 1
    8b48:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	PWM1_voidInitChannel_1A();
    8b4c:	0e 94 66 30 	call	0x60cc	; 0x60cc <PWM1_voidInitChannel_1A>

}
    8b50:	cf 91       	pop	r28
    8b52:	df 91       	pop	r29
    8b54:	08 95       	ret

00008b56 <SERVO_voidRotate0_180>:

void SERVO_voidRotate0_180(u8 copy_u8Angle)
{
    8b56:	df 93       	push	r29
    8b58:	cf 93       	push	r28
    8b5a:	0f 92       	push	r0
    8b5c:	cd b7       	in	r28, 0x3d	; 61
    8b5e:	de b7       	in	r29, 0x3e	; 62
    8b60:	89 83       	std	Y+1, r24	; 0x01

	PWM1_voidGenerate_PWM_Channel_1A(50,((f32)copy_u8Angle/36)+5 );
    8b62:	89 81       	ldd	r24, Y+1	; 0x01
    8b64:	88 2f       	mov	r24, r24
    8b66:	90 e0       	ldi	r25, 0x00	; 0
    8b68:	a0 e0       	ldi	r26, 0x00	; 0
    8b6a:	b0 e0       	ldi	r27, 0x00	; 0
    8b6c:	bc 01       	movw	r22, r24
    8b6e:	cd 01       	movw	r24, r26
    8b70:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    8b74:	dc 01       	movw	r26, r24
    8b76:	cb 01       	movw	r24, r22
    8b78:	bc 01       	movw	r22, r24
    8b7a:	cd 01       	movw	r24, r26
    8b7c:	20 e0       	ldi	r18, 0x00	; 0
    8b7e:	30 e0       	ldi	r19, 0x00	; 0
    8b80:	40 e1       	ldi	r20, 0x10	; 16
    8b82:	52 e4       	ldi	r21, 0x42	; 66
    8b84:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    8b88:	dc 01       	movw	r26, r24
    8b8a:	cb 01       	movw	r24, r22
    8b8c:	bc 01       	movw	r22, r24
    8b8e:	cd 01       	movw	r24, r26
    8b90:	20 e0       	ldi	r18, 0x00	; 0
    8b92:	30 e0       	ldi	r19, 0x00	; 0
    8b94:	40 ea       	ldi	r20, 0xA0	; 160
    8b96:	50 e4       	ldi	r21, 0x40	; 64
    8b98:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    8b9c:	dc 01       	movw	r26, r24
    8b9e:	cb 01       	movw	r24, r22
    8ba0:	9c 01       	movw	r18, r24
    8ba2:	ad 01       	movw	r20, r26
    8ba4:	82 e3       	ldi	r24, 0x32	; 50
    8ba6:	90 e0       	ldi	r25, 0x00	; 0
    8ba8:	ba 01       	movw	r22, r20
    8baa:	a9 01       	movw	r20, r18
    8bac:	0e 94 97 30 	call	0x612e	; 0x612e <PWM1_voidGenerate_PWM_Channel_1A>
	//PWM1_voidGenerate_PWM_Channel_1A(50,5 );
}
    8bb0:	0f 90       	pop	r0
    8bb2:	cf 91       	pop	r28
    8bb4:	df 91       	pop	r29
    8bb6:	08 95       	ret

00008bb8 <RELAY_voidInit>:
#include "RELAY_interface.h"
/*MCAL*/
#include "DIO_interface.h"

void RELAY_voidInit (void)
{
    8bb8:	df 93       	push	r29
    8bba:	cf 93       	push	r28
    8bbc:	cd b7       	in	r28, 0x3d	; 61
    8bbe:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(RELAY_COIL_PORT,RELAY_COIL_PIN,DIO_PIN_OUTPUT);
    8bc0:	82 e0       	ldi	r24, 0x02	; 2
    8bc2:	62 e0       	ldi	r22, 0x02	; 2
    8bc4:	41 e0       	ldi	r20, 0x01	; 1
    8bc6:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
}
    8bca:	cf 91       	pop	r28
    8bcc:	df 91       	pop	r29
    8bce:	08 95       	ret

00008bd0 <RELAY_voidOn>:
void RELAY_voidOn   (void)
{
    8bd0:	df 93       	push	r29
    8bd2:	cf 93       	push	r28
    8bd4:	cd b7       	in	r28, 0x3d	; 61
    8bd6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(RELAY_COIL_PORT,RELAY_COIL_PIN,DIO_PIN_HIGH);
    8bd8:	82 e0       	ldi	r24, 0x02	; 2
    8bda:	62 e0       	ldi	r22, 0x02	; 2
    8bdc:	41 e0       	ldi	r20, 0x01	; 1
    8bde:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
}
    8be2:	cf 91       	pop	r28
    8be4:	df 91       	pop	r29
    8be6:	08 95       	ret

00008be8 <RELAY_voidOff>:
void RELAY_voidOff  (void)
{
    8be8:	df 93       	push	r29
    8bea:	cf 93       	push	r28
    8bec:	cd b7       	in	r28, 0x3d	; 61
    8bee:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(RELAY_COIL_PORT,RELAY_COIL_PIN,DIO_PIN_LOW);
    8bf0:	82 e0       	ldi	r24, 0x02	; 2
    8bf2:	62 e0       	ldi	r22, 0x02	; 2
    8bf4:	40 e0       	ldi	r20, 0x00	; 0
    8bf6:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
}
    8bfa:	cf 91       	pop	r28
    8bfc:	df 91       	pop	r29
    8bfe:	08 95       	ret

00008c00 <LM35_voidInit>:
/*HAL*/
#include "LM35_interface.h"
#include "LM35_config.h"

void LM35_voidInit ()
{
    8c00:	df 93       	push	r29
    8c02:	cf 93       	push	r28
    8c04:	cd b7       	in	r28, 0x3d	; 61
    8c06:	de b7       	in	r29, 0x3e	; 62
	//Choose Internal Voltage Reference = 2.56 V
	ADC_voidInit(ADC_REFERENCE_INTERNAL);
    8c08:	83 e0       	ldi	r24, 0x03	; 3
    8c0a:	0e 94 45 37 	call	0x6e8a	; 0x6e8a <ADC_voidInit>
}
    8c0e:	cf 91       	pop	r28
    8c10:	df 91       	pop	r29
    8c12:	08 95       	ret

00008c14 <LM35_voidGetTemp>:
void LM35_voidGetTemp (u8 copy_u8FeedbackPin,u8* copy_pTemperature)
{
    8c14:	df 93       	push	r29
    8c16:	cf 93       	push	r28
    8c18:	cd b7       	in	r28, 0x3d	; 61
    8c1a:	de b7       	in	r29, 0x3e	; 62
    8c1c:	27 97       	sbiw	r28, 0x07	; 7
    8c1e:	0f b6       	in	r0, 0x3f	; 63
    8c20:	f8 94       	cli
    8c22:	de bf       	out	0x3e, r29	; 62
    8c24:	0f be       	out	0x3f, r0	; 63
    8c26:	cd bf       	out	0x3d, r28	; 61
    8c28:	8d 83       	std	Y+5, r24	; 0x05
    8c2a:	7f 83       	std	Y+7, r23	; 0x07
    8c2c:	6e 83       	std	Y+6, r22	; 0x06
	if (copy_pTemperature != NULL)
    8c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    8c30:	9f 81       	ldd	r25, Y+7	; 0x07
    8c32:	00 97       	sbiw	r24, 0x00	; 0
    8c34:	89 f1       	breq	.+98     	; 0x8c98 <LM35_voidGetTemp+0x84>
	{
		//Choose Which ADC Channel Will Receive LM35 Feedback Signal
		DIO_voidSetPinDirection(LM35_FEEDBACK_PORT,copy_u8FeedbackPin,DIO_PIN_INPUT);
    8c36:	80 e0       	ldi	r24, 0x00	; 0
    8c38:	6d 81       	ldd	r22, Y+5	; 0x05
    8c3a:	40 e0       	ldi	r20, 0x00	; 0
    8c3c:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
		u16 copy_u16AnalogValue, copy_u16DigitalValue;
		ADC_voidGetDigiatlValue(copy_u8FeedbackPin,&copy_u16DigitalValue);
    8c40:	9e 01       	movw	r18, r28
    8c42:	2d 5f       	subi	r18, 0xFD	; 253
    8c44:	3f 4f       	sbci	r19, 0xFF	; 255
    8c46:	8d 81       	ldd	r24, Y+5	; 0x05
    8c48:	b9 01       	movw	r22, r18
    8c4a:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <ADC_voidGetDigiatlValue>
		copy_u16AnalogValue = (copy_u16DigitalValue*2560UL)/1024;
    8c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    8c50:	9c 81       	ldd	r25, Y+4	; 0x04
    8c52:	cc 01       	movw	r24, r24
    8c54:	a0 e0       	ldi	r26, 0x00	; 0
    8c56:	b0 e0       	ldi	r27, 0x00	; 0
    8c58:	20 e0       	ldi	r18, 0x00	; 0
    8c5a:	3a e0       	ldi	r19, 0x0A	; 10
    8c5c:	40 e0       	ldi	r20, 0x00	; 0
    8c5e:	50 e0       	ldi	r21, 0x00	; 0
    8c60:	bc 01       	movw	r22, r24
    8c62:	cd 01       	movw	r24, r26
    8c64:	0e 94 66 5b 	call	0xb6cc	; 0xb6cc <__mulsi3>
    8c68:	dc 01       	movw	r26, r24
    8c6a:	cb 01       	movw	r24, r22
    8c6c:	07 2e       	mov	r0, r23
    8c6e:	7a e0       	ldi	r23, 0x0A	; 10
    8c70:	b6 95       	lsr	r27
    8c72:	a7 95       	ror	r26
    8c74:	97 95       	ror	r25
    8c76:	87 95       	ror	r24
    8c78:	7a 95       	dec	r23
    8c7a:	d1 f7       	brne	.-12     	; 0x8c70 <LM35_voidGetTemp+0x5c>
    8c7c:	70 2d       	mov	r23, r0
    8c7e:	9a 83       	std	Y+2, r25	; 0x02
    8c80:	89 83       	std	Y+1, r24	; 0x01
		*copy_pTemperature  = (copy_u16AnalogValue/10);
    8c82:	89 81       	ldd	r24, Y+1	; 0x01
    8c84:	9a 81       	ldd	r25, Y+2	; 0x02
    8c86:	2a e0       	ldi	r18, 0x0A	; 10
    8c88:	30 e0       	ldi	r19, 0x00	; 0
    8c8a:	b9 01       	movw	r22, r18
    8c8c:	0e 94 91 5b 	call	0xb722	; 0xb722 <__udivmodhi4>
    8c90:	cb 01       	movw	r24, r22
    8c92:	ee 81       	ldd	r30, Y+6	; 0x06
    8c94:	ff 81       	ldd	r31, Y+7	; 0x07
    8c96:	80 83       	st	Z, r24
	} 
	else
	{
		//Return Error Statement
	}
}
    8c98:	27 96       	adiw	r28, 0x07	; 7
    8c9a:	0f b6       	in	r0, 0x3f	; 63
    8c9c:	f8 94       	cli
    8c9e:	de bf       	out	0x3e, r29	; 62
    8ca0:	0f be       	out	0x3f, r0	; 63
    8ca2:	cd bf       	out	0x3d, r28	; 61
    8ca4:	cf 91       	pop	r28
    8ca6:	df 91       	pop	r29
    8ca8:	08 95       	ret

00008caa <LED_voidInit>:
/**********HAL**********/
#include "LED_interface.h"
#include "LED_config.h"

void LED_voidInit       (u8 copy_u8LedPortId, u8 copy_u8LedPinId)//Function For Intilization a Led
{
    8caa:	df 93       	push	r29
    8cac:	cf 93       	push	r28
    8cae:	00 d0       	rcall	.+0      	; 0x8cb0 <LED_voidInit+0x6>
    8cb0:	cd b7       	in	r28, 0x3d	; 61
    8cb2:	de b7       	in	r29, 0x3e	; 62
    8cb4:	89 83       	std	Y+1, r24	; 0x01
    8cb6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(copy_u8LedPortId, copy_u8LedPinId, DIO_PIN_OUTPUT);//Set Pin Of The Led As Output
    8cb8:	89 81       	ldd	r24, Y+1	; 0x01
    8cba:	6a 81       	ldd	r22, Y+2	; 0x02
    8cbc:	41 e0       	ldi	r20, 0x01	; 1
    8cbe:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
}
    8cc2:	0f 90       	pop	r0
    8cc4:	0f 90       	pop	r0
    8cc6:	cf 91       	pop	r28
    8cc8:	df 91       	pop	r29
    8cca:	08 95       	ret

00008ccc <LED_voidLedOn>:

void LED_voidLedOn      (u8 copy_u8LedPortId, u8 copy_u8LedPinId, u8 copy_u8LedConnectionType)//Function To Turn Led On In (For/Rev) Connection
{
    8ccc:	df 93       	push	r29
    8cce:	cf 93       	push	r28
    8cd0:	00 d0       	rcall	.+0      	; 0x8cd2 <LED_voidLedOn+0x6>
    8cd2:	00 d0       	rcall	.+0      	; 0x8cd4 <LED_voidLedOn+0x8>
    8cd4:	0f 92       	push	r0
    8cd6:	cd b7       	in	r28, 0x3d	; 61
    8cd8:	de b7       	in	r29, 0x3e	; 62
    8cda:	89 83       	std	Y+1, r24	; 0x01
    8cdc:	6a 83       	std	Y+2, r22	; 0x02
    8cde:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8LedConnectionType)//Forward Or Reverse
    8ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    8ce2:	28 2f       	mov	r18, r24
    8ce4:	30 e0       	ldi	r19, 0x00	; 0
    8ce6:	3d 83       	std	Y+5, r19	; 0x05
    8ce8:	2c 83       	std	Y+4, r18	; 0x04
    8cea:	8c 81       	ldd	r24, Y+4	; 0x04
    8cec:	9d 81       	ldd	r25, Y+5	; 0x05
    8cee:	81 30       	cpi	r24, 0x01	; 1
    8cf0:	91 05       	cpc	r25, r1
    8cf2:	31 f0       	breq	.+12     	; 0x8d00 <LED_voidLedOn+0x34>
    8cf4:	2c 81       	ldd	r18, Y+4	; 0x04
    8cf6:	3d 81       	ldd	r19, Y+5	; 0x05
    8cf8:	22 30       	cpi	r18, 0x02	; 2
    8cfa:	31 05       	cpc	r19, r1
    8cfc:	39 f0       	breq	.+14     	; 0x8d0c <LED_voidLedOn+0x40>
    8cfe:	0b c0       	rjmp	.+22     	; 0x8d16 <LED_voidLedOn+0x4a>
	{
		case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPortId,copy_u8LedPinId,DIO_PIN_HIGH);//High => On Led
    8d00:	89 81       	ldd	r24, Y+1	; 0x01
    8d02:	6a 81       	ldd	r22, Y+2	; 0x02
    8d04:	41 e0       	ldi	r20, 0x01	; 1
    8d06:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
    8d0a:	05 c0       	rjmp	.+10     	; 0x8d16 <LED_voidLedOn+0x4a>
		break;
		
		case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPortId,copy_u8LedPinId,DIO_PIN_LOW);//Low  => On Led
    8d0c:	89 81       	ldd	r24, Y+1	; 0x01
    8d0e:	6a 81       	ldd	r22, Y+2	; 0x02
    8d10:	40 e0       	ldi	r20, 0x00	; 0
    8d12:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
		break;
		
	}
}
    8d16:	0f 90       	pop	r0
    8d18:	0f 90       	pop	r0
    8d1a:	0f 90       	pop	r0
    8d1c:	0f 90       	pop	r0
    8d1e:	0f 90       	pop	r0
    8d20:	cf 91       	pop	r28
    8d22:	df 91       	pop	r29
    8d24:	08 95       	ret

00008d26 <LED_voidLedOff>:
void LED_voidLedOff     (u8 copy_u8LedPortId, u8 copy_u8LedPinId, u8 copy_u8LedConnectionType)//Function To Turn Led Off In (For/Rev) Connection
{
    8d26:	df 93       	push	r29
    8d28:	cf 93       	push	r28
    8d2a:	00 d0       	rcall	.+0      	; 0x8d2c <LED_voidLedOff+0x6>
    8d2c:	00 d0       	rcall	.+0      	; 0x8d2e <LED_voidLedOff+0x8>
    8d2e:	0f 92       	push	r0
    8d30:	cd b7       	in	r28, 0x3d	; 61
    8d32:	de b7       	in	r29, 0x3e	; 62
    8d34:	89 83       	std	Y+1, r24	; 0x01
    8d36:	6a 83       	std	Y+2, r22	; 0x02
    8d38:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8LedConnectionType)//Forward Or Reverse
    8d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    8d3c:	28 2f       	mov	r18, r24
    8d3e:	30 e0       	ldi	r19, 0x00	; 0
    8d40:	3d 83       	std	Y+5, r19	; 0x05
    8d42:	2c 83       	std	Y+4, r18	; 0x04
    8d44:	8c 81       	ldd	r24, Y+4	; 0x04
    8d46:	9d 81       	ldd	r25, Y+5	; 0x05
    8d48:	81 30       	cpi	r24, 0x01	; 1
    8d4a:	91 05       	cpc	r25, r1
    8d4c:	31 f0       	breq	.+12     	; 0x8d5a <LED_voidLedOff+0x34>
    8d4e:	2c 81       	ldd	r18, Y+4	; 0x04
    8d50:	3d 81       	ldd	r19, Y+5	; 0x05
    8d52:	22 30       	cpi	r18, 0x02	; 2
    8d54:	31 05       	cpc	r19, r1
    8d56:	39 f0       	breq	.+14     	; 0x8d66 <LED_voidLedOff+0x40>
    8d58:	0b c0       	rjmp	.+22     	; 0x8d70 <LED_voidLedOff+0x4a>
	{
		case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPortId,copy_u8LedPinId,DIO_PIN_LOW);//Low => Off Led
    8d5a:	89 81       	ldd	r24, Y+1	; 0x01
    8d5c:	6a 81       	ldd	r22, Y+2	; 0x02
    8d5e:	40 e0       	ldi	r20, 0x00	; 0
    8d60:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
    8d64:	05 c0       	rjmp	.+10     	; 0x8d70 <LED_voidLedOff+0x4a>
		break;
		
		case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPortId,copy_u8LedPinId,DIO_PIN_HIGH);//High  => Off Led
    8d66:	89 81       	ldd	r24, Y+1	; 0x01
    8d68:	6a 81       	ldd	r22, Y+2	; 0x02
    8d6a:	41 e0       	ldi	r20, 0x01	; 1
    8d6c:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
		break;
	}
		
}
    8d70:	0f 90       	pop	r0
    8d72:	0f 90       	pop	r0
    8d74:	0f 90       	pop	r0
    8d76:	0f 90       	pop	r0
    8d78:	0f 90       	pop	r0
    8d7a:	cf 91       	pop	r28
    8d7c:	df 91       	pop	r29
    8d7e:	08 95       	ret

00008d80 <LED_voidLedToggle>:
void LED_voidLedToggle  (u8 copy_u8LedPortId, u8 copy_u8LedPinId)//Function To Toggle Led 
{
    8d80:	df 93       	push	r29
    8d82:	cf 93       	push	r28
    8d84:	00 d0       	rcall	.+0      	; 0x8d86 <LED_voidLedToggle+0x6>
    8d86:	cd b7       	in	r28, 0x3d	; 61
    8d88:	de b7       	in	r29, 0x3e	; 62
    8d8a:	89 83       	std	Y+1, r24	; 0x01
    8d8c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidTogglePinValue(copy_u8LedPortId, copy_u8LedPinId);
    8d8e:	89 81       	ldd	r24, Y+1	; 0x01
    8d90:	6a 81       	ldd	r22, Y+2	; 0x02
    8d92:	0e 94 18 34 	call	0x6830	; 0x6830 <DIO_voidTogglePinValue>
}
    8d96:	0f 90       	pop	r0
    8d98:	0f 90       	pop	r0
    8d9a:	cf 91       	pop	r28
    8d9c:	df 91       	pop	r29
    8d9e:	08 95       	ret

00008da0 <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_interface.h"
#include "LCD_private.h"

void LCD_voidInit (void)
{
    8da0:	0f 93       	push	r16
    8da2:	1f 93       	push	r17
    8da4:	df 93       	push	r29
    8da6:	cf 93       	push	r28
    8da8:	cd b7       	in	r28, 0x3d	; 61
    8daa:	de b7       	in	r29, 0x3e	; 62
    8dac:	c8 56       	subi	r28, 0x68	; 104
    8dae:	d0 40       	sbci	r29, 0x00	; 0
    8db0:	0f b6       	in	r0, 0x3f	; 63
    8db2:	f8 94       	cli
    8db4:	de bf       	out	0x3e, r29	; 62
    8db6:	0f be       	out	0x3f, r0	; 63
    8db8:	cd bf       	out	0x3d, r28	; 61
	//Initialize LCD Pins As Output Pins
	DIO_voidSetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
    8dba:	80 e0       	ldi	r24, 0x00	; 0
    8dbc:	64 e0       	ldi	r22, 0x04	; 4
    8dbe:	41 e0       	ldi	r20, 0x01	; 1
    8dc0:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
    8dc4:	80 e0       	ldi	r24, 0x00	; 0
    8dc6:	65 e0       	ldi	r22, 0x05	; 5
    8dc8:	41 e0       	ldi	r20, 0x01	; 1
    8dca:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
    8dce:	80 e0       	ldi	r24, 0x00	; 0
    8dd0:	66 e0       	ldi	r22, 0x06	; 6
    8dd2:	41 e0       	ldi	r20, 0x01	; 1
    8dd4:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
    8dd8:	80 e0       	ldi	r24, 0x00	; 0
    8dda:	67 e0       	ldi	r22, 0x07	; 7
    8ddc:	41 e0       	ldi	r20, 0x01	; 1
    8dde:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    8de2:	81 e0       	ldi	r24, 0x01	; 1
    8de4:	65 e0       	ldi	r22, 0x05	; 5
    8de6:	41 e0       	ldi	r20, 0x01	; 1
    8de8:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    8dec:	81 e0       	ldi	r24, 0x01	; 1
    8dee:	66 e0       	ldi	r22, 0x06	; 6
    8df0:	41 e0       	ldi	r20, 0x01	; 1
    8df2:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT,LCD_E_PIN,DIO_PIN_OUTPUT);
    8df6:	81 e0       	ldi	r24, 0x01	; 1
    8df8:	67 e0       	ldi	r22, 0x07	; 7
    8dfa:	41 e0       	ldi	r20, 0x01	; 1
    8dfc:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
    8e00:	fe 01       	movw	r30, r28
    8e02:	eb 59       	subi	r30, 0x9B	; 155
    8e04:	ff 4f       	sbci	r31, 0xFF	; 255
    8e06:	80 e0       	ldi	r24, 0x00	; 0
    8e08:	90 e0       	ldi	r25, 0x00	; 0
    8e0a:	ac e0       	ldi	r26, 0x0C	; 12
    8e0c:	b2 e4       	ldi	r27, 0x42	; 66
    8e0e:	80 83       	st	Z, r24
    8e10:	91 83       	std	Z+1, r25	; 0x01
    8e12:	a2 83       	std	Z+2, r26	; 0x02
    8e14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8e16:	8e 01       	movw	r16, r28
    8e18:	0f 59       	subi	r16, 0x9F	; 159
    8e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    8e1c:	fe 01       	movw	r30, r28
    8e1e:	eb 59       	subi	r30, 0x9B	; 155
    8e20:	ff 4f       	sbci	r31, 0xFF	; 255
    8e22:	60 81       	ld	r22, Z
    8e24:	71 81       	ldd	r23, Z+1	; 0x01
    8e26:	82 81       	ldd	r24, Z+2	; 0x02
    8e28:	93 81       	ldd	r25, Z+3	; 0x03
    8e2a:	20 e0       	ldi	r18, 0x00	; 0
    8e2c:	30 e0       	ldi	r19, 0x00	; 0
    8e2e:	4a e7       	ldi	r20, 0x7A	; 122
    8e30:	55 e4       	ldi	r21, 0x45	; 69
    8e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8e36:	dc 01       	movw	r26, r24
    8e38:	cb 01       	movw	r24, r22
    8e3a:	f8 01       	movw	r30, r16
    8e3c:	80 83       	st	Z, r24
    8e3e:	91 83       	std	Z+1, r25	; 0x01
    8e40:	a2 83       	std	Z+2, r26	; 0x02
    8e42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8e44:	fe 01       	movw	r30, r28
    8e46:	ef 59       	subi	r30, 0x9F	; 159
    8e48:	ff 4f       	sbci	r31, 0xFF	; 255
    8e4a:	60 81       	ld	r22, Z
    8e4c:	71 81       	ldd	r23, Z+1	; 0x01
    8e4e:	82 81       	ldd	r24, Z+2	; 0x02
    8e50:	93 81       	ldd	r25, Z+3	; 0x03
    8e52:	20 e0       	ldi	r18, 0x00	; 0
    8e54:	30 e0       	ldi	r19, 0x00	; 0
    8e56:	40 e8       	ldi	r20, 0x80	; 128
    8e58:	5f e3       	ldi	r21, 0x3F	; 63
    8e5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8e5e:	88 23       	and	r24, r24
    8e60:	44 f4       	brge	.+16     	; 0x8e72 <LCD_voidInit+0xd2>
		__ticks = 1;
    8e62:	fe 01       	movw	r30, r28
    8e64:	e1 5a       	subi	r30, 0xA1	; 161
    8e66:	ff 4f       	sbci	r31, 0xFF	; 255
    8e68:	81 e0       	ldi	r24, 0x01	; 1
    8e6a:	90 e0       	ldi	r25, 0x00	; 0
    8e6c:	91 83       	std	Z+1, r25	; 0x01
    8e6e:	80 83       	st	Z, r24
    8e70:	64 c0       	rjmp	.+200    	; 0x8f3a <LCD_voidInit+0x19a>
	else if (__tmp > 65535)
    8e72:	fe 01       	movw	r30, r28
    8e74:	ef 59       	subi	r30, 0x9F	; 159
    8e76:	ff 4f       	sbci	r31, 0xFF	; 255
    8e78:	60 81       	ld	r22, Z
    8e7a:	71 81       	ldd	r23, Z+1	; 0x01
    8e7c:	82 81       	ldd	r24, Z+2	; 0x02
    8e7e:	93 81       	ldd	r25, Z+3	; 0x03
    8e80:	20 e0       	ldi	r18, 0x00	; 0
    8e82:	3f ef       	ldi	r19, 0xFF	; 255
    8e84:	4f e7       	ldi	r20, 0x7F	; 127
    8e86:	57 e4       	ldi	r21, 0x47	; 71
    8e88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    8e8c:	18 16       	cp	r1, r24
    8e8e:	0c f0       	brlt	.+2      	; 0x8e92 <LCD_voidInit+0xf2>
    8e90:	43 c0       	rjmp	.+134    	; 0x8f18 <LCD_voidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8e92:	fe 01       	movw	r30, r28
    8e94:	eb 59       	subi	r30, 0x9B	; 155
    8e96:	ff 4f       	sbci	r31, 0xFF	; 255
    8e98:	60 81       	ld	r22, Z
    8e9a:	71 81       	ldd	r23, Z+1	; 0x01
    8e9c:	82 81       	ldd	r24, Z+2	; 0x02
    8e9e:	93 81       	ldd	r25, Z+3	; 0x03
    8ea0:	20 e0       	ldi	r18, 0x00	; 0
    8ea2:	30 e0       	ldi	r19, 0x00	; 0
    8ea4:	40 e2       	ldi	r20, 0x20	; 32
    8ea6:	51 e4       	ldi	r21, 0x41	; 65
    8ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8eac:	dc 01       	movw	r26, r24
    8eae:	cb 01       	movw	r24, r22
    8eb0:	8e 01       	movw	r16, r28
    8eb2:	01 5a       	subi	r16, 0xA1	; 161
    8eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    8eb6:	bc 01       	movw	r22, r24
    8eb8:	cd 01       	movw	r24, r26
    8eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8ebe:	dc 01       	movw	r26, r24
    8ec0:	cb 01       	movw	r24, r22
    8ec2:	f8 01       	movw	r30, r16
    8ec4:	91 83       	std	Z+1, r25	; 0x01
    8ec6:	80 83       	st	Z, r24
    8ec8:	1f c0       	rjmp	.+62     	; 0x8f08 <LCD_voidInit+0x168>
    8eca:	fe 01       	movw	r30, r28
    8ecc:	e3 5a       	subi	r30, 0xA3	; 163
    8ece:	ff 4f       	sbci	r31, 0xFF	; 255
    8ed0:	80 e9       	ldi	r24, 0x90	; 144
    8ed2:	91 e0       	ldi	r25, 0x01	; 1
    8ed4:	91 83       	std	Z+1, r25	; 0x01
    8ed6:	80 83       	st	Z, r24
    8ed8:	fe 01       	movw	r30, r28
    8eda:	e3 5a       	subi	r30, 0xA3	; 163
    8edc:	ff 4f       	sbci	r31, 0xFF	; 255
    8ede:	80 81       	ld	r24, Z
    8ee0:	91 81       	ldd	r25, Z+1	; 0x01
    8ee2:	01 97       	sbiw	r24, 0x01	; 1
    8ee4:	f1 f7       	brne	.-4      	; 0x8ee2 <LCD_voidInit+0x142>
    8ee6:	fe 01       	movw	r30, r28
    8ee8:	e3 5a       	subi	r30, 0xA3	; 163
    8eea:	ff 4f       	sbci	r31, 0xFF	; 255
    8eec:	91 83       	std	Z+1, r25	; 0x01
    8eee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8ef0:	de 01       	movw	r26, r28
    8ef2:	a1 5a       	subi	r26, 0xA1	; 161
    8ef4:	bf 4f       	sbci	r27, 0xFF	; 255
    8ef6:	fe 01       	movw	r30, r28
    8ef8:	e1 5a       	subi	r30, 0xA1	; 161
    8efa:	ff 4f       	sbci	r31, 0xFF	; 255
    8efc:	80 81       	ld	r24, Z
    8efe:	91 81       	ldd	r25, Z+1	; 0x01
    8f00:	01 97       	sbiw	r24, 0x01	; 1
    8f02:	11 96       	adiw	r26, 0x01	; 1
    8f04:	9c 93       	st	X, r25
    8f06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8f08:	fe 01       	movw	r30, r28
    8f0a:	e1 5a       	subi	r30, 0xA1	; 161
    8f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    8f0e:	80 81       	ld	r24, Z
    8f10:	91 81       	ldd	r25, Z+1	; 0x01
    8f12:	00 97       	sbiw	r24, 0x00	; 0
    8f14:	d1 f6       	brne	.-76     	; 0x8eca <LCD_voidInit+0x12a>
    8f16:	27 c0       	rjmp	.+78     	; 0x8f66 <LCD_voidInit+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8f18:	8e 01       	movw	r16, r28
    8f1a:	01 5a       	subi	r16, 0xA1	; 161
    8f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    8f1e:	fe 01       	movw	r30, r28
    8f20:	ef 59       	subi	r30, 0x9F	; 159
    8f22:	ff 4f       	sbci	r31, 0xFF	; 255
    8f24:	60 81       	ld	r22, Z
    8f26:	71 81       	ldd	r23, Z+1	; 0x01
    8f28:	82 81       	ldd	r24, Z+2	; 0x02
    8f2a:	93 81       	ldd	r25, Z+3	; 0x03
    8f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8f30:	dc 01       	movw	r26, r24
    8f32:	cb 01       	movw	r24, r22
    8f34:	f8 01       	movw	r30, r16
    8f36:	91 83       	std	Z+1, r25	; 0x01
    8f38:	80 83       	st	Z, r24
    8f3a:	de 01       	movw	r26, r28
    8f3c:	a5 5a       	subi	r26, 0xA5	; 165
    8f3e:	bf 4f       	sbci	r27, 0xFF	; 255
    8f40:	fe 01       	movw	r30, r28
    8f42:	e1 5a       	subi	r30, 0xA1	; 161
    8f44:	ff 4f       	sbci	r31, 0xFF	; 255
    8f46:	80 81       	ld	r24, Z
    8f48:	91 81       	ldd	r25, Z+1	; 0x01
    8f4a:	8d 93       	st	X+, r24
    8f4c:	9c 93       	st	X, r25
    8f4e:	fe 01       	movw	r30, r28
    8f50:	e5 5a       	subi	r30, 0xA5	; 165
    8f52:	ff 4f       	sbci	r31, 0xFF	; 255
    8f54:	80 81       	ld	r24, Z
    8f56:	91 81       	ldd	r25, Z+1	; 0x01
    8f58:	01 97       	sbiw	r24, 0x01	; 1
    8f5a:	f1 f7       	brne	.-4      	; 0x8f58 <LCD_voidInit+0x1b8>
    8f5c:	fe 01       	movw	r30, r28
    8f5e:	e5 5a       	subi	r30, 0xA5	; 165
    8f60:	ff 4f       	sbci	r31, 0xFF	; 255
    8f62:	91 83       	std	Z+1, r25	; 0x01
    8f64:	80 83       	st	Z, r24
	
	_delay_ms(35);
	//Set RS = 0 (Command)
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    8f66:	81 e0       	ldi	r24, 0x01	; 1
    8f68:	65 e0       	ldi	r22, 0x05	; 5
    8f6a:	40 e0       	ldi	r20, 0x00	; 0
    8f6c:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	//Set RW = 0 (Write)
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    8f70:	81 e0       	ldi	r24, 0x01	; 1
    8f72:	66 e0       	ldi	r22, 0x06	; 6
    8f74:	40 e0       	ldi	r20, 0x00	; 0
    8f76:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	//Write The Most 4-Bits Of Command On Data Pins
	PRV_voidWriteHalfPort(0b0010);
    8f7a:	82 e0       	ldi	r24, 0x02	; 2
    8f7c:	0e 94 e4 4f 	call	0x9fc8	; 0x9fc8 <PRV_voidWriteHalfPort>
	
	//Enable Pulse (H => L)
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    8f80:	81 e0       	ldi	r24, 0x01	; 1
    8f82:	67 e0       	ldi	r22, 0x07	; 7
    8f84:	41 e0       	ldi	r20, 0x01	; 1
    8f86:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
    8f8a:	fe 01       	movw	r30, r28
    8f8c:	e9 5a       	subi	r30, 0xA9	; 169
    8f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    8f90:	80 e0       	ldi	r24, 0x00	; 0
    8f92:	90 e0       	ldi	r25, 0x00	; 0
    8f94:	a0 e8       	ldi	r26, 0x80	; 128
    8f96:	bf e3       	ldi	r27, 0x3F	; 63
    8f98:	80 83       	st	Z, r24
    8f9a:	91 83       	std	Z+1, r25	; 0x01
    8f9c:	a2 83       	std	Z+2, r26	; 0x02
    8f9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8fa0:	8e 01       	movw	r16, r28
    8fa2:	0d 5a       	subi	r16, 0xAD	; 173
    8fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    8fa6:	fe 01       	movw	r30, r28
    8fa8:	e9 5a       	subi	r30, 0xA9	; 169
    8faa:	ff 4f       	sbci	r31, 0xFF	; 255
    8fac:	60 81       	ld	r22, Z
    8fae:	71 81       	ldd	r23, Z+1	; 0x01
    8fb0:	82 81       	ldd	r24, Z+2	; 0x02
    8fb2:	93 81       	ldd	r25, Z+3	; 0x03
    8fb4:	20 e0       	ldi	r18, 0x00	; 0
    8fb6:	30 e0       	ldi	r19, 0x00	; 0
    8fb8:	4a e7       	ldi	r20, 0x7A	; 122
    8fba:	55 e4       	ldi	r21, 0x45	; 69
    8fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8fc0:	dc 01       	movw	r26, r24
    8fc2:	cb 01       	movw	r24, r22
    8fc4:	f8 01       	movw	r30, r16
    8fc6:	80 83       	st	Z, r24
    8fc8:	91 83       	std	Z+1, r25	; 0x01
    8fca:	a2 83       	std	Z+2, r26	; 0x02
    8fcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8fce:	fe 01       	movw	r30, r28
    8fd0:	ed 5a       	subi	r30, 0xAD	; 173
    8fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    8fd4:	60 81       	ld	r22, Z
    8fd6:	71 81       	ldd	r23, Z+1	; 0x01
    8fd8:	82 81       	ldd	r24, Z+2	; 0x02
    8fda:	93 81       	ldd	r25, Z+3	; 0x03
    8fdc:	20 e0       	ldi	r18, 0x00	; 0
    8fde:	30 e0       	ldi	r19, 0x00	; 0
    8fe0:	40 e8       	ldi	r20, 0x80	; 128
    8fe2:	5f e3       	ldi	r21, 0x3F	; 63
    8fe4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8fe8:	88 23       	and	r24, r24
    8fea:	44 f4       	brge	.+16     	; 0x8ffc <LCD_voidInit+0x25c>
		__ticks = 1;
    8fec:	fe 01       	movw	r30, r28
    8fee:	ef 5a       	subi	r30, 0xAF	; 175
    8ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    8ff2:	81 e0       	ldi	r24, 0x01	; 1
    8ff4:	90 e0       	ldi	r25, 0x00	; 0
    8ff6:	91 83       	std	Z+1, r25	; 0x01
    8ff8:	80 83       	st	Z, r24
    8ffa:	64 c0       	rjmp	.+200    	; 0x90c4 <LCD_voidInit+0x324>
	else if (__tmp > 65535)
    8ffc:	fe 01       	movw	r30, r28
    8ffe:	ed 5a       	subi	r30, 0xAD	; 173
    9000:	ff 4f       	sbci	r31, 0xFF	; 255
    9002:	60 81       	ld	r22, Z
    9004:	71 81       	ldd	r23, Z+1	; 0x01
    9006:	82 81       	ldd	r24, Z+2	; 0x02
    9008:	93 81       	ldd	r25, Z+3	; 0x03
    900a:	20 e0       	ldi	r18, 0x00	; 0
    900c:	3f ef       	ldi	r19, 0xFF	; 255
    900e:	4f e7       	ldi	r20, 0x7F	; 127
    9010:	57 e4       	ldi	r21, 0x47	; 71
    9012:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    9016:	18 16       	cp	r1, r24
    9018:	0c f0       	brlt	.+2      	; 0x901c <LCD_voidInit+0x27c>
    901a:	43 c0       	rjmp	.+134    	; 0x90a2 <LCD_voidInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    901c:	fe 01       	movw	r30, r28
    901e:	e9 5a       	subi	r30, 0xA9	; 169
    9020:	ff 4f       	sbci	r31, 0xFF	; 255
    9022:	60 81       	ld	r22, Z
    9024:	71 81       	ldd	r23, Z+1	; 0x01
    9026:	82 81       	ldd	r24, Z+2	; 0x02
    9028:	93 81       	ldd	r25, Z+3	; 0x03
    902a:	20 e0       	ldi	r18, 0x00	; 0
    902c:	30 e0       	ldi	r19, 0x00	; 0
    902e:	40 e2       	ldi	r20, 0x20	; 32
    9030:	51 e4       	ldi	r21, 0x41	; 65
    9032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9036:	dc 01       	movw	r26, r24
    9038:	cb 01       	movw	r24, r22
    903a:	8e 01       	movw	r16, r28
    903c:	0f 5a       	subi	r16, 0xAF	; 175
    903e:	1f 4f       	sbci	r17, 0xFF	; 255
    9040:	bc 01       	movw	r22, r24
    9042:	cd 01       	movw	r24, r26
    9044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9048:	dc 01       	movw	r26, r24
    904a:	cb 01       	movw	r24, r22
    904c:	f8 01       	movw	r30, r16
    904e:	91 83       	std	Z+1, r25	; 0x01
    9050:	80 83       	st	Z, r24
    9052:	1f c0       	rjmp	.+62     	; 0x9092 <LCD_voidInit+0x2f2>
    9054:	fe 01       	movw	r30, r28
    9056:	e1 5b       	subi	r30, 0xB1	; 177
    9058:	ff 4f       	sbci	r31, 0xFF	; 255
    905a:	80 e9       	ldi	r24, 0x90	; 144
    905c:	91 e0       	ldi	r25, 0x01	; 1
    905e:	91 83       	std	Z+1, r25	; 0x01
    9060:	80 83       	st	Z, r24
    9062:	fe 01       	movw	r30, r28
    9064:	e1 5b       	subi	r30, 0xB1	; 177
    9066:	ff 4f       	sbci	r31, 0xFF	; 255
    9068:	80 81       	ld	r24, Z
    906a:	91 81       	ldd	r25, Z+1	; 0x01
    906c:	01 97       	sbiw	r24, 0x01	; 1
    906e:	f1 f7       	brne	.-4      	; 0x906c <LCD_voidInit+0x2cc>
    9070:	fe 01       	movw	r30, r28
    9072:	e1 5b       	subi	r30, 0xB1	; 177
    9074:	ff 4f       	sbci	r31, 0xFF	; 255
    9076:	91 83       	std	Z+1, r25	; 0x01
    9078:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    907a:	de 01       	movw	r26, r28
    907c:	af 5a       	subi	r26, 0xAF	; 175
    907e:	bf 4f       	sbci	r27, 0xFF	; 255
    9080:	fe 01       	movw	r30, r28
    9082:	ef 5a       	subi	r30, 0xAF	; 175
    9084:	ff 4f       	sbci	r31, 0xFF	; 255
    9086:	80 81       	ld	r24, Z
    9088:	91 81       	ldd	r25, Z+1	; 0x01
    908a:	01 97       	sbiw	r24, 0x01	; 1
    908c:	11 96       	adiw	r26, 0x01	; 1
    908e:	9c 93       	st	X, r25
    9090:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9092:	fe 01       	movw	r30, r28
    9094:	ef 5a       	subi	r30, 0xAF	; 175
    9096:	ff 4f       	sbci	r31, 0xFF	; 255
    9098:	80 81       	ld	r24, Z
    909a:	91 81       	ldd	r25, Z+1	; 0x01
    909c:	00 97       	sbiw	r24, 0x00	; 0
    909e:	d1 f6       	brne	.-76     	; 0x9054 <LCD_voidInit+0x2b4>
    90a0:	27 c0       	rjmp	.+78     	; 0x90f0 <LCD_voidInit+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    90a2:	8e 01       	movw	r16, r28
    90a4:	0f 5a       	subi	r16, 0xAF	; 175
    90a6:	1f 4f       	sbci	r17, 0xFF	; 255
    90a8:	fe 01       	movw	r30, r28
    90aa:	ed 5a       	subi	r30, 0xAD	; 173
    90ac:	ff 4f       	sbci	r31, 0xFF	; 255
    90ae:	60 81       	ld	r22, Z
    90b0:	71 81       	ldd	r23, Z+1	; 0x01
    90b2:	82 81       	ldd	r24, Z+2	; 0x02
    90b4:	93 81       	ldd	r25, Z+3	; 0x03
    90b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    90ba:	dc 01       	movw	r26, r24
    90bc:	cb 01       	movw	r24, r22
    90be:	f8 01       	movw	r30, r16
    90c0:	91 83       	std	Z+1, r25	; 0x01
    90c2:	80 83       	st	Z, r24
    90c4:	de 01       	movw	r26, r28
    90c6:	a3 5b       	subi	r26, 0xB3	; 179
    90c8:	bf 4f       	sbci	r27, 0xFF	; 255
    90ca:	fe 01       	movw	r30, r28
    90cc:	ef 5a       	subi	r30, 0xAF	; 175
    90ce:	ff 4f       	sbci	r31, 0xFF	; 255
    90d0:	80 81       	ld	r24, Z
    90d2:	91 81       	ldd	r25, Z+1	; 0x01
    90d4:	8d 93       	st	X+, r24
    90d6:	9c 93       	st	X, r25
    90d8:	fe 01       	movw	r30, r28
    90da:	e3 5b       	subi	r30, 0xB3	; 179
    90dc:	ff 4f       	sbci	r31, 0xFF	; 255
    90de:	80 81       	ld	r24, Z
    90e0:	91 81       	ldd	r25, Z+1	; 0x01
    90e2:	01 97       	sbiw	r24, 0x01	; 1
    90e4:	f1 f7       	brne	.-4      	; 0x90e2 <LCD_voidInit+0x342>
    90e6:	fe 01       	movw	r30, r28
    90e8:	e3 5b       	subi	r30, 0xB3	; 179
    90ea:	ff 4f       	sbci	r31, 0xFF	; 255
    90ec:	91 83       	std	Z+1, r25	; 0x01
    90ee:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    90f0:	81 e0       	ldi	r24, 0x01	; 1
    90f2:	67 e0       	ldi	r22, 0x07	; 7
    90f4:	40 e0       	ldi	r20, 0x00	; 0
    90f6:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	
	 LCD_voidSendCommand(0b00101000);
    90fa:	88 e2       	ldi	r24, 0x28	; 40
    90fc:	0e 94 1e 4b 	call	0x963c	; 0x963c <LCD_voidSendCommand>
    9100:	fe 01       	movw	r30, r28
    9102:	e7 5b       	subi	r30, 0xB7	; 183
    9104:	ff 4f       	sbci	r31, 0xFF	; 255
    9106:	80 e0       	ldi	r24, 0x00	; 0
    9108:	90 e0       	ldi	r25, 0x00	; 0
    910a:	a4 e3       	ldi	r26, 0x34	; 52
    910c:	b2 e4       	ldi	r27, 0x42	; 66
    910e:	80 83       	st	Z, r24
    9110:	91 83       	std	Z+1, r25	; 0x01
    9112:	a2 83       	std	Z+2, r26	; 0x02
    9114:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    9116:	8e 01       	movw	r16, r28
    9118:	0b 5b       	subi	r16, 0xBB	; 187
    911a:	1f 4f       	sbci	r17, 0xFF	; 255
    911c:	fe 01       	movw	r30, r28
    911e:	e7 5b       	subi	r30, 0xB7	; 183
    9120:	ff 4f       	sbci	r31, 0xFF	; 255
    9122:	60 81       	ld	r22, Z
    9124:	71 81       	ldd	r23, Z+1	; 0x01
    9126:	82 81       	ldd	r24, Z+2	; 0x02
    9128:	93 81       	ldd	r25, Z+3	; 0x03
    912a:	2b ea       	ldi	r18, 0xAB	; 171
    912c:	3a ea       	ldi	r19, 0xAA	; 170
    912e:	4a ea       	ldi	r20, 0xAA	; 170
    9130:	50 e4       	ldi	r21, 0x40	; 64
    9132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9136:	dc 01       	movw	r26, r24
    9138:	cb 01       	movw	r24, r22
    913a:	f8 01       	movw	r30, r16
    913c:	80 83       	st	Z, r24
    913e:	91 83       	std	Z+1, r25	; 0x01
    9140:	a2 83       	std	Z+2, r26	; 0x02
    9142:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9144:	fe 01       	movw	r30, r28
    9146:	eb 5b       	subi	r30, 0xBB	; 187
    9148:	ff 4f       	sbci	r31, 0xFF	; 255
    914a:	60 81       	ld	r22, Z
    914c:	71 81       	ldd	r23, Z+1	; 0x01
    914e:	82 81       	ldd	r24, Z+2	; 0x02
    9150:	93 81       	ldd	r25, Z+3	; 0x03
    9152:	20 e0       	ldi	r18, 0x00	; 0
    9154:	30 e0       	ldi	r19, 0x00	; 0
    9156:	40 e8       	ldi	r20, 0x80	; 128
    9158:	5f e3       	ldi	r21, 0x3F	; 63
    915a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    915e:	88 23       	and	r24, r24
    9160:	34 f4       	brge	.+12     	; 0x916e <LCD_voidInit+0x3ce>
		__ticks = 1;
    9162:	fe 01       	movw	r30, r28
    9164:	ec 5b       	subi	r30, 0xBC	; 188
    9166:	ff 4f       	sbci	r31, 0xFF	; 255
    9168:	81 e0       	ldi	r24, 0x01	; 1
    916a:	80 83       	st	Z, r24
    916c:	a7 c0       	rjmp	.+334    	; 0x92bc <LCD_voidInit+0x51c>
	else if (__tmp > 255)
    916e:	fe 01       	movw	r30, r28
    9170:	eb 5b       	subi	r30, 0xBB	; 187
    9172:	ff 4f       	sbci	r31, 0xFF	; 255
    9174:	60 81       	ld	r22, Z
    9176:	71 81       	ldd	r23, Z+1	; 0x01
    9178:	82 81       	ldd	r24, Z+2	; 0x02
    917a:	93 81       	ldd	r25, Z+3	; 0x03
    917c:	20 e0       	ldi	r18, 0x00	; 0
    917e:	30 e0       	ldi	r19, 0x00	; 0
    9180:	4f e7       	ldi	r20, 0x7F	; 127
    9182:	53 e4       	ldi	r21, 0x43	; 67
    9184:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    9188:	18 16       	cp	r1, r24
    918a:	0c f0       	brlt	.+2      	; 0x918e <LCD_voidInit+0x3ee>
    918c:	87 c0       	rjmp	.+270    	; 0x929c <LCD_voidInit+0x4fc>
	{
		_delay_ms(__us / 1000.0);
    918e:	fe 01       	movw	r30, r28
    9190:	e7 5b       	subi	r30, 0xB7	; 183
    9192:	ff 4f       	sbci	r31, 0xFF	; 255
    9194:	60 81       	ld	r22, Z
    9196:	71 81       	ldd	r23, Z+1	; 0x01
    9198:	82 81       	ldd	r24, Z+2	; 0x02
    919a:	93 81       	ldd	r25, Z+3	; 0x03
    919c:	20 e0       	ldi	r18, 0x00	; 0
    919e:	30 e0       	ldi	r19, 0x00	; 0
    91a0:	4a e7       	ldi	r20, 0x7A	; 122
    91a2:	54 e4       	ldi	r21, 0x44	; 68
    91a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    91a8:	dc 01       	movw	r26, r24
    91aa:	cb 01       	movw	r24, r22
    91ac:	fe 01       	movw	r30, r28
    91ae:	e0 5c       	subi	r30, 0xC0	; 192
    91b0:	ff 4f       	sbci	r31, 0xFF	; 255
    91b2:	80 83       	st	Z, r24
    91b4:	91 83       	std	Z+1, r25	; 0x01
    91b6:	a2 83       	std	Z+2, r26	; 0x02
    91b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    91ba:	fe 01       	movw	r30, r28
    91bc:	e0 5c       	subi	r30, 0xC0	; 192
    91be:	ff 4f       	sbci	r31, 0xFF	; 255
    91c0:	60 81       	ld	r22, Z
    91c2:	71 81       	ldd	r23, Z+1	; 0x01
    91c4:	82 81       	ldd	r24, Z+2	; 0x02
    91c6:	93 81       	ldd	r25, Z+3	; 0x03
    91c8:	20 e0       	ldi	r18, 0x00	; 0
    91ca:	30 e0       	ldi	r19, 0x00	; 0
    91cc:	4a e7       	ldi	r20, 0x7A	; 122
    91ce:	55 e4       	ldi	r21, 0x45	; 69
    91d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    91d4:	dc 01       	movw	r26, r24
    91d6:	cb 01       	movw	r24, r22
    91d8:	8c af       	std	Y+60, r24	; 0x3c
    91da:	9d af       	std	Y+61, r25	; 0x3d
    91dc:	ae af       	std	Y+62, r26	; 0x3e
    91de:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    91e0:	6c ad       	ldd	r22, Y+60	; 0x3c
    91e2:	7d ad       	ldd	r23, Y+61	; 0x3d
    91e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    91e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    91e8:	20 e0       	ldi	r18, 0x00	; 0
    91ea:	30 e0       	ldi	r19, 0x00	; 0
    91ec:	40 e8       	ldi	r20, 0x80	; 128
    91ee:	5f e3       	ldi	r21, 0x3F	; 63
    91f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    91f4:	88 23       	and	r24, r24
    91f6:	2c f4       	brge	.+10     	; 0x9202 <LCD_voidInit+0x462>
		__ticks = 1;
    91f8:	81 e0       	ldi	r24, 0x01	; 1
    91fa:	90 e0       	ldi	r25, 0x00	; 0
    91fc:	9b af       	std	Y+59, r25	; 0x3b
    91fe:	8a af       	std	Y+58, r24	; 0x3a
    9200:	42 c0       	rjmp	.+132    	; 0x9286 <LCD_voidInit+0x4e6>
	else if (__tmp > 65535)
    9202:	6c ad       	ldd	r22, Y+60	; 0x3c
    9204:	7d ad       	ldd	r23, Y+61	; 0x3d
    9206:	8e ad       	ldd	r24, Y+62	; 0x3e
    9208:	9f ad       	ldd	r25, Y+63	; 0x3f
    920a:	20 e0       	ldi	r18, 0x00	; 0
    920c:	3f ef       	ldi	r19, 0xFF	; 255
    920e:	4f e7       	ldi	r20, 0x7F	; 127
    9210:	57 e4       	ldi	r21, 0x47	; 71
    9212:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    9216:	18 16       	cp	r1, r24
    9218:	64 f5       	brge	.+88     	; 0x9272 <LCD_voidInit+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    921a:	fe 01       	movw	r30, r28
    921c:	e0 5c       	subi	r30, 0xC0	; 192
    921e:	ff 4f       	sbci	r31, 0xFF	; 255
    9220:	60 81       	ld	r22, Z
    9222:	71 81       	ldd	r23, Z+1	; 0x01
    9224:	82 81       	ldd	r24, Z+2	; 0x02
    9226:	93 81       	ldd	r25, Z+3	; 0x03
    9228:	20 e0       	ldi	r18, 0x00	; 0
    922a:	30 e0       	ldi	r19, 0x00	; 0
    922c:	40 e2       	ldi	r20, 0x20	; 32
    922e:	51 e4       	ldi	r21, 0x41	; 65
    9230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9234:	dc 01       	movw	r26, r24
    9236:	cb 01       	movw	r24, r22
    9238:	bc 01       	movw	r22, r24
    923a:	cd 01       	movw	r24, r26
    923c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9240:	dc 01       	movw	r26, r24
    9242:	cb 01       	movw	r24, r22
    9244:	9b af       	std	Y+59, r25	; 0x3b
    9246:	8a af       	std	Y+58, r24	; 0x3a
    9248:	0f c0       	rjmp	.+30     	; 0x9268 <LCD_voidInit+0x4c8>
    924a:	80 e9       	ldi	r24, 0x90	; 144
    924c:	91 e0       	ldi	r25, 0x01	; 1
    924e:	99 af       	std	Y+57, r25	; 0x39
    9250:	88 af       	std	Y+56, r24	; 0x38
    9252:	88 ad       	ldd	r24, Y+56	; 0x38
    9254:	99 ad       	ldd	r25, Y+57	; 0x39
    9256:	01 97       	sbiw	r24, 0x01	; 1
    9258:	f1 f7       	brne	.-4      	; 0x9256 <LCD_voidInit+0x4b6>
    925a:	99 af       	std	Y+57, r25	; 0x39
    925c:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    925e:	8a ad       	ldd	r24, Y+58	; 0x3a
    9260:	9b ad       	ldd	r25, Y+59	; 0x3b
    9262:	01 97       	sbiw	r24, 0x01	; 1
    9264:	9b af       	std	Y+59, r25	; 0x3b
    9266:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9268:	8a ad       	ldd	r24, Y+58	; 0x3a
    926a:	9b ad       	ldd	r25, Y+59	; 0x3b
    926c:	00 97       	sbiw	r24, 0x00	; 0
    926e:	69 f7       	brne	.-38     	; 0x924a <LCD_voidInit+0x4aa>
    9270:	2e c0       	rjmp	.+92     	; 0x92ce <LCD_voidInit+0x52e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9272:	6c ad       	ldd	r22, Y+60	; 0x3c
    9274:	7d ad       	ldd	r23, Y+61	; 0x3d
    9276:	8e ad       	ldd	r24, Y+62	; 0x3e
    9278:	9f ad       	ldd	r25, Y+63	; 0x3f
    927a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    927e:	dc 01       	movw	r26, r24
    9280:	cb 01       	movw	r24, r22
    9282:	9b af       	std	Y+59, r25	; 0x3b
    9284:	8a af       	std	Y+58, r24	; 0x3a
    9286:	8a ad       	ldd	r24, Y+58	; 0x3a
    9288:	9b ad       	ldd	r25, Y+59	; 0x3b
    928a:	9f ab       	std	Y+55, r25	; 0x37
    928c:	8e ab       	std	Y+54, r24	; 0x36
    928e:	8e a9       	ldd	r24, Y+54	; 0x36
    9290:	9f a9       	ldd	r25, Y+55	; 0x37
    9292:	01 97       	sbiw	r24, 0x01	; 1
    9294:	f1 f7       	brne	.-4      	; 0x9292 <LCD_voidInit+0x4f2>
    9296:	9f ab       	std	Y+55, r25	; 0x37
    9298:	8e ab       	std	Y+54, r24	; 0x36
    929a:	19 c0       	rjmp	.+50     	; 0x92ce <LCD_voidInit+0x52e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    929c:	8e 01       	movw	r16, r28
    929e:	0c 5b       	subi	r16, 0xBC	; 188
    92a0:	1f 4f       	sbci	r17, 0xFF	; 255
    92a2:	fe 01       	movw	r30, r28
    92a4:	eb 5b       	subi	r30, 0xBB	; 187
    92a6:	ff 4f       	sbci	r31, 0xFF	; 255
    92a8:	60 81       	ld	r22, Z
    92aa:	71 81       	ldd	r23, Z+1	; 0x01
    92ac:	82 81       	ldd	r24, Z+2	; 0x02
    92ae:	93 81       	ldd	r25, Z+3	; 0x03
    92b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    92b4:	dc 01       	movw	r26, r24
    92b6:	cb 01       	movw	r24, r22
    92b8:	f8 01       	movw	r30, r16
    92ba:	80 83       	st	Z, r24
    92bc:	fe 01       	movw	r30, r28
    92be:	ec 5b       	subi	r30, 0xBC	; 188
    92c0:	ff 4f       	sbci	r31, 0xFF	; 255
    92c2:	80 81       	ld	r24, Z
    92c4:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    92c6:	8d a9       	ldd	r24, Y+53	; 0x35
    92c8:	8a 95       	dec	r24
    92ca:	f1 f7       	brne	.-4      	; 0x92c8 <LCD_voidInit+0x528>
    92cc:	8d ab       	std	Y+53, r24	; 0x35
	 _delay_us(45);
	 
	 //Display On/Off Control (Display=>On, Crusor=>Off, Blink=>Off)
	 LCD_voidSendCommand(0b00001100);
    92ce:	8c e0       	ldi	r24, 0x0C	; 12
    92d0:	0e 94 1e 4b 	call	0x963c	; 0x963c <LCD_voidSendCommand>
    92d4:	80 e0       	ldi	r24, 0x00	; 0
    92d6:	90 e0       	ldi	r25, 0x00	; 0
    92d8:	a4 e3       	ldi	r26, 0x34	; 52
    92da:	b2 e4       	ldi	r27, 0x42	; 66
    92dc:	89 ab       	std	Y+49, r24	; 0x31
    92de:	9a ab       	std	Y+50, r25	; 0x32
    92e0:	ab ab       	std	Y+51, r26	; 0x33
    92e2:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    92e4:	69 a9       	ldd	r22, Y+49	; 0x31
    92e6:	7a a9       	ldd	r23, Y+50	; 0x32
    92e8:	8b a9       	ldd	r24, Y+51	; 0x33
    92ea:	9c a9       	ldd	r25, Y+52	; 0x34
    92ec:	2b ea       	ldi	r18, 0xAB	; 171
    92ee:	3a ea       	ldi	r19, 0xAA	; 170
    92f0:	4a ea       	ldi	r20, 0xAA	; 170
    92f2:	50 e4       	ldi	r21, 0x40	; 64
    92f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    92f8:	dc 01       	movw	r26, r24
    92fa:	cb 01       	movw	r24, r22
    92fc:	8d a7       	std	Y+45, r24	; 0x2d
    92fe:	9e a7       	std	Y+46, r25	; 0x2e
    9300:	af a7       	std	Y+47, r26	; 0x2f
    9302:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    9304:	6d a5       	ldd	r22, Y+45	; 0x2d
    9306:	7e a5       	ldd	r23, Y+46	; 0x2e
    9308:	8f a5       	ldd	r24, Y+47	; 0x2f
    930a:	98 a9       	ldd	r25, Y+48	; 0x30
    930c:	20 e0       	ldi	r18, 0x00	; 0
    930e:	30 e0       	ldi	r19, 0x00	; 0
    9310:	40 e8       	ldi	r20, 0x80	; 128
    9312:	5f e3       	ldi	r21, 0x3F	; 63
    9314:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    9318:	88 23       	and	r24, r24
    931a:	1c f4       	brge	.+6      	; 0x9322 <LCD_voidInit+0x582>
		__ticks = 1;
    931c:	81 e0       	ldi	r24, 0x01	; 1
    931e:	8c a7       	std	Y+44, r24	; 0x2c
    9320:	91 c0       	rjmp	.+290    	; 0x9444 <LCD_voidInit+0x6a4>
	else if (__tmp > 255)
    9322:	6d a5       	ldd	r22, Y+45	; 0x2d
    9324:	7e a5       	ldd	r23, Y+46	; 0x2e
    9326:	8f a5       	ldd	r24, Y+47	; 0x2f
    9328:	98 a9       	ldd	r25, Y+48	; 0x30
    932a:	20 e0       	ldi	r18, 0x00	; 0
    932c:	30 e0       	ldi	r19, 0x00	; 0
    932e:	4f e7       	ldi	r20, 0x7F	; 127
    9330:	53 e4       	ldi	r21, 0x43	; 67
    9332:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    9336:	18 16       	cp	r1, r24
    9338:	0c f0       	brlt	.+2      	; 0x933c <LCD_voidInit+0x59c>
    933a:	7b c0       	rjmp	.+246    	; 0x9432 <LCD_voidInit+0x692>
	{
		_delay_ms(__us / 1000.0);
    933c:	69 a9       	ldd	r22, Y+49	; 0x31
    933e:	7a a9       	ldd	r23, Y+50	; 0x32
    9340:	8b a9       	ldd	r24, Y+51	; 0x33
    9342:	9c a9       	ldd	r25, Y+52	; 0x34
    9344:	20 e0       	ldi	r18, 0x00	; 0
    9346:	30 e0       	ldi	r19, 0x00	; 0
    9348:	4a e7       	ldi	r20, 0x7A	; 122
    934a:	54 e4       	ldi	r21, 0x44	; 68
    934c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    9350:	dc 01       	movw	r26, r24
    9352:	cb 01       	movw	r24, r22
    9354:	88 a7       	std	Y+40, r24	; 0x28
    9356:	99 a7       	std	Y+41, r25	; 0x29
    9358:	aa a7       	std	Y+42, r26	; 0x2a
    935a:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    935c:	68 a5       	ldd	r22, Y+40	; 0x28
    935e:	79 a5       	ldd	r23, Y+41	; 0x29
    9360:	8a a5       	ldd	r24, Y+42	; 0x2a
    9362:	9b a5       	ldd	r25, Y+43	; 0x2b
    9364:	20 e0       	ldi	r18, 0x00	; 0
    9366:	30 e0       	ldi	r19, 0x00	; 0
    9368:	4a e7       	ldi	r20, 0x7A	; 122
    936a:	55 e4       	ldi	r21, 0x45	; 69
    936c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9370:	dc 01       	movw	r26, r24
    9372:	cb 01       	movw	r24, r22
    9374:	8c a3       	std	Y+36, r24	; 0x24
    9376:	9d a3       	std	Y+37, r25	; 0x25
    9378:	ae a3       	std	Y+38, r26	; 0x26
    937a:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    937c:	6c a1       	ldd	r22, Y+36	; 0x24
    937e:	7d a1       	ldd	r23, Y+37	; 0x25
    9380:	8e a1       	ldd	r24, Y+38	; 0x26
    9382:	9f a1       	ldd	r25, Y+39	; 0x27
    9384:	20 e0       	ldi	r18, 0x00	; 0
    9386:	30 e0       	ldi	r19, 0x00	; 0
    9388:	40 e8       	ldi	r20, 0x80	; 128
    938a:	5f e3       	ldi	r21, 0x3F	; 63
    938c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    9390:	88 23       	and	r24, r24
    9392:	2c f4       	brge	.+10     	; 0x939e <LCD_voidInit+0x5fe>
		__ticks = 1;
    9394:	81 e0       	ldi	r24, 0x01	; 1
    9396:	90 e0       	ldi	r25, 0x00	; 0
    9398:	9b a3       	std	Y+35, r25	; 0x23
    939a:	8a a3       	std	Y+34, r24	; 0x22
    939c:	3f c0       	rjmp	.+126    	; 0x941c <LCD_voidInit+0x67c>
	else if (__tmp > 65535)
    939e:	6c a1       	ldd	r22, Y+36	; 0x24
    93a0:	7d a1       	ldd	r23, Y+37	; 0x25
    93a2:	8e a1       	ldd	r24, Y+38	; 0x26
    93a4:	9f a1       	ldd	r25, Y+39	; 0x27
    93a6:	20 e0       	ldi	r18, 0x00	; 0
    93a8:	3f ef       	ldi	r19, 0xFF	; 255
    93aa:	4f e7       	ldi	r20, 0x7F	; 127
    93ac:	57 e4       	ldi	r21, 0x47	; 71
    93ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    93b2:	18 16       	cp	r1, r24
    93b4:	4c f5       	brge	.+82     	; 0x9408 <LCD_voidInit+0x668>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    93b6:	68 a5       	ldd	r22, Y+40	; 0x28
    93b8:	79 a5       	ldd	r23, Y+41	; 0x29
    93ba:	8a a5       	ldd	r24, Y+42	; 0x2a
    93bc:	9b a5       	ldd	r25, Y+43	; 0x2b
    93be:	20 e0       	ldi	r18, 0x00	; 0
    93c0:	30 e0       	ldi	r19, 0x00	; 0
    93c2:	40 e2       	ldi	r20, 0x20	; 32
    93c4:	51 e4       	ldi	r21, 0x41	; 65
    93c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    93ca:	dc 01       	movw	r26, r24
    93cc:	cb 01       	movw	r24, r22
    93ce:	bc 01       	movw	r22, r24
    93d0:	cd 01       	movw	r24, r26
    93d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    93d6:	dc 01       	movw	r26, r24
    93d8:	cb 01       	movw	r24, r22
    93da:	9b a3       	std	Y+35, r25	; 0x23
    93dc:	8a a3       	std	Y+34, r24	; 0x22
    93de:	0f c0       	rjmp	.+30     	; 0x93fe <LCD_voidInit+0x65e>
    93e0:	80 e9       	ldi	r24, 0x90	; 144
    93e2:	91 e0       	ldi	r25, 0x01	; 1
    93e4:	99 a3       	std	Y+33, r25	; 0x21
    93e6:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    93e8:	88 a1       	ldd	r24, Y+32	; 0x20
    93ea:	99 a1       	ldd	r25, Y+33	; 0x21
    93ec:	01 97       	sbiw	r24, 0x01	; 1
    93ee:	f1 f7       	brne	.-4      	; 0x93ec <LCD_voidInit+0x64c>
    93f0:	99 a3       	std	Y+33, r25	; 0x21
    93f2:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    93f4:	8a a1       	ldd	r24, Y+34	; 0x22
    93f6:	9b a1       	ldd	r25, Y+35	; 0x23
    93f8:	01 97       	sbiw	r24, 0x01	; 1
    93fa:	9b a3       	std	Y+35, r25	; 0x23
    93fc:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    93fe:	8a a1       	ldd	r24, Y+34	; 0x22
    9400:	9b a1       	ldd	r25, Y+35	; 0x23
    9402:	00 97       	sbiw	r24, 0x00	; 0
    9404:	69 f7       	brne	.-38     	; 0x93e0 <LCD_voidInit+0x640>
    9406:	24 c0       	rjmp	.+72     	; 0x9450 <LCD_voidInit+0x6b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9408:	6c a1       	ldd	r22, Y+36	; 0x24
    940a:	7d a1       	ldd	r23, Y+37	; 0x25
    940c:	8e a1       	ldd	r24, Y+38	; 0x26
    940e:	9f a1       	ldd	r25, Y+39	; 0x27
    9410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9414:	dc 01       	movw	r26, r24
    9416:	cb 01       	movw	r24, r22
    9418:	9b a3       	std	Y+35, r25	; 0x23
    941a:	8a a3       	std	Y+34, r24	; 0x22
    941c:	8a a1       	ldd	r24, Y+34	; 0x22
    941e:	9b a1       	ldd	r25, Y+35	; 0x23
    9420:	9f 8f       	std	Y+31, r25	; 0x1f
    9422:	8e 8f       	std	Y+30, r24	; 0x1e
    9424:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9426:	9f 8d       	ldd	r25, Y+31	; 0x1f
    9428:	01 97       	sbiw	r24, 0x01	; 1
    942a:	f1 f7       	brne	.-4      	; 0x9428 <LCD_voidInit+0x688>
    942c:	9f 8f       	std	Y+31, r25	; 0x1f
    942e:	8e 8f       	std	Y+30, r24	; 0x1e
    9430:	0f c0       	rjmp	.+30     	; 0x9450 <LCD_voidInit+0x6b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    9432:	6d a5       	ldd	r22, Y+45	; 0x2d
    9434:	7e a5       	ldd	r23, Y+46	; 0x2e
    9436:	8f a5       	ldd	r24, Y+47	; 0x2f
    9438:	98 a9       	ldd	r25, Y+48	; 0x30
    943a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    943e:	dc 01       	movw	r26, r24
    9440:	cb 01       	movw	r24, r22
    9442:	8c a7       	std	Y+44, r24	; 0x2c
    9444:	8c a5       	ldd	r24, Y+44	; 0x2c
    9446:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    9448:	8d 8d       	ldd	r24, Y+29	; 0x1d
    944a:	8a 95       	dec	r24
    944c:	f1 f7       	brne	.-4      	; 0x944a <LCD_voidInit+0x6aa>
    944e:	8d 8f       	std	Y+29, r24	; 0x1d
	  _delay_us(45);

	 //Display Clear 
	 LCD_voidSendCommand(0b00000001);
    9450:	81 e0       	ldi	r24, 0x01	; 1
    9452:	0e 94 1e 4b 	call	0x963c	; 0x963c <LCD_voidSendCommand>
    9456:	80 e0       	ldi	r24, 0x00	; 0
    9458:	90 e0       	ldi	r25, 0x00	; 0
    945a:	a0 e0       	ldi	r26, 0x00	; 0
    945c:	b0 e4       	ldi	r27, 0x40	; 64
    945e:	89 8f       	std	Y+25, r24	; 0x19
    9460:	9a 8f       	std	Y+26, r25	; 0x1a
    9462:	ab 8f       	std	Y+27, r26	; 0x1b
    9464:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9466:	69 8d       	ldd	r22, Y+25	; 0x19
    9468:	7a 8d       	ldd	r23, Y+26	; 0x1a
    946a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    946c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    946e:	20 e0       	ldi	r18, 0x00	; 0
    9470:	30 e0       	ldi	r19, 0x00	; 0
    9472:	4a e7       	ldi	r20, 0x7A	; 122
    9474:	55 e4       	ldi	r21, 0x45	; 69
    9476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    947a:	dc 01       	movw	r26, r24
    947c:	cb 01       	movw	r24, r22
    947e:	8d 8b       	std	Y+21, r24	; 0x15
    9480:	9e 8b       	std	Y+22, r25	; 0x16
    9482:	af 8b       	std	Y+23, r26	; 0x17
    9484:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    9486:	6d 89       	ldd	r22, Y+21	; 0x15
    9488:	7e 89       	ldd	r23, Y+22	; 0x16
    948a:	8f 89       	ldd	r24, Y+23	; 0x17
    948c:	98 8d       	ldd	r25, Y+24	; 0x18
    948e:	20 e0       	ldi	r18, 0x00	; 0
    9490:	30 e0       	ldi	r19, 0x00	; 0
    9492:	40 e8       	ldi	r20, 0x80	; 128
    9494:	5f e3       	ldi	r21, 0x3F	; 63
    9496:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    949a:	88 23       	and	r24, r24
    949c:	2c f4       	brge	.+10     	; 0x94a8 <LCD_voidInit+0x708>
		__ticks = 1;
    949e:	81 e0       	ldi	r24, 0x01	; 1
    94a0:	90 e0       	ldi	r25, 0x00	; 0
    94a2:	9c 8b       	std	Y+20, r25	; 0x14
    94a4:	8b 8b       	std	Y+19, r24	; 0x13
    94a6:	3f c0       	rjmp	.+126    	; 0x9526 <LCD_voidInit+0x786>
	else if (__tmp > 65535)
    94a8:	6d 89       	ldd	r22, Y+21	; 0x15
    94aa:	7e 89       	ldd	r23, Y+22	; 0x16
    94ac:	8f 89       	ldd	r24, Y+23	; 0x17
    94ae:	98 8d       	ldd	r25, Y+24	; 0x18
    94b0:	20 e0       	ldi	r18, 0x00	; 0
    94b2:	3f ef       	ldi	r19, 0xFF	; 255
    94b4:	4f e7       	ldi	r20, 0x7F	; 127
    94b6:	57 e4       	ldi	r21, 0x47	; 71
    94b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    94bc:	18 16       	cp	r1, r24
    94be:	4c f5       	brge	.+82     	; 0x9512 <LCD_voidInit+0x772>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    94c0:	69 8d       	ldd	r22, Y+25	; 0x19
    94c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    94c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    94c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    94c8:	20 e0       	ldi	r18, 0x00	; 0
    94ca:	30 e0       	ldi	r19, 0x00	; 0
    94cc:	40 e2       	ldi	r20, 0x20	; 32
    94ce:	51 e4       	ldi	r21, 0x41	; 65
    94d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    94d4:	dc 01       	movw	r26, r24
    94d6:	cb 01       	movw	r24, r22
    94d8:	bc 01       	movw	r22, r24
    94da:	cd 01       	movw	r24, r26
    94dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    94e0:	dc 01       	movw	r26, r24
    94e2:	cb 01       	movw	r24, r22
    94e4:	9c 8b       	std	Y+20, r25	; 0x14
    94e6:	8b 8b       	std	Y+19, r24	; 0x13
    94e8:	0f c0       	rjmp	.+30     	; 0x9508 <LCD_voidInit+0x768>
    94ea:	80 e9       	ldi	r24, 0x90	; 144
    94ec:	91 e0       	ldi	r25, 0x01	; 1
    94ee:	9a 8b       	std	Y+18, r25	; 0x12
    94f0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    94f2:	89 89       	ldd	r24, Y+17	; 0x11
    94f4:	9a 89       	ldd	r25, Y+18	; 0x12
    94f6:	01 97       	sbiw	r24, 0x01	; 1
    94f8:	f1 f7       	brne	.-4      	; 0x94f6 <LCD_voidInit+0x756>
    94fa:	9a 8b       	std	Y+18, r25	; 0x12
    94fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    94fe:	8b 89       	ldd	r24, Y+19	; 0x13
    9500:	9c 89       	ldd	r25, Y+20	; 0x14
    9502:	01 97       	sbiw	r24, 0x01	; 1
    9504:	9c 8b       	std	Y+20, r25	; 0x14
    9506:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9508:	8b 89       	ldd	r24, Y+19	; 0x13
    950a:	9c 89       	ldd	r25, Y+20	; 0x14
    950c:	00 97       	sbiw	r24, 0x00	; 0
    950e:	69 f7       	brne	.-38     	; 0x94ea <LCD_voidInit+0x74a>
    9510:	14 c0       	rjmp	.+40     	; 0x953a <LCD_voidInit+0x79a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9512:	6d 89       	ldd	r22, Y+21	; 0x15
    9514:	7e 89       	ldd	r23, Y+22	; 0x16
    9516:	8f 89       	ldd	r24, Y+23	; 0x17
    9518:	98 8d       	ldd	r25, Y+24	; 0x18
    951a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    951e:	dc 01       	movw	r26, r24
    9520:	cb 01       	movw	r24, r22
    9522:	9c 8b       	std	Y+20, r25	; 0x14
    9524:	8b 8b       	std	Y+19, r24	; 0x13
    9526:	8b 89       	ldd	r24, Y+19	; 0x13
    9528:	9c 89       	ldd	r25, Y+20	; 0x14
    952a:	98 8b       	std	Y+16, r25	; 0x10
    952c:	8f 87       	std	Y+15, r24	; 0x0f
    952e:	8f 85       	ldd	r24, Y+15	; 0x0f
    9530:	98 89       	ldd	r25, Y+16	; 0x10
    9532:	01 97       	sbiw	r24, 0x01	; 1
    9534:	f1 f7       	brne	.-4      	; 0x9532 <LCD_voidInit+0x792>
    9536:	98 8b       	std	Y+16, r25	; 0x10
    9538:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(2);
	 
	 //Entry Mode Set (Increment=>On, Shift=>Off)
	 LCD_voidSendCommand(0b00000110);
    953a:	86 e0       	ldi	r24, 0x06	; 6
    953c:	0e 94 1e 4b 	call	0x963c	; 0x963c <LCD_voidSendCommand>
    9540:	80 e0       	ldi	r24, 0x00	; 0
    9542:	90 e0       	ldi	r25, 0x00	; 0
    9544:	a0 e2       	ldi	r26, 0x20	; 32
    9546:	b1 e4       	ldi	r27, 0x41	; 65
    9548:	8b 87       	std	Y+11, r24	; 0x0b
    954a:	9c 87       	std	Y+12, r25	; 0x0c
    954c:	ad 87       	std	Y+13, r26	; 0x0d
    954e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9550:	6b 85       	ldd	r22, Y+11	; 0x0b
    9552:	7c 85       	ldd	r23, Y+12	; 0x0c
    9554:	8d 85       	ldd	r24, Y+13	; 0x0d
    9556:	9e 85       	ldd	r25, Y+14	; 0x0e
    9558:	20 e0       	ldi	r18, 0x00	; 0
    955a:	30 e0       	ldi	r19, 0x00	; 0
    955c:	4a e7       	ldi	r20, 0x7A	; 122
    955e:	55 e4       	ldi	r21, 0x45	; 69
    9560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9564:	dc 01       	movw	r26, r24
    9566:	cb 01       	movw	r24, r22
    9568:	8f 83       	std	Y+7, r24	; 0x07
    956a:	98 87       	std	Y+8, r25	; 0x08
    956c:	a9 87       	std	Y+9, r26	; 0x09
    956e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    9570:	6f 81       	ldd	r22, Y+7	; 0x07
    9572:	78 85       	ldd	r23, Y+8	; 0x08
    9574:	89 85       	ldd	r24, Y+9	; 0x09
    9576:	9a 85       	ldd	r25, Y+10	; 0x0a
    9578:	20 e0       	ldi	r18, 0x00	; 0
    957a:	30 e0       	ldi	r19, 0x00	; 0
    957c:	40 e8       	ldi	r20, 0x80	; 128
    957e:	5f e3       	ldi	r21, 0x3F	; 63
    9580:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    9584:	88 23       	and	r24, r24
    9586:	2c f4       	brge	.+10     	; 0x9592 <LCD_voidInit+0x7f2>
		__ticks = 1;
    9588:	81 e0       	ldi	r24, 0x01	; 1
    958a:	90 e0       	ldi	r25, 0x00	; 0
    958c:	9e 83       	std	Y+6, r25	; 0x06
    958e:	8d 83       	std	Y+5, r24	; 0x05
    9590:	3f c0       	rjmp	.+126    	; 0x9610 <LCD_voidInit+0x870>
	else if (__tmp > 65535)
    9592:	6f 81       	ldd	r22, Y+7	; 0x07
    9594:	78 85       	ldd	r23, Y+8	; 0x08
    9596:	89 85       	ldd	r24, Y+9	; 0x09
    9598:	9a 85       	ldd	r25, Y+10	; 0x0a
    959a:	20 e0       	ldi	r18, 0x00	; 0
    959c:	3f ef       	ldi	r19, 0xFF	; 255
    959e:	4f e7       	ldi	r20, 0x7F	; 127
    95a0:	57 e4       	ldi	r21, 0x47	; 71
    95a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    95a6:	18 16       	cp	r1, r24
    95a8:	4c f5       	brge	.+82     	; 0x95fc <LCD_voidInit+0x85c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    95aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    95ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    95ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    95b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    95b2:	20 e0       	ldi	r18, 0x00	; 0
    95b4:	30 e0       	ldi	r19, 0x00	; 0
    95b6:	40 e2       	ldi	r20, 0x20	; 32
    95b8:	51 e4       	ldi	r21, 0x41	; 65
    95ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    95be:	dc 01       	movw	r26, r24
    95c0:	cb 01       	movw	r24, r22
    95c2:	bc 01       	movw	r22, r24
    95c4:	cd 01       	movw	r24, r26
    95c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    95ca:	dc 01       	movw	r26, r24
    95cc:	cb 01       	movw	r24, r22
    95ce:	9e 83       	std	Y+6, r25	; 0x06
    95d0:	8d 83       	std	Y+5, r24	; 0x05
    95d2:	0f c0       	rjmp	.+30     	; 0x95f2 <LCD_voidInit+0x852>
    95d4:	80 e9       	ldi	r24, 0x90	; 144
    95d6:	91 e0       	ldi	r25, 0x01	; 1
    95d8:	9c 83       	std	Y+4, r25	; 0x04
    95da:	8b 83       	std	Y+3, r24	; 0x03
    95dc:	8b 81       	ldd	r24, Y+3	; 0x03
    95de:	9c 81       	ldd	r25, Y+4	; 0x04
    95e0:	01 97       	sbiw	r24, 0x01	; 1
    95e2:	f1 f7       	brne	.-4      	; 0x95e0 <LCD_voidInit+0x840>
    95e4:	9c 83       	std	Y+4, r25	; 0x04
    95e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    95e8:	8d 81       	ldd	r24, Y+5	; 0x05
    95ea:	9e 81       	ldd	r25, Y+6	; 0x06
    95ec:	01 97       	sbiw	r24, 0x01	; 1
    95ee:	9e 83       	std	Y+6, r25	; 0x06
    95f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    95f2:	8d 81       	ldd	r24, Y+5	; 0x05
    95f4:	9e 81       	ldd	r25, Y+6	; 0x06
    95f6:	00 97       	sbiw	r24, 0x00	; 0
    95f8:	69 f7       	brne	.-38     	; 0x95d4 <LCD_voidInit+0x834>
    95fa:	14 c0       	rjmp	.+40     	; 0x9624 <LCD_voidInit+0x884>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    95fc:	6f 81       	ldd	r22, Y+7	; 0x07
    95fe:	78 85       	ldd	r23, Y+8	; 0x08
    9600:	89 85       	ldd	r24, Y+9	; 0x09
    9602:	9a 85       	ldd	r25, Y+10	; 0x0a
    9604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9608:	dc 01       	movw	r26, r24
    960a:	cb 01       	movw	r24, r22
    960c:	9e 83       	std	Y+6, r25	; 0x06
    960e:	8d 83       	std	Y+5, r24	; 0x05
    9610:	8d 81       	ldd	r24, Y+5	; 0x05
    9612:	9e 81       	ldd	r25, Y+6	; 0x06
    9614:	9a 83       	std	Y+2, r25	; 0x02
    9616:	89 83       	std	Y+1, r24	; 0x01
    9618:	89 81       	ldd	r24, Y+1	; 0x01
    961a:	9a 81       	ldd	r25, Y+2	; 0x02
    961c:	01 97       	sbiw	r24, 0x01	; 1
    961e:	f1 f7       	brne	.-4      	; 0x961c <LCD_voidInit+0x87c>
    9620:	9a 83       	std	Y+2, r25	; 0x02
    9622:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(10);
}
    9624:	c8 59       	subi	r28, 0x98	; 152
    9626:	df 4f       	sbci	r29, 0xFF	; 255
    9628:	0f b6       	in	r0, 0x3f	; 63
    962a:	f8 94       	cli
    962c:	de bf       	out	0x3e, r29	; 62
    962e:	0f be       	out	0x3f, r0	; 63
    9630:	cd bf       	out	0x3d, r28	; 61
    9632:	cf 91       	pop	r28
    9634:	df 91       	pop	r29
    9636:	1f 91       	pop	r17
    9638:	0f 91       	pop	r16
    963a:	08 95       	ret

0000963c <LCD_voidSendCommand>:
void LCD_voidSendCommand (u8 copy_u8Cmd)
{
    963c:	df 93       	push	r29
    963e:	cf 93       	push	r28
    9640:	cd b7       	in	r28, 0x3d	; 61
    9642:	de b7       	in	r29, 0x3e	; 62
    9644:	6d 97       	sbiw	r28, 0x1d	; 29
    9646:	0f b6       	in	r0, 0x3f	; 63
    9648:	f8 94       	cli
    964a:	de bf       	out	0x3e, r29	; 62
    964c:	0f be       	out	0x3f, r0	; 63
    964e:	cd bf       	out	0x3d, r28	; 61
    9650:	8d 8f       	std	Y+29, r24	; 0x1d
	//Set RS = 0 (Command)
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    9652:	81 e0       	ldi	r24, 0x01	; 1
    9654:	65 e0       	ldi	r22, 0x05	; 5
    9656:	40 e0       	ldi	r20, 0x00	; 0
    9658:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	
	//Set RW = 0 (Write)
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    965c:	81 e0       	ldi	r24, 0x01	; 1
    965e:	66 e0       	ldi	r22, 0x06	; 6
    9660:	40 e0       	ldi	r20, 0x00	; 0
    9662:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	
	//Write Most 4-Bits Of The Command On Data Pins
	PRV_voidWriteHalfPort(copy_u8Cmd>>4);
    9666:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9668:	82 95       	swap	r24
    966a:	8f 70       	andi	r24, 0x0F	; 15
    966c:	0e 94 e4 4f 	call	0x9fc8	; 0x9fc8 <PRV_voidWriteHalfPort>
	
	//Enable Pulse (H => L)
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    9670:	81 e0       	ldi	r24, 0x01	; 1
    9672:	67 e0       	ldi	r22, 0x07	; 7
    9674:	41 e0       	ldi	r20, 0x01	; 1
    9676:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
    967a:	80 e0       	ldi	r24, 0x00	; 0
    967c:	90 e0       	ldi	r25, 0x00	; 0
    967e:	a0 e8       	ldi	r26, 0x80	; 128
    9680:	bf e3       	ldi	r27, 0x3F	; 63
    9682:	89 8f       	std	Y+25, r24	; 0x19
    9684:	9a 8f       	std	Y+26, r25	; 0x1a
    9686:	ab 8f       	std	Y+27, r26	; 0x1b
    9688:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    968a:	69 8d       	ldd	r22, Y+25	; 0x19
    968c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    968e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9690:	9c 8d       	ldd	r25, Y+28	; 0x1c
    9692:	20 e0       	ldi	r18, 0x00	; 0
    9694:	30 e0       	ldi	r19, 0x00	; 0
    9696:	4a e7       	ldi	r20, 0x7A	; 122
    9698:	55 e4       	ldi	r21, 0x45	; 69
    969a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    969e:	dc 01       	movw	r26, r24
    96a0:	cb 01       	movw	r24, r22
    96a2:	8d 8b       	std	Y+21, r24	; 0x15
    96a4:	9e 8b       	std	Y+22, r25	; 0x16
    96a6:	af 8b       	std	Y+23, r26	; 0x17
    96a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    96aa:	6d 89       	ldd	r22, Y+21	; 0x15
    96ac:	7e 89       	ldd	r23, Y+22	; 0x16
    96ae:	8f 89       	ldd	r24, Y+23	; 0x17
    96b0:	98 8d       	ldd	r25, Y+24	; 0x18
    96b2:	20 e0       	ldi	r18, 0x00	; 0
    96b4:	30 e0       	ldi	r19, 0x00	; 0
    96b6:	40 e8       	ldi	r20, 0x80	; 128
    96b8:	5f e3       	ldi	r21, 0x3F	; 63
    96ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    96be:	88 23       	and	r24, r24
    96c0:	2c f4       	brge	.+10     	; 0x96cc <LCD_voidSendCommand+0x90>
		__ticks = 1;
    96c2:	81 e0       	ldi	r24, 0x01	; 1
    96c4:	90 e0       	ldi	r25, 0x00	; 0
    96c6:	9c 8b       	std	Y+20, r25	; 0x14
    96c8:	8b 8b       	std	Y+19, r24	; 0x13
    96ca:	3f c0       	rjmp	.+126    	; 0x974a <LCD_voidSendCommand+0x10e>
	else if (__tmp > 65535)
    96cc:	6d 89       	ldd	r22, Y+21	; 0x15
    96ce:	7e 89       	ldd	r23, Y+22	; 0x16
    96d0:	8f 89       	ldd	r24, Y+23	; 0x17
    96d2:	98 8d       	ldd	r25, Y+24	; 0x18
    96d4:	20 e0       	ldi	r18, 0x00	; 0
    96d6:	3f ef       	ldi	r19, 0xFF	; 255
    96d8:	4f e7       	ldi	r20, 0x7F	; 127
    96da:	57 e4       	ldi	r21, 0x47	; 71
    96dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    96e0:	18 16       	cp	r1, r24
    96e2:	4c f5       	brge	.+82     	; 0x9736 <LCD_voidSendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    96e4:	69 8d       	ldd	r22, Y+25	; 0x19
    96e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    96e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    96ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    96ec:	20 e0       	ldi	r18, 0x00	; 0
    96ee:	30 e0       	ldi	r19, 0x00	; 0
    96f0:	40 e2       	ldi	r20, 0x20	; 32
    96f2:	51 e4       	ldi	r21, 0x41	; 65
    96f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    96f8:	dc 01       	movw	r26, r24
    96fa:	cb 01       	movw	r24, r22
    96fc:	bc 01       	movw	r22, r24
    96fe:	cd 01       	movw	r24, r26
    9700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9704:	dc 01       	movw	r26, r24
    9706:	cb 01       	movw	r24, r22
    9708:	9c 8b       	std	Y+20, r25	; 0x14
    970a:	8b 8b       	std	Y+19, r24	; 0x13
    970c:	0f c0       	rjmp	.+30     	; 0x972c <LCD_voidSendCommand+0xf0>
    970e:	80 e9       	ldi	r24, 0x90	; 144
    9710:	91 e0       	ldi	r25, 0x01	; 1
    9712:	9a 8b       	std	Y+18, r25	; 0x12
    9714:	89 8b       	std	Y+17, r24	; 0x11
    9716:	89 89       	ldd	r24, Y+17	; 0x11
    9718:	9a 89       	ldd	r25, Y+18	; 0x12
    971a:	01 97       	sbiw	r24, 0x01	; 1
    971c:	f1 f7       	brne	.-4      	; 0x971a <LCD_voidSendCommand+0xde>
    971e:	9a 8b       	std	Y+18, r25	; 0x12
    9720:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9722:	8b 89       	ldd	r24, Y+19	; 0x13
    9724:	9c 89       	ldd	r25, Y+20	; 0x14
    9726:	01 97       	sbiw	r24, 0x01	; 1
    9728:	9c 8b       	std	Y+20, r25	; 0x14
    972a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    972c:	8b 89       	ldd	r24, Y+19	; 0x13
    972e:	9c 89       	ldd	r25, Y+20	; 0x14
    9730:	00 97       	sbiw	r24, 0x00	; 0
    9732:	69 f7       	brne	.-38     	; 0x970e <LCD_voidSendCommand+0xd2>
    9734:	14 c0       	rjmp	.+40     	; 0x975e <LCD_voidSendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9736:	6d 89       	ldd	r22, Y+21	; 0x15
    9738:	7e 89       	ldd	r23, Y+22	; 0x16
    973a:	8f 89       	ldd	r24, Y+23	; 0x17
    973c:	98 8d       	ldd	r25, Y+24	; 0x18
    973e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9742:	dc 01       	movw	r26, r24
    9744:	cb 01       	movw	r24, r22
    9746:	9c 8b       	std	Y+20, r25	; 0x14
    9748:	8b 8b       	std	Y+19, r24	; 0x13
    974a:	8b 89       	ldd	r24, Y+19	; 0x13
    974c:	9c 89       	ldd	r25, Y+20	; 0x14
    974e:	98 8b       	std	Y+16, r25	; 0x10
    9750:	8f 87       	std	Y+15, r24	; 0x0f
    9752:	8f 85       	ldd	r24, Y+15	; 0x0f
    9754:	98 89       	ldd	r25, Y+16	; 0x10
    9756:	01 97       	sbiw	r24, 0x01	; 1
    9758:	f1 f7       	brne	.-4      	; 0x9756 <LCD_voidSendCommand+0x11a>
    975a:	98 8b       	std	Y+16, r25	; 0x10
    975c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    975e:	81 e0       	ldi	r24, 0x01	; 1
    9760:	67 e0       	ldi	r22, 0x07	; 7
    9762:	40 e0       	ldi	r20, 0x00	; 0
    9764:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	
	//Write Least 4-Bits Of The Command On Data Pins
	PRV_voidWriteHalfPort(copy_u8Cmd);
    9768:	8d 8d       	ldd	r24, Y+29	; 0x1d
    976a:	0e 94 e4 4f 	call	0x9fc8	; 0x9fc8 <PRV_voidWriteHalfPort>
	
	//Enable Pulse (H => L)
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    976e:	81 e0       	ldi	r24, 0x01	; 1
    9770:	67 e0       	ldi	r22, 0x07	; 7
    9772:	41 e0       	ldi	r20, 0x01	; 1
    9774:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
    9778:	80 e0       	ldi	r24, 0x00	; 0
    977a:	90 e0       	ldi	r25, 0x00	; 0
    977c:	a0 e8       	ldi	r26, 0x80	; 128
    977e:	bf e3       	ldi	r27, 0x3F	; 63
    9780:	8b 87       	std	Y+11, r24	; 0x0b
    9782:	9c 87       	std	Y+12, r25	; 0x0c
    9784:	ad 87       	std	Y+13, r26	; 0x0d
    9786:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9788:	6b 85       	ldd	r22, Y+11	; 0x0b
    978a:	7c 85       	ldd	r23, Y+12	; 0x0c
    978c:	8d 85       	ldd	r24, Y+13	; 0x0d
    978e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9790:	20 e0       	ldi	r18, 0x00	; 0
    9792:	30 e0       	ldi	r19, 0x00	; 0
    9794:	4a e7       	ldi	r20, 0x7A	; 122
    9796:	55 e4       	ldi	r21, 0x45	; 69
    9798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    979c:	dc 01       	movw	r26, r24
    979e:	cb 01       	movw	r24, r22
    97a0:	8f 83       	std	Y+7, r24	; 0x07
    97a2:	98 87       	std	Y+8, r25	; 0x08
    97a4:	a9 87       	std	Y+9, r26	; 0x09
    97a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    97a8:	6f 81       	ldd	r22, Y+7	; 0x07
    97aa:	78 85       	ldd	r23, Y+8	; 0x08
    97ac:	89 85       	ldd	r24, Y+9	; 0x09
    97ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    97b0:	20 e0       	ldi	r18, 0x00	; 0
    97b2:	30 e0       	ldi	r19, 0x00	; 0
    97b4:	40 e8       	ldi	r20, 0x80	; 128
    97b6:	5f e3       	ldi	r21, 0x3F	; 63
    97b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    97bc:	88 23       	and	r24, r24
    97be:	2c f4       	brge	.+10     	; 0x97ca <LCD_voidSendCommand+0x18e>
		__ticks = 1;
    97c0:	81 e0       	ldi	r24, 0x01	; 1
    97c2:	90 e0       	ldi	r25, 0x00	; 0
    97c4:	9e 83       	std	Y+6, r25	; 0x06
    97c6:	8d 83       	std	Y+5, r24	; 0x05
    97c8:	3f c0       	rjmp	.+126    	; 0x9848 <LCD_voidSendCommand+0x20c>
	else if (__tmp > 65535)
    97ca:	6f 81       	ldd	r22, Y+7	; 0x07
    97cc:	78 85       	ldd	r23, Y+8	; 0x08
    97ce:	89 85       	ldd	r24, Y+9	; 0x09
    97d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    97d2:	20 e0       	ldi	r18, 0x00	; 0
    97d4:	3f ef       	ldi	r19, 0xFF	; 255
    97d6:	4f e7       	ldi	r20, 0x7F	; 127
    97d8:	57 e4       	ldi	r21, 0x47	; 71
    97da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    97de:	18 16       	cp	r1, r24
    97e0:	4c f5       	brge	.+82     	; 0x9834 <LCD_voidSendCommand+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    97e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    97e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    97e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    97e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    97ea:	20 e0       	ldi	r18, 0x00	; 0
    97ec:	30 e0       	ldi	r19, 0x00	; 0
    97ee:	40 e2       	ldi	r20, 0x20	; 32
    97f0:	51 e4       	ldi	r21, 0x41	; 65
    97f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    97f6:	dc 01       	movw	r26, r24
    97f8:	cb 01       	movw	r24, r22
    97fa:	bc 01       	movw	r22, r24
    97fc:	cd 01       	movw	r24, r26
    97fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9802:	dc 01       	movw	r26, r24
    9804:	cb 01       	movw	r24, r22
    9806:	9e 83       	std	Y+6, r25	; 0x06
    9808:	8d 83       	std	Y+5, r24	; 0x05
    980a:	0f c0       	rjmp	.+30     	; 0x982a <LCD_voidSendCommand+0x1ee>
    980c:	80 e9       	ldi	r24, 0x90	; 144
    980e:	91 e0       	ldi	r25, 0x01	; 1
    9810:	9c 83       	std	Y+4, r25	; 0x04
    9812:	8b 83       	std	Y+3, r24	; 0x03
    9814:	8b 81       	ldd	r24, Y+3	; 0x03
    9816:	9c 81       	ldd	r25, Y+4	; 0x04
    9818:	01 97       	sbiw	r24, 0x01	; 1
    981a:	f1 f7       	brne	.-4      	; 0x9818 <LCD_voidSendCommand+0x1dc>
    981c:	9c 83       	std	Y+4, r25	; 0x04
    981e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9820:	8d 81       	ldd	r24, Y+5	; 0x05
    9822:	9e 81       	ldd	r25, Y+6	; 0x06
    9824:	01 97       	sbiw	r24, 0x01	; 1
    9826:	9e 83       	std	Y+6, r25	; 0x06
    9828:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    982a:	8d 81       	ldd	r24, Y+5	; 0x05
    982c:	9e 81       	ldd	r25, Y+6	; 0x06
    982e:	00 97       	sbiw	r24, 0x00	; 0
    9830:	69 f7       	brne	.-38     	; 0x980c <LCD_voidSendCommand+0x1d0>
    9832:	14 c0       	rjmp	.+40     	; 0x985c <LCD_voidSendCommand+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9834:	6f 81       	ldd	r22, Y+7	; 0x07
    9836:	78 85       	ldd	r23, Y+8	; 0x08
    9838:	89 85       	ldd	r24, Y+9	; 0x09
    983a:	9a 85       	ldd	r25, Y+10	; 0x0a
    983c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9840:	dc 01       	movw	r26, r24
    9842:	cb 01       	movw	r24, r22
    9844:	9e 83       	std	Y+6, r25	; 0x06
    9846:	8d 83       	std	Y+5, r24	; 0x05
    9848:	8d 81       	ldd	r24, Y+5	; 0x05
    984a:	9e 81       	ldd	r25, Y+6	; 0x06
    984c:	9a 83       	std	Y+2, r25	; 0x02
    984e:	89 83       	std	Y+1, r24	; 0x01
    9850:	89 81       	ldd	r24, Y+1	; 0x01
    9852:	9a 81       	ldd	r25, Y+2	; 0x02
    9854:	01 97       	sbiw	r24, 0x01	; 1
    9856:	f1 f7       	brne	.-4      	; 0x9854 <LCD_voidSendCommand+0x218>
    9858:	9a 83       	std	Y+2, r25	; 0x02
    985a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    985c:	81 e0       	ldi	r24, 0x01	; 1
    985e:	67 e0       	ldi	r22, 0x07	; 7
    9860:	40 e0       	ldi	r20, 0x00	; 0
    9862:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	
}
    9866:	6d 96       	adiw	r28, 0x1d	; 29
    9868:	0f b6       	in	r0, 0x3f	; 63
    986a:	f8 94       	cli
    986c:	de bf       	out	0x3e, r29	; 62
    986e:	0f be       	out	0x3f, r0	; 63
    9870:	cd bf       	out	0x3d, r28	; 61
    9872:	cf 91       	pop	r28
    9874:	df 91       	pop	r29
    9876:	08 95       	ret

00009878 <LCD_voidDisplayChar>:
void LCD_voidDisplayChar (u8 copy_u8Char)
{
    9878:	df 93       	push	r29
    987a:	cf 93       	push	r28
    987c:	cd b7       	in	r28, 0x3d	; 61
    987e:	de b7       	in	r29, 0x3e	; 62
    9880:	6d 97       	sbiw	r28, 0x1d	; 29
    9882:	0f b6       	in	r0, 0x3f	; 63
    9884:	f8 94       	cli
    9886:	de bf       	out	0x3e, r29	; 62
    9888:	0f be       	out	0x3f, r0	; 63
    988a:	cd bf       	out	0x3d, r28	; 61
    988c:	8d 8f       	std	Y+29, r24	; 0x1d
	//Set RS = 1 (Data)
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
    988e:	81 e0       	ldi	r24, 0x01	; 1
    9890:	65 e0       	ldi	r22, 0x05	; 5
    9892:	41 e0       	ldi	r20, 0x01	; 1
    9894:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	
	//Set RW = 0 (Write)
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    9898:	81 e0       	ldi	r24, 0x01	; 1
    989a:	66 e0       	ldi	r22, 0x06	; 6
    989c:	40 e0       	ldi	r20, 0x00	; 0
    989e:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	
	//Write Most 4-Bits Of The Command On Data Pins
	PRV_voidWriteHalfPort(copy_u8Char>>4);
    98a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    98a4:	82 95       	swap	r24
    98a6:	8f 70       	andi	r24, 0x0F	; 15
    98a8:	0e 94 e4 4f 	call	0x9fc8	; 0x9fc8 <PRV_voidWriteHalfPort>
	
	//Enable Pulse (H => L)
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    98ac:	81 e0       	ldi	r24, 0x01	; 1
    98ae:	67 e0       	ldi	r22, 0x07	; 7
    98b0:	41 e0       	ldi	r20, 0x01	; 1
    98b2:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
    98b6:	80 e0       	ldi	r24, 0x00	; 0
    98b8:	90 e0       	ldi	r25, 0x00	; 0
    98ba:	a0 e8       	ldi	r26, 0x80	; 128
    98bc:	bf e3       	ldi	r27, 0x3F	; 63
    98be:	89 8f       	std	Y+25, r24	; 0x19
    98c0:	9a 8f       	std	Y+26, r25	; 0x1a
    98c2:	ab 8f       	std	Y+27, r26	; 0x1b
    98c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    98c6:	69 8d       	ldd	r22, Y+25	; 0x19
    98c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    98ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    98cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    98ce:	20 e0       	ldi	r18, 0x00	; 0
    98d0:	30 e0       	ldi	r19, 0x00	; 0
    98d2:	4a e7       	ldi	r20, 0x7A	; 122
    98d4:	55 e4       	ldi	r21, 0x45	; 69
    98d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    98da:	dc 01       	movw	r26, r24
    98dc:	cb 01       	movw	r24, r22
    98de:	8d 8b       	std	Y+21, r24	; 0x15
    98e0:	9e 8b       	std	Y+22, r25	; 0x16
    98e2:	af 8b       	std	Y+23, r26	; 0x17
    98e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    98e6:	6d 89       	ldd	r22, Y+21	; 0x15
    98e8:	7e 89       	ldd	r23, Y+22	; 0x16
    98ea:	8f 89       	ldd	r24, Y+23	; 0x17
    98ec:	98 8d       	ldd	r25, Y+24	; 0x18
    98ee:	20 e0       	ldi	r18, 0x00	; 0
    98f0:	30 e0       	ldi	r19, 0x00	; 0
    98f2:	40 e8       	ldi	r20, 0x80	; 128
    98f4:	5f e3       	ldi	r21, 0x3F	; 63
    98f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    98fa:	88 23       	and	r24, r24
    98fc:	2c f4       	brge	.+10     	; 0x9908 <LCD_voidDisplayChar+0x90>
		__ticks = 1;
    98fe:	81 e0       	ldi	r24, 0x01	; 1
    9900:	90 e0       	ldi	r25, 0x00	; 0
    9902:	9c 8b       	std	Y+20, r25	; 0x14
    9904:	8b 8b       	std	Y+19, r24	; 0x13
    9906:	3f c0       	rjmp	.+126    	; 0x9986 <LCD_voidDisplayChar+0x10e>
	else if (__tmp > 65535)
    9908:	6d 89       	ldd	r22, Y+21	; 0x15
    990a:	7e 89       	ldd	r23, Y+22	; 0x16
    990c:	8f 89       	ldd	r24, Y+23	; 0x17
    990e:	98 8d       	ldd	r25, Y+24	; 0x18
    9910:	20 e0       	ldi	r18, 0x00	; 0
    9912:	3f ef       	ldi	r19, 0xFF	; 255
    9914:	4f e7       	ldi	r20, 0x7F	; 127
    9916:	57 e4       	ldi	r21, 0x47	; 71
    9918:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    991c:	18 16       	cp	r1, r24
    991e:	4c f5       	brge	.+82     	; 0x9972 <LCD_voidDisplayChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9920:	69 8d       	ldd	r22, Y+25	; 0x19
    9922:	7a 8d       	ldd	r23, Y+26	; 0x1a
    9924:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9926:	9c 8d       	ldd	r25, Y+28	; 0x1c
    9928:	20 e0       	ldi	r18, 0x00	; 0
    992a:	30 e0       	ldi	r19, 0x00	; 0
    992c:	40 e2       	ldi	r20, 0x20	; 32
    992e:	51 e4       	ldi	r21, 0x41	; 65
    9930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9934:	dc 01       	movw	r26, r24
    9936:	cb 01       	movw	r24, r22
    9938:	bc 01       	movw	r22, r24
    993a:	cd 01       	movw	r24, r26
    993c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9940:	dc 01       	movw	r26, r24
    9942:	cb 01       	movw	r24, r22
    9944:	9c 8b       	std	Y+20, r25	; 0x14
    9946:	8b 8b       	std	Y+19, r24	; 0x13
    9948:	0f c0       	rjmp	.+30     	; 0x9968 <LCD_voidDisplayChar+0xf0>
    994a:	80 e9       	ldi	r24, 0x90	; 144
    994c:	91 e0       	ldi	r25, 0x01	; 1
    994e:	9a 8b       	std	Y+18, r25	; 0x12
    9950:	89 8b       	std	Y+17, r24	; 0x11
    9952:	89 89       	ldd	r24, Y+17	; 0x11
    9954:	9a 89       	ldd	r25, Y+18	; 0x12
    9956:	01 97       	sbiw	r24, 0x01	; 1
    9958:	f1 f7       	brne	.-4      	; 0x9956 <LCD_voidDisplayChar+0xde>
    995a:	9a 8b       	std	Y+18, r25	; 0x12
    995c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    995e:	8b 89       	ldd	r24, Y+19	; 0x13
    9960:	9c 89       	ldd	r25, Y+20	; 0x14
    9962:	01 97       	sbiw	r24, 0x01	; 1
    9964:	9c 8b       	std	Y+20, r25	; 0x14
    9966:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9968:	8b 89       	ldd	r24, Y+19	; 0x13
    996a:	9c 89       	ldd	r25, Y+20	; 0x14
    996c:	00 97       	sbiw	r24, 0x00	; 0
    996e:	69 f7       	brne	.-38     	; 0x994a <LCD_voidDisplayChar+0xd2>
    9970:	14 c0       	rjmp	.+40     	; 0x999a <LCD_voidDisplayChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9972:	6d 89       	ldd	r22, Y+21	; 0x15
    9974:	7e 89       	ldd	r23, Y+22	; 0x16
    9976:	8f 89       	ldd	r24, Y+23	; 0x17
    9978:	98 8d       	ldd	r25, Y+24	; 0x18
    997a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    997e:	dc 01       	movw	r26, r24
    9980:	cb 01       	movw	r24, r22
    9982:	9c 8b       	std	Y+20, r25	; 0x14
    9984:	8b 8b       	std	Y+19, r24	; 0x13
    9986:	8b 89       	ldd	r24, Y+19	; 0x13
    9988:	9c 89       	ldd	r25, Y+20	; 0x14
    998a:	98 8b       	std	Y+16, r25	; 0x10
    998c:	8f 87       	std	Y+15, r24	; 0x0f
    998e:	8f 85       	ldd	r24, Y+15	; 0x0f
    9990:	98 89       	ldd	r25, Y+16	; 0x10
    9992:	01 97       	sbiw	r24, 0x01	; 1
    9994:	f1 f7       	brne	.-4      	; 0x9992 <LCD_voidDisplayChar+0x11a>
    9996:	98 8b       	std	Y+16, r25	; 0x10
    9998:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    999a:	81 e0       	ldi	r24, 0x01	; 1
    999c:	67 e0       	ldi	r22, 0x07	; 7
    999e:	40 e0       	ldi	r20, 0x00	; 0
    99a0:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	
	//Write Least 4-Bits Of The Command On Data Pins
	PRV_voidWriteHalfPort(copy_u8Char);
    99a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    99a6:	0e 94 e4 4f 	call	0x9fc8	; 0x9fc8 <PRV_voidWriteHalfPort>
	
	//Enable Pulse (H => L)
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    99aa:	81 e0       	ldi	r24, 0x01	; 1
    99ac:	67 e0       	ldi	r22, 0x07	; 7
    99ae:	41 e0       	ldi	r20, 0x01	; 1
    99b0:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
    99b4:	80 e0       	ldi	r24, 0x00	; 0
    99b6:	90 e0       	ldi	r25, 0x00	; 0
    99b8:	a0 e8       	ldi	r26, 0x80	; 128
    99ba:	bf e3       	ldi	r27, 0x3F	; 63
    99bc:	8b 87       	std	Y+11, r24	; 0x0b
    99be:	9c 87       	std	Y+12, r25	; 0x0c
    99c0:	ad 87       	std	Y+13, r26	; 0x0d
    99c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    99c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    99c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    99c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    99ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    99cc:	20 e0       	ldi	r18, 0x00	; 0
    99ce:	30 e0       	ldi	r19, 0x00	; 0
    99d0:	4a e7       	ldi	r20, 0x7A	; 122
    99d2:	55 e4       	ldi	r21, 0x45	; 69
    99d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    99d8:	dc 01       	movw	r26, r24
    99da:	cb 01       	movw	r24, r22
    99dc:	8f 83       	std	Y+7, r24	; 0x07
    99de:	98 87       	std	Y+8, r25	; 0x08
    99e0:	a9 87       	std	Y+9, r26	; 0x09
    99e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    99e4:	6f 81       	ldd	r22, Y+7	; 0x07
    99e6:	78 85       	ldd	r23, Y+8	; 0x08
    99e8:	89 85       	ldd	r24, Y+9	; 0x09
    99ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    99ec:	20 e0       	ldi	r18, 0x00	; 0
    99ee:	30 e0       	ldi	r19, 0x00	; 0
    99f0:	40 e8       	ldi	r20, 0x80	; 128
    99f2:	5f e3       	ldi	r21, 0x3F	; 63
    99f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    99f8:	88 23       	and	r24, r24
    99fa:	2c f4       	brge	.+10     	; 0x9a06 <LCD_voidDisplayChar+0x18e>
		__ticks = 1;
    99fc:	81 e0       	ldi	r24, 0x01	; 1
    99fe:	90 e0       	ldi	r25, 0x00	; 0
    9a00:	9e 83       	std	Y+6, r25	; 0x06
    9a02:	8d 83       	std	Y+5, r24	; 0x05
    9a04:	3f c0       	rjmp	.+126    	; 0x9a84 <LCD_voidDisplayChar+0x20c>
	else if (__tmp > 65535)
    9a06:	6f 81       	ldd	r22, Y+7	; 0x07
    9a08:	78 85       	ldd	r23, Y+8	; 0x08
    9a0a:	89 85       	ldd	r24, Y+9	; 0x09
    9a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    9a0e:	20 e0       	ldi	r18, 0x00	; 0
    9a10:	3f ef       	ldi	r19, 0xFF	; 255
    9a12:	4f e7       	ldi	r20, 0x7F	; 127
    9a14:	57 e4       	ldi	r21, 0x47	; 71
    9a16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    9a1a:	18 16       	cp	r1, r24
    9a1c:	4c f5       	brge	.+82     	; 0x9a70 <LCD_voidDisplayChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    9a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    9a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    9a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    9a26:	20 e0       	ldi	r18, 0x00	; 0
    9a28:	30 e0       	ldi	r19, 0x00	; 0
    9a2a:	40 e2       	ldi	r20, 0x20	; 32
    9a2c:	51 e4       	ldi	r21, 0x41	; 65
    9a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9a32:	dc 01       	movw	r26, r24
    9a34:	cb 01       	movw	r24, r22
    9a36:	bc 01       	movw	r22, r24
    9a38:	cd 01       	movw	r24, r26
    9a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9a3e:	dc 01       	movw	r26, r24
    9a40:	cb 01       	movw	r24, r22
    9a42:	9e 83       	std	Y+6, r25	; 0x06
    9a44:	8d 83       	std	Y+5, r24	; 0x05
    9a46:	0f c0       	rjmp	.+30     	; 0x9a66 <LCD_voidDisplayChar+0x1ee>
    9a48:	80 e9       	ldi	r24, 0x90	; 144
    9a4a:	91 e0       	ldi	r25, 0x01	; 1
    9a4c:	9c 83       	std	Y+4, r25	; 0x04
    9a4e:	8b 83       	std	Y+3, r24	; 0x03
    9a50:	8b 81       	ldd	r24, Y+3	; 0x03
    9a52:	9c 81       	ldd	r25, Y+4	; 0x04
    9a54:	01 97       	sbiw	r24, 0x01	; 1
    9a56:	f1 f7       	brne	.-4      	; 0x9a54 <LCD_voidDisplayChar+0x1dc>
    9a58:	9c 83       	std	Y+4, r25	; 0x04
    9a5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    9a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    9a60:	01 97       	sbiw	r24, 0x01	; 1
    9a62:	9e 83       	std	Y+6, r25	; 0x06
    9a64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9a66:	8d 81       	ldd	r24, Y+5	; 0x05
    9a68:	9e 81       	ldd	r25, Y+6	; 0x06
    9a6a:	00 97       	sbiw	r24, 0x00	; 0
    9a6c:	69 f7       	brne	.-38     	; 0x9a48 <LCD_voidDisplayChar+0x1d0>
    9a6e:	14 c0       	rjmp	.+40     	; 0x9a98 <LCD_voidDisplayChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9a70:	6f 81       	ldd	r22, Y+7	; 0x07
    9a72:	78 85       	ldd	r23, Y+8	; 0x08
    9a74:	89 85       	ldd	r24, Y+9	; 0x09
    9a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    9a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9a7c:	dc 01       	movw	r26, r24
    9a7e:	cb 01       	movw	r24, r22
    9a80:	9e 83       	std	Y+6, r25	; 0x06
    9a82:	8d 83       	std	Y+5, r24	; 0x05
    9a84:	8d 81       	ldd	r24, Y+5	; 0x05
    9a86:	9e 81       	ldd	r25, Y+6	; 0x06
    9a88:	9a 83       	std	Y+2, r25	; 0x02
    9a8a:	89 83       	std	Y+1, r24	; 0x01
    9a8c:	89 81       	ldd	r24, Y+1	; 0x01
    9a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    9a90:	01 97       	sbiw	r24, 0x01	; 1
    9a92:	f1 f7       	brne	.-4      	; 0x9a90 <LCD_voidDisplayChar+0x218>
    9a94:	9a 83       	std	Y+2, r25	; 0x02
    9a96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    9a98:	81 e0       	ldi	r24, 0x01	; 1
    9a9a:	67 e0       	ldi	r22, 0x07	; 7
    9a9c:	40 e0       	ldi	r20, 0x00	; 0
    9a9e:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
}
    9aa2:	6d 96       	adiw	r28, 0x1d	; 29
    9aa4:	0f b6       	in	r0, 0x3f	; 63
    9aa6:	f8 94       	cli
    9aa8:	de bf       	out	0x3e, r29	; 62
    9aaa:	0f be       	out	0x3f, r0	; 63
    9aac:	cd bf       	out	0x3d, r28	; 61
    9aae:	cf 91       	pop	r28
    9ab0:	df 91       	pop	r29
    9ab2:	08 95       	ret

00009ab4 <LCD_voidDisplayString>:
void LCD_voidDisplayString (u8* copy_pu8String)
{
    9ab4:	df 93       	push	r29
    9ab6:	cf 93       	push	r28
    9ab8:	00 d0       	rcall	.+0      	; 0x9aba <LCD_voidDisplayString+0x6>
    9aba:	0f 92       	push	r0
    9abc:	cd b7       	in	r28, 0x3d	; 61
    9abe:	de b7       	in	r29, 0x3e	; 62
    9ac0:	9b 83       	std	Y+3, r25	; 0x03
    9ac2:	8a 83       	std	Y+2, r24	; 0x02
	if (copy_pu8String != NULL)
    9ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    9ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    9ac8:	00 97       	sbiw	r24, 0x00	; 0
    9aca:	d9 f0       	breq	.+54     	; 0x9b02 <LCD_voidDisplayString+0x4e>
	{
		u8 local_u8Counter=0;
    9acc:	19 82       	std	Y+1, r1	; 0x01
    9ace:	0e c0       	rjmp	.+28     	; 0x9aec <LCD_voidDisplayString+0x38>
		while(copy_pu8String[local_u8Counter] != '\0')
		{
			LCD_voidDisplayChar(copy_pu8String[local_u8Counter]);
    9ad0:	89 81       	ldd	r24, Y+1	; 0x01
    9ad2:	28 2f       	mov	r18, r24
    9ad4:	30 e0       	ldi	r19, 0x00	; 0
    9ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    9ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    9ada:	fc 01       	movw	r30, r24
    9adc:	e2 0f       	add	r30, r18
    9ade:	f3 1f       	adc	r31, r19
    9ae0:	80 81       	ld	r24, Z
    9ae2:	0e 94 3c 4c 	call	0x9878	; 0x9878 <LCD_voidDisplayChar>
			local_u8Counter++;
    9ae6:	89 81       	ldd	r24, Y+1	; 0x01
    9ae8:	8f 5f       	subi	r24, 0xFF	; 255
    9aea:	89 83       	std	Y+1, r24	; 0x01
void LCD_voidDisplayString (u8* copy_pu8String)
{
	if (copy_pu8String != NULL)
	{
		u8 local_u8Counter=0;
		while(copy_pu8String[local_u8Counter] != '\0')
    9aec:	89 81       	ldd	r24, Y+1	; 0x01
    9aee:	28 2f       	mov	r18, r24
    9af0:	30 e0       	ldi	r19, 0x00	; 0
    9af2:	8a 81       	ldd	r24, Y+2	; 0x02
    9af4:	9b 81       	ldd	r25, Y+3	; 0x03
    9af6:	fc 01       	movw	r30, r24
    9af8:	e2 0f       	add	r30, r18
    9afa:	f3 1f       	adc	r31, r19
    9afc:	80 81       	ld	r24, Z
    9afe:	88 23       	and	r24, r24
    9b00:	39 f7       	brne	.-50     	; 0x9ad0 <LCD_voidDisplayString+0x1c>
	} 
	else
	{
		//Return Error Statement
	}
}
    9b02:	0f 90       	pop	r0
    9b04:	0f 90       	pop	r0
    9b06:	0f 90       	pop	r0
    9b08:	cf 91       	pop	r28
    9b0a:	df 91       	pop	r29
    9b0c:	08 95       	ret

00009b0e <LCD_voidDisplayNumber>:
void LCD_voidDisplayNumber(u32 copy_u32Number)
{
    9b0e:	ef 92       	push	r14
    9b10:	ff 92       	push	r15
    9b12:	0f 93       	push	r16
    9b14:	1f 93       	push	r17
    9b16:	df 93       	push	r29
    9b18:	cf 93       	push	r28
    9b1a:	cd b7       	in	r28, 0x3d	; 61
    9b1c:	de b7       	in	r29, 0x3e	; 62
    9b1e:	28 97       	sbiw	r28, 0x08	; 8
    9b20:	0f b6       	in	r0, 0x3f	; 63
    9b22:	f8 94       	cli
    9b24:	de bf       	out	0x3e, r29	; 62
    9b26:	0f be       	out	0x3f, r0	; 63
    9b28:	cd bf       	out	0x3d, r28	; 61
    9b2a:	6d 83       	std	Y+5, r22	; 0x05
    9b2c:	7e 83       	std	Y+6, r23	; 0x06
    9b2e:	8f 83       	std	Y+7, r24	; 0x07
    9b30:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32ReversedNumber=1;
    9b32:	81 e0       	ldi	r24, 0x01	; 1
    9b34:	90 e0       	ldi	r25, 0x00	; 0
    9b36:	a0 e0       	ldi	r26, 0x00	; 0
    9b38:	b0 e0       	ldi	r27, 0x00	; 0
    9b3a:	89 83       	std	Y+1, r24	; 0x01
    9b3c:	9a 83       	std	Y+2, r25	; 0x02
    9b3e:	ab 83       	std	Y+3, r26	; 0x03
    9b40:	bc 83       	std	Y+4, r27	; 0x04
	
	if(copy_u32Number == 0)
    9b42:	8d 81       	ldd	r24, Y+5	; 0x05
    9b44:	9e 81       	ldd	r25, Y+6	; 0x06
    9b46:	af 81       	ldd	r26, Y+7	; 0x07
    9b48:	b8 85       	ldd	r27, Y+8	; 0x08
    9b4a:	00 97       	sbiw	r24, 0x00	; 0
    9b4c:	a1 05       	cpc	r26, r1
    9b4e:	b1 05       	cpc	r27, r1
    9b50:	d1 f5       	brne	.+116    	; 0x9bc6 <LCD_voidDisplayNumber+0xb8>
	{
		LCD_voidDisplayChar('0');
    9b52:	80 e3       	ldi	r24, 0x30	; 48
    9b54:	0e 94 3c 4c 	call	0x9878	; 0x9878 <LCD_voidDisplayChar>
    9b58:	6a c0       	rjmp	.+212    	; 0x9c2e <LCD_voidDisplayNumber+0x120>
	else
	{
		// Reverse The Number
		while(copy_u32Number != 0)
		{
			local_u32ReversedNumber = local_u32ReversedNumber*10+(copy_u32Number%10);
    9b5a:	89 81       	ldd	r24, Y+1	; 0x01
    9b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    9b5e:	ab 81       	ldd	r26, Y+3	; 0x03
    9b60:	bc 81       	ldd	r27, Y+4	; 0x04
    9b62:	2a e0       	ldi	r18, 0x0A	; 10
    9b64:	30 e0       	ldi	r19, 0x00	; 0
    9b66:	40 e0       	ldi	r20, 0x00	; 0
    9b68:	50 e0       	ldi	r21, 0x00	; 0
    9b6a:	bc 01       	movw	r22, r24
    9b6c:	cd 01       	movw	r24, r26
    9b6e:	0e 94 66 5b 	call	0xb6cc	; 0xb6cc <__mulsi3>
    9b72:	7b 01       	movw	r14, r22
    9b74:	8c 01       	movw	r16, r24
    9b76:	8d 81       	ldd	r24, Y+5	; 0x05
    9b78:	9e 81       	ldd	r25, Y+6	; 0x06
    9b7a:	af 81       	ldd	r26, Y+7	; 0x07
    9b7c:	b8 85       	ldd	r27, Y+8	; 0x08
    9b7e:	2a e0       	ldi	r18, 0x0A	; 10
    9b80:	30 e0       	ldi	r19, 0x00	; 0
    9b82:	40 e0       	ldi	r20, 0x00	; 0
    9b84:	50 e0       	ldi	r21, 0x00	; 0
    9b86:	bc 01       	movw	r22, r24
    9b88:	cd 01       	movw	r24, r26
    9b8a:	0e 94 a5 5b 	call	0xb74a	; 0xb74a <__udivmodsi4>
    9b8e:	dc 01       	movw	r26, r24
    9b90:	cb 01       	movw	r24, r22
    9b92:	8e 0d       	add	r24, r14
    9b94:	9f 1d       	adc	r25, r15
    9b96:	a0 1f       	adc	r26, r16
    9b98:	b1 1f       	adc	r27, r17
    9b9a:	89 83       	std	Y+1, r24	; 0x01
    9b9c:	9a 83       	std	Y+2, r25	; 0x02
    9b9e:	ab 83       	std	Y+3, r26	; 0x03
    9ba0:	bc 83       	std	Y+4, r27	; 0x04
			copy_u32Number /= 10;
    9ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    9ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    9ba6:	af 81       	ldd	r26, Y+7	; 0x07
    9ba8:	b8 85       	ldd	r27, Y+8	; 0x08
    9baa:	2a e0       	ldi	r18, 0x0A	; 10
    9bac:	30 e0       	ldi	r19, 0x00	; 0
    9bae:	40 e0       	ldi	r20, 0x00	; 0
    9bb0:	50 e0       	ldi	r21, 0x00	; 0
    9bb2:	bc 01       	movw	r22, r24
    9bb4:	cd 01       	movw	r24, r26
    9bb6:	0e 94 a5 5b 	call	0xb74a	; 0xb74a <__udivmodsi4>
    9bba:	da 01       	movw	r26, r20
    9bbc:	c9 01       	movw	r24, r18
    9bbe:	8d 83       	std	Y+5, r24	; 0x05
    9bc0:	9e 83       	std	Y+6, r25	; 0x06
    9bc2:	af 83       	std	Y+7, r26	; 0x07
    9bc4:	b8 87       	std	Y+8, r27	; 0x08
		LCD_voidDisplayChar('0');
	}
	else
	{
		// Reverse The Number
		while(copy_u32Number != 0)
    9bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    9bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    9bca:	af 81       	ldd	r26, Y+7	; 0x07
    9bcc:	b8 85       	ldd	r27, Y+8	; 0x08
    9bce:	00 97       	sbiw	r24, 0x00	; 0
    9bd0:	a1 05       	cpc	r26, r1
    9bd2:	b1 05       	cpc	r27, r1
    9bd4:	11 f6       	brne	.-124    	; 0x9b5a <LCD_voidDisplayNumber+0x4c>
			copy_u32Number /= 10;
		}
		
		do
		{
			LCD_voidDisplayChar((local_u32ReversedNumber%10)+'0');
    9bd6:	89 81       	ldd	r24, Y+1	; 0x01
    9bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    9bda:	ab 81       	ldd	r26, Y+3	; 0x03
    9bdc:	bc 81       	ldd	r27, Y+4	; 0x04
    9bde:	2a e0       	ldi	r18, 0x0A	; 10
    9be0:	30 e0       	ldi	r19, 0x00	; 0
    9be2:	40 e0       	ldi	r20, 0x00	; 0
    9be4:	50 e0       	ldi	r21, 0x00	; 0
    9be6:	bc 01       	movw	r22, r24
    9be8:	cd 01       	movw	r24, r26
    9bea:	0e 94 a5 5b 	call	0xb74a	; 0xb74a <__udivmodsi4>
    9bee:	dc 01       	movw	r26, r24
    9bf0:	cb 01       	movw	r24, r22
    9bf2:	80 5d       	subi	r24, 0xD0	; 208
    9bf4:	0e 94 3c 4c 	call	0x9878	; 0x9878 <LCD_voidDisplayChar>
			local_u32ReversedNumber /= 10;
    9bf8:	89 81       	ldd	r24, Y+1	; 0x01
    9bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    9bfc:	ab 81       	ldd	r26, Y+3	; 0x03
    9bfe:	bc 81       	ldd	r27, Y+4	; 0x04
    9c00:	2a e0       	ldi	r18, 0x0A	; 10
    9c02:	30 e0       	ldi	r19, 0x00	; 0
    9c04:	40 e0       	ldi	r20, 0x00	; 0
    9c06:	50 e0       	ldi	r21, 0x00	; 0
    9c08:	bc 01       	movw	r22, r24
    9c0a:	cd 01       	movw	r24, r26
    9c0c:	0e 94 a5 5b 	call	0xb74a	; 0xb74a <__udivmodsi4>
    9c10:	da 01       	movw	r26, r20
    9c12:	c9 01       	movw	r24, r18
    9c14:	89 83       	std	Y+1, r24	; 0x01
    9c16:	9a 83       	std	Y+2, r25	; 0x02
    9c18:	ab 83       	std	Y+3, r26	; 0x03
    9c1a:	bc 83       	std	Y+4, r27	; 0x04
		} while (local_u32ReversedNumber != 1);
    9c1c:	89 81       	ldd	r24, Y+1	; 0x01
    9c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    9c20:	ab 81       	ldd	r26, Y+3	; 0x03
    9c22:	bc 81       	ldd	r27, Y+4	; 0x04
    9c24:	81 30       	cpi	r24, 0x01	; 1
    9c26:	91 05       	cpc	r25, r1
    9c28:	a1 05       	cpc	r26, r1
    9c2a:	b1 05       	cpc	r27, r1
    9c2c:	a1 f6       	brne	.-88     	; 0x9bd6 <LCD_voidDisplayNumber+0xc8>
	}
}
    9c2e:	28 96       	adiw	r28, 0x08	; 8
    9c30:	0f b6       	in	r0, 0x3f	; 63
    9c32:	f8 94       	cli
    9c34:	de bf       	out	0x3e, r29	; 62
    9c36:	0f be       	out	0x3f, r0	; 63
    9c38:	cd bf       	out	0x3d, r28	; 61
    9c3a:	cf 91       	pop	r28
    9c3c:	df 91       	pop	r29
    9c3e:	1f 91       	pop	r17
    9c40:	0f 91       	pop	r16
    9c42:	ff 90       	pop	r15
    9c44:	ef 90       	pop	r14
    9c46:	08 95       	ret

00009c48 <LCD_voidClear>:
void LCD_voidClear(void)
{
    9c48:	df 93       	push	r29
    9c4a:	cf 93       	push	r28
    9c4c:	cd b7       	in	r28, 0x3d	; 61
    9c4e:	de b7       	in	r29, 0x3e	; 62
    9c50:	2e 97       	sbiw	r28, 0x0e	; 14
    9c52:	0f b6       	in	r0, 0x3f	; 63
    9c54:	f8 94       	cli
    9c56:	de bf       	out	0x3e, r29	; 62
    9c58:	0f be       	out	0x3f, r0	; 63
    9c5a:	cd bf       	out	0x3d, r28	; 61
	//Display Clear
	LCD_voidSendCommand(0b00000001);
    9c5c:	81 e0       	ldi	r24, 0x01	; 1
    9c5e:	0e 94 1e 4b 	call	0x963c	; 0x963c <LCD_voidSendCommand>
    9c62:	80 e0       	ldi	r24, 0x00	; 0
    9c64:	90 e0       	ldi	r25, 0x00	; 0
    9c66:	a0 e0       	ldi	r26, 0x00	; 0
    9c68:	b0 e4       	ldi	r27, 0x40	; 64
    9c6a:	8b 87       	std	Y+11, r24	; 0x0b
    9c6c:	9c 87       	std	Y+12, r25	; 0x0c
    9c6e:	ad 87       	std	Y+13, r26	; 0x0d
    9c70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9c72:	6b 85       	ldd	r22, Y+11	; 0x0b
    9c74:	7c 85       	ldd	r23, Y+12	; 0x0c
    9c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    9c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    9c7a:	20 e0       	ldi	r18, 0x00	; 0
    9c7c:	30 e0       	ldi	r19, 0x00	; 0
    9c7e:	4a e7       	ldi	r20, 0x7A	; 122
    9c80:	55 e4       	ldi	r21, 0x45	; 69
    9c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9c86:	dc 01       	movw	r26, r24
    9c88:	cb 01       	movw	r24, r22
    9c8a:	8f 83       	std	Y+7, r24	; 0x07
    9c8c:	98 87       	std	Y+8, r25	; 0x08
    9c8e:	a9 87       	std	Y+9, r26	; 0x09
    9c90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    9c92:	6f 81       	ldd	r22, Y+7	; 0x07
    9c94:	78 85       	ldd	r23, Y+8	; 0x08
    9c96:	89 85       	ldd	r24, Y+9	; 0x09
    9c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    9c9a:	20 e0       	ldi	r18, 0x00	; 0
    9c9c:	30 e0       	ldi	r19, 0x00	; 0
    9c9e:	40 e8       	ldi	r20, 0x80	; 128
    9ca0:	5f e3       	ldi	r21, 0x3F	; 63
    9ca2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    9ca6:	88 23       	and	r24, r24
    9ca8:	2c f4       	brge	.+10     	; 0x9cb4 <LCD_voidClear+0x6c>
		__ticks = 1;
    9caa:	81 e0       	ldi	r24, 0x01	; 1
    9cac:	90 e0       	ldi	r25, 0x00	; 0
    9cae:	9e 83       	std	Y+6, r25	; 0x06
    9cb0:	8d 83       	std	Y+5, r24	; 0x05
    9cb2:	3f c0       	rjmp	.+126    	; 0x9d32 <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    9cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    9cb6:	78 85       	ldd	r23, Y+8	; 0x08
    9cb8:	89 85       	ldd	r24, Y+9	; 0x09
    9cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    9cbc:	20 e0       	ldi	r18, 0x00	; 0
    9cbe:	3f ef       	ldi	r19, 0xFF	; 255
    9cc0:	4f e7       	ldi	r20, 0x7F	; 127
    9cc2:	57 e4       	ldi	r21, 0x47	; 71
    9cc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    9cc8:	18 16       	cp	r1, r24
    9cca:	4c f5       	brge	.+82     	; 0x9d1e <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    9cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    9cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    9cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    9cd4:	20 e0       	ldi	r18, 0x00	; 0
    9cd6:	30 e0       	ldi	r19, 0x00	; 0
    9cd8:	40 e2       	ldi	r20, 0x20	; 32
    9cda:	51 e4       	ldi	r21, 0x41	; 65
    9cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9ce0:	dc 01       	movw	r26, r24
    9ce2:	cb 01       	movw	r24, r22
    9ce4:	bc 01       	movw	r22, r24
    9ce6:	cd 01       	movw	r24, r26
    9ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9cec:	dc 01       	movw	r26, r24
    9cee:	cb 01       	movw	r24, r22
    9cf0:	9e 83       	std	Y+6, r25	; 0x06
    9cf2:	8d 83       	std	Y+5, r24	; 0x05
    9cf4:	0f c0       	rjmp	.+30     	; 0x9d14 <LCD_voidClear+0xcc>
    9cf6:	80 e9       	ldi	r24, 0x90	; 144
    9cf8:	91 e0       	ldi	r25, 0x01	; 1
    9cfa:	9c 83       	std	Y+4, r25	; 0x04
    9cfc:	8b 83       	std	Y+3, r24	; 0x03
    9cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    9d00:	9c 81       	ldd	r25, Y+4	; 0x04
    9d02:	01 97       	sbiw	r24, 0x01	; 1
    9d04:	f1 f7       	brne	.-4      	; 0x9d02 <LCD_voidClear+0xba>
    9d06:	9c 83       	std	Y+4, r25	; 0x04
    9d08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    9d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    9d0e:	01 97       	sbiw	r24, 0x01	; 1
    9d10:	9e 83       	std	Y+6, r25	; 0x06
    9d12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9d14:	8d 81       	ldd	r24, Y+5	; 0x05
    9d16:	9e 81       	ldd	r25, Y+6	; 0x06
    9d18:	00 97       	sbiw	r24, 0x00	; 0
    9d1a:	69 f7       	brne	.-38     	; 0x9cf6 <LCD_voidClear+0xae>
    9d1c:	14 c0       	rjmp	.+40     	; 0x9d46 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    9d20:	78 85       	ldd	r23, Y+8	; 0x08
    9d22:	89 85       	ldd	r24, Y+9	; 0x09
    9d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    9d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9d2a:	dc 01       	movw	r26, r24
    9d2c:	cb 01       	movw	r24, r22
    9d2e:	9e 83       	std	Y+6, r25	; 0x06
    9d30:	8d 83       	std	Y+5, r24	; 0x05
    9d32:	8d 81       	ldd	r24, Y+5	; 0x05
    9d34:	9e 81       	ldd	r25, Y+6	; 0x06
    9d36:	9a 83       	std	Y+2, r25	; 0x02
    9d38:	89 83       	std	Y+1, r24	; 0x01
    9d3a:	89 81       	ldd	r24, Y+1	; 0x01
    9d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    9d3e:	01 97       	sbiw	r24, 0x01	; 1
    9d40:	f1 f7       	brne	.-4      	; 0x9d3e <LCD_voidClear+0xf6>
    9d42:	9a 83       	std	Y+2, r25	; 0x02
    9d44:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    9d46:	2e 96       	adiw	r28, 0x0e	; 14
    9d48:	0f b6       	in	r0, 0x3f	; 63
    9d4a:	f8 94       	cli
    9d4c:	de bf       	out	0x3e, r29	; 62
    9d4e:	0f be       	out	0x3f, r0	; 63
    9d50:	cd bf       	out	0x3d, r28	; 61
    9d52:	cf 91       	pop	r28
    9d54:	df 91       	pop	r29
    9d56:	08 95       	ret

00009d58 <LCD_voidShift>:

void LCD_voidShift               (u8 copy_u8ShifttingDirection)
{
    9d58:	df 93       	push	r29
    9d5a:	cf 93       	push	r28
    9d5c:	cd b7       	in	r28, 0x3d	; 61
    9d5e:	de b7       	in	r29, 0x3e	; 62
    9d60:	6f 97       	sbiw	r28, 0x1f	; 31
    9d62:	0f b6       	in	r0, 0x3f	; 63
    9d64:	f8 94       	cli
    9d66:	de bf       	out	0x3e, r29	; 62
    9d68:	0f be       	out	0x3f, r0	; 63
    9d6a:	cd bf       	out	0x3d, r28	; 61
    9d6c:	8d 8f       	std	Y+29, r24	; 0x1d
	switch(copy_u8ShifttingDirection)
    9d6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9d70:	28 2f       	mov	r18, r24
    9d72:	30 e0       	ldi	r19, 0x00	; 0
    9d74:	3f 8f       	std	Y+31, r19	; 0x1f
    9d76:	2e 8f       	std	Y+30, r18	; 0x1e
    9d78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9d7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    9d7c:	81 30       	cpi	r24, 0x01	; 1
    9d7e:	91 05       	cpc	r25, r1
    9d80:	39 f0       	breq	.+14     	; 0x9d90 <LCD_voidShift+0x38>
    9d82:	2e 8d       	ldd	r18, Y+30	; 0x1e
    9d84:	3f 8d       	ldd	r19, Y+31	; 0x1f
    9d86:	22 30       	cpi	r18, 0x02	; 2
    9d88:	31 05       	cpc	r19, r1
    9d8a:	09 f4       	brne	.+2      	; 0x9d8e <LCD_voidShift+0x36>
    9d8c:	77 c0       	rjmp	.+238    	; 0x9e7c <LCD_voidShift+0x124>
    9d8e:	eb c0       	rjmp	.+470    	; 0x9f66 <LCD_voidShift+0x20e>
	{
		case LCD_SHIFT_RIGHT:
		LCD_voidSendCommand(0b00011100);
    9d90:	8c e1       	ldi	r24, 0x1C	; 28
    9d92:	0e 94 1e 4b 	call	0x963c	; 0x963c <LCD_voidSendCommand>
    9d96:	80 e0       	ldi	r24, 0x00	; 0
    9d98:	90 e0       	ldi	r25, 0x00	; 0
    9d9a:	a0 e2       	ldi	r26, 0x20	; 32
    9d9c:	b1 e4       	ldi	r27, 0x41	; 65
    9d9e:	89 8f       	std	Y+25, r24	; 0x19
    9da0:	9a 8f       	std	Y+26, r25	; 0x1a
    9da2:	ab 8f       	std	Y+27, r26	; 0x1b
    9da4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9da6:	69 8d       	ldd	r22, Y+25	; 0x19
    9da8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    9daa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9dac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    9dae:	20 e0       	ldi	r18, 0x00	; 0
    9db0:	30 e0       	ldi	r19, 0x00	; 0
    9db2:	4a e7       	ldi	r20, 0x7A	; 122
    9db4:	55 e4       	ldi	r21, 0x45	; 69
    9db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9dba:	dc 01       	movw	r26, r24
    9dbc:	cb 01       	movw	r24, r22
    9dbe:	8d 8b       	std	Y+21, r24	; 0x15
    9dc0:	9e 8b       	std	Y+22, r25	; 0x16
    9dc2:	af 8b       	std	Y+23, r26	; 0x17
    9dc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    9dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    9dc8:	7e 89       	ldd	r23, Y+22	; 0x16
    9dca:	8f 89       	ldd	r24, Y+23	; 0x17
    9dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    9dce:	20 e0       	ldi	r18, 0x00	; 0
    9dd0:	30 e0       	ldi	r19, 0x00	; 0
    9dd2:	40 e8       	ldi	r20, 0x80	; 128
    9dd4:	5f e3       	ldi	r21, 0x3F	; 63
    9dd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    9dda:	88 23       	and	r24, r24
    9ddc:	2c f4       	brge	.+10     	; 0x9de8 <LCD_voidShift+0x90>
		__ticks = 1;
    9dde:	81 e0       	ldi	r24, 0x01	; 1
    9de0:	90 e0       	ldi	r25, 0x00	; 0
    9de2:	9c 8b       	std	Y+20, r25	; 0x14
    9de4:	8b 8b       	std	Y+19, r24	; 0x13
    9de6:	3f c0       	rjmp	.+126    	; 0x9e66 <LCD_voidShift+0x10e>
	else if (__tmp > 65535)
    9de8:	6d 89       	ldd	r22, Y+21	; 0x15
    9dea:	7e 89       	ldd	r23, Y+22	; 0x16
    9dec:	8f 89       	ldd	r24, Y+23	; 0x17
    9dee:	98 8d       	ldd	r25, Y+24	; 0x18
    9df0:	20 e0       	ldi	r18, 0x00	; 0
    9df2:	3f ef       	ldi	r19, 0xFF	; 255
    9df4:	4f e7       	ldi	r20, 0x7F	; 127
    9df6:	57 e4       	ldi	r21, 0x47	; 71
    9df8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    9dfc:	18 16       	cp	r1, r24
    9dfe:	4c f5       	brge	.+82     	; 0x9e52 <LCD_voidShift+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9e00:	69 8d       	ldd	r22, Y+25	; 0x19
    9e02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    9e04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9e06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    9e08:	20 e0       	ldi	r18, 0x00	; 0
    9e0a:	30 e0       	ldi	r19, 0x00	; 0
    9e0c:	40 e2       	ldi	r20, 0x20	; 32
    9e0e:	51 e4       	ldi	r21, 0x41	; 65
    9e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9e14:	dc 01       	movw	r26, r24
    9e16:	cb 01       	movw	r24, r22
    9e18:	bc 01       	movw	r22, r24
    9e1a:	cd 01       	movw	r24, r26
    9e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9e20:	dc 01       	movw	r26, r24
    9e22:	cb 01       	movw	r24, r22
    9e24:	9c 8b       	std	Y+20, r25	; 0x14
    9e26:	8b 8b       	std	Y+19, r24	; 0x13
    9e28:	0f c0       	rjmp	.+30     	; 0x9e48 <LCD_voidShift+0xf0>
    9e2a:	80 e9       	ldi	r24, 0x90	; 144
    9e2c:	91 e0       	ldi	r25, 0x01	; 1
    9e2e:	9a 8b       	std	Y+18, r25	; 0x12
    9e30:	89 8b       	std	Y+17, r24	; 0x11
    9e32:	89 89       	ldd	r24, Y+17	; 0x11
    9e34:	9a 89       	ldd	r25, Y+18	; 0x12
    9e36:	01 97       	sbiw	r24, 0x01	; 1
    9e38:	f1 f7       	brne	.-4      	; 0x9e36 <LCD_voidShift+0xde>
    9e3a:	9a 8b       	std	Y+18, r25	; 0x12
    9e3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    9e40:	9c 89       	ldd	r25, Y+20	; 0x14
    9e42:	01 97       	sbiw	r24, 0x01	; 1
    9e44:	9c 8b       	std	Y+20, r25	; 0x14
    9e46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9e48:	8b 89       	ldd	r24, Y+19	; 0x13
    9e4a:	9c 89       	ldd	r25, Y+20	; 0x14
    9e4c:	00 97       	sbiw	r24, 0x00	; 0
    9e4e:	69 f7       	brne	.-38     	; 0x9e2a <LCD_voidShift+0xd2>
    9e50:	8a c0       	rjmp	.+276    	; 0x9f66 <LCD_voidShift+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9e52:	6d 89       	ldd	r22, Y+21	; 0x15
    9e54:	7e 89       	ldd	r23, Y+22	; 0x16
    9e56:	8f 89       	ldd	r24, Y+23	; 0x17
    9e58:	98 8d       	ldd	r25, Y+24	; 0x18
    9e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9e5e:	dc 01       	movw	r26, r24
    9e60:	cb 01       	movw	r24, r22
    9e62:	9c 8b       	std	Y+20, r25	; 0x14
    9e64:	8b 8b       	std	Y+19, r24	; 0x13
    9e66:	8b 89       	ldd	r24, Y+19	; 0x13
    9e68:	9c 89       	ldd	r25, Y+20	; 0x14
    9e6a:	98 8b       	std	Y+16, r25	; 0x10
    9e6c:	8f 87       	std	Y+15, r24	; 0x0f
    9e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    9e70:	98 89       	ldd	r25, Y+16	; 0x10
    9e72:	01 97       	sbiw	r24, 0x01	; 1
    9e74:	f1 f7       	brne	.-4      	; 0x9e72 <LCD_voidShift+0x11a>
    9e76:	98 8b       	std	Y+16, r25	; 0x10
    9e78:	8f 87       	std	Y+15, r24	; 0x0f
    9e7a:	75 c0       	rjmp	.+234    	; 0x9f66 <LCD_voidShift+0x20e>
		_delay_ms(10);
		break;
		case LCD_SHIFT_LEFT:
		LCD_voidSendCommand(0b00011000);
    9e7c:	88 e1       	ldi	r24, 0x18	; 24
    9e7e:	0e 94 1e 4b 	call	0x963c	; 0x963c <LCD_voidSendCommand>
    9e82:	80 e0       	ldi	r24, 0x00	; 0
    9e84:	90 e0       	ldi	r25, 0x00	; 0
    9e86:	a0 e2       	ldi	r26, 0x20	; 32
    9e88:	b1 e4       	ldi	r27, 0x41	; 65
    9e8a:	8b 87       	std	Y+11, r24	; 0x0b
    9e8c:	9c 87       	std	Y+12, r25	; 0x0c
    9e8e:	ad 87       	std	Y+13, r26	; 0x0d
    9e90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9e92:	6b 85       	ldd	r22, Y+11	; 0x0b
    9e94:	7c 85       	ldd	r23, Y+12	; 0x0c
    9e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    9e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    9e9a:	20 e0       	ldi	r18, 0x00	; 0
    9e9c:	30 e0       	ldi	r19, 0x00	; 0
    9e9e:	4a e7       	ldi	r20, 0x7A	; 122
    9ea0:	55 e4       	ldi	r21, 0x45	; 69
    9ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9ea6:	dc 01       	movw	r26, r24
    9ea8:	cb 01       	movw	r24, r22
    9eaa:	8f 83       	std	Y+7, r24	; 0x07
    9eac:	98 87       	std	Y+8, r25	; 0x08
    9eae:	a9 87       	std	Y+9, r26	; 0x09
    9eb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    9eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    9eb4:	78 85       	ldd	r23, Y+8	; 0x08
    9eb6:	89 85       	ldd	r24, Y+9	; 0x09
    9eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    9eba:	20 e0       	ldi	r18, 0x00	; 0
    9ebc:	30 e0       	ldi	r19, 0x00	; 0
    9ebe:	40 e8       	ldi	r20, 0x80	; 128
    9ec0:	5f e3       	ldi	r21, 0x3F	; 63
    9ec2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    9ec6:	88 23       	and	r24, r24
    9ec8:	2c f4       	brge	.+10     	; 0x9ed4 <LCD_voidShift+0x17c>
		__ticks = 1;
    9eca:	81 e0       	ldi	r24, 0x01	; 1
    9ecc:	90 e0       	ldi	r25, 0x00	; 0
    9ece:	9e 83       	std	Y+6, r25	; 0x06
    9ed0:	8d 83       	std	Y+5, r24	; 0x05
    9ed2:	3f c0       	rjmp	.+126    	; 0x9f52 <LCD_voidShift+0x1fa>
	else if (__tmp > 65535)
    9ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    9ed6:	78 85       	ldd	r23, Y+8	; 0x08
    9ed8:	89 85       	ldd	r24, Y+9	; 0x09
    9eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    9edc:	20 e0       	ldi	r18, 0x00	; 0
    9ede:	3f ef       	ldi	r19, 0xFF	; 255
    9ee0:	4f e7       	ldi	r20, 0x7F	; 127
    9ee2:	57 e4       	ldi	r21, 0x47	; 71
    9ee4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    9ee8:	18 16       	cp	r1, r24
    9eea:	4c f5       	brge	.+82     	; 0x9f3e <LCD_voidShift+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9eec:	6b 85       	ldd	r22, Y+11	; 0x0b
    9eee:	7c 85       	ldd	r23, Y+12	; 0x0c
    9ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
    9ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
    9ef4:	20 e0       	ldi	r18, 0x00	; 0
    9ef6:	30 e0       	ldi	r19, 0x00	; 0
    9ef8:	40 e2       	ldi	r20, 0x20	; 32
    9efa:	51 e4       	ldi	r21, 0x41	; 65
    9efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9f00:	dc 01       	movw	r26, r24
    9f02:	cb 01       	movw	r24, r22
    9f04:	bc 01       	movw	r22, r24
    9f06:	cd 01       	movw	r24, r26
    9f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9f0c:	dc 01       	movw	r26, r24
    9f0e:	cb 01       	movw	r24, r22
    9f10:	9e 83       	std	Y+6, r25	; 0x06
    9f12:	8d 83       	std	Y+5, r24	; 0x05
    9f14:	0f c0       	rjmp	.+30     	; 0x9f34 <LCD_voidShift+0x1dc>
    9f16:	80 e9       	ldi	r24, 0x90	; 144
    9f18:	91 e0       	ldi	r25, 0x01	; 1
    9f1a:	9c 83       	std	Y+4, r25	; 0x04
    9f1c:	8b 83       	std	Y+3, r24	; 0x03
    9f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    9f20:	9c 81       	ldd	r25, Y+4	; 0x04
    9f22:	01 97       	sbiw	r24, 0x01	; 1
    9f24:	f1 f7       	brne	.-4      	; 0x9f22 <LCD_voidShift+0x1ca>
    9f26:	9c 83       	std	Y+4, r25	; 0x04
    9f28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    9f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    9f2e:	01 97       	sbiw	r24, 0x01	; 1
    9f30:	9e 83       	std	Y+6, r25	; 0x06
    9f32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9f34:	8d 81       	ldd	r24, Y+5	; 0x05
    9f36:	9e 81       	ldd	r25, Y+6	; 0x06
    9f38:	00 97       	sbiw	r24, 0x00	; 0
    9f3a:	69 f7       	brne	.-38     	; 0x9f16 <LCD_voidShift+0x1be>
    9f3c:	14 c0       	rjmp	.+40     	; 0x9f66 <LCD_voidShift+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    9f40:	78 85       	ldd	r23, Y+8	; 0x08
    9f42:	89 85       	ldd	r24, Y+9	; 0x09
    9f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    9f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9f4a:	dc 01       	movw	r26, r24
    9f4c:	cb 01       	movw	r24, r22
    9f4e:	9e 83       	std	Y+6, r25	; 0x06
    9f50:	8d 83       	std	Y+5, r24	; 0x05
    9f52:	8d 81       	ldd	r24, Y+5	; 0x05
    9f54:	9e 81       	ldd	r25, Y+6	; 0x06
    9f56:	9a 83       	std	Y+2, r25	; 0x02
    9f58:	89 83       	std	Y+1, r24	; 0x01
    9f5a:	89 81       	ldd	r24, Y+1	; 0x01
    9f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    9f5e:	01 97       	sbiw	r24, 0x01	; 1
    9f60:	f1 f7       	brne	.-4      	; 0x9f5e <LCD_voidShift+0x206>
    9f62:	9a 83       	std	Y+2, r25	; 0x02
    9f64:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		break;
	}
}
    9f66:	6f 96       	adiw	r28, 0x1f	; 31
    9f68:	0f b6       	in	r0, 0x3f	; 63
    9f6a:	f8 94       	cli
    9f6c:	de bf       	out	0x3e, r29	; 62
    9f6e:	0f be       	out	0x3f, r0	; 63
    9f70:	cd bf       	out	0x3d, r28	; 61
    9f72:	cf 91       	pop	r28
    9f74:	df 91       	pop	r29
    9f76:	08 95       	ret

00009f78 <LCD_voidGoToSpecificPosition>:
void LCD_voidGoToSpecificPosition(u8 copy_u8LineNumber, u8 copy_u8Position)
{
    9f78:	df 93       	push	r29
    9f7a:	cf 93       	push	r28
    9f7c:	00 d0       	rcall	.+0      	; 0x9f7e <LCD_voidGoToSpecificPosition+0x6>
    9f7e:	00 d0       	rcall	.+0      	; 0x9f80 <LCD_voidGoToSpecificPosition+0x8>
    9f80:	cd b7       	in	r28, 0x3d	; 61
    9f82:	de b7       	in	r29, 0x3e	; 62
    9f84:	89 83       	std	Y+1, r24	; 0x01
    9f86:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8LineNumber)
    9f88:	89 81       	ldd	r24, Y+1	; 0x01
    9f8a:	28 2f       	mov	r18, r24
    9f8c:	30 e0       	ldi	r19, 0x00	; 0
    9f8e:	3c 83       	std	Y+4, r19	; 0x04
    9f90:	2b 83       	std	Y+3, r18	; 0x03
    9f92:	8b 81       	ldd	r24, Y+3	; 0x03
    9f94:	9c 81       	ldd	r25, Y+4	; 0x04
    9f96:	81 30       	cpi	r24, 0x01	; 1
    9f98:	91 05       	cpc	r25, r1
    9f9a:	31 f0       	breq	.+12     	; 0x9fa8 <LCD_voidGoToSpecificPosition+0x30>
    9f9c:	2b 81       	ldd	r18, Y+3	; 0x03
    9f9e:	3c 81       	ldd	r19, Y+4	; 0x04
    9fa0:	22 30       	cpi	r18, 0x02	; 2
    9fa2:	31 05       	cpc	r19, r1
    9fa4:	31 f0       	breq	.+12     	; 0x9fb2 <LCD_voidGoToSpecificPosition+0x3a>
    9fa6:	09 c0       	rjmp	.+18     	; 0x9fba <LCD_voidGoToSpecificPosition+0x42>
	{
		case LCD_LINE_ONE:
		LCD_voidSendCommand(0x80 + copy_u8Position);
    9fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    9faa:	80 58       	subi	r24, 0x80	; 128
    9fac:	0e 94 1e 4b 	call	0x963c	; 0x963c <LCD_voidSendCommand>
    9fb0:	04 c0       	rjmp	.+8      	; 0x9fba <LCD_voidGoToSpecificPosition+0x42>
		break;
		
		case LCD_LINE_TWO:
		LCD_voidSendCommand(0xC0 + copy_u8Position);
    9fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    9fb4:	80 54       	subi	r24, 0x40	; 64
    9fb6:	0e 94 1e 4b 	call	0x963c	; 0x963c <LCD_voidSendCommand>
	}
		
}
    9fba:	0f 90       	pop	r0
    9fbc:	0f 90       	pop	r0
    9fbe:	0f 90       	pop	r0
    9fc0:	0f 90       	pop	r0
    9fc2:	cf 91       	pop	r28
    9fc4:	df 91       	pop	r29
    9fc6:	08 95       	ret

00009fc8 <PRV_voidWriteHalfPort>:

static void PRV_voidWriteHalfPort(u8 copy_u8Value)
{
    9fc8:	df 93       	push	r29
    9fca:	cf 93       	push	r28
    9fcc:	0f 92       	push	r0
    9fce:	cd b7       	in	r28, 0x3d	; 61
    9fd0:	de b7       	in	r29, 0x3e	; 62
    9fd2:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(copy_u8Value,0));
    9fd4:	89 81       	ldd	r24, Y+1	; 0x01
    9fd6:	98 2f       	mov	r25, r24
    9fd8:	91 70       	andi	r25, 0x01	; 1
    9fda:	80 e0       	ldi	r24, 0x00	; 0
    9fdc:	64 e0       	ldi	r22, 0x04	; 4
    9fde:	49 2f       	mov	r20, r25
    9fe0:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(copy_u8Value,1));
    9fe4:	89 81       	ldd	r24, Y+1	; 0x01
    9fe6:	86 95       	lsr	r24
    9fe8:	98 2f       	mov	r25, r24
    9fea:	91 70       	andi	r25, 0x01	; 1
    9fec:	80 e0       	ldi	r24, 0x00	; 0
    9fee:	65 e0       	ldi	r22, 0x05	; 5
    9ff0:	49 2f       	mov	r20, r25
    9ff2:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(copy_u8Value,2));
    9ff6:	89 81       	ldd	r24, Y+1	; 0x01
    9ff8:	86 95       	lsr	r24
    9ffa:	86 95       	lsr	r24
    9ffc:	98 2f       	mov	r25, r24
    9ffe:	91 70       	andi	r25, 0x01	; 1
    a000:	80 e0       	ldi	r24, 0x00	; 0
    a002:	66 e0       	ldi	r22, 0x06	; 6
    a004:	49 2f       	mov	r20, r25
    a006:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(copy_u8Value,3));
    a00a:	89 81       	ldd	r24, Y+1	; 0x01
    a00c:	86 95       	lsr	r24
    a00e:	86 95       	lsr	r24
    a010:	86 95       	lsr	r24
    a012:	98 2f       	mov	r25, r24
    a014:	91 70       	andi	r25, 0x01	; 1
    a016:	80 e0       	ldi	r24, 0x00	; 0
    a018:	67 e0       	ldi	r22, 0x07	; 7
    a01a:	49 2f       	mov	r20, r25
    a01c:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>

}
    a020:	0f 90       	pop	r0
    a022:	cf 91       	pop	r28
    a024:	df 91       	pop	r29
    a026:	08 95       	ret

0000a028 <KPD_voidInit>:
#include "KPD_interface.h"
#include "KPD_config.h"


void KPD_voidInit(void)
{
    a028:	df 93       	push	r29
    a02a:	cf 93       	push	r28
    a02c:	cd b7       	in	r28, 0x3d	; 61
    a02e:	de b7       	in	r29, 0x3e	; 62
	// Initialize KPD COLS pins As OutPut Pins
	DIO_voidSetPinDirection(KPD_COL0_PORT, KPD_COL0_PIN, DIO_PIN_OUTPUT);
    a030:	80 e0       	ldi	r24, 0x00	; 0
    a032:	61 e0       	ldi	r22, 0x01	; 1
    a034:	41 e0       	ldi	r20, 0x01	; 1
    a036:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL1_PORT, KPD_COL1_PIN, DIO_PIN_OUTPUT);
    a03a:	80 e0       	ldi	r24, 0x00	; 0
    a03c:	62 e0       	ldi	r22, 0x02	; 2
    a03e:	41 e0       	ldi	r20, 0x01	; 1
    a040:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL2_PORT, KPD_COL2_PIN, DIO_PIN_OUTPUT);
    a044:	80 e0       	ldi	r24, 0x00	; 0
    a046:	63 e0       	ldi	r22, 0x03	; 3
    a048:	41 e0       	ldi	r20, 0x01	; 1
    a04a:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	
	// Initialize KPD COLS pins As High Pins
	DIO_voidSetPinValue(KPD_COL0_PORT, KPD_COL0_PIN, DIO_PIN_HIGH);
    a04e:	80 e0       	ldi	r24, 0x00	; 0
    a050:	61 e0       	ldi	r22, 0x01	; 1
    a052:	41 e0       	ldi	r20, 0x01	; 1
    a054:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL1_PORT, KPD_COL1_PIN, DIO_PIN_HIGH);
    a058:	80 e0       	ldi	r24, 0x00	; 0
    a05a:	62 e0       	ldi	r22, 0x02	; 2
    a05c:	41 e0       	ldi	r20, 0x01	; 1
    a05e:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL2_PORT, KPD_COL2_PIN, DIO_PIN_HIGH);
    a062:	80 e0       	ldi	r24, 0x00	; 0
    a064:	63 e0       	ldi	r22, 0x03	; 3
    a066:	41 e0       	ldi	r20, 0x01	; 1
    a068:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	
	
	// Initialize KPD ROWS pins As Input Pins
	DIO_voidSetPinDirection(KPD_ROW0_PORT, KPD_ROW0_PIN, DIO_PIN_INPUT);
    a06c:	81 e0       	ldi	r24, 0x01	; 1
    a06e:	60 e0       	ldi	r22, 0x00	; 0
    a070:	40 e0       	ldi	r20, 0x00	; 0
    a072:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW1_PORT, KPD_ROW1_PIN, DIO_PIN_INPUT);
    a076:	81 e0       	ldi	r24, 0x01	; 1
    a078:	61 e0       	ldi	r22, 0x01	; 1
    a07a:	40 e0       	ldi	r20, 0x00	; 0
    a07c:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW2_PORT, KPD_ROW2_PIN, DIO_PIN_INPUT);
    a080:	81 e0       	ldi	r24, 0x01	; 1
    a082:	62 e0       	ldi	r22, 0x02	; 2
    a084:	40 e0       	ldi	r20, 0x00	; 0
    a086:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW3_PORT, KPD_ROW3_PIN, DIO_PIN_INPUT);
    a08a:	81 e0       	ldi	r24, 0x01	; 1
    a08c:	64 e0       	ldi	r22, 0x04	; 4
    a08e:	40 e0       	ldi	r20, 0x00	; 0
    a090:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	
	// Active KPD ROWS pins Internal pull up
	DIO_voidActiveIntPullUpResistance(KPD_ROW0_PORT, KPD_ROW0_PIN);
    a094:	81 e0       	ldi	r24, 0x01	; 1
    a096:	60 e0       	ldi	r22, 0x00	; 0
    a098:	0e 94 9d 34 	call	0x693a	; 0x693a <DIO_voidActiveIntPullUpResistance>
	DIO_voidActiveIntPullUpResistance(KPD_ROW1_PORT, KPD_ROW1_PIN);
    a09c:	81 e0       	ldi	r24, 0x01	; 1
    a09e:	61 e0       	ldi	r22, 0x01	; 1
    a0a0:	0e 94 9d 34 	call	0x693a	; 0x693a <DIO_voidActiveIntPullUpResistance>
	DIO_voidActiveIntPullUpResistance(KPD_ROW2_PORT, KPD_ROW2_PIN);
    a0a4:	81 e0       	ldi	r24, 0x01	; 1
    a0a6:	62 e0       	ldi	r22, 0x02	; 2
    a0a8:	0e 94 9d 34 	call	0x693a	; 0x693a <DIO_voidActiveIntPullUpResistance>
	DIO_voidActiveIntPullUpResistance(KPD_ROW3_PORT, KPD_ROW3_PIN);
    a0ac:	81 e0       	ldi	r24, 0x01	; 1
    a0ae:	64 e0       	ldi	r22, 0x04	; 4
    a0b0:	0e 94 9d 34 	call	0x693a	; 0x693a <DIO_voidActiveIntPullUpResistance>
}
    a0b4:	cf 91       	pop	r28
    a0b6:	df 91       	pop	r29
    a0b8:	08 95       	ret

0000a0ba <KPD_voidGetValue>:


void KPD_voidGetValue(u8* copy_pu8ReturnedValue)
{
    a0ba:	df 93       	push	r29
    a0bc:	cf 93       	push	r28
    a0be:	cd b7       	in	r28, 0x3d	; 61
    a0c0:	de b7       	in	r29, 0x3e	; 62
    a0c2:	ae 97       	sbiw	r28, 0x2e	; 46
    a0c4:	0f b6       	in	r0, 0x3f	; 63
    a0c6:	f8 94       	cli
    a0c8:	de bf       	out	0x3e, r29	; 62
    a0ca:	0f be       	out	0x3f, r0	; 63
    a0cc:	cd bf       	out	0x3d, r28	; 61
    a0ce:	9f 8f       	std	Y+31, r25	; 0x1f
    a0d0:	8e 8f       	std	Y+30, r24	; 0x1e
	if(copy_pu8ReturnedValue!=NULL)
    a0d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    a0d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    a0d6:	00 97       	sbiw	r24, 0x00	; 0
    a0d8:	09 f4       	brne	.+2      	; 0xa0dc <KPD_voidGetValue+0x22>
    a0da:	07 c1       	rjmp	.+526    	; 0xa2ea <KPD_voidGetValue+0x230>
	{
		* copy_pu8ReturnedValue = KPD_NOT_PRESSED;
    a0dc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    a0de:	ff 8d       	ldd	r31, Y+31	; 0x1f
    a0e0:	8f ef       	ldi	r24, 0xFF	; 255
    a0e2:	80 83       	st	Z, r24
		
		u8 local_u8ColsPorts[3] = {KPD_COL0_PORT, KPD_COL1_PORT, KPD_COL2_PORT};
    a0e4:	ce 01       	movw	r24, r28
    a0e6:	03 96       	adiw	r24, 0x03	; 3
    a0e8:	99 a3       	std	Y+33, r25	; 0x21
    a0ea:	88 a3       	std	Y+32, r24	; 0x20
    a0ec:	ec ee       	ldi	r30, 0xEC	; 236
    a0ee:	f5 e0       	ldi	r31, 0x05	; 5
    a0f0:	fb a3       	std	Y+35, r31	; 0x23
    a0f2:	ea a3       	std	Y+34, r30	; 0x22
    a0f4:	f3 e0       	ldi	r31, 0x03	; 3
    a0f6:	fc a3       	std	Y+36, r31	; 0x24
    a0f8:	ea a1       	ldd	r30, Y+34	; 0x22
    a0fa:	fb a1       	ldd	r31, Y+35	; 0x23
    a0fc:	00 80       	ld	r0, Z
    a0fe:	8a a1       	ldd	r24, Y+34	; 0x22
    a100:	9b a1       	ldd	r25, Y+35	; 0x23
    a102:	01 96       	adiw	r24, 0x01	; 1
    a104:	9b a3       	std	Y+35, r25	; 0x23
    a106:	8a a3       	std	Y+34, r24	; 0x22
    a108:	e8 a1       	ldd	r30, Y+32	; 0x20
    a10a:	f9 a1       	ldd	r31, Y+33	; 0x21
    a10c:	00 82       	st	Z, r0
    a10e:	88 a1       	ldd	r24, Y+32	; 0x20
    a110:	99 a1       	ldd	r25, Y+33	; 0x21
    a112:	01 96       	adiw	r24, 0x01	; 1
    a114:	99 a3       	std	Y+33, r25	; 0x21
    a116:	88 a3       	std	Y+32, r24	; 0x20
    a118:	9c a1       	ldd	r25, Y+36	; 0x24
    a11a:	91 50       	subi	r25, 0x01	; 1
    a11c:	9c a3       	std	Y+36, r25	; 0x24
    a11e:	ec a1       	ldd	r30, Y+36	; 0x24
    a120:	ee 23       	and	r30, r30
    a122:	51 f7       	brne	.-44     	; 0xa0f8 <KPD_voidGetValue+0x3e>
		u8 local_u8ColsPins[3]  = {KPD_COL0_PIN,  KPD_COL1_PIN,  KPD_COL2_PIN};
    a124:	ce 01       	movw	r24, r28
    a126:	06 96       	adiw	r24, 0x06	; 6
    a128:	9e a3       	std	Y+38, r25	; 0x26
    a12a:	8d a3       	std	Y+37, r24	; 0x25
    a12c:	e9 ee       	ldi	r30, 0xE9	; 233
    a12e:	f5 e0       	ldi	r31, 0x05	; 5
    a130:	f8 a7       	std	Y+40, r31	; 0x28
    a132:	ef a3       	std	Y+39, r30	; 0x27
    a134:	f3 e0       	ldi	r31, 0x03	; 3
    a136:	f9 a7       	std	Y+41, r31	; 0x29
    a138:	ef a1       	ldd	r30, Y+39	; 0x27
    a13a:	f8 a5       	ldd	r31, Y+40	; 0x28
    a13c:	00 80       	ld	r0, Z
    a13e:	8f a1       	ldd	r24, Y+39	; 0x27
    a140:	98 a5       	ldd	r25, Y+40	; 0x28
    a142:	01 96       	adiw	r24, 0x01	; 1
    a144:	98 a7       	std	Y+40, r25	; 0x28
    a146:	8f a3       	std	Y+39, r24	; 0x27
    a148:	ed a1       	ldd	r30, Y+37	; 0x25
    a14a:	fe a1       	ldd	r31, Y+38	; 0x26
    a14c:	00 82       	st	Z, r0
    a14e:	8d a1       	ldd	r24, Y+37	; 0x25
    a150:	9e a1       	ldd	r25, Y+38	; 0x26
    a152:	01 96       	adiw	r24, 0x01	; 1
    a154:	9e a3       	std	Y+38, r25	; 0x26
    a156:	8d a3       	std	Y+37, r24	; 0x25
    a158:	99 a5       	ldd	r25, Y+41	; 0x29
    a15a:	91 50       	subi	r25, 0x01	; 1
    a15c:	99 a7       	std	Y+41, r25	; 0x29
    a15e:	e9 a5       	ldd	r30, Y+41	; 0x29
    a160:	ee 23       	and	r30, r30
    a162:	51 f7       	brne	.-44     	; 0xa138 <KPD_voidGetValue+0x7e>
		
		u8 local_u8RowsPorts[4] = {KPD_ROW0_PORT, KPD_ROW1_PORT, KPD_ROW2_PORT, KPD_ROW3_PORT};
    a164:	81 e0       	ldi	r24, 0x01	; 1
    a166:	89 87       	std	Y+9, r24	; 0x09
    a168:	81 e0       	ldi	r24, 0x01	; 1
    a16a:	8a 87       	std	Y+10, r24	; 0x0a
    a16c:	81 e0       	ldi	r24, 0x01	; 1
    a16e:	8b 87       	std	Y+11, r24	; 0x0b
    a170:	81 e0       	ldi	r24, 0x01	; 1
    a172:	8c 87       	std	Y+12, r24	; 0x0c
		u8 local_u8RowsPins[4]  = {KPD_ROW0_PIN,  KPD_ROW1_PIN,  KPD_ROW2_PIN,  KPD_ROW3_PIN};
    a174:	1d 86       	std	Y+13, r1	; 0x0d
    a176:	81 e0       	ldi	r24, 0x01	; 1
    a178:	8e 87       	std	Y+14, r24	; 0x0e
    a17a:	82 e0       	ldi	r24, 0x02	; 2
    a17c:	8f 87       	std	Y+15, r24	; 0x0f
    a17e:	84 e0       	ldi	r24, 0x04	; 4
    a180:	88 8b       	std	Y+16, r24	; 0x10
		
	    u8 local_u8Keys[4][3]   = KPD_KEYS;
    a182:	ce 01       	movw	r24, r28
    a184:	41 96       	adiw	r24, 0x11	; 17
    a186:	9b a7       	std	Y+43, r25	; 0x2b
    a188:	8a a7       	std	Y+42, r24	; 0x2a
    a18a:	ed ed       	ldi	r30, 0xDD	; 221
    a18c:	f5 e0       	ldi	r31, 0x05	; 5
    a18e:	fd a7       	std	Y+45, r31	; 0x2d
    a190:	ec a7       	std	Y+44, r30	; 0x2c
    a192:	fc e0       	ldi	r31, 0x0C	; 12
    a194:	fe a7       	std	Y+46, r31	; 0x2e
    a196:	ec a5       	ldd	r30, Y+44	; 0x2c
    a198:	fd a5       	ldd	r31, Y+45	; 0x2d
    a19a:	00 80       	ld	r0, Z
    a19c:	8c a5       	ldd	r24, Y+44	; 0x2c
    a19e:	9d a5       	ldd	r25, Y+45	; 0x2d
    a1a0:	01 96       	adiw	r24, 0x01	; 1
    a1a2:	9d a7       	std	Y+45, r25	; 0x2d
    a1a4:	8c a7       	std	Y+44, r24	; 0x2c
    a1a6:	ea a5       	ldd	r30, Y+42	; 0x2a
    a1a8:	fb a5       	ldd	r31, Y+43	; 0x2b
    a1aa:	00 82       	st	Z, r0
    a1ac:	8a a5       	ldd	r24, Y+42	; 0x2a
    a1ae:	9b a5       	ldd	r25, Y+43	; 0x2b
    a1b0:	01 96       	adiw	r24, 0x01	; 1
    a1b2:	9b a7       	std	Y+43, r25	; 0x2b
    a1b4:	8a a7       	std	Y+42, r24	; 0x2a
    a1b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    a1b8:	91 50       	subi	r25, 0x01	; 1
    a1ba:	9e a7       	std	Y+46, r25	; 0x2e
    a1bc:	ee a5       	ldd	r30, Y+46	; 0x2e
    a1be:	ee 23       	and	r30, r30
    a1c0:	51 f7       	brne	.-44     	; 0xa196 <KPD_voidGetValue+0xdc>
		
		u8 local_u8ColsCounter,local_u8RowsCounter;
		u8 local_u8PinValue;
		
		for(local_u8ColsCounter=0; local_u8ColsCounter<3; local_u8ColsCounter++)
    a1c2:	1a 82       	std	Y+2, r1	; 0x02
    a1c4:	8e c0       	rjmp	.+284    	; 0xa2e2 <KPD_voidGetValue+0x228>
		{
			//Activate Each Column
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter], local_u8ColsPins[local_u8ColsCounter], DIO_PIN_LOW);
    a1c6:	8a 81       	ldd	r24, Y+2	; 0x02
    a1c8:	28 2f       	mov	r18, r24
    a1ca:	30 e0       	ldi	r19, 0x00	; 0
    a1cc:	ce 01       	movw	r24, r28
    a1ce:	03 96       	adiw	r24, 0x03	; 3
    a1d0:	fc 01       	movw	r30, r24
    a1d2:	e2 0f       	add	r30, r18
    a1d4:	f3 1f       	adc	r31, r19
    a1d6:	40 81       	ld	r20, Z
    a1d8:	8a 81       	ldd	r24, Y+2	; 0x02
    a1da:	28 2f       	mov	r18, r24
    a1dc:	30 e0       	ldi	r19, 0x00	; 0
    a1de:	ce 01       	movw	r24, r28
    a1e0:	06 96       	adiw	r24, 0x06	; 6
    a1e2:	fc 01       	movw	r30, r24
    a1e4:	e2 0f       	add	r30, r18
    a1e6:	f3 1f       	adc	r31, r19
    a1e8:	90 81       	ld	r25, Z
    a1ea:	84 2f       	mov	r24, r20
    a1ec:	69 2f       	mov	r22, r25
    a1ee:	40 e0       	ldi	r20, 0x00	; 0
    a1f0:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
				case 2: DIO_voidSetPinValue(KPD_COL2_PORT, KPD_COL2_PIN, DIO_PIN_LOW); break;
				case 3: DIO_voidSetPinValue(KPD_COL3_PORT, KPD_COL3_PIN, DIO_PIN_LOW); break;
			}*/
			
			
			for(local_u8RowsCounter=0; local_u8RowsCounter<4; local_u8RowsCounter++)
    a1f4:	19 82       	std	Y+1, r1	; 0x01
    a1f6:	57 c0       	rjmp	.+174    	; 0xa2a6 <KPD_voidGetValue+0x1ec>
			{
				//Check Each Row
				DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter], &local_u8PinValue);
    a1f8:	89 81       	ldd	r24, Y+1	; 0x01
    a1fa:	28 2f       	mov	r18, r24
    a1fc:	30 e0       	ldi	r19, 0x00	; 0
    a1fe:	ce 01       	movw	r24, r28
    a200:	09 96       	adiw	r24, 0x09	; 9
    a202:	fc 01       	movw	r30, r24
    a204:	e2 0f       	add	r30, r18
    a206:	f3 1f       	adc	r31, r19
    a208:	40 81       	ld	r20, Z
    a20a:	89 81       	ldd	r24, Y+1	; 0x01
    a20c:	28 2f       	mov	r18, r24
    a20e:	30 e0       	ldi	r19, 0x00	; 0
    a210:	ce 01       	movw	r24, r28
    a212:	0d 96       	adiw	r24, 0x0d	; 13
    a214:	fc 01       	movw	r30, r24
    a216:	e2 0f       	add	r30, r18
    a218:	f3 1f       	adc	r31, r19
    a21a:	90 81       	ld	r25, Z
    a21c:	9e 01       	movw	r18, r28
    a21e:	23 5e       	subi	r18, 0xE3	; 227
    a220:	3f 4f       	sbci	r19, 0xFF	; 255
    a222:	84 2f       	mov	r24, r20
    a224:	69 2f       	mov	r22, r25
    a226:	a9 01       	movw	r20, r18
    a228:	0e 94 87 33 	call	0x670e	; 0x670e <DIO_voidGetPinValue>
				
				//Is Pressed?
				if(0 == local_u8PinValue) 
    a22c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    a22e:	88 23       	and	r24, r24
    a230:	b9 f5       	brne	.+110    	; 0xa2a0 <KPD_voidGetValue+0x1e6>
    a232:	1a c0       	rjmp	.+52     	; 0xa268 <KPD_voidGetValue+0x1ae>
				{
					while(0 == local_u8PinValue)
					{
						DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter], &local_u8PinValue);
    a234:	89 81       	ldd	r24, Y+1	; 0x01
    a236:	28 2f       	mov	r18, r24
    a238:	30 e0       	ldi	r19, 0x00	; 0
    a23a:	ce 01       	movw	r24, r28
    a23c:	09 96       	adiw	r24, 0x09	; 9
    a23e:	fc 01       	movw	r30, r24
    a240:	e2 0f       	add	r30, r18
    a242:	f3 1f       	adc	r31, r19
    a244:	40 81       	ld	r20, Z
    a246:	89 81       	ldd	r24, Y+1	; 0x01
    a248:	28 2f       	mov	r18, r24
    a24a:	30 e0       	ldi	r19, 0x00	; 0
    a24c:	ce 01       	movw	r24, r28
    a24e:	0d 96       	adiw	r24, 0x0d	; 13
    a250:	fc 01       	movw	r30, r24
    a252:	e2 0f       	add	r30, r18
    a254:	f3 1f       	adc	r31, r19
    a256:	90 81       	ld	r25, Z
    a258:	9e 01       	movw	r18, r28
    a25a:	23 5e       	subi	r18, 0xE3	; 227
    a25c:	3f 4f       	sbci	r19, 0xFF	; 255
    a25e:	84 2f       	mov	r24, r20
    a260:	69 2f       	mov	r22, r25
    a262:	a9 01       	movw	r20, r18
    a264:	0e 94 87 33 	call	0x670e	; 0x670e <DIO_voidGetPinValue>
				DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter], &local_u8PinValue);
				
				//Is Pressed?
				if(0 == local_u8PinValue) 
				{
					while(0 == local_u8PinValue)
    a268:	8d 8d       	ldd	r24, Y+29	; 0x1d
    a26a:	88 23       	and	r24, r24
    a26c:	19 f3       	breq	.-58     	; 0xa234 <KPD_voidGetValue+0x17a>
					{
						DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter], &local_u8PinValue);
					}
					
					*copy_pu8ReturnedValue = local_u8Keys[local_u8RowsCounter][local_u8ColsCounter];
    a26e:	89 81       	ldd	r24, Y+1	; 0x01
    a270:	28 2f       	mov	r18, r24
    a272:	30 e0       	ldi	r19, 0x00	; 0
    a274:	8a 81       	ldd	r24, Y+2	; 0x02
    a276:	48 2f       	mov	r20, r24
    a278:	50 e0       	ldi	r21, 0x00	; 0
    a27a:	c9 01       	movw	r24, r18
    a27c:	88 0f       	add	r24, r24
    a27e:	99 1f       	adc	r25, r25
    a280:	82 0f       	add	r24, r18
    a282:	93 1f       	adc	r25, r19
    a284:	9e 01       	movw	r18, r28
    a286:	2f 5f       	subi	r18, 0xFF	; 255
    a288:	3f 4f       	sbci	r19, 0xFF	; 255
    a28a:	82 0f       	add	r24, r18
    a28c:	93 1f       	adc	r25, r19
    a28e:	84 0f       	add	r24, r20
    a290:	95 1f       	adc	r25, r21
    a292:	fc 01       	movw	r30, r24
    a294:	70 96       	adiw	r30, 0x10	; 16
    a296:	80 81       	ld	r24, Z
    a298:	ee 8d       	ldd	r30, Y+30	; 0x1e
    a29a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    a29c:	80 83       	st	Z, r24
    a29e:	25 c0       	rjmp	.+74     	; 0xa2ea <KPD_voidGetValue+0x230>
				case 2: DIO_voidSetPinValue(KPD_COL2_PORT, KPD_COL2_PIN, DIO_PIN_LOW); break;
				case 3: DIO_voidSetPinValue(KPD_COL3_PORT, KPD_COL3_PIN, DIO_PIN_LOW); break;
			}*/
			
			
			for(local_u8RowsCounter=0; local_u8RowsCounter<4; local_u8RowsCounter++)
    a2a0:	89 81       	ldd	r24, Y+1	; 0x01
    a2a2:	8f 5f       	subi	r24, 0xFF	; 255
    a2a4:	89 83       	std	Y+1, r24	; 0x01
    a2a6:	89 81       	ldd	r24, Y+1	; 0x01
    a2a8:	84 30       	cpi	r24, 0x04	; 4
    a2aa:	08 f4       	brcc	.+2      	; 0xa2ae <KPD_voidGetValue+0x1f4>
    a2ac:	a5 cf       	rjmp	.-182    	; 0xa1f8 <KPD_voidGetValue+0x13e>
					return;
				}
			}
			
			//Deactivate Current Coloumn
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter], local_u8ColsPins[local_u8ColsCounter], DIO_PIN_HIGH);
    a2ae:	8a 81       	ldd	r24, Y+2	; 0x02
    a2b0:	28 2f       	mov	r18, r24
    a2b2:	30 e0       	ldi	r19, 0x00	; 0
    a2b4:	ce 01       	movw	r24, r28
    a2b6:	03 96       	adiw	r24, 0x03	; 3
    a2b8:	fc 01       	movw	r30, r24
    a2ba:	e2 0f       	add	r30, r18
    a2bc:	f3 1f       	adc	r31, r19
    a2be:	40 81       	ld	r20, Z
    a2c0:	8a 81       	ldd	r24, Y+2	; 0x02
    a2c2:	28 2f       	mov	r18, r24
    a2c4:	30 e0       	ldi	r19, 0x00	; 0
    a2c6:	ce 01       	movw	r24, r28
    a2c8:	06 96       	adiw	r24, 0x06	; 6
    a2ca:	fc 01       	movw	r30, r24
    a2cc:	e2 0f       	add	r30, r18
    a2ce:	f3 1f       	adc	r31, r19
    a2d0:	90 81       	ld	r25, Z
    a2d2:	84 2f       	mov	r24, r20
    a2d4:	69 2f       	mov	r22, r25
    a2d6:	41 e0       	ldi	r20, 0x01	; 1
    a2d8:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	    u8 local_u8Keys[4][3]   = KPD_KEYS;
		
		u8 local_u8ColsCounter,local_u8RowsCounter;
		u8 local_u8PinValue;
		
		for(local_u8ColsCounter=0; local_u8ColsCounter<3; local_u8ColsCounter++)
    a2dc:	8a 81       	ldd	r24, Y+2	; 0x02
    a2de:	8f 5f       	subi	r24, 0xFF	; 255
    a2e0:	8a 83       	std	Y+2, r24	; 0x02
    a2e2:	8a 81       	ldd	r24, Y+2	; 0x02
    a2e4:	83 30       	cpi	r24, 0x03	; 3
    a2e6:	08 f4       	brcc	.+2      	; 0xa2ea <KPD_voidGetValue+0x230>
    a2e8:	6e cf       	rjmp	.-292    	; 0xa1c6 <KPD_voidGetValue+0x10c>
	}
	else 
	{
		// return Error State
	}
}
    a2ea:	ae 96       	adiw	r28, 0x2e	; 46
    a2ec:	0f b6       	in	r0, 0x3f	; 63
    a2ee:	f8 94       	cli
    a2f0:	de bf       	out	0x3e, r29	; 62
    a2f2:	0f be       	out	0x3f, r0	; 63
    a2f4:	cd bf       	out	0x3d, r28	; 61
    a2f6:	cf 91       	pop	r28
    a2f8:	df 91       	pop	r29
    a2fa:	08 95       	ret

0000a2fc <EEPROM_voidInit>:
/* HAL */
#include "EEPROM_interface.h"
#include "EEPROM_register.h"
#include "EEPROM_private.h"

void EEPROM_voidInit(void) {
    a2fc:	df 93       	push	r29
    a2fe:	cf 93       	push	r28
    a300:	cd b7       	in	r28, 0x3d	; 61
    a302:	de b7       	in	r29, 0x3e	; 62
	TWI_voidInit();
    a304:	0e 94 4c 2a 	call	0x5498	; 0x5498 <TWI_voidInit>
}
    a308:	cf 91       	pop	r28
    a30a:	df 91       	pop	r29
    a30c:	08 95       	ret

0000a30e <EEPROM_voidWriteByte>:
void EEPROM_voidWriteByte(u16 copy_u16WordAddress, u8 copy_u8Data) {
    a30e:	df 93       	push	r29
    a310:	cf 93       	push	r28
    a312:	cd b7       	in	r28, 0x3d	; 61
    a314:	de b7       	in	r29, 0x3e	; 62
    a316:	62 97       	sbiw	r28, 0x12	; 18
    a318:	0f b6       	in	r0, 0x3f	; 63
    a31a:	f8 94       	cli
    a31c:	de bf       	out	0x3e, r29	; 62
    a31e:	0f be       	out	0x3f, r0	; 63
    a320:	cd bf       	out	0x3d, r28	; 61
    a322:	99 8b       	std	Y+17, r25	; 0x11
    a324:	88 8b       	std	Y+16, r24	; 0x10
    a326:	6a 8b       	std	Y+18, r22	; 0x12
	u8 local_u8DeviceAddress = (copy_u16WordAddress >> 8) | EEPROM_FIXED_ADDRESS;
    a328:	88 89       	ldd	r24, Y+16	; 0x10
    a32a:	99 89       	ldd	r25, Y+17	; 0x11
    a32c:	89 2f       	mov	r24, r25
    a32e:	99 27       	eor	r25, r25
    a330:	80 65       	ori	r24, 0x50	; 80
    a332:	8f 87       	std	Y+15, r24	; 0x0f

	TWI_voidSendStartCondition();
    a334:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <TWI_voidSendStartCondition>

	TWI_voidSendSlaveAddressWithWrite(local_u8DeviceAddress);
    a338:	8f 85       	ldd	r24, Y+15	; 0x0f
    a33a:	0e 94 c9 2a 	call	0x5592	; 0x5592 <TWI_voidSendSlaveAddressWithWrite>

	TWI_voidSendMasterByteData((u8) copy_u16WordAddress);
    a33e:	88 89       	ldd	r24, Y+16	; 0x10
    a340:	0e 94 35 2b 	call	0x566a	; 0x566a <TWI_voidSendMasterByteData>

	TWI_voidSendMasterByteData(copy_u8Data);
    a344:	8a 89       	ldd	r24, Y+18	; 0x12
    a346:	0e 94 35 2b 	call	0x566a	; 0x566a <TWI_voidSendMasterByteData>

	TWI_voidSendStopCondition();
    a34a:	0e 94 b4 2a 	call	0x5568	; 0x5568 <TWI_voidSendStopCondition>
    a34e:	80 e0       	ldi	r24, 0x00	; 0
    a350:	90 e0       	ldi	r25, 0x00	; 0
    a352:	a0 ea       	ldi	r26, 0xA0	; 160
    a354:	b0 e4       	ldi	r27, 0x40	; 64
    a356:	8b 87       	std	Y+11, r24	; 0x0b
    a358:	9c 87       	std	Y+12, r25	; 0x0c
    a35a:	ad 87       	std	Y+13, r26	; 0x0d
    a35c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    a35e:	6b 85       	ldd	r22, Y+11	; 0x0b
    a360:	7c 85       	ldd	r23, Y+12	; 0x0c
    a362:	8d 85       	ldd	r24, Y+13	; 0x0d
    a364:	9e 85       	ldd	r25, Y+14	; 0x0e
    a366:	20 e0       	ldi	r18, 0x00	; 0
    a368:	30 e0       	ldi	r19, 0x00	; 0
    a36a:	4a e7       	ldi	r20, 0x7A	; 122
    a36c:	55 e4       	ldi	r21, 0x45	; 69
    a36e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    a372:	dc 01       	movw	r26, r24
    a374:	cb 01       	movw	r24, r22
    a376:	8f 83       	std	Y+7, r24	; 0x07
    a378:	98 87       	std	Y+8, r25	; 0x08
    a37a:	a9 87       	std	Y+9, r26	; 0x09
    a37c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    a37e:	6f 81       	ldd	r22, Y+7	; 0x07
    a380:	78 85       	ldd	r23, Y+8	; 0x08
    a382:	89 85       	ldd	r24, Y+9	; 0x09
    a384:	9a 85       	ldd	r25, Y+10	; 0x0a
    a386:	20 e0       	ldi	r18, 0x00	; 0
    a388:	30 e0       	ldi	r19, 0x00	; 0
    a38a:	40 e8       	ldi	r20, 0x80	; 128
    a38c:	5f e3       	ldi	r21, 0x3F	; 63
    a38e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    a392:	88 23       	and	r24, r24
    a394:	2c f4       	brge	.+10     	; 0xa3a0 <EEPROM_voidWriteByte+0x92>
		__ticks = 1;
    a396:	81 e0       	ldi	r24, 0x01	; 1
    a398:	90 e0       	ldi	r25, 0x00	; 0
    a39a:	9e 83       	std	Y+6, r25	; 0x06
    a39c:	8d 83       	std	Y+5, r24	; 0x05
    a39e:	3f c0       	rjmp	.+126    	; 0xa41e <EEPROM_voidWriteByte+0x110>
	else if (__tmp > 65535)
    a3a0:	6f 81       	ldd	r22, Y+7	; 0x07
    a3a2:	78 85       	ldd	r23, Y+8	; 0x08
    a3a4:	89 85       	ldd	r24, Y+9	; 0x09
    a3a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    a3a8:	20 e0       	ldi	r18, 0x00	; 0
    a3aa:	3f ef       	ldi	r19, 0xFF	; 255
    a3ac:	4f e7       	ldi	r20, 0x7F	; 127
    a3ae:	57 e4       	ldi	r21, 0x47	; 71
    a3b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    a3b4:	18 16       	cp	r1, r24
    a3b6:	4c f5       	brge	.+82     	; 0xa40a <EEPROM_voidWriteByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a3b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    a3ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    a3bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    a3be:	9e 85       	ldd	r25, Y+14	; 0x0e
    a3c0:	20 e0       	ldi	r18, 0x00	; 0
    a3c2:	30 e0       	ldi	r19, 0x00	; 0
    a3c4:	40 e2       	ldi	r20, 0x20	; 32
    a3c6:	51 e4       	ldi	r21, 0x41	; 65
    a3c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    a3cc:	dc 01       	movw	r26, r24
    a3ce:	cb 01       	movw	r24, r22
    a3d0:	bc 01       	movw	r22, r24
    a3d2:	cd 01       	movw	r24, r26
    a3d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    a3d8:	dc 01       	movw	r26, r24
    a3da:	cb 01       	movw	r24, r22
    a3dc:	9e 83       	std	Y+6, r25	; 0x06
    a3de:	8d 83       	std	Y+5, r24	; 0x05
    a3e0:	0f c0       	rjmp	.+30     	; 0xa400 <EEPROM_voidWriteByte+0xf2>
    a3e2:	80 e9       	ldi	r24, 0x90	; 144
    a3e4:	91 e0       	ldi	r25, 0x01	; 1
    a3e6:	9c 83       	std	Y+4, r25	; 0x04
    a3e8:	8b 83       	std	Y+3, r24	; 0x03
    a3ea:	8b 81       	ldd	r24, Y+3	; 0x03
    a3ec:	9c 81       	ldd	r25, Y+4	; 0x04
    a3ee:	01 97       	sbiw	r24, 0x01	; 1
    a3f0:	f1 f7       	brne	.-4      	; 0xa3ee <EEPROM_voidWriteByte+0xe0>
    a3f2:	9c 83       	std	Y+4, r25	; 0x04
    a3f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a3f6:	8d 81       	ldd	r24, Y+5	; 0x05
    a3f8:	9e 81       	ldd	r25, Y+6	; 0x06
    a3fa:	01 97       	sbiw	r24, 0x01	; 1
    a3fc:	9e 83       	std	Y+6, r25	; 0x06
    a3fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a400:	8d 81       	ldd	r24, Y+5	; 0x05
    a402:	9e 81       	ldd	r25, Y+6	; 0x06
    a404:	00 97       	sbiw	r24, 0x00	; 0
    a406:	69 f7       	brne	.-38     	; 0xa3e2 <EEPROM_voidWriteByte+0xd4>
    a408:	14 c0       	rjmp	.+40     	; 0xa432 <EEPROM_voidWriteByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a40a:	6f 81       	ldd	r22, Y+7	; 0x07
    a40c:	78 85       	ldd	r23, Y+8	; 0x08
    a40e:	89 85       	ldd	r24, Y+9	; 0x09
    a410:	9a 85       	ldd	r25, Y+10	; 0x0a
    a412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    a416:	dc 01       	movw	r26, r24
    a418:	cb 01       	movw	r24, r22
    a41a:	9e 83       	std	Y+6, r25	; 0x06
    a41c:	8d 83       	std	Y+5, r24	; 0x05
    a41e:	8d 81       	ldd	r24, Y+5	; 0x05
    a420:	9e 81       	ldd	r25, Y+6	; 0x06
    a422:	9a 83       	std	Y+2, r25	; 0x02
    a424:	89 83       	std	Y+1, r24	; 0x01
    a426:	89 81       	ldd	r24, Y+1	; 0x01
    a428:	9a 81       	ldd	r25, Y+2	; 0x02
    a42a:	01 97       	sbiw	r24, 0x01	; 1
    a42c:	f1 f7       	brne	.-4      	; 0xa42a <EEPROM_voidWriteByte+0x11c>
    a42e:	9a 83       	std	Y+2, r25	; 0x02
    a430:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
}
    a432:	62 96       	adiw	r28, 0x12	; 18
    a434:	0f b6       	in	r0, 0x3f	; 63
    a436:	f8 94       	cli
    a438:	de bf       	out	0x3e, r29	; 62
    a43a:	0f be       	out	0x3f, r0	; 63
    a43c:	cd bf       	out	0x3d, r28	; 61
    a43e:	cf 91       	pop	r28
    a440:	df 91       	pop	r29
    a442:	08 95       	ret

0000a444 <EEPROM_voidReadByte>:

void EEPROM_voidReadByte(u16 copy_u16WordAddress, u8 *copy_pu8Data) {
    a444:	df 93       	push	r29
    a446:	cf 93       	push	r28
    a448:	cd b7       	in	r28, 0x3d	; 61
    a44a:	de b7       	in	r29, 0x3e	; 62
    a44c:	63 97       	sbiw	r28, 0x13	; 19
    a44e:	0f b6       	in	r0, 0x3f	; 63
    a450:	f8 94       	cli
    a452:	de bf       	out	0x3e, r29	; 62
    a454:	0f be       	out	0x3f, r0	; 63
    a456:	cd bf       	out	0x3d, r28	; 61
    a458:	99 8b       	std	Y+17, r25	; 0x11
    a45a:	88 8b       	std	Y+16, r24	; 0x10
    a45c:	7b 8b       	std	Y+19, r23	; 0x13
    a45e:	6a 8b       	std	Y+18, r22	; 0x12
	if (copy_pu8Data != NULL) {
    a460:	8a 89       	ldd	r24, Y+18	; 0x12
    a462:	9b 89       	ldd	r25, Y+19	; 0x13
    a464:	00 97       	sbiw	r24, 0x00	; 0
    a466:	09 f4       	brne	.+2      	; 0xa46a <EEPROM_voidReadByte+0x26>
    a468:	8b c0       	rjmp	.+278    	; 0xa580 <EEPROM_voidReadByte+0x13c>
		u8 local_u8DeviceAddress = (copy_u16WordAddress >> 8) | 0x50;
    a46a:	88 89       	ldd	r24, Y+16	; 0x10
    a46c:	99 89       	ldd	r25, Y+17	; 0x11
    a46e:	89 2f       	mov	r24, r25
    a470:	99 27       	eor	r25, r25
    a472:	80 65       	ori	r24, 0x50	; 80
    a474:	8f 87       	std	Y+15, r24	; 0x0f

		TWI_voidSendStartCondition();
    a476:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <TWI_voidSendStartCondition>

		TWI_voidSendSlaveAddressWithWrite(local_u8DeviceAddress);
    a47a:	8f 85       	ldd	r24, Y+15	; 0x0f
    a47c:	0e 94 c9 2a 	call	0x5592	; 0x5592 <TWI_voidSendSlaveAddressWithWrite>

		TWI_voidSendMasterByteData((u8) copy_u16WordAddress);
    a480:	88 89       	ldd	r24, Y+16	; 0x10
    a482:	0e 94 35 2b 	call	0x566a	; 0x566a <TWI_voidSendMasterByteData>

		TWI_voidSendRepeatStartCondition();
    a486:	0e 94 90 2a 	call	0x5520	; 0x5520 <TWI_voidSendRepeatStartCondition>

		TWI_voidSendSlaveAddressWithRead(local_u8DeviceAddress);
    a48a:	8f 85       	ldd	r24, Y+15	; 0x0f
    a48c:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <TWI_voidSendSlaveAddressWithRead>

		TWI_voidReceiveMasterByteDataWithNAck(copy_pu8Data);
    a490:	8a 89       	ldd	r24, Y+18	; 0x12
    a492:	9b 89       	ldd	r25, Y+19	; 0x13
    a494:	0e 94 93 2b 	call	0x5726	; 0x5726 <TWI_voidReceiveMasterByteDataWithNAck>

		TWI_voidSendStopCondition();
    a498:	0e 94 b4 2a 	call	0x5568	; 0x5568 <TWI_voidSendStopCondition>
    a49c:	80 e0       	ldi	r24, 0x00	; 0
    a49e:	90 e0       	ldi	r25, 0x00	; 0
    a4a0:	a0 ea       	ldi	r26, 0xA0	; 160
    a4a2:	b0 e4       	ldi	r27, 0x40	; 64
    a4a4:	8b 87       	std	Y+11, r24	; 0x0b
    a4a6:	9c 87       	std	Y+12, r25	; 0x0c
    a4a8:	ad 87       	std	Y+13, r26	; 0x0d
    a4aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    a4ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    a4ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    a4b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    a4b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    a4b4:	20 e0       	ldi	r18, 0x00	; 0
    a4b6:	30 e0       	ldi	r19, 0x00	; 0
    a4b8:	4a e7       	ldi	r20, 0x7A	; 122
    a4ba:	55 e4       	ldi	r21, 0x45	; 69
    a4bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    a4c0:	dc 01       	movw	r26, r24
    a4c2:	cb 01       	movw	r24, r22
    a4c4:	8f 83       	std	Y+7, r24	; 0x07
    a4c6:	98 87       	std	Y+8, r25	; 0x08
    a4c8:	a9 87       	std	Y+9, r26	; 0x09
    a4ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    a4cc:	6f 81       	ldd	r22, Y+7	; 0x07
    a4ce:	78 85       	ldd	r23, Y+8	; 0x08
    a4d0:	89 85       	ldd	r24, Y+9	; 0x09
    a4d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    a4d4:	20 e0       	ldi	r18, 0x00	; 0
    a4d6:	30 e0       	ldi	r19, 0x00	; 0
    a4d8:	40 e8       	ldi	r20, 0x80	; 128
    a4da:	5f e3       	ldi	r21, 0x3F	; 63
    a4dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    a4e0:	88 23       	and	r24, r24
    a4e2:	2c f4       	brge	.+10     	; 0xa4ee <EEPROM_voidReadByte+0xaa>
		__ticks = 1;
    a4e4:	81 e0       	ldi	r24, 0x01	; 1
    a4e6:	90 e0       	ldi	r25, 0x00	; 0
    a4e8:	9e 83       	std	Y+6, r25	; 0x06
    a4ea:	8d 83       	std	Y+5, r24	; 0x05
    a4ec:	3f c0       	rjmp	.+126    	; 0xa56c <EEPROM_voidReadByte+0x128>
	else if (__tmp > 65535)
    a4ee:	6f 81       	ldd	r22, Y+7	; 0x07
    a4f0:	78 85       	ldd	r23, Y+8	; 0x08
    a4f2:	89 85       	ldd	r24, Y+9	; 0x09
    a4f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    a4f6:	20 e0       	ldi	r18, 0x00	; 0
    a4f8:	3f ef       	ldi	r19, 0xFF	; 255
    a4fa:	4f e7       	ldi	r20, 0x7F	; 127
    a4fc:	57 e4       	ldi	r21, 0x47	; 71
    a4fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    a502:	18 16       	cp	r1, r24
    a504:	4c f5       	brge	.+82     	; 0xa558 <EEPROM_voidReadByte+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a506:	6b 85       	ldd	r22, Y+11	; 0x0b
    a508:	7c 85       	ldd	r23, Y+12	; 0x0c
    a50a:	8d 85       	ldd	r24, Y+13	; 0x0d
    a50c:	9e 85       	ldd	r25, Y+14	; 0x0e
    a50e:	20 e0       	ldi	r18, 0x00	; 0
    a510:	30 e0       	ldi	r19, 0x00	; 0
    a512:	40 e2       	ldi	r20, 0x20	; 32
    a514:	51 e4       	ldi	r21, 0x41	; 65
    a516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    a51a:	dc 01       	movw	r26, r24
    a51c:	cb 01       	movw	r24, r22
    a51e:	bc 01       	movw	r22, r24
    a520:	cd 01       	movw	r24, r26
    a522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    a526:	dc 01       	movw	r26, r24
    a528:	cb 01       	movw	r24, r22
    a52a:	9e 83       	std	Y+6, r25	; 0x06
    a52c:	8d 83       	std	Y+5, r24	; 0x05
    a52e:	0f c0       	rjmp	.+30     	; 0xa54e <EEPROM_voidReadByte+0x10a>
    a530:	80 e9       	ldi	r24, 0x90	; 144
    a532:	91 e0       	ldi	r25, 0x01	; 1
    a534:	9c 83       	std	Y+4, r25	; 0x04
    a536:	8b 83       	std	Y+3, r24	; 0x03
    a538:	8b 81       	ldd	r24, Y+3	; 0x03
    a53a:	9c 81       	ldd	r25, Y+4	; 0x04
    a53c:	01 97       	sbiw	r24, 0x01	; 1
    a53e:	f1 f7       	brne	.-4      	; 0xa53c <EEPROM_voidReadByte+0xf8>
    a540:	9c 83       	std	Y+4, r25	; 0x04
    a542:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a544:	8d 81       	ldd	r24, Y+5	; 0x05
    a546:	9e 81       	ldd	r25, Y+6	; 0x06
    a548:	01 97       	sbiw	r24, 0x01	; 1
    a54a:	9e 83       	std	Y+6, r25	; 0x06
    a54c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a54e:	8d 81       	ldd	r24, Y+5	; 0x05
    a550:	9e 81       	ldd	r25, Y+6	; 0x06
    a552:	00 97       	sbiw	r24, 0x00	; 0
    a554:	69 f7       	brne	.-38     	; 0xa530 <EEPROM_voidReadByte+0xec>
    a556:	14 c0       	rjmp	.+40     	; 0xa580 <EEPROM_voidReadByte+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a558:	6f 81       	ldd	r22, Y+7	; 0x07
    a55a:	78 85       	ldd	r23, Y+8	; 0x08
    a55c:	89 85       	ldd	r24, Y+9	; 0x09
    a55e:	9a 85       	ldd	r25, Y+10	; 0x0a
    a560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    a564:	dc 01       	movw	r26, r24
    a566:	cb 01       	movw	r24, r22
    a568:	9e 83       	std	Y+6, r25	; 0x06
    a56a:	8d 83       	std	Y+5, r24	; 0x05
    a56c:	8d 81       	ldd	r24, Y+5	; 0x05
    a56e:	9e 81       	ldd	r25, Y+6	; 0x06
    a570:	9a 83       	std	Y+2, r25	; 0x02
    a572:	89 83       	std	Y+1, r24	; 0x01
    a574:	89 81       	ldd	r24, Y+1	; 0x01
    a576:	9a 81       	ldd	r25, Y+2	; 0x02
    a578:	01 97       	sbiw	r24, 0x01	; 1
    a57a:	f1 f7       	brne	.-4      	; 0xa578 <EEPROM_voidReadByte+0x134>
    a57c:	9a 83       	std	Y+2, r25	; 0x02
    a57e:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(5);
	}
}
    a580:	63 96       	adiw	r28, 0x13	; 19
    a582:	0f b6       	in	r0, 0x3f	; 63
    a584:	f8 94       	cli
    a586:	de bf       	out	0x3e, r29	; 62
    a588:	0f be       	out	0x3f, r0	; 63
    a58a:	cd bf       	out	0x3d, r28	; 61
    a58c:	cf 91       	pop	r28
    a58e:	df 91       	pop	r29
    a590:	08 95       	ret

0000a592 <DCM_voidInit>:
#include "DCM_config.h"
#include "DCM_interface.h"


void DCM_voidInit              (u8 copy_u8DCM_ID)
{
    a592:	df 93       	push	r29
    a594:	cf 93       	push	r28
    a596:	00 d0       	rcall	.+0      	; 0xa598 <DCM_voidInit+0x6>
    a598:	0f 92       	push	r0
    a59a:	cd b7       	in	r28, 0x3d	; 61
    a59c:	de b7       	in	r29, 0x3e	; 62
    a59e:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_u8DCM_ID==DCM1)||(copy_u8DCM_ID==DCM2))
    a5a0:	89 81       	ldd	r24, Y+1	; 0x01
    a5a2:	88 23       	and	r24, r24
    a5a4:	19 f0       	breq	.+6      	; 0xa5ac <DCM_voidInit+0x1a>
    a5a6:	89 81       	ldd	r24, Y+1	; 0x01
    a5a8:	81 30       	cpi	r24, 0x01	; 1
    a5aa:	71 f5       	brne	.+92     	; 0xa608 <DCM_voidInit+0x76>
	{
		switch(copy_u8DCM_ID)
    a5ac:	89 81       	ldd	r24, Y+1	; 0x01
    a5ae:	28 2f       	mov	r18, r24
    a5b0:	30 e0       	ldi	r19, 0x00	; 0
    a5b2:	3b 83       	std	Y+3, r19	; 0x03
    a5b4:	2a 83       	std	Y+2, r18	; 0x02
    a5b6:	8a 81       	ldd	r24, Y+2	; 0x02
    a5b8:	9b 81       	ldd	r25, Y+3	; 0x03
    a5ba:	00 97       	sbiw	r24, 0x00	; 0
    a5bc:	31 f0       	breq	.+12     	; 0xa5ca <DCM_voidInit+0x38>
    a5be:	2a 81       	ldd	r18, Y+2	; 0x02
    a5c0:	3b 81       	ldd	r19, Y+3	; 0x03
    a5c2:	21 30       	cpi	r18, 0x01	; 1
    a5c4:	31 05       	cpc	r19, r1
    a5c6:	89 f0       	breq	.+34     	; 0xa5ea <DCM_voidInit+0x58>
    a5c8:	1f c0       	rjmp	.+62     	; 0xa608 <DCM_voidInit+0x76>
		{
			case DCM1:
			DIO_voidSetPinDirection(DCM1_A1_PORT, DCM1_A1_PIN, DIO_PIN_OUTPUT);
    a5ca:	83 e0       	ldi	r24, 0x03	; 3
    a5cc:	62 e0       	ldi	r22, 0x02	; 2
    a5ce:	41 e0       	ldi	r20, 0x01	; 1
    a5d0:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(DCM1_A2_PORT, DCM1_A2_PIN, DIO_PIN_OUTPUT);
    a5d4:	83 e0       	ldi	r24, 0x03	; 3
    a5d6:	63 e0       	ldi	r22, 0x03	; 3
    a5d8:	41 e0       	ldi	r20, 0x01	; 1
    a5da:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(DCM1_ENABLE_PORT, DCM1_ENABLE_PIN, DIO_PIN_OUTPUT);
    a5de:	83 e0       	ldi	r24, 0x03	; 3
    a5e0:	64 e0       	ldi	r22, 0x04	; 4
    a5e2:	41 e0       	ldi	r20, 0x01	; 1
    a5e4:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
    a5e8:	0f c0       	rjmp	.+30     	; 0xa608 <DCM_voidInit+0x76>
			break;
			
			case DCM2:
			DIO_voidSetPinDirection(DCM2_A3_PORT, DCM2_A3_PIN, DIO_PIN_OUTPUT);
    a5ea:	82 e0       	ldi	r24, 0x02	; 2
    a5ec:	65 e0       	ldi	r22, 0x05	; 5
    a5ee:	41 e0       	ldi	r20, 0x01	; 1
    a5f0:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(DCM2_A4_PORT, DCM2_A4_PIN, DIO_PIN_OUTPUT);
    a5f4:	82 e0       	ldi	r24, 0x02	; 2
    a5f6:	66 e0       	ldi	r22, 0x06	; 6
    a5f8:	41 e0       	ldi	r20, 0x01	; 1
    a5fa:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(DCM2_ENABLE_PORT, DCM2_ENABLE_PIN, DIO_PIN_OUTPUT);
    a5fe:	83 e0       	ldi	r24, 0x03	; 3
    a600:	65 e0       	ldi	r22, 0x05	; 5
    a602:	41 e0       	ldi	r20, 0x01	; 1
    a604:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
	} 
	else
	{
		//Return Error Statement
	}
}
    a608:	0f 90       	pop	r0
    a60a:	0f 90       	pop	r0
    a60c:	0f 90       	pop	r0
    a60e:	cf 91       	pop	r28
    a610:	df 91       	pop	r29
    a612:	08 95       	ret

0000a614 <DCM_voidOn>:
void DCM_voidOn                (u8 copy_u8DCM_ID, u8 copy_u8MotorDirection)
{
    a614:	df 93       	push	r29
    a616:	cf 93       	push	r28
    a618:	cd b7       	in	r28, 0x3d	; 61
    a61a:	de b7       	in	r29, 0x3e	; 62
    a61c:	28 97       	sbiw	r28, 0x08	; 8
    a61e:	0f b6       	in	r0, 0x3f	; 63
    a620:	f8 94       	cli
    a622:	de bf       	out	0x3e, r29	; 62
    a624:	0f be       	out	0x3f, r0	; 63
    a626:	cd bf       	out	0x3d, r28	; 61
    a628:	89 83       	std	Y+1, r24	; 0x01
    a62a:	6a 83       	std	Y+2, r22	; 0x02
	if (((copy_u8MotorDirection==DCM_CW)||(copy_u8MotorDirection==DCM_CCW))&&((copy_u8DCM_ID==DCM1)||(copy_u8DCM_ID==DCM2)))
    a62c:	8a 81       	ldd	r24, Y+2	; 0x02
    a62e:	81 30       	cpi	r24, 0x01	; 1
    a630:	21 f0       	breq	.+8      	; 0xa63a <DCM_voidOn+0x26>
    a632:	8a 81       	ldd	r24, Y+2	; 0x02
    a634:	82 30       	cpi	r24, 0x02	; 2
    a636:	09 f0       	breq	.+2      	; 0xa63a <DCM_voidOn+0x26>
    a638:	75 c0       	rjmp	.+234    	; 0xa724 <DCM_voidOn+0x110>
    a63a:	89 81       	ldd	r24, Y+1	; 0x01
    a63c:	88 23       	and	r24, r24
    a63e:	21 f0       	breq	.+8      	; 0xa648 <DCM_voidOn+0x34>
    a640:	89 81       	ldd	r24, Y+1	; 0x01
    a642:	81 30       	cpi	r24, 0x01	; 1
    a644:	09 f0       	breq	.+2      	; 0xa648 <DCM_voidOn+0x34>
    a646:	6e c0       	rjmp	.+220    	; 0xa724 <DCM_voidOn+0x110>
	{
		switch(copy_u8DCM_ID)
    a648:	89 81       	ldd	r24, Y+1	; 0x01
    a64a:	28 2f       	mov	r18, r24
    a64c:	30 e0       	ldi	r19, 0x00	; 0
    a64e:	38 87       	std	Y+8, r19	; 0x08
    a650:	2f 83       	std	Y+7, r18	; 0x07
    a652:	8f 81       	ldd	r24, Y+7	; 0x07
    a654:	98 85       	ldd	r25, Y+8	; 0x08
    a656:	00 97       	sbiw	r24, 0x00	; 0
    a658:	31 f0       	breq	.+12     	; 0xa666 <DCM_voidOn+0x52>
    a65a:	2f 81       	ldd	r18, Y+7	; 0x07
    a65c:	38 85       	ldd	r19, Y+8	; 0x08
    a65e:	21 30       	cpi	r18, 0x01	; 1
    a660:	31 05       	cpc	r19, r1
    a662:	89 f1       	breq	.+98     	; 0xa6c6 <DCM_voidOn+0xb2>
    a664:	5f c0       	rjmp	.+190    	; 0xa724 <DCM_voidOn+0x110>
		{
			case DCM1:
			switch(copy_u8MotorDirection)
    a666:	8a 81       	ldd	r24, Y+2	; 0x02
    a668:	28 2f       	mov	r18, r24
    a66a:	30 e0       	ldi	r19, 0x00	; 0
    a66c:	3e 83       	std	Y+6, r19	; 0x06
    a66e:	2d 83       	std	Y+5, r18	; 0x05
    a670:	8d 81       	ldd	r24, Y+5	; 0x05
    a672:	9e 81       	ldd	r25, Y+6	; 0x06
    a674:	81 30       	cpi	r24, 0x01	; 1
    a676:	91 05       	cpc	r25, r1
    a678:	31 f0       	breq	.+12     	; 0xa686 <DCM_voidOn+0x72>
    a67a:	2d 81       	ldd	r18, Y+5	; 0x05
    a67c:	3e 81       	ldd	r19, Y+6	; 0x06
    a67e:	22 30       	cpi	r18, 0x02	; 2
    a680:	31 05       	cpc	r19, r1
    a682:	89 f0       	breq	.+34     	; 0xa6a6 <DCM_voidOn+0x92>
    a684:	4f c0       	rjmp	.+158    	; 0xa724 <DCM_voidOn+0x110>
			{
				case DCM_CW:
				DIO_voidSetPinValue(DCM1_A1_PORT, DCM1_A1_PIN, DIO_PIN_HIGH);
    a686:	83 e0       	ldi	r24, 0x03	; 3
    a688:	62 e0       	ldi	r22, 0x02	; 2
    a68a:	41 e0       	ldi	r20, 0x01	; 1
    a68c:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM1_A2_PORT, DCM1_A2_PIN, DIO_PIN_LOW);
    a690:	83 e0       	ldi	r24, 0x03	; 3
    a692:	63 e0       	ldi	r22, 0x03	; 3
    a694:	40 e0       	ldi	r20, 0x00	; 0
    a696:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM1_ENABLE_PORT, DCM1_ENABLE_PIN, DIO_PIN_HIGH);
    a69a:	83 e0       	ldi	r24, 0x03	; 3
    a69c:	64 e0       	ldi	r22, 0x04	; 4
    a69e:	41 e0       	ldi	r20, 0x01	; 1
    a6a0:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
    a6a4:	3f c0       	rjmp	.+126    	; 0xa724 <DCM_voidOn+0x110>
				break;
				
				case DCM_CCW:
				DIO_voidSetPinValue(DCM1_A1_PORT, DCM1_A1_PIN, DIO_PIN_LOW);
    a6a6:	83 e0       	ldi	r24, 0x03	; 3
    a6a8:	62 e0       	ldi	r22, 0x02	; 2
    a6aa:	40 e0       	ldi	r20, 0x00	; 0
    a6ac:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM1_A2_PORT, DCM1_A2_PIN, DIO_PIN_HIGH);
    a6b0:	83 e0       	ldi	r24, 0x03	; 3
    a6b2:	63 e0       	ldi	r22, 0x03	; 3
    a6b4:	41 e0       	ldi	r20, 0x01	; 1
    a6b6:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM1_ENABLE_PORT, DCM1_ENABLE_PIN, DIO_PIN_HIGH);
    a6ba:	83 e0       	ldi	r24, 0x03	; 3
    a6bc:	64 e0       	ldi	r22, 0x04	; 4
    a6be:	41 e0       	ldi	r20, 0x01	; 1
    a6c0:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
    a6c4:	2f c0       	rjmp	.+94     	; 0xa724 <DCM_voidOn+0x110>
				break;
			}
			break;
			
			case DCM2:
			switch(copy_u8MotorDirection)
    a6c6:	8a 81       	ldd	r24, Y+2	; 0x02
    a6c8:	28 2f       	mov	r18, r24
    a6ca:	30 e0       	ldi	r19, 0x00	; 0
    a6cc:	3c 83       	std	Y+4, r19	; 0x04
    a6ce:	2b 83       	std	Y+3, r18	; 0x03
    a6d0:	8b 81       	ldd	r24, Y+3	; 0x03
    a6d2:	9c 81       	ldd	r25, Y+4	; 0x04
    a6d4:	81 30       	cpi	r24, 0x01	; 1
    a6d6:	91 05       	cpc	r25, r1
    a6d8:	31 f0       	breq	.+12     	; 0xa6e6 <DCM_voidOn+0xd2>
    a6da:	2b 81       	ldd	r18, Y+3	; 0x03
    a6dc:	3c 81       	ldd	r19, Y+4	; 0x04
    a6de:	22 30       	cpi	r18, 0x02	; 2
    a6e0:	31 05       	cpc	r19, r1
    a6e2:	89 f0       	breq	.+34     	; 0xa706 <DCM_voidOn+0xf2>
    a6e4:	1f c0       	rjmp	.+62     	; 0xa724 <DCM_voidOn+0x110>
			{
			case DCM_CW:
			DIO_voidSetPinValue(DCM2_A3_PORT, DCM2_A3_PIN, DIO_PIN_HIGH);
    a6e6:	82 e0       	ldi	r24, 0x02	; 2
    a6e8:	65 e0       	ldi	r22, 0x05	; 5
    a6ea:	41 e0       	ldi	r20, 0x01	; 1
    a6ec:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM2_A4_PORT, DCM2_A4_PIN, DIO_PIN_LOW);
    a6f0:	82 e0       	ldi	r24, 0x02	; 2
    a6f2:	66 e0       	ldi	r22, 0x06	; 6
    a6f4:	40 e0       	ldi	r20, 0x00	; 0
    a6f6:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM2_ENABLE_PORT, DCM2_ENABLE_PIN, DIO_PIN_HIGH);
    a6fa:	83 e0       	ldi	r24, 0x03	; 3
    a6fc:	65 e0       	ldi	r22, 0x05	; 5
    a6fe:	41 e0       	ldi	r20, 0x01	; 1
    a700:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
    a704:	0f c0       	rjmp	.+30     	; 0xa724 <DCM_voidOn+0x110>
			break;
			
			case DCM_CCW:
			DIO_voidSetPinValue(DCM2_A3_PORT, DCM2_A3_PIN, DIO_PIN_LOW);
    a706:	82 e0       	ldi	r24, 0x02	; 2
    a708:	65 e0       	ldi	r22, 0x05	; 5
    a70a:	40 e0       	ldi	r20, 0x00	; 0
    a70c:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM2_A4_PORT, DCM2_A4_PIN, DIO_PIN_HIGH);
    a710:	82 e0       	ldi	r24, 0x02	; 2
    a712:	66 e0       	ldi	r22, 0x06	; 6
    a714:	41 e0       	ldi	r20, 0x01	; 1
    a716:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM2_ENABLE_PORT, DCM2_ENABLE_PIN, DIO_PIN_HIGH);
    a71a:	83 e0       	ldi	r24, 0x03	; 3
    a71c:	65 e0       	ldi	r22, 0x05	; 5
    a71e:	41 e0       	ldi	r20, 0x01	; 1
    a720:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	} 
	else
	{
		//Return Error Statement
	}
}
    a724:	28 96       	adiw	r28, 0x08	; 8
    a726:	0f b6       	in	r0, 0x3f	; 63
    a728:	f8 94       	cli
    a72a:	de bf       	out	0x3e, r29	; 62
    a72c:	0f be       	out	0x3f, r0	; 63
    a72e:	cd bf       	out	0x3d, r28	; 61
    a730:	cf 91       	pop	r28
    a732:	df 91       	pop	r29
    a734:	08 95       	ret

0000a736 <DCM_voidOff>:
void DCM_voidOff               (u8 copy_u8DCM_ID)
{
    a736:	df 93       	push	r29
    a738:	cf 93       	push	r28
    a73a:	00 d0       	rcall	.+0      	; 0xa73c <DCM_voidOff+0x6>
    a73c:	0f 92       	push	r0
    a73e:	cd b7       	in	r28, 0x3d	; 61
    a740:	de b7       	in	r29, 0x3e	; 62
    a742:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_u8DCM_ID==DCM1)||(copy_u8DCM_ID==DCM2))
    a744:	89 81       	ldd	r24, Y+1	; 0x01
    a746:	88 23       	and	r24, r24
    a748:	19 f0       	breq	.+6      	; 0xa750 <DCM_voidOff+0x1a>
    a74a:	89 81       	ldd	r24, Y+1	; 0x01
    a74c:	81 30       	cpi	r24, 0x01	; 1
    a74e:	71 f5       	brne	.+92     	; 0xa7ac <DCM_voidOff+0x76>
	{
		switch(copy_u8DCM_ID)
    a750:	89 81       	ldd	r24, Y+1	; 0x01
    a752:	28 2f       	mov	r18, r24
    a754:	30 e0       	ldi	r19, 0x00	; 0
    a756:	3b 83       	std	Y+3, r19	; 0x03
    a758:	2a 83       	std	Y+2, r18	; 0x02
    a75a:	8a 81       	ldd	r24, Y+2	; 0x02
    a75c:	9b 81       	ldd	r25, Y+3	; 0x03
    a75e:	00 97       	sbiw	r24, 0x00	; 0
    a760:	31 f0       	breq	.+12     	; 0xa76e <DCM_voidOff+0x38>
    a762:	2a 81       	ldd	r18, Y+2	; 0x02
    a764:	3b 81       	ldd	r19, Y+3	; 0x03
    a766:	21 30       	cpi	r18, 0x01	; 1
    a768:	31 05       	cpc	r19, r1
    a76a:	89 f0       	breq	.+34     	; 0xa78e <DCM_voidOff+0x58>
    a76c:	1f c0       	rjmp	.+62     	; 0xa7ac <DCM_voidOff+0x76>
		{
			case DCM1:
			DIO_voidSetPinValue(DCM1_A1_PORT, DCM1_A1_PIN, DIO_PIN_LOW);
    a76e:	83 e0       	ldi	r24, 0x03	; 3
    a770:	62 e0       	ldi	r22, 0x02	; 2
    a772:	40 e0       	ldi	r20, 0x00	; 0
    a774:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM1_A2_PORT, DCM1_A2_PIN, DIO_PIN_LOW);
    a778:	83 e0       	ldi	r24, 0x03	; 3
    a77a:	63 e0       	ldi	r22, 0x03	; 3
    a77c:	40 e0       	ldi	r20, 0x00	; 0
    a77e:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM1_ENABLE_PORT, DCM1_ENABLE_PIN, DIO_PIN_LOW);
    a782:	83 e0       	ldi	r24, 0x03	; 3
    a784:	64 e0       	ldi	r22, 0x04	; 4
    a786:	40 e0       	ldi	r20, 0x00	; 0
    a788:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
    a78c:	0f c0       	rjmp	.+30     	; 0xa7ac <DCM_voidOff+0x76>
			break;
			
			case DCM2:
			DIO_voidSetPinValue(DCM2_A3_PORT, DCM2_A3_PIN, DIO_PIN_LOW);
    a78e:	82 e0       	ldi	r24, 0x02	; 2
    a790:	65 e0       	ldi	r22, 0x05	; 5
    a792:	40 e0       	ldi	r20, 0x00	; 0
    a794:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM2_A4_PORT, DCM2_A4_PIN, DIO_PIN_LOW);
    a798:	82 e0       	ldi	r24, 0x02	; 2
    a79a:	66 e0       	ldi	r22, 0x06	; 6
    a79c:	40 e0       	ldi	r20, 0x00	; 0
    a79e:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM2_ENABLE_PORT, DCM2_ENABLE_PIN, DIO_PIN_LOW);
    a7a2:	83 e0       	ldi	r24, 0x03	; 3
    a7a4:	65 e0       	ldi	r22, 0x05	; 5
    a7a6:	40 e0       	ldi	r20, 0x00	; 0
    a7a8:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	} 
	else
	{
		//Return Error Statement
	}
}
    a7ac:	0f 90       	pop	r0
    a7ae:	0f 90       	pop	r0
    a7b0:	0f 90       	pop	r0
    a7b2:	cf 91       	pop	r28
    a7b4:	df 91       	pop	r29
    a7b6:	08 95       	ret

0000a7b8 <DCM_voidControlMotorSpeed>:
void DCM_voidControlMotorSpeed (u8 copy_u8DCM_ID, u8 copy_u8MotorDirection, u8 copy_u8DesiredSpeed)
{
    a7b8:	df 93       	push	r29
    a7ba:	cf 93       	push	r28
    a7bc:	cd b7       	in	r28, 0x3d	; 61
    a7be:	de b7       	in	r29, 0x3e	; 62
    a7c0:	29 97       	sbiw	r28, 0x09	; 9
    a7c2:	0f b6       	in	r0, 0x3f	; 63
    a7c4:	f8 94       	cli
    a7c6:	de bf       	out	0x3e, r29	; 62
    a7c8:	0f be       	out	0x3f, r0	; 63
    a7ca:	cd bf       	out	0x3d, r28	; 61
    a7cc:	89 83       	std	Y+1, r24	; 0x01
    a7ce:	6a 83       	std	Y+2, r22	; 0x02
    a7d0:	4b 83       	std	Y+3, r20	; 0x03
	if (((copy_u8MotorDirection==DCM_CW)||(copy_u8MotorDirection==DCM_CCW))&&((copy_u8DCM_ID==DCM1)||(copy_u8DCM_ID==DCM2))&&(copy_u8DesiredSpeed<=100))
    a7d2:	8a 81       	ldd	r24, Y+2	; 0x02
    a7d4:	81 30       	cpi	r24, 0x01	; 1
    a7d6:	21 f0       	breq	.+8      	; 0xa7e0 <DCM_voidControlMotorSpeed+0x28>
    a7d8:	8a 81       	ldd	r24, Y+2	; 0x02
    a7da:	82 30       	cpi	r24, 0x02	; 2
    a7dc:	09 f0       	breq	.+2      	; 0xa7e0 <DCM_voidControlMotorSpeed+0x28>
    a7de:	80 c0       	rjmp	.+256    	; 0xa8e0 <DCM_voidControlMotorSpeed+0x128>
    a7e0:	89 81       	ldd	r24, Y+1	; 0x01
    a7e2:	88 23       	and	r24, r24
    a7e4:	21 f0       	breq	.+8      	; 0xa7ee <DCM_voidControlMotorSpeed+0x36>
    a7e6:	89 81       	ldd	r24, Y+1	; 0x01
    a7e8:	81 30       	cpi	r24, 0x01	; 1
    a7ea:	09 f0       	breq	.+2      	; 0xa7ee <DCM_voidControlMotorSpeed+0x36>
    a7ec:	79 c0       	rjmp	.+242    	; 0xa8e0 <DCM_voidControlMotorSpeed+0x128>
    a7ee:	8b 81       	ldd	r24, Y+3	; 0x03
    a7f0:	85 36       	cpi	r24, 0x65	; 101
    a7f2:	08 f0       	brcs	.+2      	; 0xa7f6 <DCM_voidControlMotorSpeed+0x3e>
    a7f4:	75 c0       	rjmp	.+234    	; 0xa8e0 <DCM_voidControlMotorSpeed+0x128>
	{
		PWM0_voidInitChannel_0();
    a7f6:	0e 94 18 30 	call	0x6030	; 0x6030 <PWM0_voidInitChannel_0>
		PWM0_voidGenerate_PWM_Channel_0(copy_u8DesiredSpeed);
    a7fa:	8b 81       	ldd	r24, Y+3	; 0x03
    a7fc:	88 2f       	mov	r24, r24
    a7fe:	90 e0       	ldi	r25, 0x00	; 0
    a800:	0e 94 3b 30 	call	0x6076	; 0x6076 <PWM0_voidGenerate_PWM_Channel_0>
		switch(copy_u8DCM_ID)
    a804:	89 81       	ldd	r24, Y+1	; 0x01
    a806:	28 2f       	mov	r18, r24
    a808:	30 e0       	ldi	r19, 0x00	; 0
    a80a:	39 87       	std	Y+9, r19	; 0x09
    a80c:	28 87       	std	Y+8, r18	; 0x08
    a80e:	88 85       	ldd	r24, Y+8	; 0x08
    a810:	99 85       	ldd	r25, Y+9	; 0x09
    a812:	00 97       	sbiw	r24, 0x00	; 0
    a814:	31 f0       	breq	.+12     	; 0xa822 <DCM_voidControlMotorSpeed+0x6a>
    a816:	28 85       	ldd	r18, Y+8	; 0x08
    a818:	39 85       	ldd	r19, Y+9	; 0x09
    a81a:	21 30       	cpi	r18, 0x01	; 1
    a81c:	31 05       	cpc	r19, r1
    a81e:	89 f1       	breq	.+98     	; 0xa882 <DCM_voidControlMotorSpeed+0xca>
    a820:	5f c0       	rjmp	.+190    	; 0xa8e0 <DCM_voidControlMotorSpeed+0x128>
		{
			case DCM1:
			switch(copy_u8MotorDirection)
    a822:	8a 81       	ldd	r24, Y+2	; 0x02
    a824:	28 2f       	mov	r18, r24
    a826:	30 e0       	ldi	r19, 0x00	; 0
    a828:	3f 83       	std	Y+7, r19	; 0x07
    a82a:	2e 83       	std	Y+6, r18	; 0x06
    a82c:	8e 81       	ldd	r24, Y+6	; 0x06
    a82e:	9f 81       	ldd	r25, Y+7	; 0x07
    a830:	81 30       	cpi	r24, 0x01	; 1
    a832:	91 05       	cpc	r25, r1
    a834:	31 f0       	breq	.+12     	; 0xa842 <DCM_voidControlMotorSpeed+0x8a>
    a836:	2e 81       	ldd	r18, Y+6	; 0x06
    a838:	3f 81       	ldd	r19, Y+7	; 0x07
    a83a:	22 30       	cpi	r18, 0x02	; 2
    a83c:	31 05       	cpc	r19, r1
    a83e:	89 f0       	breq	.+34     	; 0xa862 <DCM_voidControlMotorSpeed+0xaa>
    a840:	4f c0       	rjmp	.+158    	; 0xa8e0 <DCM_voidControlMotorSpeed+0x128>
			{
				case DCM_CW:
				DIO_voidSetPinDirection(DCM1_ENABLE_PORT, DCM1_ENABLE_PIN, DIO_PIN_INPUT);
    a842:	83 e0       	ldi	r24, 0x03	; 3
    a844:	64 e0       	ldi	r22, 0x04	; 4
    a846:	40 e0       	ldi	r20, 0x00	; 0
    a848:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
				DIO_voidSetPinValue(DCM1_A1_PORT, DCM1_A1_PIN, DIO_PIN_HIGH);
    a84c:	83 e0       	ldi	r24, 0x03	; 3
    a84e:	62 e0       	ldi	r22, 0x02	; 2
    a850:	41 e0       	ldi	r20, 0x01	; 1
    a852:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM1_A2_PORT, DCM1_A2_PIN, DIO_PIN_LOW);
    a856:	83 e0       	ldi	r24, 0x03	; 3
    a858:	63 e0       	ldi	r22, 0x03	; 3
    a85a:	40 e0       	ldi	r20, 0x00	; 0
    a85c:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
    a860:	3f c0       	rjmp	.+126    	; 0xa8e0 <DCM_voidControlMotorSpeed+0x128>
				break;
				
				case DCM_CCW:
				DIO_voidSetPinDirection(DCM1_ENABLE_PORT, DCM1_ENABLE_PIN, DIO_PIN_INPUT);
    a862:	83 e0       	ldi	r24, 0x03	; 3
    a864:	64 e0       	ldi	r22, 0x04	; 4
    a866:	40 e0       	ldi	r20, 0x00	; 0
    a868:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
				DIO_voidSetPinValue(DCM1_A1_PORT, DCM1_A1_PIN, DIO_PIN_LOW);
    a86c:	83 e0       	ldi	r24, 0x03	; 3
    a86e:	62 e0       	ldi	r22, 0x02	; 2
    a870:	40 e0       	ldi	r20, 0x00	; 0
    a872:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM1_A2_PORT, DCM1_A2_PIN, DIO_PIN_HIGH);
    a876:	83 e0       	ldi	r24, 0x03	; 3
    a878:	63 e0       	ldi	r22, 0x03	; 3
    a87a:	41 e0       	ldi	r20, 0x01	; 1
    a87c:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
    a880:	2f c0       	rjmp	.+94     	; 0xa8e0 <DCM_voidControlMotorSpeed+0x128>
				break;
			}
			break;
			
			case DCM2:
			switch(copy_u8MotorDirection)
    a882:	8a 81       	ldd	r24, Y+2	; 0x02
    a884:	28 2f       	mov	r18, r24
    a886:	30 e0       	ldi	r19, 0x00	; 0
    a888:	3d 83       	std	Y+5, r19	; 0x05
    a88a:	2c 83       	std	Y+4, r18	; 0x04
    a88c:	8c 81       	ldd	r24, Y+4	; 0x04
    a88e:	9d 81       	ldd	r25, Y+5	; 0x05
    a890:	81 30       	cpi	r24, 0x01	; 1
    a892:	91 05       	cpc	r25, r1
    a894:	31 f0       	breq	.+12     	; 0xa8a2 <DCM_voidControlMotorSpeed+0xea>
    a896:	2c 81       	ldd	r18, Y+4	; 0x04
    a898:	3d 81       	ldd	r19, Y+5	; 0x05
    a89a:	22 30       	cpi	r18, 0x02	; 2
    a89c:	31 05       	cpc	r19, r1
    a89e:	89 f0       	breq	.+34     	; 0xa8c2 <DCM_voidControlMotorSpeed+0x10a>
    a8a0:	1f c0       	rjmp	.+62     	; 0xa8e0 <DCM_voidControlMotorSpeed+0x128>
			{
				case DCM_CW:
				DIO_voidSetPinDirection(DCM2_ENABLE_PORT, DCM2_ENABLE_PIN, DIO_PIN_INPUT);
    a8a2:	83 e0       	ldi	r24, 0x03	; 3
    a8a4:	65 e0       	ldi	r22, 0x05	; 5
    a8a6:	40 e0       	ldi	r20, 0x00	; 0
    a8a8:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
				DIO_voidSetPinValue(DCM2_A3_PORT, DCM2_A3_PIN, DIO_PIN_HIGH);
    a8ac:	82 e0       	ldi	r24, 0x02	; 2
    a8ae:	65 e0       	ldi	r22, 0x05	; 5
    a8b0:	41 e0       	ldi	r20, 0x01	; 1
    a8b2:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM2_A4_PORT, DCM2_A4_PIN, DIO_PIN_LOW);
    a8b6:	82 e0       	ldi	r24, 0x02	; 2
    a8b8:	66 e0       	ldi	r22, 0x06	; 6
    a8ba:	40 e0       	ldi	r20, 0x00	; 0
    a8bc:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
    a8c0:	0f c0       	rjmp	.+30     	; 0xa8e0 <DCM_voidControlMotorSpeed+0x128>
				break;
				
				case DCM_CCW:
				DIO_voidSetPinDirection(DCM2_ENABLE_PORT, DCM2_ENABLE_PIN, DIO_PIN_INPUT);
    a8c2:	83 e0       	ldi	r24, 0x03	; 3
    a8c4:	65 e0       	ldi	r22, 0x05	; 5
    a8c6:	40 e0       	ldi	r20, 0x00	; 0
    a8c8:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
				DIO_voidSetPinValue(DCM2_A3_PORT, DCM2_A3_PIN, DIO_PIN_LOW);
    a8cc:	82 e0       	ldi	r24, 0x02	; 2
    a8ce:	65 e0       	ldi	r22, 0x05	; 5
    a8d0:	40 e0       	ldi	r20, 0x00	; 0
    a8d2:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM2_A4_PORT, DCM2_A4_PIN, DIO_PIN_HIGH);
    a8d6:	82 e0       	ldi	r24, 0x02	; 2
    a8d8:	66 e0       	ldi	r22, 0x06	; 6
    a8da:	41 e0       	ldi	r20, 0x01	; 1
    a8dc:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
	} 
	else
	{
		//Return Error Statement
	}
}
    a8e0:	29 96       	adiw	r28, 0x09	; 9
    a8e2:	0f b6       	in	r0, 0x3f	; 63
    a8e4:	f8 94       	cli
    a8e6:	de bf       	out	0x3e, r29	; 62
    a8e8:	0f be       	out	0x3f, r0	; 63
    a8ea:	cd bf       	out	0x3d, r28	; 61
    a8ec:	cf 91       	pop	r28
    a8ee:	df 91       	pop	r29
    a8f0:	08 95       	ret

0000a8f2 <BUZZER_voidInit>:
/********** HAL **********/
#include "BUZZER_interface.h"
#include "BUZZER_config.h"

void BUZZER_voidInit   (u8 copy_u8BuzzerPortId, u8 copy_u8BuzzerPinId)//Function To Init A Buzzer
{
    a8f2:	df 93       	push	r29
    a8f4:	cf 93       	push	r28
    a8f6:	00 d0       	rcall	.+0      	; 0xa8f8 <BUZZER_voidInit+0x6>
    a8f8:	cd b7       	in	r28, 0x3d	; 61
    a8fa:	de b7       	in	r29, 0x3e	; 62
    a8fc:	89 83       	std	Y+1, r24	; 0x01
    a8fe:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(copy_u8BuzzerPortId, copy_u8BuzzerPinId,DIO_PIN_OUTPUT);
    a900:	89 81       	ldd	r24, Y+1	; 0x01
    a902:	6a 81       	ldd	r22, Y+2	; 0x02
    a904:	41 e0       	ldi	r20, 0x01	; 1
    a906:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
}
    a90a:	0f 90       	pop	r0
    a90c:	0f 90       	pop	r0
    a90e:	cf 91       	pop	r28
    a910:	df 91       	pop	r29
    a912:	08 95       	ret

0000a914 <BUZZER_voidOn>:

void BUZZER_voidOn     (u8 copy_u8BuzzerPortId, u8 copy_u8BuzzerPinId)//Function To Set Buzzer On
{
    a914:	df 93       	push	r29
    a916:	cf 93       	push	r28
    a918:	00 d0       	rcall	.+0      	; 0xa91a <BUZZER_voidOn+0x6>
    a91a:	cd b7       	in	r28, 0x3d	; 61
    a91c:	de b7       	in	r29, 0x3e	; 62
    a91e:	89 83       	std	Y+1, r24	; 0x01
    a920:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(copy_u8BuzzerPortId, copy_u8BuzzerPinId, DIO_PIN_HIGH);
    a922:	89 81       	ldd	r24, Y+1	; 0x01
    a924:	6a 81       	ldd	r22, Y+2	; 0x02
    a926:	41 e0       	ldi	r20, 0x01	; 1
    a928:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
}
    a92c:	0f 90       	pop	r0
    a92e:	0f 90       	pop	r0
    a930:	cf 91       	pop	r28
    a932:	df 91       	pop	r29
    a934:	08 95       	ret

0000a936 <BUZZER_voidOff>:

void BUZZER_voidOff    (u8 copy_u8BuzzerPortId, u8 copy_u8BuzzerPinId)//Function To Set Buzzer Off
{
    a936:	df 93       	push	r29
    a938:	cf 93       	push	r28
    a93a:	00 d0       	rcall	.+0      	; 0xa93c <BUZZER_voidOff+0x6>
    a93c:	cd b7       	in	r28, 0x3d	; 61
    a93e:	de b7       	in	r29, 0x3e	; 62
    a940:	89 83       	std	Y+1, r24	; 0x01
    a942:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(copy_u8BuzzerPortId, copy_u8BuzzerPinId, DIO_PIN_LOW);
    a944:	89 81       	ldd	r24, Y+1	; 0x01
    a946:	6a 81       	ldd	r22, Y+2	; 0x02
    a948:	40 e0       	ldi	r20, 0x00	; 0
    a94a:	0e 94 61 32 	call	0x64c2	; 0x64c2 <DIO_voidSetPinValue>
}
    a94e:	0f 90       	pop	r0
    a950:	0f 90       	pop	r0
    a952:	cf 91       	pop	r28
    a954:	df 91       	pop	r29
    a956:	08 95       	ret

0000a958 <BUZZER_voidToggle>:

void BUZZER_voidToggle (u8 copy_u8BuzzerPortId, u8 copy_u8BuzzerPinId)//Function To Toggle a Buzzer
{
    a958:	df 93       	push	r29
    a95a:	cf 93       	push	r28
    a95c:	00 d0       	rcall	.+0      	; 0xa95e <BUZZER_voidToggle+0x6>
    a95e:	cd b7       	in	r28, 0x3d	; 61
    a960:	de b7       	in	r29, 0x3e	; 62
    a962:	89 83       	std	Y+1, r24	; 0x01
    a964:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidTogglePinValue(copy_u8BuzzerPortId, copy_u8BuzzerPinId);
    a966:	89 81       	ldd	r24, Y+1	; 0x01
    a968:	6a 81       	ldd	r22, Y+2	; 0x02
    a96a:	0e 94 18 34 	call	0x6830	; 0x6830 <DIO_voidTogglePinValue>
}
    a96e:	0f 90       	pop	r0
    a970:	0f 90       	pop	r0
    a972:	cf 91       	pop	r28
    a974:	df 91       	pop	r29
    a976:	08 95       	ret

0000a978 <DOOR_voidInit>:

/*Project*/
#include "DOOR_interface.h"


void DOOR_voidInit(void) {
    a978:	df 93       	push	r29
    a97a:	cf 93       	push	r28
    a97c:	cd b7       	in	r28, 0x3d	; 61
    a97e:	de b7       	in	r29, 0x3e	; 62
    a980:	2f 97       	sbiw	r28, 0x0f	; 15
    a982:	0f b6       	in	r0, 0x3f	; 63
    a984:	f8 94       	cli
    a986:	de bf       	out	0x3e, r29	; 62
    a988:	0f be       	out	0x3f, r0	; 63
    a98a:	cd bf       	out	0x3d, r28	; 61
	SERVO_voidInit();
    a98c:	0e 94 9d 45 	call	0x8b3a	; 0x8b3a <SERVO_voidInit>
	u8 local_u8RxData;
	UART_voidTxString((u8*) "1- Open Door ");
    a990:	82 ea       	ldi	r24, 0xA2	; 162
    a992:	93 e0       	ldi	r25, 0x03	; 3
    a994:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

	UART_voidTxString((u8*) "2- Close Door");
    a998:	80 eb       	ldi	r24, 0xB0	; 176
    a99a:	93 e0       	ldi	r25, 0x03	; 3
    a99c:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	do {
		UART_voidRxChar(&local_u8RxData);
    a9a0:	ce 01       	movw	r24, r28
    a9a2:	0f 96       	adiw	r24, 0x0f	; 15
    a9a4:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>

	} while (local_u8RxData == NULL);
    a9a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    a9aa:	88 2f       	mov	r24, r24
    a9ac:	90 e0       	ldi	r25, 0x00	; 0
    a9ae:	00 97       	sbiw	r24, 0x00	; 0
    a9b0:	b9 f3       	breq	.-18     	; 0xa9a0 <DOOR_voidInit+0x28>
	if (local_u8RxData == '1') {
    a9b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    a9b4:	81 33       	cpi	r24, 0x31	; 49
    a9b6:	69 f4       	brne	.+26     	; 0xa9d2 <DOOR_voidInit+0x5a>
		DOOR_voidOpen();
    a9b8:	0e 94 72 55 	call	0xaae4	; 0xaae4 <DOOR_voidOpen>
		LCD_voidClear();
    a9bc:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "Door Opened");
    a9c0:	8e eb       	ldi	r24, 0xBE	; 190
    a9c2:	93 e0       	ldi	r25, 0x03	; 3
    a9c4:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		UART_voidTxString((u8*)  "Door Opened");
    a9c8:	8e eb       	ldi	r24, 0xBE	; 190
    a9ca:	93 e0       	ldi	r25, 0x03	; 3
    a9cc:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    a9d0:	0c c0       	rjmp	.+24     	; 0xa9ea <DOOR_voidInit+0x72>
	} else {

		DOOR_voidClose();
    a9d2:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <DOOR_voidClose>
		LCD_voidClear();
    a9d6:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "Door Closed");
    a9da:	8a ec       	ldi	r24, 0xCA	; 202
    a9dc:	93 e0       	ldi	r25, 0x03	; 3
    a9de:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		UART_voidTxString((u8*) "Door Closed");
    a9e2:	8a ec       	ldi	r24, 0xCA	; 202
    a9e4:	93 e0       	ldi	r25, 0x03	; 3
    a9e6:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    a9ea:	80 e0       	ldi	r24, 0x00	; 0
    a9ec:	90 e8       	ldi	r25, 0x80	; 128
    a9ee:	ab e3       	ldi	r26, 0x3B	; 59
    a9f0:	b5 e4       	ldi	r27, 0x45	; 69
    a9f2:	8b 87       	std	Y+11, r24	; 0x0b
    a9f4:	9c 87       	std	Y+12, r25	; 0x0c
    a9f6:	ad 87       	std	Y+13, r26	; 0x0d
    a9f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    a9fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    a9fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    a9fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    aa00:	9e 85       	ldd	r25, Y+14	; 0x0e
    aa02:	20 e0       	ldi	r18, 0x00	; 0
    aa04:	30 e0       	ldi	r19, 0x00	; 0
    aa06:	4a e7       	ldi	r20, 0x7A	; 122
    aa08:	55 e4       	ldi	r21, 0x45	; 69
    aa0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    aa0e:	dc 01       	movw	r26, r24
    aa10:	cb 01       	movw	r24, r22
    aa12:	8f 83       	std	Y+7, r24	; 0x07
    aa14:	98 87       	std	Y+8, r25	; 0x08
    aa16:	a9 87       	std	Y+9, r26	; 0x09
    aa18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    aa1a:	6f 81       	ldd	r22, Y+7	; 0x07
    aa1c:	78 85       	ldd	r23, Y+8	; 0x08
    aa1e:	89 85       	ldd	r24, Y+9	; 0x09
    aa20:	9a 85       	ldd	r25, Y+10	; 0x0a
    aa22:	20 e0       	ldi	r18, 0x00	; 0
    aa24:	30 e0       	ldi	r19, 0x00	; 0
    aa26:	40 e8       	ldi	r20, 0x80	; 128
    aa28:	5f e3       	ldi	r21, 0x3F	; 63
    aa2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    aa2e:	88 23       	and	r24, r24
    aa30:	2c f4       	brge	.+10     	; 0xaa3c <DOOR_voidInit+0xc4>
		__ticks = 1;
    aa32:	81 e0       	ldi	r24, 0x01	; 1
    aa34:	90 e0       	ldi	r25, 0x00	; 0
    aa36:	9e 83       	std	Y+6, r25	; 0x06
    aa38:	8d 83       	std	Y+5, r24	; 0x05
    aa3a:	3f c0       	rjmp	.+126    	; 0xaaba <DOOR_voidInit+0x142>
	else if (__tmp > 65535)
    aa3c:	6f 81       	ldd	r22, Y+7	; 0x07
    aa3e:	78 85       	ldd	r23, Y+8	; 0x08
    aa40:	89 85       	ldd	r24, Y+9	; 0x09
    aa42:	9a 85       	ldd	r25, Y+10	; 0x0a
    aa44:	20 e0       	ldi	r18, 0x00	; 0
    aa46:	3f ef       	ldi	r19, 0xFF	; 255
    aa48:	4f e7       	ldi	r20, 0x7F	; 127
    aa4a:	57 e4       	ldi	r21, 0x47	; 71
    aa4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    aa50:	18 16       	cp	r1, r24
    aa52:	4c f5       	brge	.+82     	; 0xaaa6 <DOOR_voidInit+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    aa54:	6b 85       	ldd	r22, Y+11	; 0x0b
    aa56:	7c 85       	ldd	r23, Y+12	; 0x0c
    aa58:	8d 85       	ldd	r24, Y+13	; 0x0d
    aa5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    aa5c:	20 e0       	ldi	r18, 0x00	; 0
    aa5e:	30 e0       	ldi	r19, 0x00	; 0
    aa60:	40 e2       	ldi	r20, 0x20	; 32
    aa62:	51 e4       	ldi	r21, 0x41	; 65
    aa64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    aa68:	dc 01       	movw	r26, r24
    aa6a:	cb 01       	movw	r24, r22
    aa6c:	bc 01       	movw	r22, r24
    aa6e:	cd 01       	movw	r24, r26
    aa70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    aa74:	dc 01       	movw	r26, r24
    aa76:	cb 01       	movw	r24, r22
    aa78:	9e 83       	std	Y+6, r25	; 0x06
    aa7a:	8d 83       	std	Y+5, r24	; 0x05
    aa7c:	0f c0       	rjmp	.+30     	; 0xaa9c <DOOR_voidInit+0x124>
    aa7e:	80 e9       	ldi	r24, 0x90	; 144
    aa80:	91 e0       	ldi	r25, 0x01	; 1
    aa82:	9c 83       	std	Y+4, r25	; 0x04
    aa84:	8b 83       	std	Y+3, r24	; 0x03
    aa86:	8b 81       	ldd	r24, Y+3	; 0x03
    aa88:	9c 81       	ldd	r25, Y+4	; 0x04
    aa8a:	01 97       	sbiw	r24, 0x01	; 1
    aa8c:	f1 f7       	brne	.-4      	; 0xaa8a <DOOR_voidInit+0x112>
    aa8e:	9c 83       	std	Y+4, r25	; 0x04
    aa90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    aa92:	8d 81       	ldd	r24, Y+5	; 0x05
    aa94:	9e 81       	ldd	r25, Y+6	; 0x06
    aa96:	01 97       	sbiw	r24, 0x01	; 1
    aa98:	9e 83       	std	Y+6, r25	; 0x06
    aa9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    aa9c:	8d 81       	ldd	r24, Y+5	; 0x05
    aa9e:	9e 81       	ldd	r25, Y+6	; 0x06
    aaa0:	00 97       	sbiw	r24, 0x00	; 0
    aaa2:	69 f7       	brne	.-38     	; 0xaa7e <DOOR_voidInit+0x106>
    aaa4:	14 c0       	rjmp	.+40     	; 0xaace <DOOR_voidInit+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    aaa6:	6f 81       	ldd	r22, Y+7	; 0x07
    aaa8:	78 85       	ldd	r23, Y+8	; 0x08
    aaaa:	89 85       	ldd	r24, Y+9	; 0x09
    aaac:	9a 85       	ldd	r25, Y+10	; 0x0a
    aaae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    aab2:	dc 01       	movw	r26, r24
    aab4:	cb 01       	movw	r24, r22
    aab6:	9e 83       	std	Y+6, r25	; 0x06
    aab8:	8d 83       	std	Y+5, r24	; 0x05
    aaba:	8d 81       	ldd	r24, Y+5	; 0x05
    aabc:	9e 81       	ldd	r25, Y+6	; 0x06
    aabe:	9a 83       	std	Y+2, r25	; 0x02
    aac0:	89 83       	std	Y+1, r24	; 0x01
    aac2:	89 81       	ldd	r24, Y+1	; 0x01
    aac4:	9a 81       	ldd	r25, Y+2	; 0x02
    aac6:	01 97       	sbiw	r24, 0x01	; 1
    aac8:	f1 f7       	brne	.-4      	; 0xaac6 <DOOR_voidInit+0x14e>
    aaca:	9a 83       	std	Y+2, r25	; 0x02
    aacc:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(3000);
	LCD_voidClear();
    aace:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>

}
    aad2:	2f 96       	adiw	r28, 0x0f	; 15
    aad4:	0f b6       	in	r0, 0x3f	; 63
    aad6:	f8 94       	cli
    aad8:	de bf       	out	0x3e, r29	; 62
    aada:	0f be       	out	0x3f, r0	; 63
    aadc:	cd bf       	out	0x3d, r28	; 61
    aade:	cf 91       	pop	r28
    aae0:	df 91       	pop	r29
    aae2:	08 95       	ret

0000aae4 <DOOR_voidOpen>:

void DOOR_voidOpen(void) {
    aae4:	df 93       	push	r29
    aae6:	cf 93       	push	r28
    aae8:	cd b7       	in	r28, 0x3d	; 61
    aaea:	de b7       	in	r29, 0x3e	; 62
	SERVO_voidRotate0_180(SERVO_OPEN_ANGLE);
    aaec:	8a e5       	ldi	r24, 0x5A	; 90
    aaee:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <SERVO_voidRotate0_180>
}
    aaf2:	cf 91       	pop	r28
    aaf4:	df 91       	pop	r29
    aaf6:	08 95       	ret

0000aaf8 <DOOR_voidClose>:

void DOOR_voidClose(void) {
    aaf8:	df 93       	push	r29
    aafa:	cf 93       	push	r28
    aafc:	cd b7       	in	r28, 0x3d	; 61
    aafe:	de b7       	in	r29, 0x3e	; 62
	SERVO_voidRotate0_180(SERVO_CLOSE_ANGLE);
    ab00:	80 e0       	ldi	r24, 0x00	; 0
    ab02:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <SERVO_voidRotate0_180>
}
    ab06:	cf 91       	pop	r28
    ab08:	df 91       	pop	r29
    ab0a:	08 95       	ret

0000ab0c <DIMMER_voidInit>:
#include "KPD_interface.h"
/************************************************************************/
/*Function That init PWM0 to control LED intense and Relay and setting  */
/*                     Pb3 as a output pin  (oc0)                       */
/************************************************************************/
void DIMMER_voidInit(void) {
    ab0c:	df 93       	push	r29
    ab0e:	cf 93       	push	r28
    ab10:	cd b7       	in	r28, 0x3d	; 61
    ab12:	de b7       	in	r29, 0x3e	; 62
	PWM0_voidInitChannel_0();
    ab14:	0e 94 18 30 	call	0x6030	; 0x6030 <PWM0_voidInitChannel_0>
	RELAY_voidInit();
    ab18:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <RELAY_voidInit>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT);
    ab1c:	81 e0       	ldi	r24, 0x01	; 1
    ab1e:	63 e0       	ldi	r22, 0x03	; 3
    ab20:	41 e0       	ldi	r20, 0x01	; 1
    ab22:	0e 94 3b 31 	call	0x6276	; 0x6276 <DIO_voidSetPinDirection>
}
    ab26:	cf 91       	pop	r28
    ab28:	df 91       	pop	r29
    ab2a:	08 95       	ret

0000ab2c <DIMMER_voidStartKPD>:
/************************************************************************/
/*             Function that control Dimmer Circuit                     */
/************************************************************************/
void DIMMER_voidStartKPD(void) {
    ab2c:	df 93       	push	r29
    ab2e:	cf 93       	push	r28
    ab30:	cd b7       	in	r28, 0x3d	; 61
    ab32:	de b7       	in	r29, 0x3e	; 62
    ab34:	ab 97       	sbiw	r28, 0x2b	; 43
    ab36:	0f b6       	in	r0, 0x3f	; 63
    ab38:	f8 94       	cli
    ab3a:	de bf       	out	0x3e, r29	; 62
    ab3c:	0f be       	out	0x3f, r0	; 63
    ab3e:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8KPD;

	LCD_voidClear();
    ab40:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
	LCD_voidDisplayString((u8*) "Enter The LED");
    ab44:	86 ed       	ldi	r24, 0xD6	; 214
    ab46:	93 e0       	ldi	r25, 0x03	; 3
    ab48:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    ab4c:	82 e0       	ldi	r24, 0x02	; 2
    ab4e:	60 e0       	ldi	r22, 0x00	; 0
    ab50:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString((u8*) "Intensity (0-9)");
    ab54:	84 ee       	ldi	r24, 0xE4	; 228
    ab56:	93 e0       	ldi	r25, 0x03	; 3
    ab58:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
	do {
		KPD_voidGetValue(&local_u8KPD);
    ab5c:	ce 01       	movw	r24, r28
    ab5e:	8b 96       	adiw	r24, 0x2b	; 43
    ab60:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <KPD_voidGetValue>
	} while (local_u8KPD == KPD_NOT_PRESSED);
    ab64:	8b a5       	ldd	r24, Y+43	; 0x2b
    ab66:	8f 3f       	cpi	r24, 0xFF	; 255
    ab68:	c9 f3       	breq	.-14     	; 0xab5c <DIMMER_voidStartKPD+0x30>
	LCD_voidClear();
    ab6a:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>

	if (local_u8KPD == '0') {
    ab6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    ab70:	80 33       	cpi	r24, 0x30	; 48
    ab72:	09 f0       	breq	.+2      	; 0xab76 <DIMMER_voidStartKPD+0x4a>
    ab74:	79 c0       	rjmp	.+242    	; 0xac68 <DIMMER_voidStartKPD+0x13c>
		RELAY_voidOff();
    ab76:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <RELAY_voidOff>

		LCD_voidDisplayString((u8*) "LED Intensity 0");
    ab7a:	84 ef       	ldi	r24, 0xF4	; 244
    ab7c:	93 e0       	ldi	r25, 0x03	; 3
    ab7e:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    ab82:	80 e0       	ldi	r24, 0x00	; 0
    ab84:	90 e0       	ldi	r25, 0x00	; 0
    ab86:	aa ef       	ldi	r26, 0xFA	; 250
    ab88:	b4 e4       	ldi	r27, 0x44	; 68
    ab8a:	8f a3       	std	Y+39, r24	; 0x27
    ab8c:	98 a7       	std	Y+40, r25	; 0x28
    ab8e:	a9 a7       	std	Y+41, r26	; 0x29
    ab90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    ab92:	6f a1       	ldd	r22, Y+39	; 0x27
    ab94:	78 a5       	ldd	r23, Y+40	; 0x28
    ab96:	89 a5       	ldd	r24, Y+41	; 0x29
    ab98:	9a a5       	ldd	r25, Y+42	; 0x2a
    ab9a:	20 e0       	ldi	r18, 0x00	; 0
    ab9c:	30 e0       	ldi	r19, 0x00	; 0
    ab9e:	4a e7       	ldi	r20, 0x7A	; 122
    aba0:	55 e4       	ldi	r21, 0x45	; 69
    aba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    aba6:	dc 01       	movw	r26, r24
    aba8:	cb 01       	movw	r24, r22
    abaa:	8b a3       	std	Y+35, r24	; 0x23
    abac:	9c a3       	std	Y+36, r25	; 0x24
    abae:	ad a3       	std	Y+37, r26	; 0x25
    abb0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    abb2:	6b a1       	ldd	r22, Y+35	; 0x23
    abb4:	7c a1       	ldd	r23, Y+36	; 0x24
    abb6:	8d a1       	ldd	r24, Y+37	; 0x25
    abb8:	9e a1       	ldd	r25, Y+38	; 0x26
    abba:	20 e0       	ldi	r18, 0x00	; 0
    abbc:	30 e0       	ldi	r19, 0x00	; 0
    abbe:	40 e8       	ldi	r20, 0x80	; 128
    abc0:	5f e3       	ldi	r21, 0x3F	; 63
    abc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    abc6:	88 23       	and	r24, r24
    abc8:	2c f4       	brge	.+10     	; 0xabd4 <DIMMER_voidStartKPD+0xa8>
		__ticks = 1;
    abca:	81 e0       	ldi	r24, 0x01	; 1
    abcc:	90 e0       	ldi	r25, 0x00	; 0
    abce:	9a a3       	std	Y+34, r25	; 0x22
    abd0:	89 a3       	std	Y+33, r24	; 0x21
    abd2:	3f c0       	rjmp	.+126    	; 0xac52 <DIMMER_voidStartKPD+0x126>
	else if (__tmp > 65535)
    abd4:	6b a1       	ldd	r22, Y+35	; 0x23
    abd6:	7c a1       	ldd	r23, Y+36	; 0x24
    abd8:	8d a1       	ldd	r24, Y+37	; 0x25
    abda:	9e a1       	ldd	r25, Y+38	; 0x26
    abdc:	20 e0       	ldi	r18, 0x00	; 0
    abde:	3f ef       	ldi	r19, 0xFF	; 255
    abe0:	4f e7       	ldi	r20, 0x7F	; 127
    abe2:	57 e4       	ldi	r21, 0x47	; 71
    abe4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    abe8:	18 16       	cp	r1, r24
    abea:	4c f5       	brge	.+82     	; 0xac3e <DIMMER_voidStartKPD+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    abec:	6f a1       	ldd	r22, Y+39	; 0x27
    abee:	78 a5       	ldd	r23, Y+40	; 0x28
    abf0:	89 a5       	ldd	r24, Y+41	; 0x29
    abf2:	9a a5       	ldd	r25, Y+42	; 0x2a
    abf4:	20 e0       	ldi	r18, 0x00	; 0
    abf6:	30 e0       	ldi	r19, 0x00	; 0
    abf8:	40 e2       	ldi	r20, 0x20	; 32
    abfa:	51 e4       	ldi	r21, 0x41	; 65
    abfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    ac00:	dc 01       	movw	r26, r24
    ac02:	cb 01       	movw	r24, r22
    ac04:	bc 01       	movw	r22, r24
    ac06:	cd 01       	movw	r24, r26
    ac08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    ac0c:	dc 01       	movw	r26, r24
    ac0e:	cb 01       	movw	r24, r22
    ac10:	9a a3       	std	Y+34, r25	; 0x22
    ac12:	89 a3       	std	Y+33, r24	; 0x21
    ac14:	0f c0       	rjmp	.+30     	; 0xac34 <DIMMER_voidStartKPD+0x108>
    ac16:	80 e9       	ldi	r24, 0x90	; 144
    ac18:	91 e0       	ldi	r25, 0x01	; 1
    ac1a:	98 a3       	std	Y+32, r25	; 0x20
    ac1c:	8f 8f       	std	Y+31, r24	; 0x1f
    ac1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    ac20:	98 a1       	ldd	r25, Y+32	; 0x20
    ac22:	01 97       	sbiw	r24, 0x01	; 1
    ac24:	f1 f7       	brne	.-4      	; 0xac22 <DIMMER_voidStartKPD+0xf6>
    ac26:	98 a3       	std	Y+32, r25	; 0x20
    ac28:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ac2a:	89 a1       	ldd	r24, Y+33	; 0x21
    ac2c:	9a a1       	ldd	r25, Y+34	; 0x22
    ac2e:	01 97       	sbiw	r24, 0x01	; 1
    ac30:	9a a3       	std	Y+34, r25	; 0x22
    ac32:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ac34:	89 a1       	ldd	r24, Y+33	; 0x21
    ac36:	9a a1       	ldd	r25, Y+34	; 0x22
    ac38:	00 97       	sbiw	r24, 0x00	; 0
    ac3a:	69 f7       	brne	.-38     	; 0xac16 <DIMMER_voidStartKPD+0xea>
    ac3c:	13 c1       	rjmp	.+550    	; 0xae64 <DIMMER_voidStartKPD+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ac3e:	6b a1       	ldd	r22, Y+35	; 0x23
    ac40:	7c a1       	ldd	r23, Y+36	; 0x24
    ac42:	8d a1       	ldd	r24, Y+37	; 0x25
    ac44:	9e a1       	ldd	r25, Y+38	; 0x26
    ac46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    ac4a:	dc 01       	movw	r26, r24
    ac4c:	cb 01       	movw	r24, r22
    ac4e:	9a a3       	std	Y+34, r25	; 0x22
    ac50:	89 a3       	std	Y+33, r24	; 0x21
    ac52:	89 a1       	ldd	r24, Y+33	; 0x21
    ac54:	9a a1       	ldd	r25, Y+34	; 0x22
    ac56:	9e 8f       	std	Y+30, r25	; 0x1e
    ac58:	8d 8f       	std	Y+29, r24	; 0x1d
    ac5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    ac5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    ac5e:	01 97       	sbiw	r24, 0x01	; 1
    ac60:	f1 f7       	brne	.-4      	; 0xac5e <DIMMER_voidStartKPD+0x132>
    ac62:	9e 8f       	std	Y+30, r25	; 0x1e
    ac64:	8d 8f       	std	Y+29, r24	; 0x1d
    ac66:	fe c0       	rjmp	.+508    	; 0xae64 <DIMMER_voidStartKPD+0x338>
		_delay_ms(2000);

	} else {
		RELAY_voidOn();
    ac68:	0e 94 e8 45 	call	0x8bd0	; 0x8bd0 <RELAY_voidOn>
    ac6c:	80 e0       	ldi	r24, 0x00	; 0
    ac6e:	90 e0       	ldi	r25, 0x00	; 0
    ac70:	a8 ec       	ldi	r26, 0xC8	; 200
    ac72:	b2 e4       	ldi	r27, 0x42	; 66
    ac74:	89 8f       	std	Y+25, r24	; 0x19
    ac76:	9a 8f       	std	Y+26, r25	; 0x1a
    ac78:	ab 8f       	std	Y+27, r26	; 0x1b
    ac7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    ac7c:	69 8d       	ldd	r22, Y+25	; 0x19
    ac7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    ac80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ac82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ac84:	20 e0       	ldi	r18, 0x00	; 0
    ac86:	30 e0       	ldi	r19, 0x00	; 0
    ac88:	4a e7       	ldi	r20, 0x7A	; 122
    ac8a:	55 e4       	ldi	r21, 0x45	; 69
    ac8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    ac90:	dc 01       	movw	r26, r24
    ac92:	cb 01       	movw	r24, r22
    ac94:	8d 8b       	std	Y+21, r24	; 0x15
    ac96:	9e 8b       	std	Y+22, r25	; 0x16
    ac98:	af 8b       	std	Y+23, r26	; 0x17
    ac9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    ac9c:	6d 89       	ldd	r22, Y+21	; 0x15
    ac9e:	7e 89       	ldd	r23, Y+22	; 0x16
    aca0:	8f 89       	ldd	r24, Y+23	; 0x17
    aca2:	98 8d       	ldd	r25, Y+24	; 0x18
    aca4:	20 e0       	ldi	r18, 0x00	; 0
    aca6:	30 e0       	ldi	r19, 0x00	; 0
    aca8:	40 e8       	ldi	r20, 0x80	; 128
    acaa:	5f e3       	ldi	r21, 0x3F	; 63
    acac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    acb0:	88 23       	and	r24, r24
    acb2:	2c f4       	brge	.+10     	; 0xacbe <DIMMER_voidStartKPD+0x192>
		__ticks = 1;
    acb4:	81 e0       	ldi	r24, 0x01	; 1
    acb6:	90 e0       	ldi	r25, 0x00	; 0
    acb8:	9c 8b       	std	Y+20, r25	; 0x14
    acba:	8b 8b       	std	Y+19, r24	; 0x13
    acbc:	3f c0       	rjmp	.+126    	; 0xad3c <DIMMER_voidStartKPD+0x210>
	else if (__tmp > 65535)
    acbe:	6d 89       	ldd	r22, Y+21	; 0x15
    acc0:	7e 89       	ldd	r23, Y+22	; 0x16
    acc2:	8f 89       	ldd	r24, Y+23	; 0x17
    acc4:	98 8d       	ldd	r25, Y+24	; 0x18
    acc6:	20 e0       	ldi	r18, 0x00	; 0
    acc8:	3f ef       	ldi	r19, 0xFF	; 255
    acca:	4f e7       	ldi	r20, 0x7F	; 127
    accc:	57 e4       	ldi	r21, 0x47	; 71
    acce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    acd2:	18 16       	cp	r1, r24
    acd4:	4c f5       	brge	.+82     	; 0xad28 <DIMMER_voidStartKPD+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    acd6:	69 8d       	ldd	r22, Y+25	; 0x19
    acd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    acda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    acdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    acde:	20 e0       	ldi	r18, 0x00	; 0
    ace0:	30 e0       	ldi	r19, 0x00	; 0
    ace2:	40 e2       	ldi	r20, 0x20	; 32
    ace4:	51 e4       	ldi	r21, 0x41	; 65
    ace6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    acea:	dc 01       	movw	r26, r24
    acec:	cb 01       	movw	r24, r22
    acee:	bc 01       	movw	r22, r24
    acf0:	cd 01       	movw	r24, r26
    acf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    acf6:	dc 01       	movw	r26, r24
    acf8:	cb 01       	movw	r24, r22
    acfa:	9c 8b       	std	Y+20, r25	; 0x14
    acfc:	8b 8b       	std	Y+19, r24	; 0x13
    acfe:	0f c0       	rjmp	.+30     	; 0xad1e <DIMMER_voidStartKPD+0x1f2>
    ad00:	80 e9       	ldi	r24, 0x90	; 144
    ad02:	91 e0       	ldi	r25, 0x01	; 1
    ad04:	9a 8b       	std	Y+18, r25	; 0x12
    ad06:	89 8b       	std	Y+17, r24	; 0x11
    ad08:	89 89       	ldd	r24, Y+17	; 0x11
    ad0a:	9a 89       	ldd	r25, Y+18	; 0x12
    ad0c:	01 97       	sbiw	r24, 0x01	; 1
    ad0e:	f1 f7       	brne	.-4      	; 0xad0c <DIMMER_voidStartKPD+0x1e0>
    ad10:	9a 8b       	std	Y+18, r25	; 0x12
    ad12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ad14:	8b 89       	ldd	r24, Y+19	; 0x13
    ad16:	9c 89       	ldd	r25, Y+20	; 0x14
    ad18:	01 97       	sbiw	r24, 0x01	; 1
    ad1a:	9c 8b       	std	Y+20, r25	; 0x14
    ad1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ad1e:	8b 89       	ldd	r24, Y+19	; 0x13
    ad20:	9c 89       	ldd	r25, Y+20	; 0x14
    ad22:	00 97       	sbiw	r24, 0x00	; 0
    ad24:	69 f7       	brne	.-38     	; 0xad00 <DIMMER_voidStartKPD+0x1d4>
    ad26:	14 c0       	rjmp	.+40     	; 0xad50 <DIMMER_voidStartKPD+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ad28:	6d 89       	ldd	r22, Y+21	; 0x15
    ad2a:	7e 89       	ldd	r23, Y+22	; 0x16
    ad2c:	8f 89       	ldd	r24, Y+23	; 0x17
    ad2e:	98 8d       	ldd	r25, Y+24	; 0x18
    ad30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    ad34:	dc 01       	movw	r26, r24
    ad36:	cb 01       	movw	r24, r22
    ad38:	9c 8b       	std	Y+20, r25	; 0x14
    ad3a:	8b 8b       	std	Y+19, r24	; 0x13
    ad3c:	8b 89       	ldd	r24, Y+19	; 0x13
    ad3e:	9c 89       	ldd	r25, Y+20	; 0x14
    ad40:	98 8b       	std	Y+16, r25	; 0x10
    ad42:	8f 87       	std	Y+15, r24	; 0x0f
    ad44:	8f 85       	ldd	r24, Y+15	; 0x0f
    ad46:	98 89       	ldd	r25, Y+16	; 0x10
    ad48:	01 97       	sbiw	r24, 0x01	; 1
    ad4a:	f1 f7       	brne	.-4      	; 0xad48 <DIMMER_voidStartKPD+0x21c>
    ad4c:	98 8b       	std	Y+16, r25	; 0x10
    ad4e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		PWM0_voidGenerate_PWM_Channel_0(local_u8KPD * 11);
    ad50:	8b a5       	ldd	r24, Y+43	; 0x2b
    ad52:	48 2f       	mov	r20, r24
    ad54:	50 e0       	ldi	r21, 0x00	; 0
    ad56:	ca 01       	movw	r24, r20
    ad58:	88 0f       	add	r24, r24
    ad5a:	99 1f       	adc	r25, r25
    ad5c:	9c 01       	movw	r18, r24
    ad5e:	22 0f       	add	r18, r18
    ad60:	33 1f       	adc	r19, r19
    ad62:	22 0f       	add	r18, r18
    ad64:	33 1f       	adc	r19, r19
    ad66:	82 0f       	add	r24, r18
    ad68:	93 1f       	adc	r25, r19
    ad6a:	84 0f       	add	r24, r20
    ad6c:	95 1f       	adc	r25, r21
    ad6e:	0e 94 3b 30 	call	0x6076	; 0x6076 <PWM0_voidGenerate_PWM_Channel_0>

		LCD_voidDisplayString((u8*) "LED Intensity ");
    ad72:	84 e0       	ldi	r24, 0x04	; 4
    ad74:	94 e0       	ldi	r25, 0x04	; 4
    ad76:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
				LCD_voidDisplayChar(local_u8KPD);
    ad7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    ad7c:	0e 94 3c 4c 	call	0x9878	; 0x9878 <LCD_voidDisplayChar>
    ad80:	80 e0       	ldi	r24, 0x00	; 0
    ad82:	90 e0       	ldi	r25, 0x00	; 0
    ad84:	aa ef       	ldi	r26, 0xFA	; 250
    ad86:	b4 e4       	ldi	r27, 0x44	; 68
    ad88:	8b 87       	std	Y+11, r24	; 0x0b
    ad8a:	9c 87       	std	Y+12, r25	; 0x0c
    ad8c:	ad 87       	std	Y+13, r26	; 0x0d
    ad8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    ad90:	6b 85       	ldd	r22, Y+11	; 0x0b
    ad92:	7c 85       	ldd	r23, Y+12	; 0x0c
    ad94:	8d 85       	ldd	r24, Y+13	; 0x0d
    ad96:	9e 85       	ldd	r25, Y+14	; 0x0e
    ad98:	20 e0       	ldi	r18, 0x00	; 0
    ad9a:	30 e0       	ldi	r19, 0x00	; 0
    ad9c:	4a e7       	ldi	r20, 0x7A	; 122
    ad9e:	55 e4       	ldi	r21, 0x45	; 69
    ada0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    ada4:	dc 01       	movw	r26, r24
    ada6:	cb 01       	movw	r24, r22
    ada8:	8f 83       	std	Y+7, r24	; 0x07
    adaa:	98 87       	std	Y+8, r25	; 0x08
    adac:	a9 87       	std	Y+9, r26	; 0x09
    adae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    adb0:	6f 81       	ldd	r22, Y+7	; 0x07
    adb2:	78 85       	ldd	r23, Y+8	; 0x08
    adb4:	89 85       	ldd	r24, Y+9	; 0x09
    adb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    adb8:	20 e0       	ldi	r18, 0x00	; 0
    adba:	30 e0       	ldi	r19, 0x00	; 0
    adbc:	40 e8       	ldi	r20, 0x80	; 128
    adbe:	5f e3       	ldi	r21, 0x3F	; 63
    adc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    adc4:	88 23       	and	r24, r24
    adc6:	2c f4       	brge	.+10     	; 0xadd2 <DIMMER_voidStartKPD+0x2a6>
		__ticks = 1;
    adc8:	81 e0       	ldi	r24, 0x01	; 1
    adca:	90 e0       	ldi	r25, 0x00	; 0
    adcc:	9e 83       	std	Y+6, r25	; 0x06
    adce:	8d 83       	std	Y+5, r24	; 0x05
    add0:	3f c0       	rjmp	.+126    	; 0xae50 <DIMMER_voidStartKPD+0x324>
	else if (__tmp > 65535)
    add2:	6f 81       	ldd	r22, Y+7	; 0x07
    add4:	78 85       	ldd	r23, Y+8	; 0x08
    add6:	89 85       	ldd	r24, Y+9	; 0x09
    add8:	9a 85       	ldd	r25, Y+10	; 0x0a
    adda:	20 e0       	ldi	r18, 0x00	; 0
    addc:	3f ef       	ldi	r19, 0xFF	; 255
    adde:	4f e7       	ldi	r20, 0x7F	; 127
    ade0:	57 e4       	ldi	r21, 0x47	; 71
    ade2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    ade6:	18 16       	cp	r1, r24
    ade8:	4c f5       	brge	.+82     	; 0xae3c <DIMMER_voidStartKPD+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    adea:	6b 85       	ldd	r22, Y+11	; 0x0b
    adec:	7c 85       	ldd	r23, Y+12	; 0x0c
    adee:	8d 85       	ldd	r24, Y+13	; 0x0d
    adf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    adf2:	20 e0       	ldi	r18, 0x00	; 0
    adf4:	30 e0       	ldi	r19, 0x00	; 0
    adf6:	40 e2       	ldi	r20, 0x20	; 32
    adf8:	51 e4       	ldi	r21, 0x41	; 65
    adfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    adfe:	dc 01       	movw	r26, r24
    ae00:	cb 01       	movw	r24, r22
    ae02:	bc 01       	movw	r22, r24
    ae04:	cd 01       	movw	r24, r26
    ae06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    ae0a:	dc 01       	movw	r26, r24
    ae0c:	cb 01       	movw	r24, r22
    ae0e:	9e 83       	std	Y+6, r25	; 0x06
    ae10:	8d 83       	std	Y+5, r24	; 0x05
    ae12:	0f c0       	rjmp	.+30     	; 0xae32 <DIMMER_voidStartKPD+0x306>
    ae14:	80 e9       	ldi	r24, 0x90	; 144
    ae16:	91 e0       	ldi	r25, 0x01	; 1
    ae18:	9c 83       	std	Y+4, r25	; 0x04
    ae1a:	8b 83       	std	Y+3, r24	; 0x03
    ae1c:	8b 81       	ldd	r24, Y+3	; 0x03
    ae1e:	9c 81       	ldd	r25, Y+4	; 0x04
    ae20:	01 97       	sbiw	r24, 0x01	; 1
    ae22:	f1 f7       	brne	.-4      	; 0xae20 <DIMMER_voidStartKPD+0x2f4>
    ae24:	9c 83       	std	Y+4, r25	; 0x04
    ae26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    ae28:	8d 81       	ldd	r24, Y+5	; 0x05
    ae2a:	9e 81       	ldd	r25, Y+6	; 0x06
    ae2c:	01 97       	sbiw	r24, 0x01	; 1
    ae2e:	9e 83       	std	Y+6, r25	; 0x06
    ae30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    ae32:	8d 81       	ldd	r24, Y+5	; 0x05
    ae34:	9e 81       	ldd	r25, Y+6	; 0x06
    ae36:	00 97       	sbiw	r24, 0x00	; 0
    ae38:	69 f7       	brne	.-38     	; 0xae14 <DIMMER_voidStartKPD+0x2e8>
    ae3a:	14 c0       	rjmp	.+40     	; 0xae64 <DIMMER_voidStartKPD+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    ae3c:	6f 81       	ldd	r22, Y+7	; 0x07
    ae3e:	78 85       	ldd	r23, Y+8	; 0x08
    ae40:	89 85       	ldd	r24, Y+9	; 0x09
    ae42:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    ae48:	dc 01       	movw	r26, r24
    ae4a:	cb 01       	movw	r24, r22
    ae4c:	9e 83       	std	Y+6, r25	; 0x06
    ae4e:	8d 83       	std	Y+5, r24	; 0x05
    ae50:	8d 81       	ldd	r24, Y+5	; 0x05
    ae52:	9e 81       	ldd	r25, Y+6	; 0x06
    ae54:	9a 83       	std	Y+2, r25	; 0x02
    ae56:	89 83       	std	Y+1, r24	; 0x01
    ae58:	89 81       	ldd	r24, Y+1	; 0x01
    ae5a:	9a 81       	ldd	r25, Y+2	; 0x02
    ae5c:	01 97       	sbiw	r24, 0x01	; 1
    ae5e:	f1 f7       	brne	.-4      	; 0xae5c <DIMMER_voidStartKPD+0x330>
    ae60:	9a 83       	std	Y+2, r25	; 0x02
    ae62:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2000);

	}

}
    ae64:	ab 96       	adiw	r28, 0x2b	; 43
    ae66:	0f b6       	in	r0, 0x3f	; 63
    ae68:	f8 94       	cli
    ae6a:	de bf       	out	0x3e, r29	; 62
    ae6c:	0f be       	out	0x3f, r0	; 63
    ae6e:	cd bf       	out	0x3d, r28	; 61
    ae70:	cf 91       	pop	r28
    ae72:	df 91       	pop	r29
    ae74:	08 95       	ret

0000ae76 <DIMMER_voidStartBluetooth>:

void DIMMER_voidStartBluetooth(void) {
    ae76:	df 93       	push	r29
    ae78:	cf 93       	push	r28
    ae7a:	cd b7       	in	r28, 0x3d	; 61
    ae7c:	de b7       	in	r29, 0x3e	; 62
    ae7e:	2f 97       	sbiw	r28, 0x0f	; 15
    ae80:	0f b6       	in	r0, 0x3f	; 63
    ae82:	f8 94       	cli
    ae84:	de bf       	out	0x3e, r29	; 62
    ae86:	0f be       	out	0x3f, r0	; 63
    ae88:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8RxData;
	LCD_voidClear();
    ae8a:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
	UART_voidTxString((u8*) "Enter The LED Intensity (0-9)");
    ae8e:	83 e1       	ldi	r24, 0x13	; 19
    ae90:	94 e0       	ldi	r25, 0x04	; 4
    ae92:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>

	do {
		UART_voidRxChar(&local_u8RxData);
    ae96:	ce 01       	movw	r24, r28
    ae98:	0f 96       	adiw	r24, 0x0f	; 15
    ae9a:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
	} while (local_u8RxData == NULL );
    ae9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    aea0:	88 2f       	mov	r24, r24
    aea2:	90 e0       	ldi	r25, 0x00	; 0
    aea4:	00 97       	sbiw	r24, 0x00	; 0
    aea6:	b9 f3       	breq	.-18     	; 0xae96 <DIMMER_voidStartBluetooth+0x20>
	if (local_u8RxData == '0') {
    aea8:	8f 85       	ldd	r24, Y+15	; 0x0f
    aeaa:	80 33       	cpi	r24, 0x30	; 48
    aeac:	69 f4       	brne	.+26     	; 0xaec8 <DIMMER_voidStartBluetooth+0x52>
		RELAY_voidOff();
    aeae:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <RELAY_voidOff>
		LCD_voidClear();
    aeb2:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "LED Intensity 0");
    aeb6:	84 ef       	ldi	r24, 0xF4	; 244
    aeb8:	93 e0       	ldi	r25, 0x03	; 3
    aeba:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		UART_voidTxString((u8*) "LED Intensity is 0");
    aebe:	81 e3       	ldi	r24, 0x31	; 49
    aec0:	94 e0       	ldi	r25, 0x04	; 4
    aec2:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    aec6:	95 c0       	rjmp	.+298    	; 0xaff2 <DIMMER_voidStartBluetooth+0x17c>
	} else {
		RELAY_voidOn();
    aec8:	0e 94 e8 45 	call	0x8bd0	; 0x8bd0 <RELAY_voidOn>
    aecc:	80 e0       	ldi	r24, 0x00	; 0
    aece:	90 e0       	ldi	r25, 0x00	; 0
    aed0:	a8 ec       	ldi	r26, 0xC8	; 200
    aed2:	b2 e4       	ldi	r27, 0x42	; 66
    aed4:	8b 87       	std	Y+11, r24	; 0x0b
    aed6:	9c 87       	std	Y+12, r25	; 0x0c
    aed8:	ad 87       	std	Y+13, r26	; 0x0d
    aeda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    aedc:	6b 85       	ldd	r22, Y+11	; 0x0b
    aede:	7c 85       	ldd	r23, Y+12	; 0x0c
    aee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    aee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    aee4:	20 e0       	ldi	r18, 0x00	; 0
    aee6:	30 e0       	ldi	r19, 0x00	; 0
    aee8:	4a e7       	ldi	r20, 0x7A	; 122
    aeea:	55 e4       	ldi	r21, 0x45	; 69
    aeec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    aef0:	dc 01       	movw	r26, r24
    aef2:	cb 01       	movw	r24, r22
    aef4:	8f 83       	std	Y+7, r24	; 0x07
    aef6:	98 87       	std	Y+8, r25	; 0x08
    aef8:	a9 87       	std	Y+9, r26	; 0x09
    aefa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    aefc:	6f 81       	ldd	r22, Y+7	; 0x07
    aefe:	78 85       	ldd	r23, Y+8	; 0x08
    af00:	89 85       	ldd	r24, Y+9	; 0x09
    af02:	9a 85       	ldd	r25, Y+10	; 0x0a
    af04:	20 e0       	ldi	r18, 0x00	; 0
    af06:	30 e0       	ldi	r19, 0x00	; 0
    af08:	40 e8       	ldi	r20, 0x80	; 128
    af0a:	5f e3       	ldi	r21, 0x3F	; 63
    af0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    af10:	88 23       	and	r24, r24
    af12:	2c f4       	brge	.+10     	; 0xaf1e <DIMMER_voidStartBluetooth+0xa8>
		__ticks = 1;
    af14:	81 e0       	ldi	r24, 0x01	; 1
    af16:	90 e0       	ldi	r25, 0x00	; 0
    af18:	9e 83       	std	Y+6, r25	; 0x06
    af1a:	8d 83       	std	Y+5, r24	; 0x05
    af1c:	3f c0       	rjmp	.+126    	; 0xaf9c <DIMMER_voidStartBluetooth+0x126>
	else if (__tmp > 65535)
    af1e:	6f 81       	ldd	r22, Y+7	; 0x07
    af20:	78 85       	ldd	r23, Y+8	; 0x08
    af22:	89 85       	ldd	r24, Y+9	; 0x09
    af24:	9a 85       	ldd	r25, Y+10	; 0x0a
    af26:	20 e0       	ldi	r18, 0x00	; 0
    af28:	3f ef       	ldi	r19, 0xFF	; 255
    af2a:	4f e7       	ldi	r20, 0x7F	; 127
    af2c:	57 e4       	ldi	r21, 0x47	; 71
    af2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    af32:	18 16       	cp	r1, r24
    af34:	4c f5       	brge	.+82     	; 0xaf88 <DIMMER_voidStartBluetooth+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    af36:	6b 85       	ldd	r22, Y+11	; 0x0b
    af38:	7c 85       	ldd	r23, Y+12	; 0x0c
    af3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    af3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    af3e:	20 e0       	ldi	r18, 0x00	; 0
    af40:	30 e0       	ldi	r19, 0x00	; 0
    af42:	40 e2       	ldi	r20, 0x20	; 32
    af44:	51 e4       	ldi	r21, 0x41	; 65
    af46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    af4a:	dc 01       	movw	r26, r24
    af4c:	cb 01       	movw	r24, r22
    af4e:	bc 01       	movw	r22, r24
    af50:	cd 01       	movw	r24, r26
    af52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    af56:	dc 01       	movw	r26, r24
    af58:	cb 01       	movw	r24, r22
    af5a:	9e 83       	std	Y+6, r25	; 0x06
    af5c:	8d 83       	std	Y+5, r24	; 0x05
    af5e:	0f c0       	rjmp	.+30     	; 0xaf7e <DIMMER_voidStartBluetooth+0x108>
    af60:	80 e9       	ldi	r24, 0x90	; 144
    af62:	91 e0       	ldi	r25, 0x01	; 1
    af64:	9c 83       	std	Y+4, r25	; 0x04
    af66:	8b 83       	std	Y+3, r24	; 0x03
    af68:	8b 81       	ldd	r24, Y+3	; 0x03
    af6a:	9c 81       	ldd	r25, Y+4	; 0x04
    af6c:	01 97       	sbiw	r24, 0x01	; 1
    af6e:	f1 f7       	brne	.-4      	; 0xaf6c <DIMMER_voidStartBluetooth+0xf6>
    af70:	9c 83       	std	Y+4, r25	; 0x04
    af72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    af74:	8d 81       	ldd	r24, Y+5	; 0x05
    af76:	9e 81       	ldd	r25, Y+6	; 0x06
    af78:	01 97       	sbiw	r24, 0x01	; 1
    af7a:	9e 83       	std	Y+6, r25	; 0x06
    af7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    af7e:	8d 81       	ldd	r24, Y+5	; 0x05
    af80:	9e 81       	ldd	r25, Y+6	; 0x06
    af82:	00 97       	sbiw	r24, 0x00	; 0
    af84:	69 f7       	brne	.-38     	; 0xaf60 <DIMMER_voidStartBluetooth+0xea>
    af86:	14 c0       	rjmp	.+40     	; 0xafb0 <DIMMER_voidStartBluetooth+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    af88:	6f 81       	ldd	r22, Y+7	; 0x07
    af8a:	78 85       	ldd	r23, Y+8	; 0x08
    af8c:	89 85       	ldd	r24, Y+9	; 0x09
    af8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    af90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    af94:	dc 01       	movw	r26, r24
    af96:	cb 01       	movw	r24, r22
    af98:	9e 83       	std	Y+6, r25	; 0x06
    af9a:	8d 83       	std	Y+5, r24	; 0x05
    af9c:	8d 81       	ldd	r24, Y+5	; 0x05
    af9e:	9e 81       	ldd	r25, Y+6	; 0x06
    afa0:	9a 83       	std	Y+2, r25	; 0x02
    afa2:	89 83       	std	Y+1, r24	; 0x01
    afa4:	89 81       	ldd	r24, Y+1	; 0x01
    afa6:	9a 81       	ldd	r25, Y+2	; 0x02
    afa8:	01 97       	sbiw	r24, 0x01	; 1
    afaa:	f1 f7       	brne	.-4      	; 0xafa8 <DIMMER_voidStartBluetooth+0x132>
    afac:	9a 83       	std	Y+2, r25	; 0x02
    afae:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		PWM0_voidGenerate_PWM_Channel_0(local_u8RxData * 11);
    afb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    afb2:	48 2f       	mov	r20, r24
    afb4:	50 e0       	ldi	r21, 0x00	; 0
    afb6:	ca 01       	movw	r24, r20
    afb8:	88 0f       	add	r24, r24
    afba:	99 1f       	adc	r25, r25
    afbc:	9c 01       	movw	r18, r24
    afbe:	22 0f       	add	r18, r18
    afc0:	33 1f       	adc	r19, r19
    afc2:	22 0f       	add	r18, r18
    afc4:	33 1f       	adc	r19, r19
    afc6:	82 0f       	add	r24, r18
    afc8:	93 1f       	adc	r25, r19
    afca:	84 0f       	add	r24, r20
    afcc:	95 1f       	adc	r25, r21
    afce:	0e 94 3b 30 	call	0x6076	; 0x6076 <PWM0_voidGenerate_PWM_Channel_0>
		LCD_voidClear();
    afd2:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "LED Intensity ");
    afd6:	84 e0       	ldi	r24, 0x04	; 4
    afd8:	94 e0       	ldi	r25, 0x04	; 4
    afda:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		LCD_voidDisplayChar(local_u8RxData);
    afde:	8f 85       	ldd	r24, Y+15	; 0x0f
    afe0:	0e 94 3c 4c 	call	0x9878	; 0x9878 <LCD_voidDisplayChar>
		UART_voidTxString((u8*) "LED Intensity is ");
    afe4:	84 e4       	ldi	r24, 0x44	; 68
    afe6:	94 e0       	ldi	r25, 0x04	; 4
    afe8:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
		UART_voidTxChar(local_u8RxData);
    afec:	8f 85       	ldd	r24, Y+15	; 0x0f
    afee:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>

	}
}
    aff2:	2f 96       	adiw	r28, 0x0f	; 15
    aff4:	0f b6       	in	r0, 0x3f	; 63
    aff6:	f8 94       	cli
    aff8:	de bf       	out	0x3e, r29	; 62
    affa:	0f be       	out	0x3f, r0	; 63
    affc:	cd bf       	out	0x3d, r28	; 61
    affe:	cf 91       	pop	r28
    b000:	df 91       	pop	r29
    b002:	08 95       	ret

0000b004 <AS_voidInit>:
#include "LED_config.h"
#include "LED_interface.h"
#include "LCD_interface.h"

void AS_voidInit(void)
{
    b004:	df 93       	push	r29
    b006:	cf 93       	push	r28
    b008:	cd b7       	in	r28, 0x3d	; 61
    b00a:	de b7       	in	r29, 0x3e	; 62
	LED_voidInit   (ALERT_LED_PORT,ALERT_LED_PIN);
    b00c:	83 e0       	ldi	r24, 0x03	; 3
    b00e:	67 e0       	ldi	r22, 0x07	; 7
    b010:	0e 94 55 46 	call	0x8caa	; 0x8caa <LED_voidInit>
	BUZZER_voidInit(ALERT_BUZZER_PORT,ALERT_BUZZER_PIN);
    b014:	83 e0       	ldi	r24, 0x03	; 3
    b016:	66 e0       	ldi	r22, 0x06	; 6
    b018:	0e 94 79 54 	call	0xa8f2	; 0xa8f2 <BUZZER_voidInit>
	
}
    b01c:	cf 91       	pop	r28
    b01e:	df 91       	pop	r29
    b020:	08 95       	ret

0000b022 <AS_voidStart>:
void AS_voidStart(void)
{
    b022:	df 93       	push	r29
    b024:	cf 93       	push	r28
    b026:	cd b7       	in	r28, 0x3d	; 61
    b028:	de b7       	in	r29, 0x3e	; 62
    b02a:	2e 97       	sbiw	r28, 0x0e	; 14
    b02c:	0f b6       	in	r0, 0x3f	; 63
    b02e:	f8 94       	cli
    b030:	de bf       	out	0x3e, r29	; 62
    b032:	0f be       	out	0x3f, r0	; 63
    b034:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClear();
    b036:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
	LCD_voidDisplayString((u8*)"ALERT IS ON");
    b03a:	86 e5       	ldi	r24, 0x56	; 86
    b03c:	94 e0       	ldi	r25, 0x04	; 4
    b03e:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>



		while(1){
			BUZZER_voidToggle(ALERT_BUZZER_PORT,ALERT_BUZZER_PIN);
    b042:	83 e0       	ldi	r24, 0x03	; 3
    b044:	66 e0       	ldi	r22, 0x06	; 6
    b046:	0e 94 ac 54 	call	0xa958	; 0xa958 <BUZZER_voidToggle>
			LED_voidLedToggle(ALERT_LED_PORT,ALERT_LED_PIN);
    b04a:	83 e0       	ldi	r24, 0x03	; 3
    b04c:	67 e0       	ldi	r22, 0x07	; 7
    b04e:	0e 94 c0 46 	call	0x8d80	; 0x8d80 <LED_voidLedToggle>
    b052:	80 e0       	ldi	r24, 0x00	; 0
    b054:	90 e8       	ldi	r25, 0x80	; 128
    b056:	ab eb       	ldi	r26, 0xBB	; 187
    b058:	b4 e4       	ldi	r27, 0x44	; 68
    b05a:	8b 87       	std	Y+11, r24	; 0x0b
    b05c:	9c 87       	std	Y+12, r25	; 0x0c
    b05e:	ad 87       	std	Y+13, r26	; 0x0d
    b060:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    b062:	6b 85       	ldd	r22, Y+11	; 0x0b
    b064:	7c 85       	ldd	r23, Y+12	; 0x0c
    b066:	8d 85       	ldd	r24, Y+13	; 0x0d
    b068:	9e 85       	ldd	r25, Y+14	; 0x0e
    b06a:	20 e0       	ldi	r18, 0x00	; 0
    b06c:	30 e0       	ldi	r19, 0x00	; 0
    b06e:	4a e7       	ldi	r20, 0x7A	; 122
    b070:	55 e4       	ldi	r21, 0x45	; 69
    b072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    b076:	dc 01       	movw	r26, r24
    b078:	cb 01       	movw	r24, r22
    b07a:	8f 83       	std	Y+7, r24	; 0x07
    b07c:	98 87       	std	Y+8, r25	; 0x08
    b07e:	a9 87       	std	Y+9, r26	; 0x09
    b080:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    b082:	6f 81       	ldd	r22, Y+7	; 0x07
    b084:	78 85       	ldd	r23, Y+8	; 0x08
    b086:	89 85       	ldd	r24, Y+9	; 0x09
    b088:	9a 85       	ldd	r25, Y+10	; 0x0a
    b08a:	20 e0       	ldi	r18, 0x00	; 0
    b08c:	30 e0       	ldi	r19, 0x00	; 0
    b08e:	40 e8       	ldi	r20, 0x80	; 128
    b090:	5f e3       	ldi	r21, 0x3F	; 63
    b092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    b096:	88 23       	and	r24, r24
    b098:	2c f4       	brge	.+10     	; 0xb0a4 <AS_voidStart+0x82>
		__ticks = 1;
    b09a:	81 e0       	ldi	r24, 0x01	; 1
    b09c:	90 e0       	ldi	r25, 0x00	; 0
    b09e:	9e 83       	std	Y+6, r25	; 0x06
    b0a0:	8d 83       	std	Y+5, r24	; 0x05
    b0a2:	3f c0       	rjmp	.+126    	; 0xb122 <AS_voidStart+0x100>
	else if (__tmp > 65535)
    b0a4:	6f 81       	ldd	r22, Y+7	; 0x07
    b0a6:	78 85       	ldd	r23, Y+8	; 0x08
    b0a8:	89 85       	ldd	r24, Y+9	; 0x09
    b0aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    b0ac:	20 e0       	ldi	r18, 0x00	; 0
    b0ae:	3f ef       	ldi	r19, 0xFF	; 255
    b0b0:	4f e7       	ldi	r20, 0x7F	; 127
    b0b2:	57 e4       	ldi	r21, 0x47	; 71
    b0b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    b0b8:	18 16       	cp	r1, r24
    b0ba:	4c f5       	brge	.+82     	; 0xb10e <AS_voidStart+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b0bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    b0be:	7c 85       	ldd	r23, Y+12	; 0x0c
    b0c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    b0c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    b0c4:	20 e0       	ldi	r18, 0x00	; 0
    b0c6:	30 e0       	ldi	r19, 0x00	; 0
    b0c8:	40 e2       	ldi	r20, 0x20	; 32
    b0ca:	51 e4       	ldi	r21, 0x41	; 65
    b0cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    b0d0:	dc 01       	movw	r26, r24
    b0d2:	cb 01       	movw	r24, r22
    b0d4:	bc 01       	movw	r22, r24
    b0d6:	cd 01       	movw	r24, r26
    b0d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    b0dc:	dc 01       	movw	r26, r24
    b0de:	cb 01       	movw	r24, r22
    b0e0:	9e 83       	std	Y+6, r25	; 0x06
    b0e2:	8d 83       	std	Y+5, r24	; 0x05
    b0e4:	0f c0       	rjmp	.+30     	; 0xb104 <AS_voidStart+0xe2>
    b0e6:	80 e9       	ldi	r24, 0x90	; 144
    b0e8:	91 e0       	ldi	r25, 0x01	; 1
    b0ea:	9c 83       	std	Y+4, r25	; 0x04
    b0ec:	8b 83       	std	Y+3, r24	; 0x03
    b0ee:	8b 81       	ldd	r24, Y+3	; 0x03
    b0f0:	9c 81       	ldd	r25, Y+4	; 0x04
    b0f2:	01 97       	sbiw	r24, 0x01	; 1
    b0f4:	f1 f7       	brne	.-4      	; 0xb0f2 <AS_voidStart+0xd0>
    b0f6:	9c 83       	std	Y+4, r25	; 0x04
    b0f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b0fa:	8d 81       	ldd	r24, Y+5	; 0x05
    b0fc:	9e 81       	ldd	r25, Y+6	; 0x06
    b0fe:	01 97       	sbiw	r24, 0x01	; 1
    b100:	9e 83       	std	Y+6, r25	; 0x06
    b102:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b104:	8d 81       	ldd	r24, Y+5	; 0x05
    b106:	9e 81       	ldd	r25, Y+6	; 0x06
    b108:	00 97       	sbiw	r24, 0x00	; 0
    b10a:	69 f7       	brne	.-38     	; 0xb0e6 <AS_voidStart+0xc4>
    b10c:	9a cf       	rjmp	.-204    	; 0xb042 <AS_voidStart+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b10e:	6f 81       	ldd	r22, Y+7	; 0x07
    b110:	78 85       	ldd	r23, Y+8	; 0x08
    b112:	89 85       	ldd	r24, Y+9	; 0x09
    b114:	9a 85       	ldd	r25, Y+10	; 0x0a
    b116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    b11a:	dc 01       	movw	r26, r24
    b11c:	cb 01       	movw	r24, r22
    b11e:	9e 83       	std	Y+6, r25	; 0x06
    b120:	8d 83       	std	Y+5, r24	; 0x05
    b122:	8d 81       	ldd	r24, Y+5	; 0x05
    b124:	9e 81       	ldd	r25, Y+6	; 0x06
    b126:	9a 83       	std	Y+2, r25	; 0x02
    b128:	89 83       	std	Y+1, r24	; 0x01
    b12a:	89 81       	ldd	r24, Y+1	; 0x01
    b12c:	9a 81       	ldd	r25, Y+2	; 0x02
    b12e:	01 97       	sbiw	r24, 0x01	; 1
    b130:	f1 f7       	brne	.-4      	; 0xb12e <AS_voidStart+0x10c>
    b132:	9a 83       	std	Y+2, r25	; 0x02
    b134:	89 83       	std	Y+1, r24	; 0x01
    b136:	85 cf       	rjmp	.-246    	; 0xb042 <AS_voidStart+0x20>

0000b138 <AC_voidInit>:
static void AC_voidStop(void);
static void AC_voidStatus() ;
/************************************************************************/
/*       Function That Init LM35 Temperature Sensor and LCD and DCM      */
 /************************************************************************/
void AC_voidInit(void) {
    b138:	df 93       	push	r29
    b13a:	cf 93       	push	r28
    b13c:	cd b7       	in	r28, 0x3d	; 61
    b13e:	de b7       	in	r29, 0x3e	; 62
	LM35_voidInit();
    b140:	0e 94 00 46 	call	0x8c00	; 0x8c00 <LM35_voidInit>
	DCM_voidInit(DCM1);
    b144:	80 e0       	ldi	r24, 0x00	; 0
    b146:	0e 94 c9 52 	call	0xa592	; 0xa592 <DCM_voidInit>
	GI_voidEnable();
    b14a:	0e 94 1f 31 	call	0x623e	; 0x623e <GI_voidEnable>
	TMR2_voidInit(TMR2_Normal_mode, TMR2_Prescaler_64);
    b14e:	80 e0       	ldi	r24, 0x00	; 0
    b150:	64 e0       	ldi	r22, 0x04	; 4
    b152:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <TMR2_voidInit>
	TMR2_voidSetCallBackOVR(&action);
    b156:	82 e4       	ldi	r24, 0x42	; 66
    b158:	9b e5       	ldi	r25, 0x5B	; 91
    b15a:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <TMR2_voidSetCallBackOVR>
	TMR2_voidSetDelay_ms_OVR(1000);
    b15e:	88 ee       	ldi	r24, 0xE8	; 232
    b160:	93 e0       	ldi	r25, 0x03	; 3
    b162:	0e 94 85 2c 	call	0x590a	; 0x590a <TMR2_voidSetDelay_ms_OVR>

}
    b166:	cf 91       	pop	r28
    b168:	df 91       	pop	r29
    b16a:	08 95       	ret

0000b16c <AC_voidShowMenuKPD>:

void AC_voidShowMenuKPD(void) {
    b16c:	df 93       	push	r29
    b16e:	cf 93       	push	r28
    b170:	cd b7       	in	r28, 0x3d	; 61
    b172:	de b7       	in	r29, 0x3e	; 62
    b174:	61 97       	sbiw	r28, 0x11	; 17
    b176:	0f b6       	in	r0, 0x3f	; 63
    b178:	f8 94       	cli
    b17a:	de bf       	out	0x3e, r29	; 62
    b17c:	0f be       	out	0x3f, r0	; 63
    b17e:	cd bf       	out	0x3d, r28	; 61

	u8 local_u8KPD;
	LocalIsKPD = TRUE;
    b180:	81 e0       	ldi	r24, 0x01	; 1
    b182:	80 93 0b 06 	sts	0x060B, r24
	LCD_voidClear();
    b186:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
	LCD_voidDisplayString((u8*) "1-AC ON 2-AC OFF");
    b18a:	82 e6       	ldi	r24, 0x62	; 98
    b18c:	94 e0       	ldi	r25, 0x04	; 4
    b18e:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    b192:	82 e0       	ldi	r24, 0x02	; 2
    b194:	60 e0       	ldi	r22, 0x00	; 0
    b196:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString((u8*) "3-AC Status");
    b19a:	83 e7       	ldi	r24, 0x73	; 115
    b19c:	94 e0       	ldi	r25, 0x04	; 4
    b19e:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
	do {
		KPD_voidGetValue(&local_u8KPD);
    b1a2:	ce 01       	movw	r24, r28
    b1a4:	0f 96       	adiw	r24, 0x0f	; 15
    b1a6:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <KPD_voidGetValue>
	} while (local_u8KPD == KPD_NOT_PRESSED);
    b1aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    b1ac:	8f 3f       	cpi	r24, 0xFF	; 255
    b1ae:	c9 f3       	breq	.-14     	; 0xb1a2 <AC_voidShowMenuKPD+0x36>
	switch (local_u8KPD) {
    b1b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    b1b2:	28 2f       	mov	r18, r24
    b1b4:	30 e0       	ldi	r19, 0x00	; 0
    b1b6:	39 8b       	std	Y+17, r19	; 0x11
    b1b8:	28 8b       	std	Y+16, r18	; 0x10
    b1ba:	88 89       	ldd	r24, Y+16	; 0x10
    b1bc:	99 89       	ldd	r25, Y+17	; 0x11
    b1be:	82 33       	cpi	r24, 0x32	; 50
    b1c0:	91 05       	cpc	r25, r1
    b1c2:	69 f0       	breq	.+26     	; 0xb1de <AC_voidShowMenuKPD+0x72>
    b1c4:	28 89       	ldd	r18, Y+16	; 0x10
    b1c6:	39 89       	ldd	r19, Y+17	; 0x11
    b1c8:	23 33       	cpi	r18, 0x33	; 51
    b1ca:	31 05       	cpc	r19, r1
    b1cc:	59 f0       	breq	.+22     	; 0xb1e4 <AC_voidShowMenuKPD+0x78>
    b1ce:	88 89       	ldd	r24, Y+16	; 0x10
    b1d0:	99 89       	ldd	r25, Y+17	; 0x11
    b1d2:	81 33       	cpi	r24, 0x31	; 49
    b1d4:	91 05       	cpc	r25, r1
    b1d6:	49 f4       	brne	.+18     	; 0xb1ea <AC_voidShowMenuKPD+0x7e>
	case '1':
		AC_voidStart();
    b1d8:	0e 94 53 5a 	call	0xb4a6	; 0xb4a6 <AC_voidStart>
    b1dc:	8a c0       	rjmp	.+276    	; 0xb2f2 <AC_voidShowMenuKPD+0x186>
		break;
	case '2':
		AC_voidStop();
    b1de:	0e 94 61 5a 	call	0xb4c2	; 0xb4c2 <AC_voidStop>
    b1e2:	87 c0       	rjmp	.+270    	; 0xb2f2 <AC_voidShowMenuKPD+0x186>
		break;
	case '3':

		AC_voidStatus();
    b1e4:	0e 94 71 5a 	call	0xb4e2	; 0xb4e2 <AC_voidStatus>
    b1e8:	84 c0       	rjmp	.+264    	; 0xb2f2 <AC_voidShowMenuKPD+0x186>
		break;
	default:

		LCD_voidClear();
    b1ea:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "Wrong Choice");
    b1ee:	8f e7       	ldi	r24, 0x7F	; 127
    b1f0:	94 e0       	ldi	r25, 0x04	; 4
    b1f2:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    b1f6:	82 e0       	ldi	r24, 0x02	; 2
    b1f8:	60 e0       	ldi	r22, 0x00	; 0
    b1fa:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString((u8*) "Please Try again!!");
    b1fe:	8c e8       	ldi	r24, 0x8C	; 140
    b200:	94 e0       	ldi	r25, 0x04	; 4
    b202:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    b206:	80 e0       	ldi	r24, 0x00	; 0
    b208:	90 e8       	ldi	r25, 0x80	; 128
    b20a:	ab eb       	ldi	r26, 0xBB	; 187
    b20c:	b4 e4       	ldi	r27, 0x44	; 68
    b20e:	8b 87       	std	Y+11, r24	; 0x0b
    b210:	9c 87       	std	Y+12, r25	; 0x0c
    b212:	ad 87       	std	Y+13, r26	; 0x0d
    b214:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    b216:	6b 85       	ldd	r22, Y+11	; 0x0b
    b218:	7c 85       	ldd	r23, Y+12	; 0x0c
    b21a:	8d 85       	ldd	r24, Y+13	; 0x0d
    b21c:	9e 85       	ldd	r25, Y+14	; 0x0e
    b21e:	20 e0       	ldi	r18, 0x00	; 0
    b220:	30 e0       	ldi	r19, 0x00	; 0
    b222:	4a e7       	ldi	r20, 0x7A	; 122
    b224:	53 e4       	ldi	r21, 0x43	; 67
    b226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    b22a:	dc 01       	movw	r26, r24
    b22c:	cb 01       	movw	r24, r22
    b22e:	8f 83       	std	Y+7, r24	; 0x07
    b230:	98 87       	std	Y+8, r25	; 0x08
    b232:	a9 87       	std	Y+9, r26	; 0x09
    b234:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    b236:	6f 81       	ldd	r22, Y+7	; 0x07
    b238:	78 85       	ldd	r23, Y+8	; 0x08
    b23a:	89 85       	ldd	r24, Y+9	; 0x09
    b23c:	9a 85       	ldd	r25, Y+10	; 0x0a
    b23e:	20 e0       	ldi	r18, 0x00	; 0
    b240:	30 e0       	ldi	r19, 0x00	; 0
    b242:	40 e8       	ldi	r20, 0x80	; 128
    b244:	5f e3       	ldi	r21, 0x3F	; 63
    b246:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    b24a:	88 23       	and	r24, r24
    b24c:	2c f4       	brge	.+10     	; 0xb258 <AC_voidShowMenuKPD+0xec>
		__ticks = 1;
    b24e:	81 e0       	ldi	r24, 0x01	; 1
    b250:	90 e0       	ldi	r25, 0x00	; 0
    b252:	9e 83       	std	Y+6, r25	; 0x06
    b254:	8d 83       	std	Y+5, r24	; 0x05
    b256:	3f c0       	rjmp	.+126    	; 0xb2d6 <AC_voidShowMenuKPD+0x16a>
	else if (__tmp > 65535)
    b258:	6f 81       	ldd	r22, Y+7	; 0x07
    b25a:	78 85       	ldd	r23, Y+8	; 0x08
    b25c:	89 85       	ldd	r24, Y+9	; 0x09
    b25e:	9a 85       	ldd	r25, Y+10	; 0x0a
    b260:	20 e0       	ldi	r18, 0x00	; 0
    b262:	3f ef       	ldi	r19, 0xFF	; 255
    b264:	4f e7       	ldi	r20, 0x7F	; 127
    b266:	57 e4       	ldi	r21, 0x47	; 71
    b268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    b26c:	18 16       	cp	r1, r24
    b26e:	4c f5       	brge	.+82     	; 0xb2c2 <AC_voidShowMenuKPD+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b270:	6b 85       	ldd	r22, Y+11	; 0x0b
    b272:	7c 85       	ldd	r23, Y+12	; 0x0c
    b274:	8d 85       	ldd	r24, Y+13	; 0x0d
    b276:	9e 85       	ldd	r25, Y+14	; 0x0e
    b278:	20 e0       	ldi	r18, 0x00	; 0
    b27a:	30 e0       	ldi	r19, 0x00	; 0
    b27c:	40 e2       	ldi	r20, 0x20	; 32
    b27e:	51 e4       	ldi	r21, 0x41	; 65
    b280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    b284:	dc 01       	movw	r26, r24
    b286:	cb 01       	movw	r24, r22
    b288:	bc 01       	movw	r22, r24
    b28a:	cd 01       	movw	r24, r26
    b28c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    b290:	dc 01       	movw	r26, r24
    b292:	cb 01       	movw	r24, r22
    b294:	9e 83       	std	Y+6, r25	; 0x06
    b296:	8d 83       	std	Y+5, r24	; 0x05
    b298:	0f c0       	rjmp	.+30     	; 0xb2b8 <AC_voidShowMenuKPD+0x14c>
    b29a:	89 e1       	ldi	r24, 0x19	; 25
    b29c:	90 e0       	ldi	r25, 0x00	; 0
    b29e:	9c 83       	std	Y+4, r25	; 0x04
    b2a0:	8b 83       	std	Y+3, r24	; 0x03
    b2a2:	8b 81       	ldd	r24, Y+3	; 0x03
    b2a4:	9c 81       	ldd	r25, Y+4	; 0x04
    b2a6:	01 97       	sbiw	r24, 0x01	; 1
    b2a8:	f1 f7       	brne	.-4      	; 0xb2a6 <AC_voidShowMenuKPD+0x13a>
    b2aa:	9c 83       	std	Y+4, r25	; 0x04
    b2ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b2ae:	8d 81       	ldd	r24, Y+5	; 0x05
    b2b0:	9e 81       	ldd	r25, Y+6	; 0x06
    b2b2:	01 97       	sbiw	r24, 0x01	; 1
    b2b4:	9e 83       	std	Y+6, r25	; 0x06
    b2b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b2b8:	8d 81       	ldd	r24, Y+5	; 0x05
    b2ba:	9e 81       	ldd	r25, Y+6	; 0x06
    b2bc:	00 97       	sbiw	r24, 0x00	; 0
    b2be:	69 f7       	brne	.-38     	; 0xb29a <AC_voidShowMenuKPD+0x12e>
    b2c0:	14 c0       	rjmp	.+40     	; 0xb2ea <AC_voidShowMenuKPD+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b2c2:	6f 81       	ldd	r22, Y+7	; 0x07
    b2c4:	78 85       	ldd	r23, Y+8	; 0x08
    b2c6:	89 85       	ldd	r24, Y+9	; 0x09
    b2c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    b2ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    b2ce:	dc 01       	movw	r26, r24
    b2d0:	cb 01       	movw	r24, r22
    b2d2:	9e 83       	std	Y+6, r25	; 0x06
    b2d4:	8d 83       	std	Y+5, r24	; 0x05
    b2d6:	8d 81       	ldd	r24, Y+5	; 0x05
    b2d8:	9e 81       	ldd	r25, Y+6	; 0x06
    b2da:	9a 83       	std	Y+2, r25	; 0x02
    b2dc:	89 83       	std	Y+1, r24	; 0x01
    b2de:	89 81       	ldd	r24, Y+1	; 0x01
    b2e0:	9a 81       	ldd	r25, Y+2	; 0x02
    b2e2:	01 97       	sbiw	r24, 0x01	; 1
    b2e4:	f1 f7       	brne	.-4      	; 0xb2e2 <AC_voidShowMenuKPD+0x176>
    b2e6:	9a 83       	std	Y+2, r25	; 0x02
    b2e8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);
		LCD_voidClear();
    b2ea:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		AC_voidShowMenuKPD();
    b2ee:	0e 94 b6 58 	call	0xb16c	; 0xb16c <AC_voidShowMenuKPD>
	}

}
    b2f2:	61 96       	adiw	r28, 0x11	; 17
    b2f4:	0f b6       	in	r0, 0x3f	; 63
    b2f6:	f8 94       	cli
    b2f8:	de bf       	out	0x3e, r29	; 62
    b2fa:	0f be       	out	0x3f, r0	; 63
    b2fc:	cd bf       	out	0x3d, r28	; 61
    b2fe:	cf 91       	pop	r28
    b300:	df 91       	pop	r29
    b302:	08 95       	ret

0000b304 <AC_voidShowMenuBluetooth>:
void AC_voidShowMenuBluetooth(void) {
    b304:	df 93       	push	r29
    b306:	cf 93       	push	r28
    b308:	cd b7       	in	r28, 0x3d	; 61
    b30a:	de b7       	in	r29, 0x3e	; 62
    b30c:	61 97       	sbiw	r28, 0x11	; 17
    b30e:	0f b6       	in	r0, 0x3f	; 63
    b310:	f8 94       	cli
    b312:	de bf       	out	0x3e, r29	; 62
    b314:	0f be       	out	0x3f, r0	; 63
    b316:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8RxData;
	LocalIsKPD = FALSE;
    b318:	10 92 0b 06 	sts	0x060B, r1
	UART_voidTxString((u8*) " 		AC");
    b31c:	8f e9       	ldi	r24, 0x9F	; 159
    b31e:	94 e0       	ldi	r25, 0x04	; 4
    b320:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
		UART_voidTxString((u8*) "1-ON");
    b324:	85 ea       	ldi	r24, 0xA5	; 165
    b326:	94 e0       	ldi	r25, 0x04	; 4
    b328:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	UART_voidTxString((u8*) "2-OFF");
    b32c:	8a ea       	ldi	r24, 0xAA	; 170
    b32e:	94 e0       	ldi	r25, 0x04	; 4
    b330:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	UART_voidTxString((u8*) "3-Status");
    b334:	80 eb       	ldi	r24, 0xB0	; 176
    b336:	94 e0       	ldi	r25, 0x04	; 4
    b338:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
	do {
		UART_voidRxChar(&local_u8RxData);
    b33c:	ce 01       	movw	r24, r28
    b33e:	0f 96       	adiw	r24, 0x0f	; 15
    b340:	0e 94 31 2a 	call	0x5462	; 0x5462 <UART_voidRxChar>
	} while (local_u8RxData == NULL);
    b344:	8f 85       	ldd	r24, Y+15	; 0x0f
    b346:	88 2f       	mov	r24, r24
    b348:	90 e0       	ldi	r25, 0x00	; 0
    b34a:	00 97       	sbiw	r24, 0x00	; 0
    b34c:	b9 f3       	breq	.-18     	; 0xb33c <AC_voidShowMenuBluetooth+0x38>
	switch (local_u8RxData) {
    b34e:	8f 85       	ldd	r24, Y+15	; 0x0f
    b350:	28 2f       	mov	r18, r24
    b352:	30 e0       	ldi	r19, 0x00	; 0
    b354:	39 8b       	std	Y+17, r19	; 0x11
    b356:	28 8b       	std	Y+16, r18	; 0x10
    b358:	88 89       	ldd	r24, Y+16	; 0x10
    b35a:	99 89       	ldd	r25, Y+17	; 0x11
    b35c:	82 33       	cpi	r24, 0x32	; 50
    b35e:	91 05       	cpc	r25, r1
    b360:	69 f0       	breq	.+26     	; 0xb37c <AC_voidShowMenuBluetooth+0x78>
    b362:	28 89       	ldd	r18, Y+16	; 0x10
    b364:	39 89       	ldd	r19, Y+17	; 0x11
    b366:	23 33       	cpi	r18, 0x33	; 51
    b368:	31 05       	cpc	r19, r1
    b36a:	59 f0       	breq	.+22     	; 0xb382 <AC_voidShowMenuBluetooth+0x7e>
    b36c:	88 89       	ldd	r24, Y+16	; 0x10
    b36e:	99 89       	ldd	r25, Y+17	; 0x11
    b370:	81 33       	cpi	r24, 0x31	; 49
    b372:	91 05       	cpc	r25, r1
    b374:	59 f4       	brne	.+22     	; 0xb38c <AC_voidShowMenuBluetooth+0x88>
	case '1':
		AC_voidStart();
    b376:	0e 94 53 5a 	call	0xb4a6	; 0xb4a6 <AC_voidStart>
    b37a:	8c c0       	rjmp	.+280    	; 0xb494 <AC_voidShowMenuBluetooth+0x190>
		break;
	case '2':
		AC_voidStop();
    b37c:	0e 94 61 5a 	call	0xb4c2	; 0xb4c2 <AC_voidStop>
    b380:	89 c0       	rjmp	.+274    	; 0xb494 <AC_voidShowMenuBluetooth+0x190>
		break;
	case '3':

		AC_voidStatus(FALSE);
    b382:	80 e0       	ldi	r24, 0x00	; 0
    b384:	90 e0       	ldi	r25, 0x00	; 0
    b386:	0e 94 71 5a 	call	0xb4e2	; 0xb4e2 <AC_voidStatus>
    b38a:	84 c0       	rjmp	.+264    	; 0xb494 <AC_voidShowMenuBluetooth+0x190>
		break;
	default:

		LCD_voidClear();
    b38c:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		LCD_voidDisplayString((u8*) "Wrong Choice");
    b390:	8f e7       	ldi	r24, 0x7F	; 127
    b392:	94 e0       	ldi	r25, 0x04	; 4
    b394:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    b398:	82 e0       	ldi	r24, 0x02	; 2
    b39a:	60 e0       	ldi	r22, 0x00	; 0
    b39c:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString((u8*) "Please Try again!!");
    b3a0:	8c e8       	ldi	r24, 0x8C	; 140
    b3a2:	94 e0       	ldi	r25, 0x04	; 4
    b3a4:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
    b3a8:	80 e0       	ldi	r24, 0x00	; 0
    b3aa:	90 e8       	ldi	r25, 0x80	; 128
    b3ac:	ab eb       	ldi	r26, 0xBB	; 187
    b3ae:	b4 e4       	ldi	r27, 0x44	; 68
    b3b0:	8b 87       	std	Y+11, r24	; 0x0b
    b3b2:	9c 87       	std	Y+12, r25	; 0x0c
    b3b4:	ad 87       	std	Y+13, r26	; 0x0d
    b3b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    b3b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    b3ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    b3bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    b3be:	9e 85       	ldd	r25, Y+14	; 0x0e
    b3c0:	20 e0       	ldi	r18, 0x00	; 0
    b3c2:	30 e0       	ldi	r19, 0x00	; 0
    b3c4:	4a e7       	ldi	r20, 0x7A	; 122
    b3c6:	53 e4       	ldi	r21, 0x43	; 67
    b3c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    b3cc:	dc 01       	movw	r26, r24
    b3ce:	cb 01       	movw	r24, r22
    b3d0:	8f 83       	std	Y+7, r24	; 0x07
    b3d2:	98 87       	std	Y+8, r25	; 0x08
    b3d4:	a9 87       	std	Y+9, r26	; 0x09
    b3d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    b3d8:	6f 81       	ldd	r22, Y+7	; 0x07
    b3da:	78 85       	ldd	r23, Y+8	; 0x08
    b3dc:	89 85       	ldd	r24, Y+9	; 0x09
    b3de:	9a 85       	ldd	r25, Y+10	; 0x0a
    b3e0:	20 e0       	ldi	r18, 0x00	; 0
    b3e2:	30 e0       	ldi	r19, 0x00	; 0
    b3e4:	40 e8       	ldi	r20, 0x80	; 128
    b3e6:	5f e3       	ldi	r21, 0x3F	; 63
    b3e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    b3ec:	88 23       	and	r24, r24
    b3ee:	2c f4       	brge	.+10     	; 0xb3fa <AC_voidShowMenuBluetooth+0xf6>
		__ticks = 1;
    b3f0:	81 e0       	ldi	r24, 0x01	; 1
    b3f2:	90 e0       	ldi	r25, 0x00	; 0
    b3f4:	9e 83       	std	Y+6, r25	; 0x06
    b3f6:	8d 83       	std	Y+5, r24	; 0x05
    b3f8:	3f c0       	rjmp	.+126    	; 0xb478 <AC_voidShowMenuBluetooth+0x174>
	else if (__tmp > 65535)
    b3fa:	6f 81       	ldd	r22, Y+7	; 0x07
    b3fc:	78 85       	ldd	r23, Y+8	; 0x08
    b3fe:	89 85       	ldd	r24, Y+9	; 0x09
    b400:	9a 85       	ldd	r25, Y+10	; 0x0a
    b402:	20 e0       	ldi	r18, 0x00	; 0
    b404:	3f ef       	ldi	r19, 0xFF	; 255
    b406:	4f e7       	ldi	r20, 0x7F	; 127
    b408:	57 e4       	ldi	r21, 0x47	; 71
    b40a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    b40e:	18 16       	cp	r1, r24
    b410:	4c f5       	brge	.+82     	; 0xb464 <AC_voidShowMenuBluetooth+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b412:	6b 85       	ldd	r22, Y+11	; 0x0b
    b414:	7c 85       	ldd	r23, Y+12	; 0x0c
    b416:	8d 85       	ldd	r24, Y+13	; 0x0d
    b418:	9e 85       	ldd	r25, Y+14	; 0x0e
    b41a:	20 e0       	ldi	r18, 0x00	; 0
    b41c:	30 e0       	ldi	r19, 0x00	; 0
    b41e:	40 e2       	ldi	r20, 0x20	; 32
    b420:	51 e4       	ldi	r21, 0x41	; 65
    b422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    b426:	dc 01       	movw	r26, r24
    b428:	cb 01       	movw	r24, r22
    b42a:	bc 01       	movw	r22, r24
    b42c:	cd 01       	movw	r24, r26
    b42e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    b432:	dc 01       	movw	r26, r24
    b434:	cb 01       	movw	r24, r22
    b436:	9e 83       	std	Y+6, r25	; 0x06
    b438:	8d 83       	std	Y+5, r24	; 0x05
    b43a:	0f c0       	rjmp	.+30     	; 0xb45a <AC_voidShowMenuBluetooth+0x156>
    b43c:	89 e1       	ldi	r24, 0x19	; 25
    b43e:	90 e0       	ldi	r25, 0x00	; 0
    b440:	9c 83       	std	Y+4, r25	; 0x04
    b442:	8b 83       	std	Y+3, r24	; 0x03
    b444:	8b 81       	ldd	r24, Y+3	; 0x03
    b446:	9c 81       	ldd	r25, Y+4	; 0x04
    b448:	01 97       	sbiw	r24, 0x01	; 1
    b44a:	f1 f7       	brne	.-4      	; 0xb448 <AC_voidShowMenuBluetooth+0x144>
    b44c:	9c 83       	std	Y+4, r25	; 0x04
    b44e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b450:	8d 81       	ldd	r24, Y+5	; 0x05
    b452:	9e 81       	ldd	r25, Y+6	; 0x06
    b454:	01 97       	sbiw	r24, 0x01	; 1
    b456:	9e 83       	std	Y+6, r25	; 0x06
    b458:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b45a:	8d 81       	ldd	r24, Y+5	; 0x05
    b45c:	9e 81       	ldd	r25, Y+6	; 0x06
    b45e:	00 97       	sbiw	r24, 0x00	; 0
    b460:	69 f7       	brne	.-38     	; 0xb43c <AC_voidShowMenuBluetooth+0x138>
    b462:	14 c0       	rjmp	.+40     	; 0xb48c <AC_voidShowMenuBluetooth+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b464:	6f 81       	ldd	r22, Y+7	; 0x07
    b466:	78 85       	ldd	r23, Y+8	; 0x08
    b468:	89 85       	ldd	r24, Y+9	; 0x09
    b46a:	9a 85       	ldd	r25, Y+10	; 0x0a
    b46c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    b470:	dc 01       	movw	r26, r24
    b472:	cb 01       	movw	r24, r22
    b474:	9e 83       	std	Y+6, r25	; 0x06
    b476:	8d 83       	std	Y+5, r24	; 0x05
    b478:	8d 81       	ldd	r24, Y+5	; 0x05
    b47a:	9e 81       	ldd	r25, Y+6	; 0x06
    b47c:	9a 83       	std	Y+2, r25	; 0x02
    b47e:	89 83       	std	Y+1, r24	; 0x01
    b480:	89 81       	ldd	r24, Y+1	; 0x01
    b482:	9a 81       	ldd	r25, Y+2	; 0x02
    b484:	01 97       	sbiw	r24, 0x01	; 1
    b486:	f1 f7       	brne	.-4      	; 0xb484 <AC_voidShowMenuBluetooth+0x180>
    b488:	9a 83       	std	Y+2, r25	; 0x02
    b48a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);
		LCD_voidClear();
    b48c:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
		AC_voidShowMenuKPD();
    b490:	0e 94 b6 58 	call	0xb16c	; 0xb16c <AC_voidShowMenuKPD>
	}

}
    b494:	61 96       	adiw	r28, 0x11	; 17
    b496:	0f b6       	in	r0, 0x3f	; 63
    b498:	f8 94       	cli
    b49a:	de bf       	out	0x3e, r29	; 62
    b49c:	0f be       	out	0x3f, r0	; 63
    b49e:	cd bf       	out	0x3d, r28	; 61
    b4a0:	cf 91       	pop	r28
    b4a2:	df 91       	pop	r29
    b4a4:	08 95       	ret

0000b4a6 <AC_voidStart>:
/************************************************************************/
/*      Function That Control DCM by getting Temperature From LM35       */
 /************************************************************************/

static void AC_voidStart(void) {
    b4a6:	df 93       	push	r29
    b4a8:	cf 93       	push	r28
    b4aa:	cd b7       	in	r28, 0x3d	; 61
    b4ac:	de b7       	in	r29, 0x3e	; 62

	TMR2_voidStart();
    b4ae:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <TMR2_voidStart>


	Local_AC_Is_ON = TRUE;
    b4b2:	81 e0       	ldi	r24, 0x01	; 1
    b4b4:	80 93 0a 06 	sts	0x060A, r24
	AC_voidStatus();
    b4b8:	0e 94 71 5a 	call	0xb4e2	; 0xb4e2 <AC_voidStatus>
}
    b4bc:	cf 91       	pop	r28
    b4be:	df 91       	pop	r29
    b4c0:	08 95       	ret

0000b4c2 <AC_voidStop>:

static void AC_voidStop(void) {
    b4c2:	df 93       	push	r29
    b4c4:	cf 93       	push	r28
    b4c6:	cd b7       	in	r28, 0x3d	; 61
    b4c8:	de b7       	in	r29, 0x3e	; 62
	TMR2_voidStop();
    b4ca:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <TMR2_voidStop>
	Local_AC_Is_ON = FALSE;
    b4ce:	10 92 0a 06 	sts	0x060A, r1
	DCM_voidOff(DCM1);
    b4d2:	80 e0       	ldi	r24, 0x00	; 0
    b4d4:	0e 94 9b 53 	call	0xa736	; 0xa736 <DCM_voidOff>
	AC_voidStatus();
    b4d8:	0e 94 71 5a 	call	0xb4e2	; 0xb4e2 <AC_voidStatus>

}
    b4dc:	cf 91       	pop	r28
    b4de:	df 91       	pop	r29
    b4e0:	08 95       	ret

0000b4e2 <AC_voidStatus>:
/************************************************************************/
/*        Function That Write Temperature Sensed by LM35 On LCD          */
 /************************************************************************/
static void AC_voidStatus( ) {
    b4e2:	df 93       	push	r29
    b4e4:	cf 93       	push	r28
    b4e6:	cd b7       	in	r28, 0x3d	; 61
    b4e8:	de b7       	in	r29, 0x3e	; 62
    b4ea:	2f 97       	sbiw	r28, 0x0f	; 15
    b4ec:	0f b6       	in	r0, 0x3f	; 63
    b4ee:	f8 94       	cli
    b4f0:	de bf       	out	0x3e, r29	; 62
    b4f2:	0f be       	out	0x3f, r0	; 63
    b4f4:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Temp;
	LM35_voidGetTemp(LM35_FEEDBACK0_PIN, &local_u8Temp);
    b4f6:	9e 01       	movw	r18, r28
    b4f8:	21 5f       	subi	r18, 0xF1	; 241
    b4fa:	3f 4f       	sbci	r19, 0xFF	; 255
    b4fc:	80 e0       	ldi	r24, 0x00	; 0
    b4fe:	b9 01       	movw	r22, r18
    b500:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <LM35_voidGetTemp>

	LCD_voidClear();
    b504:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
	LCD_voidDisplayString((u8*) "Temp Is:");
    b508:	89 eb       	ldi	r24, 0xB9	; 185
    b50a:	94 e0       	ldi	r25, 0x04	; 4
    b50c:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
	LCD_voidDisplayNumber(local_u8Temp);
    b510:	8f 85       	ldd	r24, Y+15	; 0x0f
    b512:	88 2f       	mov	r24, r24
    b514:	90 e0       	ldi	r25, 0x00	; 0
    b516:	a0 e0       	ldi	r26, 0x00	; 0
    b518:	b0 e0       	ldi	r27, 0x00	; 0
    b51a:	bc 01       	movw	r22, r24
    b51c:	cd 01       	movw	r24, r26
    b51e:	0e 94 87 4d 	call	0x9b0e	; 0x9b0e <LCD_voidDisplayNumber>
	LCD_voidDisplayChar('C');
    b522:	83 e4       	ldi	r24, 0x43	; 67
    b524:	0e 94 3c 4c 	call	0x9878	; 0x9878 <LCD_voidDisplayChar>
	LCD_voidGoToSpecificPosition(LCD_LINE_TWO, 0);
    b528:	82 e0       	ldi	r24, 0x02	; 2
    b52a:	60 e0       	ldi	r22, 0x00	; 0
    b52c:	0e 94 bc 4f 	call	0x9f78	; 0x9f78 <LCD_voidGoToSpecificPosition>

	if(LocalIsKPD == FALSE){
    b530:	80 91 0b 06 	lds	r24, 0x060B
    b534:	88 23       	and	r24, r24
    b536:	61 f4       	brne	.+24     	; 0xb550 <AC_voidStatus+0x6e>
		UART_voidTxString((u8*) "Temp Is:");
    b538:	89 eb       	ldi	r24, 0xB9	; 185
    b53a:	94 e0       	ldi	r25, 0x04	; 4
    b53c:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
			UART_voidTxNumber(local_u8Temp);
    b540:	8f 85       	ldd	r24, Y+15	; 0x0f
    b542:	0e 94 df 29 	call	0x53be	; 0x53be <UART_voidTxNumber>
			UART_voidTxChar('C');
    b546:	83 e4       	ldi	r24, 0x43	; 67
    b548:	0e 94 96 29 	call	0x532c	; 0x532c <UART_voidTxChar>
			UART_voidTxNewLine();
    b54c:	0e 94 24 2a 	call	0x5448	; 0x5448 <UART_voidTxNewLine>
	}

	if (Local_AC_Is_ON == TRUE) {
    b550:	80 91 0a 06 	lds	r24, 0x060A
    b554:	81 30       	cpi	r24, 0x01	; 1
    b556:	69 f4       	brne	.+26     	; 0xb572 <AC_voidStatus+0x90>

		LCD_voidDisplayString((u8*) "AC is ON");
    b558:	82 ec       	ldi	r24, 0xC2	; 194
    b55a:	94 e0       	ldi	r25, 0x04	; 4
    b55c:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		if(LocalIsKPD == FALSE)
    b560:	80 91 0b 06 	lds	r24, 0x060B
    b564:	88 23       	and	r24, r24
    b566:	89 f4       	brne	.+34     	; 0xb58a <AC_voidStatus+0xa8>
		UART_voidTxString((u8*) "AC is ON");
    b568:	82 ec       	ldi	r24, 0xC2	; 194
    b56a:	94 e0       	ldi	r25, 0x04	; 4
    b56c:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    b570:	0c c0       	rjmp	.+24     	; 0xb58a <AC_voidStatus+0xa8>

	} else {

		LCD_voidDisplayString((u8*) "AC is OFF");
    b572:	8b ec       	ldi	r24, 0xCB	; 203
    b574:	94 e0       	ldi	r25, 0x04	; 4
    b576:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <LCD_voidDisplayString>
		if(LocalIsKPD == FALSE)
    b57a:	80 91 0b 06 	lds	r24, 0x060B
    b57e:	88 23       	and	r24, r24
    b580:	21 f4       	brne	.+8      	; 0xb58a <AC_voidStatus+0xa8>
		UART_voidTxString((u8*) "AC is OFF");
    b582:	8b ec       	ldi	r24, 0xCB	; 203
    b584:	94 e0       	ldi	r25, 0x04	; 4
    b586:	0e 94 b0 29 	call	0x5360	; 0x5360 <UART_voidTxString>
    b58a:	80 e0       	ldi	r24, 0x00	; 0
    b58c:	90 e8       	ldi	r25, 0x80	; 128
    b58e:	ab e3       	ldi	r26, 0x3B	; 59
    b590:	b5 e4       	ldi	r27, 0x45	; 69
    b592:	8b 87       	std	Y+11, r24	; 0x0b
    b594:	9c 87       	std	Y+12, r25	; 0x0c
    b596:	ad 87       	std	Y+13, r26	; 0x0d
    b598:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    b59a:	6b 85       	ldd	r22, Y+11	; 0x0b
    b59c:	7c 85       	ldd	r23, Y+12	; 0x0c
    b59e:	8d 85       	ldd	r24, Y+13	; 0x0d
    b5a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    b5a2:	20 e0       	ldi	r18, 0x00	; 0
    b5a4:	30 e0       	ldi	r19, 0x00	; 0
    b5a6:	4a e7       	ldi	r20, 0x7A	; 122
    b5a8:	53 e4       	ldi	r21, 0x43	; 67
    b5aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    b5ae:	dc 01       	movw	r26, r24
    b5b0:	cb 01       	movw	r24, r22
    b5b2:	8f 83       	std	Y+7, r24	; 0x07
    b5b4:	98 87       	std	Y+8, r25	; 0x08
    b5b6:	a9 87       	std	Y+9, r26	; 0x09
    b5b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    b5ba:	6f 81       	ldd	r22, Y+7	; 0x07
    b5bc:	78 85       	ldd	r23, Y+8	; 0x08
    b5be:	89 85       	ldd	r24, Y+9	; 0x09
    b5c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    b5c2:	20 e0       	ldi	r18, 0x00	; 0
    b5c4:	30 e0       	ldi	r19, 0x00	; 0
    b5c6:	40 e8       	ldi	r20, 0x80	; 128
    b5c8:	5f e3       	ldi	r21, 0x3F	; 63
    b5ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    b5ce:	88 23       	and	r24, r24
    b5d0:	2c f4       	brge	.+10     	; 0xb5dc <AC_voidStatus+0xfa>
		__ticks = 1;
    b5d2:	81 e0       	ldi	r24, 0x01	; 1
    b5d4:	90 e0       	ldi	r25, 0x00	; 0
    b5d6:	9e 83       	std	Y+6, r25	; 0x06
    b5d8:	8d 83       	std	Y+5, r24	; 0x05
    b5da:	3f c0       	rjmp	.+126    	; 0xb65a <AC_voidStatus+0x178>
	else if (__tmp > 65535)
    b5dc:	6f 81       	ldd	r22, Y+7	; 0x07
    b5de:	78 85       	ldd	r23, Y+8	; 0x08
    b5e0:	89 85       	ldd	r24, Y+9	; 0x09
    b5e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    b5e4:	20 e0       	ldi	r18, 0x00	; 0
    b5e6:	3f ef       	ldi	r19, 0xFF	; 255
    b5e8:	4f e7       	ldi	r20, 0x7F	; 127
    b5ea:	57 e4       	ldi	r21, 0x47	; 71
    b5ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    b5f0:	18 16       	cp	r1, r24
    b5f2:	4c f5       	brge	.+82     	; 0xb646 <AC_voidStatus+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    b5f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    b5f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    b5f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    b5fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    b5fc:	20 e0       	ldi	r18, 0x00	; 0
    b5fe:	30 e0       	ldi	r19, 0x00	; 0
    b600:	40 e2       	ldi	r20, 0x20	; 32
    b602:	51 e4       	ldi	r21, 0x41	; 65
    b604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    b608:	dc 01       	movw	r26, r24
    b60a:	cb 01       	movw	r24, r22
    b60c:	bc 01       	movw	r22, r24
    b60e:	cd 01       	movw	r24, r26
    b610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    b614:	dc 01       	movw	r26, r24
    b616:	cb 01       	movw	r24, r22
    b618:	9e 83       	std	Y+6, r25	; 0x06
    b61a:	8d 83       	std	Y+5, r24	; 0x05
    b61c:	0f c0       	rjmp	.+30     	; 0xb63c <AC_voidStatus+0x15a>
    b61e:	89 e1       	ldi	r24, 0x19	; 25
    b620:	90 e0       	ldi	r25, 0x00	; 0
    b622:	9c 83       	std	Y+4, r25	; 0x04
    b624:	8b 83       	std	Y+3, r24	; 0x03
    b626:	8b 81       	ldd	r24, Y+3	; 0x03
    b628:	9c 81       	ldd	r25, Y+4	; 0x04
    b62a:	01 97       	sbiw	r24, 0x01	; 1
    b62c:	f1 f7       	brne	.-4      	; 0xb62a <AC_voidStatus+0x148>
    b62e:	9c 83       	std	Y+4, r25	; 0x04
    b630:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    b632:	8d 81       	ldd	r24, Y+5	; 0x05
    b634:	9e 81       	ldd	r25, Y+6	; 0x06
    b636:	01 97       	sbiw	r24, 0x01	; 1
    b638:	9e 83       	std	Y+6, r25	; 0x06
    b63a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    b63c:	8d 81       	ldd	r24, Y+5	; 0x05
    b63e:	9e 81       	ldd	r25, Y+6	; 0x06
    b640:	00 97       	sbiw	r24, 0x00	; 0
    b642:	69 f7       	brne	.-38     	; 0xb61e <AC_voidStatus+0x13c>
    b644:	14 c0       	rjmp	.+40     	; 0xb66e <AC_voidStatus+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    b646:	6f 81       	ldd	r22, Y+7	; 0x07
    b648:	78 85       	ldd	r23, Y+8	; 0x08
    b64a:	89 85       	ldd	r24, Y+9	; 0x09
    b64c:	9a 85       	ldd	r25, Y+10	; 0x0a
    b64e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    b652:	dc 01       	movw	r26, r24
    b654:	cb 01       	movw	r24, r22
    b656:	9e 83       	std	Y+6, r25	; 0x06
    b658:	8d 83       	std	Y+5, r24	; 0x05
    b65a:	8d 81       	ldd	r24, Y+5	; 0x05
    b65c:	9e 81       	ldd	r25, Y+6	; 0x06
    b65e:	9a 83       	std	Y+2, r25	; 0x02
    b660:	89 83       	std	Y+1, r24	; 0x01
    b662:	89 81       	ldd	r24, Y+1	; 0x01
    b664:	9a 81       	ldd	r25, Y+2	; 0x02
    b666:	01 97       	sbiw	r24, 0x01	; 1
    b668:	f1 f7       	brne	.-4      	; 0xb666 <AC_voidStatus+0x184>
    b66a:	9a 83       	std	Y+2, r25	; 0x02
    b66c:	89 83       	std	Y+1, r24	; 0x01
	}

	_delay_ms(3000);
	LCD_voidClear();
    b66e:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <LCD_voidClear>
}
    b672:	2f 96       	adiw	r28, 0x0f	; 15
    b674:	0f b6       	in	r0, 0x3f	; 63
    b676:	f8 94       	cli
    b678:	de bf       	out	0x3e, r29	; 62
    b67a:	0f be       	out	0x3f, r0	; 63
    b67c:	cd bf       	out	0x3d, r28	; 61
    b67e:	cf 91       	pop	r28
    b680:	df 91       	pop	r29
    b682:	08 95       	ret

0000b684 <action>:

static void action(void) {
    b684:	df 93       	push	r29
    b686:	cf 93       	push	r28
    b688:	0f 92       	push	r0
    b68a:	cd b7       	in	r28, 0x3d	; 61
    b68c:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Temp;
	LM35_voidGetTemp(LM35_FEEDBACK0_PIN, &local_u8Temp);
    b68e:	80 e0       	ldi	r24, 0x00	; 0
    b690:	9e 01       	movw	r18, r28
    b692:	2f 5f       	subi	r18, 0xFF	; 255
    b694:	3f 4f       	sbci	r19, 0xFF	; 255
    b696:	b9 01       	movw	r22, r18
    b698:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <LM35_voidGetTemp>

	if (local_u8Temp <= 21) {
    b69c:	89 81       	ldd	r24, Y+1	; 0x01
    b69e:	86 31       	cpi	r24, 0x16	; 22
    b6a0:	20 f4       	brcc	.+8      	; 0xb6aa <action+0x26>
		DCM_voidOff(DCM1);
    b6a2:	80 e0       	ldi	r24, 0x00	; 0
    b6a4:	0e 94 9b 53 	call	0xa736	; 0xa736 <DCM_voidOff>
    b6a8:	04 c0       	rjmp	.+8      	; 0xb6b2 <action+0x2e>

	} else {
		DCM_voidOn(DCM1, DCM_CW);
    b6aa:	80 e0       	ldi	r24, 0x00	; 0
    b6ac:	61 e0       	ldi	r22, 0x01	; 1
    b6ae:	0e 94 0a 53 	call	0xa614	; 0xa614 <DCM_voidOn>

	}

}
    b6b2:	0f 90       	pop	r0
    b6b4:	cf 91       	pop	r28
    b6b6:	df 91       	pop	r29
    b6b8:	08 95       	ret

0000b6ba <main>:
#include "BIT_MATH.h"

#include "AC_interface.h"
#include "SECURITY/SS_interface.h"

int main(void) {
    b6ba:	df 93       	push	r29
    b6bc:	cf 93       	push	r28
    b6be:	cd b7       	in	r28, 0x3d	; 61
    b6c0:	de b7       	in	r29, 0x3e	; 62

	/*Initiate System Devices*/
	SS_voidInit();
    b6c2:	0e 94 58 07 	call	0xeb0	; 0xeb0 <SS_voidInit>

	/*enable users to login*/
	SS_voidLogin();
    b6c6:	0e 94 a6 08 	call	0x114c	; 0x114c <SS_voidLogin>
    b6ca:	ff cf       	rjmp	.-2      	; 0xb6ca <main+0x10>

0000b6cc <__mulsi3>:
    b6cc:	62 9f       	mul	r22, r18
    b6ce:	d0 01       	movw	r26, r0
    b6d0:	73 9f       	mul	r23, r19
    b6d2:	f0 01       	movw	r30, r0
    b6d4:	82 9f       	mul	r24, r18
    b6d6:	e0 0d       	add	r30, r0
    b6d8:	f1 1d       	adc	r31, r1
    b6da:	64 9f       	mul	r22, r20
    b6dc:	e0 0d       	add	r30, r0
    b6de:	f1 1d       	adc	r31, r1
    b6e0:	92 9f       	mul	r25, r18
    b6e2:	f0 0d       	add	r31, r0
    b6e4:	83 9f       	mul	r24, r19
    b6e6:	f0 0d       	add	r31, r0
    b6e8:	74 9f       	mul	r23, r20
    b6ea:	f0 0d       	add	r31, r0
    b6ec:	65 9f       	mul	r22, r21
    b6ee:	f0 0d       	add	r31, r0
    b6f0:	99 27       	eor	r25, r25
    b6f2:	72 9f       	mul	r23, r18
    b6f4:	b0 0d       	add	r27, r0
    b6f6:	e1 1d       	adc	r30, r1
    b6f8:	f9 1f       	adc	r31, r25
    b6fa:	63 9f       	mul	r22, r19
    b6fc:	b0 0d       	add	r27, r0
    b6fe:	e1 1d       	adc	r30, r1
    b700:	f9 1f       	adc	r31, r25
    b702:	bd 01       	movw	r22, r26
    b704:	cf 01       	movw	r24, r30
    b706:	11 24       	eor	r1, r1
    b708:	08 95       	ret

0000b70a <__udivmodqi4>:
    b70a:	99 1b       	sub	r25, r25
    b70c:	79 e0       	ldi	r23, 0x09	; 9
    b70e:	04 c0       	rjmp	.+8      	; 0xb718 <__udivmodqi4_ep>

0000b710 <__udivmodqi4_loop>:
    b710:	99 1f       	adc	r25, r25
    b712:	96 17       	cp	r25, r22
    b714:	08 f0       	brcs	.+2      	; 0xb718 <__udivmodqi4_ep>
    b716:	96 1b       	sub	r25, r22

0000b718 <__udivmodqi4_ep>:
    b718:	88 1f       	adc	r24, r24
    b71a:	7a 95       	dec	r23
    b71c:	c9 f7       	brne	.-14     	; 0xb710 <__udivmodqi4_loop>
    b71e:	80 95       	com	r24
    b720:	08 95       	ret

0000b722 <__udivmodhi4>:
    b722:	aa 1b       	sub	r26, r26
    b724:	bb 1b       	sub	r27, r27
    b726:	51 e1       	ldi	r21, 0x11	; 17
    b728:	07 c0       	rjmp	.+14     	; 0xb738 <__udivmodhi4_ep>

0000b72a <__udivmodhi4_loop>:
    b72a:	aa 1f       	adc	r26, r26
    b72c:	bb 1f       	adc	r27, r27
    b72e:	a6 17       	cp	r26, r22
    b730:	b7 07       	cpc	r27, r23
    b732:	10 f0       	brcs	.+4      	; 0xb738 <__udivmodhi4_ep>
    b734:	a6 1b       	sub	r26, r22
    b736:	b7 0b       	sbc	r27, r23

0000b738 <__udivmodhi4_ep>:
    b738:	88 1f       	adc	r24, r24
    b73a:	99 1f       	adc	r25, r25
    b73c:	5a 95       	dec	r21
    b73e:	a9 f7       	brne	.-22     	; 0xb72a <__udivmodhi4_loop>
    b740:	80 95       	com	r24
    b742:	90 95       	com	r25
    b744:	bc 01       	movw	r22, r24
    b746:	cd 01       	movw	r24, r26
    b748:	08 95       	ret

0000b74a <__udivmodsi4>:
    b74a:	a1 e2       	ldi	r26, 0x21	; 33
    b74c:	1a 2e       	mov	r1, r26
    b74e:	aa 1b       	sub	r26, r26
    b750:	bb 1b       	sub	r27, r27
    b752:	fd 01       	movw	r30, r26
    b754:	0d c0       	rjmp	.+26     	; 0xb770 <__udivmodsi4_ep>

0000b756 <__udivmodsi4_loop>:
    b756:	aa 1f       	adc	r26, r26
    b758:	bb 1f       	adc	r27, r27
    b75a:	ee 1f       	adc	r30, r30
    b75c:	ff 1f       	adc	r31, r31
    b75e:	a2 17       	cp	r26, r18
    b760:	b3 07       	cpc	r27, r19
    b762:	e4 07       	cpc	r30, r20
    b764:	f5 07       	cpc	r31, r21
    b766:	20 f0       	brcs	.+8      	; 0xb770 <__udivmodsi4_ep>
    b768:	a2 1b       	sub	r26, r18
    b76a:	b3 0b       	sbc	r27, r19
    b76c:	e4 0b       	sbc	r30, r20
    b76e:	f5 0b       	sbc	r31, r21

0000b770 <__udivmodsi4_ep>:
    b770:	66 1f       	adc	r22, r22
    b772:	77 1f       	adc	r23, r23
    b774:	88 1f       	adc	r24, r24
    b776:	99 1f       	adc	r25, r25
    b778:	1a 94       	dec	r1
    b77a:	69 f7       	brne	.-38     	; 0xb756 <__udivmodsi4_loop>
    b77c:	60 95       	com	r22
    b77e:	70 95       	com	r23
    b780:	80 95       	com	r24
    b782:	90 95       	com	r25
    b784:	9b 01       	movw	r18, r22
    b786:	ac 01       	movw	r20, r24
    b788:	bd 01       	movw	r22, r26
    b78a:	cf 01       	movw	r24, r30
    b78c:	08 95       	ret

0000b78e <__prologue_saves__>:
    b78e:	2f 92       	push	r2
    b790:	3f 92       	push	r3
    b792:	4f 92       	push	r4
    b794:	5f 92       	push	r5
    b796:	6f 92       	push	r6
    b798:	7f 92       	push	r7
    b79a:	8f 92       	push	r8
    b79c:	9f 92       	push	r9
    b79e:	af 92       	push	r10
    b7a0:	bf 92       	push	r11
    b7a2:	cf 92       	push	r12
    b7a4:	df 92       	push	r13
    b7a6:	ef 92       	push	r14
    b7a8:	ff 92       	push	r15
    b7aa:	0f 93       	push	r16
    b7ac:	1f 93       	push	r17
    b7ae:	cf 93       	push	r28
    b7b0:	df 93       	push	r29
    b7b2:	cd b7       	in	r28, 0x3d	; 61
    b7b4:	de b7       	in	r29, 0x3e	; 62
    b7b6:	ca 1b       	sub	r28, r26
    b7b8:	db 0b       	sbc	r29, r27
    b7ba:	0f b6       	in	r0, 0x3f	; 63
    b7bc:	f8 94       	cli
    b7be:	de bf       	out	0x3e, r29	; 62
    b7c0:	0f be       	out	0x3f, r0	; 63
    b7c2:	cd bf       	out	0x3d, r28	; 61
    b7c4:	09 94       	ijmp

0000b7c6 <__epilogue_restores__>:
    b7c6:	2a 88       	ldd	r2, Y+18	; 0x12
    b7c8:	39 88       	ldd	r3, Y+17	; 0x11
    b7ca:	48 88       	ldd	r4, Y+16	; 0x10
    b7cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    b7ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    b7d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    b7d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    b7d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    b7d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    b7d8:	b9 84       	ldd	r11, Y+9	; 0x09
    b7da:	c8 84       	ldd	r12, Y+8	; 0x08
    b7dc:	df 80       	ldd	r13, Y+7	; 0x07
    b7de:	ee 80       	ldd	r14, Y+6	; 0x06
    b7e0:	fd 80       	ldd	r15, Y+5	; 0x05
    b7e2:	0c 81       	ldd	r16, Y+4	; 0x04
    b7e4:	1b 81       	ldd	r17, Y+3	; 0x03
    b7e6:	aa 81       	ldd	r26, Y+2	; 0x02
    b7e8:	b9 81       	ldd	r27, Y+1	; 0x01
    b7ea:	ce 0f       	add	r28, r30
    b7ec:	d1 1d       	adc	r29, r1
    b7ee:	0f b6       	in	r0, 0x3f	; 63
    b7f0:	f8 94       	cli
    b7f2:	de bf       	out	0x3e, r29	; 62
    b7f4:	0f be       	out	0x3f, r0	; 63
    b7f6:	cd bf       	out	0x3d, r28	; 61
    b7f8:	ed 01       	movw	r28, r26
    b7fa:	08 95       	ret

0000b7fc <_exit>:
    b7fc:	f8 94       	cli

0000b7fe <__stop_program>:
    b7fe:	ff cf       	rjmp	.-2      	; 0xb7fe <__stop_program>
